// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto;
class EmptyMessage;
struct EmptyMessageDefaultTypeInternal;
extern EmptyMessageDefaultTypeInternal _EmptyMessage_default_instance_;
class EquipmentDTO;
struct EquipmentDTODefaultTypeInternal;
extern EquipmentDTODefaultTypeInternal _EquipmentDTO_default_instance_;
class ErrorMessage;
struct ErrorMessageDefaultTypeInternal;
extern ErrorMessageDefaultTypeInternal _ErrorMessage_default_instance_;
class ItemDTO;
struct ItemDTODefaultTypeInternal;
extern ItemDTODefaultTypeInternal _ItemDTO_default_instance_;
class LevelSoldierDTO;
struct LevelSoldierDTODefaultTypeInternal;
extern LevelSoldierDTODefaultTypeInternal _LevelSoldierDTO_default_instance_;
class PositionDTO;
struct PositionDTODefaultTypeInternal;
extern PositionDTODefaultTypeInternal _PositionDTO_default_instance_;
class PropertyDTO;
struct PropertyDTODefaultTypeInternal;
extern PropertyDTODefaultTypeInternal _PropertyDTO_default_instance_;
class SoldierDTO;
struct SoldierDTODefaultTypeInternal;
extern SoldierDTODefaultTypeInternal _SoldierDTO_default_instance_;
class VipDTO;
struct VipDTODefaultTypeInternal;
extern VipDTODefaultTypeInternal _VipDTO_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::EmptyMessage* Arena::CreateMaybeMessage<::EmptyMessage>(Arena*);
template<> ::EquipmentDTO* Arena::CreateMaybeMessage<::EquipmentDTO>(Arena*);
template<> ::ErrorMessage* Arena::CreateMaybeMessage<::ErrorMessage>(Arena*);
template<> ::ItemDTO* Arena::CreateMaybeMessage<::ItemDTO>(Arena*);
template<> ::LevelSoldierDTO* Arena::CreateMaybeMessage<::LevelSoldierDTO>(Arena*);
template<> ::PositionDTO* Arena::CreateMaybeMessage<::PositionDTO>(Arena*);
template<> ::PropertyDTO* Arena::CreateMaybeMessage<::PropertyDTO>(Arena*);
template<> ::SoldierDTO* Arena::CreateMaybeMessage<::SoldierDTO>(Arena*);
template<> ::VipDTO* Arena::CreateMaybeMessage<::VipDTO>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ErrorCommandId : int {
  ERROR_COMMAND_ID = 99
};
bool ErrorCommandId_IsValid(int value);
constexpr ErrorCommandId ErrorCommandId_MIN = ERROR_COMMAND_ID;
constexpr ErrorCommandId ErrorCommandId_MAX = ERROR_COMMAND_ID;
constexpr int ErrorCommandId_ARRAYSIZE = ErrorCommandId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCommandId_descriptor();
template<typename T>
inline const std::string& ErrorCommandId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ErrorCommandId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ErrorCommandId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ErrorCommandId_descriptor(), enum_t_value);
}
inline bool ErrorCommandId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ErrorCommandId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ErrorCommandId>(
    ErrorCommandId_descriptor(), name, value);
}
enum Platform : int {
  IN_GAME = 1
};
bool Platform_IsValid(int value);
constexpr Platform Platform_MIN = IN_GAME;
constexpr Platform Platform_MAX = IN_GAME;
constexpr int Platform_ARRAYSIZE = Platform_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Platform_descriptor();
template<typename T>
inline const std::string& Platform_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Platform>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Platform_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Platform_descriptor(), enum_t_value);
}
inline bool Platform_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Platform* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Platform>(
    Platform_descriptor(), name, value);
}
// ===================================================================

class EmptyMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:EmptyMessage) */ {
 public:
  inline EmptyMessage() : EmptyMessage(nullptr) {}
  explicit PROTOBUF_CONSTEXPR EmptyMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmptyMessage(const EmptyMessage& from);
  EmptyMessage(EmptyMessage&& from) noexcept
    : EmptyMessage() {
    *this = ::std::move(from);
  }

  inline EmptyMessage& operator=(const EmptyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmptyMessage& operator=(EmptyMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmptyMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmptyMessage* internal_default_instance() {
    return reinterpret_cast<const EmptyMessage*>(
               &_EmptyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EmptyMessage& a, EmptyMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(EmptyMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmptyMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmptyMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmptyMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const EmptyMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const EmptyMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EmptyMessage";
  }
  protected:
  explicit EmptyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:EmptyMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ErrorMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ErrorMessage) */ {
 public:
  inline ErrorMessage() : ErrorMessage(nullptr) {}
  ~ErrorMessage() override;
  explicit PROTOBUF_CONSTEXPR ErrorMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ErrorMessage(const ErrorMessage& from);
  ErrorMessage(ErrorMessage&& from) noexcept
    : ErrorMessage() {
    *this = ::std::move(from);
  }

  inline ErrorMessage& operator=(const ErrorMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrorMessage& operator=(ErrorMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ErrorMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ErrorMessage* internal_default_instance() {
    return reinterpret_cast<const ErrorMessage*>(
               &_ErrorMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ErrorMessage& a, ErrorMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ErrorMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErrorMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ErrorMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ErrorMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ErrorMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ErrorMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ErrorMessage";
  }
  protected:
  explicit ErrorMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // repeated string args = 2;
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  const std::string& args(int index) const;
  std::string* mutable_args(int index);
  void set_args(int index, const std::string& value);
  void set_args(int index, std::string&& value);
  void set_args(int index, const char* value);
  void set_args(int index, const char* value, size_t size);
  std::string* add_args();
  void add_args(const std::string& value);
  void add_args(std::string&& value);
  void add_args(const char* value);
  void add_args(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& args() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_args();
  private:
  const std::string& _internal_args(int index) const;
  std::string* _internal_add_args();
  public:

  // required int32 errorCode = 1;
  bool has_errorcode() const;
  private:
  bool _internal_has_errorcode() const;
  public:
  void clear_errorcode();
  int32_t errorcode() const;
  void set_errorcode(int32_t value);
  private:
  int32_t _internal_errorcode() const;
  void _internal_set_errorcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ErrorMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> args_;
  int32_t errorcode_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class PositionDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PositionDTO) */ {
 public:
  inline PositionDTO() : PositionDTO(nullptr) {}
  ~PositionDTO() override;
  explicit PROTOBUF_CONSTEXPR PositionDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionDTO(const PositionDTO& from);
  PositionDTO(PositionDTO&& from) noexcept
    : PositionDTO() {
    *this = ::std::move(from);
  }

  inline PositionDTO& operator=(const PositionDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionDTO& operator=(PositionDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionDTO* internal_default_instance() {
    return reinterpret_cast<const PositionDTO*>(
               &_PositionDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PositionDTO& a, PositionDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionDTO* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PositionDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PositionDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PositionDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionDTO* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PositionDTO";
  }
  protected:
  explicit PositionDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // required int32 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // required int32 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PositionDTO)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t x_;
  int32_t y_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class PropertyDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PropertyDTO) */ {
 public:
  inline PropertyDTO() : PropertyDTO(nullptr) {}
  ~PropertyDTO() override;
  explicit PROTOBUF_CONSTEXPR PropertyDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PropertyDTO(const PropertyDTO& from);
  PropertyDTO(PropertyDTO&& from) noexcept
    : PropertyDTO() {
    *this = ::std::move(from);
  }

  inline PropertyDTO& operator=(const PropertyDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyDTO& operator=(PropertyDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropertyDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const PropertyDTO* internal_default_instance() {
    return reinterpret_cast<const PropertyDTO*>(
               &_PropertyDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PropertyDTO& a, PropertyDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyDTO* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropertyDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PropertyDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PropertyDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PropertyDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PropertyDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyDTO* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PropertyDTO";
  }
  protected:
  explicit PropertyDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required int32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // required int32 value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PropertyDTO)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t type_;
  int32_t value_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ItemDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ItemDTO) */ {
 public:
  inline ItemDTO() : ItemDTO(nullptr) {}
  ~ItemDTO() override;
  explicit PROTOBUF_CONSTEXPR ItemDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ItemDTO(const ItemDTO& from);
  ItemDTO(ItemDTO&& from) noexcept
    : ItemDTO() {
    *this = ::std::move(from);
  }

  inline ItemDTO& operator=(const ItemDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemDTO& operator=(ItemDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ItemDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const ItemDTO* internal_default_instance() {
    return reinterpret_cast<const ItemDTO*>(
               &_ItemDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ItemDTO& a, ItemDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemDTO* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ItemDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ItemDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ItemDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ItemDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ItemDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemDTO* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ItemDTO";
  }
  protected:
  explicit ItemDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // required int32 itemId = 1;
  bool has_itemid() const;
  private:
  bool _internal_has_itemid() const;
  public:
  void clear_itemid();
  int32_t itemid() const;
  void set_itemid(int32_t value);
  private:
  int32_t _internal_itemid() const;
  void _internal_set_itemid(int32_t value);
  public:

  // required int32 count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ItemDTO)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t itemid_;
  int32_t count_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class SoldierDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SoldierDTO) */ {
 public:
  inline SoldierDTO() : SoldierDTO(nullptr) {}
  ~SoldierDTO() override;
  explicit PROTOBUF_CONSTEXPR SoldierDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SoldierDTO(const SoldierDTO& from);
  SoldierDTO(SoldierDTO&& from) noexcept
    : SoldierDTO() {
    *this = ::std::move(from);
  }

  inline SoldierDTO& operator=(const SoldierDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline SoldierDTO& operator=(SoldierDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SoldierDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const SoldierDTO* internal_default_instance() {
    return reinterpret_cast<const SoldierDTO*>(
               &_SoldierDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SoldierDTO& a, SoldierDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(SoldierDTO* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SoldierDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SoldierDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SoldierDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SoldierDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SoldierDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SoldierDTO* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SoldierDTO";
  }
  protected:
  explicit SoldierDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArmyTypeFieldNumber = 1,
    kArmyNumFieldNumber = 2,
  };
  // required int32 armyType = 1;
  bool has_armytype() const;
  private:
  bool _internal_has_armytype() const;
  public:
  void clear_armytype();
  int32_t armytype() const;
  void set_armytype(int32_t value);
  private:
  int32_t _internal_armytype() const;
  void _internal_set_armytype(int32_t value);
  public:

  // required int32 armyNum = 2;
  bool has_armynum() const;
  private:
  bool _internal_has_armynum() const;
  public:
  void clear_armynum();
  int32_t armynum() const;
  void set_armynum(int32_t value);
  private:
  int32_t _internal_armynum() const;
  void _internal_set_armynum(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SoldierDTO)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t armytype_;
  int32_t armynum_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class LevelSoldierDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LevelSoldierDTO) */ {
 public:
  inline LevelSoldierDTO() : LevelSoldierDTO(nullptr) {}
  ~LevelSoldierDTO() override;
  explicit PROTOBUF_CONSTEXPR LevelSoldierDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LevelSoldierDTO(const LevelSoldierDTO& from);
  LevelSoldierDTO(LevelSoldierDTO&& from) noexcept
    : LevelSoldierDTO() {
    *this = ::std::move(from);
  }

  inline LevelSoldierDTO& operator=(const LevelSoldierDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline LevelSoldierDTO& operator=(LevelSoldierDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LevelSoldierDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const LevelSoldierDTO* internal_default_instance() {
    return reinterpret_cast<const LevelSoldierDTO*>(
               &_LevelSoldierDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LevelSoldierDTO& a, LevelSoldierDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(LevelSoldierDTO* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LevelSoldierDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LevelSoldierDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LevelSoldierDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LevelSoldierDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LevelSoldierDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LevelSoldierDTO* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LevelSoldierDTO";
  }
  protected:
  explicit LevelSoldierDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSoldierFieldNumber = 1,
    kLevelFieldNumber = 2,
  };
  // required .SoldierDTO soldier = 1;
  bool has_soldier() const;
  private:
  bool _internal_has_soldier() const;
  public:
  void clear_soldier();
  const ::SoldierDTO& soldier() const;
  PROTOBUF_NODISCARD ::SoldierDTO* release_soldier();
  ::SoldierDTO* mutable_soldier();
  void set_allocated_soldier(::SoldierDTO* soldier);
  private:
  const ::SoldierDTO& _internal_soldier() const;
  ::SoldierDTO* _internal_mutable_soldier();
  public:
  void unsafe_arena_set_allocated_soldier(
      ::SoldierDTO* soldier);
  ::SoldierDTO* unsafe_arena_release_soldier();

  // required int32 level = 2;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:LevelSoldierDTO)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::SoldierDTO* soldier_;
  int32_t level_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class EquipmentDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EquipmentDTO) */ {
 public:
  inline EquipmentDTO() : EquipmentDTO(nullptr) {}
  ~EquipmentDTO() override;
  explicit PROTOBUF_CONSTEXPR EquipmentDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EquipmentDTO(const EquipmentDTO& from);
  EquipmentDTO(EquipmentDTO&& from) noexcept
    : EquipmentDTO() {
    *this = ::std::move(from);
  }

  inline EquipmentDTO& operator=(const EquipmentDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline EquipmentDTO& operator=(EquipmentDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EquipmentDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const EquipmentDTO* internal_default_instance() {
    return reinterpret_cast<const EquipmentDTO*>(
               &_EquipmentDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(EquipmentDTO& a, EquipmentDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(EquipmentDTO* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EquipmentDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EquipmentDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EquipmentDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EquipmentDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EquipmentDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EquipmentDTO* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EquipmentDTO";
  }
  protected:
  explicit EquipmentDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGemstonelistFieldNumber = 4,
    kIdFieldNumber = 1,
    kLevelFieldNumber = 2,
    kExpFieldNumber = 3,
    kTypeFieldNumber = 5,
  };
  // repeated int32 gemstonelist = 4;
  int gemstonelist_size() const;
  private:
  int _internal_gemstonelist_size() const;
  public:
  void clear_gemstonelist();
  private:
  int32_t _internal_gemstonelist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_gemstonelist() const;
  void _internal_add_gemstonelist(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_gemstonelist();
  public:
  int32_t gemstonelist(int index) const;
  void set_gemstonelist(int index, int32_t value);
  void add_gemstonelist(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      gemstonelist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_gemstonelist();

  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // required int32 level = 2;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // required int32 exp = 3;
  bool has_exp() const;
  private:
  bool _internal_has_exp() const;
  public:
  void clear_exp();
  int32_t exp() const;
  void set_exp(int32_t value);
  private:
  int32_t _internal_exp() const;
  void _internal_set_exp(int32_t value);
  public:

  // required int32 type = 5;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:EquipmentDTO)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > gemstonelist_;
  int32_t id_;
  int32_t level_;
  int32_t exp_;
  int32_t type_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class VipDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VipDTO) */ {
 public:
  inline VipDTO() : VipDTO(nullptr) {}
  ~VipDTO() override;
  explicit PROTOBUF_CONSTEXPR VipDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VipDTO(const VipDTO& from);
  VipDTO(VipDTO&& from) noexcept
    : VipDTO() {
    *this = ::std::move(from);
  }

  inline VipDTO& operator=(const VipDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline VipDTO& operator=(VipDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VipDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const VipDTO* internal_default_instance() {
    return reinterpret_cast<const VipDTO*>(
               &_VipDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(VipDTO& a, VipDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(VipDTO* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VipDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VipDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VipDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VipDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VipDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VipDTO* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VipDTO";
  }
  protected:
  explicit VipDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVipLevelFieldNumber = 1,
    kActivatedFieldNumber = 2,
  };
  // required int32 vipLevel = 1;
  bool has_viplevel() const;
  private:
  bool _internal_has_viplevel() const;
  public:
  void clear_viplevel();
  int32_t viplevel() const;
  void set_viplevel(int32_t value);
  private:
  int32_t _internal_viplevel() const;
  void _internal_set_viplevel(int32_t value);
  public:

  // required bool activated = 2;
  bool has_activated() const;
  private:
  bool _internal_has_activated() const;
  public:
  void clear_activated();
  bool activated() const;
  void set_activated(bool value);
  private:
  bool _internal_activated() const;
  void _internal_set_activated(bool value);
  public:

  // @@protoc_insertion_point(class_scope:VipDTO)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t viplevel_;
  bool activated_;
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EmptyMessage

// -------------------------------------------------------------------

// ErrorMessage

// required int32 errorCode = 1;
inline bool ErrorMessage::_internal_has_errorcode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ErrorMessage::has_errorcode() const {
  return _internal_has_errorcode();
}
inline void ErrorMessage::clear_errorcode() {
  errorcode_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t ErrorMessage::_internal_errorcode() const {
  return errorcode_;
}
inline int32_t ErrorMessage::errorcode() const {
  // @@protoc_insertion_point(field_get:ErrorMessage.errorCode)
  return _internal_errorcode();
}
inline void ErrorMessage::_internal_set_errorcode(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  errorcode_ = value;
}
inline void ErrorMessage::set_errorcode(int32_t value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:ErrorMessage.errorCode)
}

// repeated string args = 2;
inline int ErrorMessage::_internal_args_size() const {
  return args_.size();
}
inline int ErrorMessage::args_size() const {
  return _internal_args_size();
}
inline void ErrorMessage::clear_args() {
  args_.Clear();
}
inline std::string* ErrorMessage::add_args() {
  std::string* _s = _internal_add_args();
  // @@protoc_insertion_point(field_add_mutable:ErrorMessage.args)
  return _s;
}
inline const std::string& ErrorMessage::_internal_args(int index) const {
  return args_.Get(index);
}
inline const std::string& ErrorMessage::args(int index) const {
  // @@protoc_insertion_point(field_get:ErrorMessage.args)
  return _internal_args(index);
}
inline std::string* ErrorMessage::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:ErrorMessage.args)
  return args_.Mutable(index);
}
inline void ErrorMessage::set_args(int index, const std::string& value) {
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ErrorMessage.args)
}
inline void ErrorMessage::set_args(int index, std::string&& value) {
  args_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ErrorMessage.args)
}
inline void ErrorMessage::set_args(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ErrorMessage.args)
}
inline void ErrorMessage::set_args(int index, const char* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ErrorMessage.args)
}
inline std::string* ErrorMessage::_internal_add_args() {
  return args_.Add();
}
inline void ErrorMessage::add_args(const std::string& value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ErrorMessage.args)
}
inline void ErrorMessage::add_args(std::string&& value) {
  args_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ErrorMessage.args)
}
inline void ErrorMessage::add_args(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ErrorMessage.args)
}
inline void ErrorMessage::add_args(const char* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ErrorMessage.args)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ErrorMessage::args() const {
  // @@protoc_insertion_point(field_list:ErrorMessage.args)
  return args_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ErrorMessage::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:ErrorMessage.args)
  return &args_;
}

// -------------------------------------------------------------------

// PositionDTO

// required int32 x = 1;
inline bool PositionDTO::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PositionDTO::has_x() const {
  return _internal_has_x();
}
inline void PositionDTO::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t PositionDTO::_internal_x() const {
  return x_;
}
inline int32_t PositionDTO::x() const {
  // @@protoc_insertion_point(field_get:PositionDTO.x)
  return _internal_x();
}
inline void PositionDTO::_internal_set_x(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void PositionDTO::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:PositionDTO.x)
}

// required int32 y = 2;
inline bool PositionDTO::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PositionDTO::has_y() const {
  return _internal_has_y();
}
inline void PositionDTO::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t PositionDTO::_internal_y() const {
  return y_;
}
inline int32_t PositionDTO::y() const {
  // @@protoc_insertion_point(field_get:PositionDTO.y)
  return _internal_y();
}
inline void PositionDTO::_internal_set_y(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void PositionDTO::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:PositionDTO.y)
}

// -------------------------------------------------------------------

// PropertyDTO

// required int32 type = 1;
inline bool PropertyDTO::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PropertyDTO::has_type() const {
  return _internal_has_type();
}
inline void PropertyDTO::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t PropertyDTO::_internal_type() const {
  return type_;
}
inline int32_t PropertyDTO::type() const {
  // @@protoc_insertion_point(field_get:PropertyDTO.type)
  return _internal_type();
}
inline void PropertyDTO::_internal_set_type(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void PropertyDTO::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PropertyDTO.type)
}

// required int32 value = 2;
inline bool PropertyDTO::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PropertyDTO::has_value() const {
  return _internal_has_value();
}
inline void PropertyDTO::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t PropertyDTO::_internal_value() const {
  return value_;
}
inline int32_t PropertyDTO::value() const {
  // @@protoc_insertion_point(field_get:PropertyDTO.value)
  return _internal_value();
}
inline void PropertyDTO::_internal_set_value(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  value_ = value;
}
inline void PropertyDTO::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:PropertyDTO.value)
}

// -------------------------------------------------------------------

// ItemDTO

// required int32 itemId = 1;
inline bool ItemDTO::_internal_has_itemid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ItemDTO::has_itemid() const {
  return _internal_has_itemid();
}
inline void ItemDTO::clear_itemid() {
  itemid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t ItemDTO::_internal_itemid() const {
  return itemid_;
}
inline int32_t ItemDTO::itemid() const {
  // @@protoc_insertion_point(field_get:ItemDTO.itemId)
  return _internal_itemid();
}
inline void ItemDTO::_internal_set_itemid(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  itemid_ = value;
}
inline void ItemDTO::set_itemid(int32_t value) {
  _internal_set_itemid(value);
  // @@protoc_insertion_point(field_set:ItemDTO.itemId)
}

// required int32 count = 2;
inline bool ItemDTO::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ItemDTO::has_count() const {
  return _internal_has_count();
}
inline void ItemDTO::clear_count() {
  count_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t ItemDTO::_internal_count() const {
  return count_;
}
inline int32_t ItemDTO::count() const {
  // @@protoc_insertion_point(field_get:ItemDTO.count)
  return _internal_count();
}
inline void ItemDTO::_internal_set_count(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
}
inline void ItemDTO::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:ItemDTO.count)
}

// -------------------------------------------------------------------

// SoldierDTO

// required int32 armyType = 1;
inline bool SoldierDTO::_internal_has_armytype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SoldierDTO::has_armytype() const {
  return _internal_has_armytype();
}
inline void SoldierDTO::clear_armytype() {
  armytype_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t SoldierDTO::_internal_armytype() const {
  return armytype_;
}
inline int32_t SoldierDTO::armytype() const {
  // @@protoc_insertion_point(field_get:SoldierDTO.armyType)
  return _internal_armytype();
}
inline void SoldierDTO::_internal_set_armytype(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  armytype_ = value;
}
inline void SoldierDTO::set_armytype(int32_t value) {
  _internal_set_armytype(value);
  // @@protoc_insertion_point(field_set:SoldierDTO.armyType)
}

// required int32 armyNum = 2;
inline bool SoldierDTO::_internal_has_armynum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SoldierDTO::has_armynum() const {
  return _internal_has_armynum();
}
inline void SoldierDTO::clear_armynum() {
  armynum_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t SoldierDTO::_internal_armynum() const {
  return armynum_;
}
inline int32_t SoldierDTO::armynum() const {
  // @@protoc_insertion_point(field_get:SoldierDTO.armyNum)
  return _internal_armynum();
}
inline void SoldierDTO::_internal_set_armynum(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  armynum_ = value;
}
inline void SoldierDTO::set_armynum(int32_t value) {
  _internal_set_armynum(value);
  // @@protoc_insertion_point(field_set:SoldierDTO.armyNum)
}

// -------------------------------------------------------------------

// LevelSoldierDTO

// required .SoldierDTO soldier = 1;
inline bool LevelSoldierDTO::_internal_has_soldier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || soldier_ != nullptr);
  return value;
}
inline bool LevelSoldierDTO::has_soldier() const {
  return _internal_has_soldier();
}
inline void LevelSoldierDTO::clear_soldier() {
  if (soldier_ != nullptr) soldier_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::SoldierDTO& LevelSoldierDTO::_internal_soldier() const {
  const ::SoldierDTO* p = soldier_;
  return p != nullptr ? *p : reinterpret_cast<const ::SoldierDTO&>(
      ::_SoldierDTO_default_instance_);
}
inline const ::SoldierDTO& LevelSoldierDTO::soldier() const {
  // @@protoc_insertion_point(field_get:LevelSoldierDTO.soldier)
  return _internal_soldier();
}
inline void LevelSoldierDTO::unsafe_arena_set_allocated_soldier(
    ::SoldierDTO* soldier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(soldier_);
  }
  soldier_ = soldier;
  if (soldier) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LevelSoldierDTO.soldier)
}
inline ::SoldierDTO* LevelSoldierDTO::release_soldier() {
  _has_bits_[0] &= ~0x00000001u;
  ::SoldierDTO* temp = soldier_;
  soldier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SoldierDTO* LevelSoldierDTO::unsafe_arena_release_soldier() {
  // @@protoc_insertion_point(field_release:LevelSoldierDTO.soldier)
  _has_bits_[0] &= ~0x00000001u;
  ::SoldierDTO* temp = soldier_;
  soldier_ = nullptr;
  return temp;
}
inline ::SoldierDTO* LevelSoldierDTO::_internal_mutable_soldier() {
  _has_bits_[0] |= 0x00000001u;
  if (soldier_ == nullptr) {
    auto* p = CreateMaybeMessage<::SoldierDTO>(GetArenaForAllocation());
    soldier_ = p;
  }
  return soldier_;
}
inline ::SoldierDTO* LevelSoldierDTO::mutable_soldier() {
  ::SoldierDTO* _msg = _internal_mutable_soldier();
  // @@protoc_insertion_point(field_mutable:LevelSoldierDTO.soldier)
  return _msg;
}
inline void LevelSoldierDTO::set_allocated_soldier(::SoldierDTO* soldier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete soldier_;
  }
  if (soldier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(soldier);
    if (message_arena != submessage_arena) {
      soldier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, soldier, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  soldier_ = soldier;
  // @@protoc_insertion_point(field_set_allocated:LevelSoldierDTO.soldier)
}

// required int32 level = 2;
inline bool LevelSoldierDTO::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LevelSoldierDTO::has_level() const {
  return _internal_has_level();
}
inline void LevelSoldierDTO::clear_level() {
  level_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t LevelSoldierDTO::_internal_level() const {
  return level_;
}
inline int32_t LevelSoldierDTO::level() const {
  // @@protoc_insertion_point(field_get:LevelSoldierDTO.level)
  return _internal_level();
}
inline void LevelSoldierDTO::_internal_set_level(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  level_ = value;
}
inline void LevelSoldierDTO::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:LevelSoldierDTO.level)
}

// -------------------------------------------------------------------

// EquipmentDTO

// required int32 id = 1;
inline bool EquipmentDTO::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EquipmentDTO::has_id() const {
  return _internal_has_id();
}
inline void EquipmentDTO::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t EquipmentDTO::_internal_id() const {
  return id_;
}
inline int32_t EquipmentDTO::id() const {
  // @@protoc_insertion_point(field_get:EquipmentDTO.id)
  return _internal_id();
}
inline void EquipmentDTO::_internal_set_id(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void EquipmentDTO::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:EquipmentDTO.id)
}

// required int32 level = 2;
inline bool EquipmentDTO::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EquipmentDTO::has_level() const {
  return _internal_has_level();
}
inline void EquipmentDTO::clear_level() {
  level_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t EquipmentDTO::_internal_level() const {
  return level_;
}
inline int32_t EquipmentDTO::level() const {
  // @@protoc_insertion_point(field_get:EquipmentDTO.level)
  return _internal_level();
}
inline void EquipmentDTO::_internal_set_level(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  level_ = value;
}
inline void EquipmentDTO::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:EquipmentDTO.level)
}

// required int32 exp = 3;
inline bool EquipmentDTO::_internal_has_exp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EquipmentDTO::has_exp() const {
  return _internal_has_exp();
}
inline void EquipmentDTO::clear_exp() {
  exp_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t EquipmentDTO::_internal_exp() const {
  return exp_;
}
inline int32_t EquipmentDTO::exp() const {
  // @@protoc_insertion_point(field_get:EquipmentDTO.exp)
  return _internal_exp();
}
inline void EquipmentDTO::_internal_set_exp(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  exp_ = value;
}
inline void EquipmentDTO::set_exp(int32_t value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:EquipmentDTO.exp)
}

// repeated int32 gemstonelist = 4;
inline int EquipmentDTO::_internal_gemstonelist_size() const {
  return gemstonelist_.size();
}
inline int EquipmentDTO::gemstonelist_size() const {
  return _internal_gemstonelist_size();
}
inline void EquipmentDTO::clear_gemstonelist() {
  gemstonelist_.Clear();
}
inline int32_t EquipmentDTO::_internal_gemstonelist(int index) const {
  return gemstonelist_.Get(index);
}
inline int32_t EquipmentDTO::gemstonelist(int index) const {
  // @@protoc_insertion_point(field_get:EquipmentDTO.gemstonelist)
  return _internal_gemstonelist(index);
}
inline void EquipmentDTO::set_gemstonelist(int index, int32_t value) {
  gemstonelist_.Set(index, value);
  // @@protoc_insertion_point(field_set:EquipmentDTO.gemstonelist)
}
inline void EquipmentDTO::_internal_add_gemstonelist(int32_t value) {
  gemstonelist_.Add(value);
}
inline void EquipmentDTO::add_gemstonelist(int32_t value) {
  _internal_add_gemstonelist(value);
  // @@protoc_insertion_point(field_add:EquipmentDTO.gemstonelist)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
EquipmentDTO::_internal_gemstonelist() const {
  return gemstonelist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
EquipmentDTO::gemstonelist() const {
  // @@protoc_insertion_point(field_list:EquipmentDTO.gemstonelist)
  return _internal_gemstonelist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
EquipmentDTO::_internal_mutable_gemstonelist() {
  return &gemstonelist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
EquipmentDTO::mutable_gemstonelist() {
  // @@protoc_insertion_point(field_mutable_list:EquipmentDTO.gemstonelist)
  return _internal_mutable_gemstonelist();
}

// required int32 type = 5;
inline bool EquipmentDTO::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool EquipmentDTO::has_type() const {
  return _internal_has_type();
}
inline void EquipmentDTO::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t EquipmentDTO::_internal_type() const {
  return type_;
}
inline int32_t EquipmentDTO::type() const {
  // @@protoc_insertion_point(field_get:EquipmentDTO.type)
  return _internal_type();
}
inline void EquipmentDTO::_internal_set_type(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
}
inline void EquipmentDTO::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:EquipmentDTO.type)
}

// -------------------------------------------------------------------

// VipDTO

// required int32 vipLevel = 1;
inline bool VipDTO::_internal_has_viplevel() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VipDTO::has_viplevel() const {
  return _internal_has_viplevel();
}
inline void VipDTO::clear_viplevel() {
  viplevel_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t VipDTO::_internal_viplevel() const {
  return viplevel_;
}
inline int32_t VipDTO::viplevel() const {
  // @@protoc_insertion_point(field_get:VipDTO.vipLevel)
  return _internal_viplevel();
}
inline void VipDTO::_internal_set_viplevel(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  viplevel_ = value;
}
inline void VipDTO::set_viplevel(int32_t value) {
  _internal_set_viplevel(value);
  // @@protoc_insertion_point(field_set:VipDTO.vipLevel)
}

// required bool activated = 2;
inline bool VipDTO::_internal_has_activated() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VipDTO::has_activated() const {
  return _internal_has_activated();
}
inline void VipDTO::clear_activated() {
  activated_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool VipDTO::_internal_activated() const {
  return activated_;
}
inline bool VipDTO::activated() const {
  // @@protoc_insertion_point(field_get:VipDTO.activated)
  return _internal_activated();
}
inline void VipDTO::_internal_set_activated(bool value) {
  _has_bits_[0] |= 0x00000002u;
  activated_ = value;
}
inline void VipDTO::set_activated(bool value) {
  _internal_set_activated(value);
  // @@protoc_insertion_point(field_set:VipDTO.activated)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ErrorCommandId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ErrorCommandId>() {
  return ::ErrorCommandId_descriptor();
}
template <> struct is_proto_enum< ::Platform> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Platform>() {
  return ::Platform_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
