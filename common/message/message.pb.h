// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
class CMesHead;
struct CMesHeadDefaultTypeInternal;
extern CMesHeadDefaultTypeInternal _CMesHead_default_instance_;
class CMessG2G;
struct CMessG2GDefaultTypeInternal;
extern CMessG2GDefaultTypeInternal _CMessG2G_default_instance_;
class CMessage;
struct CMessageDefaultTypeInternal;
extern CMessageDefaultTypeInternal _CMessage_default_instance_;
class CProxyHead;
struct CProxyHeadDefaultTypeInternal;
extern CProxyHeadDefaultTypeInternal _CProxyHead_default_instance_;
class CProxyMessage;
struct CProxyMessageDefaultTypeInternal;
extern CProxyMessageDefaultTypeInternal _CProxyMessage_default_instance_;
class CSocketInfo;
struct CSocketInfoDefaultTypeInternal;
extern CSocketInfoDefaultTypeInternal _CSocketInfo_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CMesHead* Arena::CreateMaybeMessage<::CMesHead>(Arena*);
template<> ::CMessG2G* Arena::CreateMaybeMessage<::CMessG2G>(Arena*);
template<> ::CMessage* Arena::CreateMaybeMessage<::CMessage>(Arena*);
template<> ::CProxyHead* Arena::CreateMaybeMessage<::CProxyHead>(Arena*);
template<> ::CProxyMessage* Arena::CreateMaybeMessage<::CProxyMessage>(Arena*);
template<> ::CSocketInfo* Arena::CreateMaybeMessage<::CSocketInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum enServerType : int {
  FE_TIMER = 0,
  FE_CLIENT = 1,
  FE_GAMESERVER = 2,
  FE_LOGINSERVER = 3,
  FE_DBSERVER = 4,
  FE_PROXYSERVER = 5,
  FE_WORLDSERVER = 6,
  FE_WEBSERVER = 7,
  FE_OFFLINESERVER = 8,
  FE_CHECKSERVER = 9,
  FE_HALLSERVER = 10,
  FE_GATESERVER = 11,
  FE_ROOMSERVER = 12
};
bool enServerType_IsValid(int value);
constexpr enServerType enServerType_MIN = FE_TIMER;
constexpr enServerType enServerType_MAX = FE_ROOMSERVER;
constexpr int enServerType_ARRAYSIZE = enServerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* enServerType_descriptor();
template<typename T>
inline const std::string& enServerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, enServerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function enServerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    enServerType_descriptor(), enum_t_value);
}
inline bool enServerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, enServerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<enServerType>(
    enServerType_descriptor(), name, value);
}
enum enMessageCmd : int {
  MESS_NULL = 0,
  MESS_REGIST = 1,
  MESS_KEEPALIVE = 2,
  MESS_LOGIC = 3
};
bool enMessageCmd_IsValid(int value);
constexpr enMessageCmd enMessageCmd_MIN = MESS_NULL;
constexpr enMessageCmd enMessageCmd_MAX = MESS_LOGIC;
constexpr int enMessageCmd_ARRAYSIZE = enMessageCmd_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* enMessageCmd_descriptor();
template<typename T>
inline const std::string& enMessageCmd_Name(T enum_t_value) {
  static_assert(::std::is_same<T, enMessageCmd>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function enMessageCmd_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    enMessageCmd_descriptor(), enum_t_value);
}
inline bool enMessageCmd_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, enMessageCmd* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<enMessageCmd>(
    enMessageCmd_descriptor(), name, value);
}
// ===================================================================

class CSocketInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSocketInfo) */ {
 public:
  inline CSocketInfo() : CSocketInfo(nullptr) {}
  ~CSocketInfo() override;
  explicit PROTOBUF_CONSTEXPR CSocketInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSocketInfo(const CSocketInfo& from);
  CSocketInfo(CSocketInfo&& from) noexcept
    : CSocketInfo() {
    *this = ::std::move(from);
  }

  inline CSocketInfo& operator=(const CSocketInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSocketInfo& operator=(CSocketInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSocketInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSocketInfo* internal_default_instance() {
    return reinterpret_cast<const CSocketInfo*>(
               &_CSocketInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CSocketInfo& a, CSocketInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSocketInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSocketInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSocketInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSocketInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSocketInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSocketInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSocketInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSocketInfo";
  }
  protected:
  explicit CSocketInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreateTimeFieldNumber = 2,
    kSocketIDFieldNumber = 1,
    kStateFieldNumber = 3,
  };
  // required int64 createTime = 2;
  bool has_createtime() const;
  private:
  bool _internal_has_createtime() const;
  public:
  void clear_createtime();
  int64_t createtime() const;
  void set_createtime(int64_t value);
  private:
  int64_t _internal_createtime() const;
  void _internal_set_createtime(int64_t value);
  public:

  // required int32 socketID = 1;
  bool has_socketid() const;
  private:
  bool _internal_has_socketid() const;
  public:
  void clear_socketid();
  int32_t socketid() const;
  void set_socketid(int32_t value);
  private:
  int32_t _internal_socketid() const;
  void _internal_set_socketid(int32_t value);
  public:

  // required int32 state = 3;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  int32_t state() const;
  void set_state(int32_t value);
  private:
  int32_t _internal_state() const;
  void _internal_set_state(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CSocketInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t createtime_;
  int32_t socketid_;
  int32_t state_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class CMessG2G final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMessG2G) */ {
 public:
  inline CMessG2G() : CMessG2G(nullptr) {}
  ~CMessG2G() override;
  explicit PROTOBUF_CONSTEXPR CMessG2G(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMessG2G(const CMessG2G& from);
  CMessG2G(CMessG2G&& from) noexcept
    : CMessG2G() {
    *this = ::std::move(from);
  }

  inline CMessG2G& operator=(const CMessG2G& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMessG2G& operator=(CMessG2G&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMessG2G& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMessG2G* internal_default_instance() {
    return reinterpret_cast<const CMessG2G*>(
               &_CMessG2G_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMessG2G& a, CMessG2G& b) {
    a.Swap(&b);
  }
  inline void Swap(CMessG2G* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMessG2G* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMessG2G* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMessG2G>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMessG2G& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMessG2G& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMessG2G* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMessG2G";
  }
  protected:
  explicit CMessG2G(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSocketInfosFieldNumber = 1,
    kMesserialFieldNumber = 2,
  };
  // repeated .CSocketInfo socketInfos = 1;
  int socketinfos_size() const;
  private:
  int _internal_socketinfos_size() const;
  public:
  void clear_socketinfos();
  ::CSocketInfo* mutable_socketinfos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSocketInfo >*
      mutable_socketinfos();
  private:
  const ::CSocketInfo& _internal_socketinfos(int index) const;
  ::CSocketInfo* _internal_add_socketinfos();
  public:
  const ::CSocketInfo& socketinfos(int index) const;
  ::CSocketInfo* add_socketinfos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSocketInfo >&
      socketinfos() const;

  // required bytes messerial = 2;
  bool has_messerial() const;
  private:
  bool _internal_has_messerial() const;
  public:
  void clear_messerial();
  const std::string& messerial() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_messerial(ArgT0&& arg0, ArgT... args);
  std::string* mutable_messerial();
  PROTOBUF_NODISCARD std::string* release_messerial();
  void set_allocated_messerial(std::string* messerial);
  private:
  const std::string& _internal_messerial() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_messerial(const std::string& value);
  std::string* _internal_mutable_messerial();
  public:

  // @@protoc_insertion_point(class_scope:CMessG2G)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSocketInfo > socketinfos_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr messerial_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class CMesHead final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMesHead) */ {
 public:
  inline CMesHead() : CMesHead(nullptr) {}
  ~CMesHead() override;
  explicit PROTOBUF_CONSTEXPR CMesHead(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMesHead(const CMesHead& from);
  CMesHead(CMesHead&& from) noexcept
    : CMesHead() {
    *this = ::std::move(from);
  }

  inline CMesHead& operator=(const CMesHead& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMesHead& operator=(CMesHead&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMesHead& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMesHead* internal_default_instance() {
    return reinterpret_cast<const CMesHead*>(
               &_CMesHead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMesHead& a, CMesHead& b) {
    a.Swap(&b);
  }
  inline void Swap(CMesHead* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMesHead* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMesHead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMesHead>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMesHead& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMesHead& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMesHead* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMesHead";
  }
  protected:
  explicit CMesHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSocketInfosFieldNumber = 2,
    kOpFlagFieldNumber = 1,
    kCmdFieldNumber = 3,
    kSerialFieldNumber = 4,
    kSeqFieldNumber = 5,
  };
  // repeated .CSocketInfo socketInfos = 2;
  int socketinfos_size() const;
  private:
  int _internal_socketinfos_size() const;
  public:
  void clear_socketinfos();
  ::CSocketInfo* mutable_socketinfos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSocketInfo >*
      mutable_socketinfos();
  private:
  const ::CSocketInfo& _internal_socketinfos(int index) const;
  ::CSocketInfo* _internal_add_socketinfos();
  public:
  const ::CSocketInfo& socketinfos(int index) const;
  ::CSocketInfo* add_socketinfos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSocketInfo >&
      socketinfos() const;

  // required .enMessageCmd opFlag = 1 [default = MESS_NULL];
  bool has_opflag() const;
  private:
  bool _internal_has_opflag() const;
  public:
  void clear_opflag();
  ::enMessageCmd opflag() const;
  void set_opflag(::enMessageCmd value);
  private:
  ::enMessageCmd _internal_opflag() const;
  void _internal_set_opflag(::enMessageCmd value);
  public:

  // optional int32 cmd = 3;
  bool has_cmd() const;
  private:
  bool _internal_has_cmd() const;
  public:
  void clear_cmd();
  int32_t cmd() const;
  void set_cmd(int32_t value);
  private:
  int32_t _internal_cmd() const;
  void _internal_set_cmd(int32_t value);
  public:

  // optional int32 serial = 4;
  bool has_serial() const;
  private:
  bool _internal_has_serial() const;
  public:
  void clear_serial();
  int32_t serial() const;
  void set_serial(int32_t value);
  private:
  int32_t _internal_serial() const;
  void _internal_set_serial(int32_t value);
  public:

  // optional int32 seq = 5;
  bool has_seq() const;
  private:
  bool _internal_has_seq() const;
  public:
  void clear_seq();
  int32_t seq() const;
  void set_seq(int32_t value);
  private:
  int32_t _internal_seq() const;
  void _internal_set_seq(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMesHead)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSocketInfo > socketinfos_;
  int opflag_;
  int32_t cmd_;
  int32_t serial_;
  int32_t seq_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class CMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMessage) */ {
 public:
  inline CMessage() : CMessage(nullptr) {}
  ~CMessage() override;
  explicit PROTOBUF_CONSTEXPR CMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMessage(const CMessage& from);
  CMessage(CMessage&& from) noexcept
    : CMessage() {
    *this = ::std::move(from);
  }

  inline CMessage& operator=(const CMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMessage& operator=(CMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMessage* internal_default_instance() {
    return reinterpret_cast<const CMessage*>(
               &_CMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMessage& a, CMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMessage";
  }
  protected:
  explicit CMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgHeadFieldNumber = 1,
    kMsgParaFieldNumber = 2,
  };
  // required .CMesHead msgHead = 1;
  bool has_msghead() const;
  private:
  bool _internal_has_msghead() const;
  public:
  void clear_msghead();
  const ::CMesHead& msghead() const;
  PROTOBUF_NODISCARD ::CMesHead* release_msghead();
  ::CMesHead* mutable_msghead();
  void set_allocated_msghead(::CMesHead* msghead);
  private:
  const ::CMesHead& _internal_msghead() const;
  ::CMesHead* _internal_mutable_msghead();
  public:
  void unsafe_arena_set_allocated_msghead(
      ::CMesHead* msghead);
  ::CMesHead* unsafe_arena_release_msghead();

  // required fixed64 msgPara = 2 [default = 0];
  bool has_msgpara() const;
  private:
  bool _internal_has_msgpara() const;
  public:
  void clear_msgpara();
  uint64_t msgpara() const;
  void set_msgpara(uint64_t value);
  private:
  uint64_t _internal_msgpara() const;
  void _internal_set_msgpara(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMesHead* msghead_;
  uint64_t msgpara_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class CProxyHead final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CProxyHead) */ {
 public:
  inline CProxyHead() : CProxyHead(nullptr) {}
  ~CProxyHead() override;
  explicit PROTOBUF_CONSTEXPR CProxyHead(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CProxyHead(const CProxyHead& from);
  CProxyHead(CProxyHead&& from) noexcept
    : CProxyHead() {
    *this = ::std::move(from);
  }

  inline CProxyHead& operator=(const CProxyHead& from) {
    CopyFrom(from);
    return *this;
  }
  inline CProxyHead& operator=(CProxyHead&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CProxyHead& default_instance() {
    return *internal_default_instance();
  }
  static inline const CProxyHead* internal_default_instance() {
    return reinterpret_cast<const CProxyHead*>(
               &_CProxyHead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CProxyHead& a, CProxyHead& b) {
    a.Swap(&b);
  }
  inline void Swap(CProxyHead* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CProxyHead* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CProxyHead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CProxyHead>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CProxyHead& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CProxyHead& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CProxyHead* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CProxyHead";
  }
  protected:
  explicit CProxyHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgHeadFieldNumber = 8,
    kSrcFEFieldNumber = 1,
    kSrcIDFieldNumber = 2,
    kDstFEFieldNumber = 3,
    kDstIDFieldNumber = 4,
    kTimeStampFieldNumber = 5,
    kOpFlagFieldNumber = 6,
    kMessageIdFieldNumber = 7,
  };
  // optional .CMesHead msgHead = 8;
  bool has_msghead() const;
  private:
  bool _internal_has_msghead() const;
  public:
  void clear_msghead();
  const ::CMesHead& msghead() const;
  PROTOBUF_NODISCARD ::CMesHead* release_msghead();
  ::CMesHead* mutable_msghead();
  void set_allocated_msghead(::CMesHead* msghead);
  private:
  const ::CMesHead& _internal_msghead() const;
  ::CMesHead* _internal_mutable_msghead();
  public:
  void unsafe_arena_set_allocated_msghead(
      ::CMesHead* msghead);
  ::CMesHead* unsafe_arena_release_msghead();

  // required uint32 srcFE = 1;
  bool has_srcfe() const;
  private:
  bool _internal_has_srcfe() const;
  public:
  void clear_srcfe();
  uint32_t srcfe() const;
  void set_srcfe(uint32_t value);
  private:
  uint32_t _internal_srcfe() const;
  void _internal_set_srcfe(uint32_t value);
  public:

  // required uint32 srcID = 2;
  bool has_srcid() const;
  private:
  bool _internal_has_srcid() const;
  public:
  void clear_srcid();
  uint32_t srcid() const;
  void set_srcid(uint32_t value);
  private:
  uint32_t _internal_srcid() const;
  void _internal_set_srcid(uint32_t value);
  public:

  // required uint32 dstFE = 3;
  bool has_dstfe() const;
  private:
  bool _internal_has_dstfe() const;
  public:
  void clear_dstfe();
  uint32_t dstfe() const;
  void set_dstfe(uint32_t value);
  private:
  uint32_t _internal_dstfe() const;
  void _internal_set_dstfe(uint32_t value);
  public:

  // required uint32 dstID = 4;
  bool has_dstid() const;
  private:
  bool _internal_has_dstid() const;
  public:
  void clear_dstid();
  uint32_t dstid() const;
  void set_dstid(uint32_t value);
  private:
  uint32_t _internal_dstid() const;
  void _internal_set_dstid(uint32_t value);
  public:

  // required uint64 timeStamp = 5;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // optional .enMessageCmd opFlag = 6 [default = MESS_NULL];
  bool has_opflag() const;
  private:
  bool _internal_has_opflag() const;
  public:
  void clear_opflag();
  ::enMessageCmd opflag() const;
  void set_opflag(::enMessageCmd value);
  private:
  ::enMessageCmd _internal_opflag() const;
  void _internal_set_opflag(::enMessageCmd value);
  public:

  // optional uint32 messageId = 7;
  bool has_messageid() const;
  private:
  bool _internal_has_messageid() const;
  public:
  void clear_messageid();
  uint32_t messageid() const;
  void set_messageid(uint32_t value);
  private:
  uint32_t _internal_messageid() const;
  void _internal_set_messageid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CProxyHead)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMesHead* msghead_;
  uint32_t srcfe_;
  uint32_t srcid_;
  uint32_t dstfe_;
  uint32_t dstid_;
  uint64_t timestamp_;
  int opflag_;
  uint32_t messageid_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class CProxyMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CProxyMessage) */ {
 public:
  inline CProxyMessage() : CProxyMessage(nullptr) {}
  ~CProxyMessage() override;
  explicit PROTOBUF_CONSTEXPR CProxyMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CProxyMessage(const CProxyMessage& from);
  CProxyMessage(CProxyMessage&& from) noexcept
    : CProxyMessage() {
    *this = ::std::move(from);
  }

  inline CProxyMessage& operator=(const CProxyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CProxyMessage& operator=(CProxyMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CProxyMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CProxyMessage* internal_default_instance() {
    return reinterpret_cast<const CProxyMessage*>(
               &_CProxyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CProxyMessage& a, CProxyMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CProxyMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CProxyMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CProxyMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CProxyMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CProxyMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CProxyMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CProxyMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CProxyMessage";
  }
  protected:
  explicit CProxyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgHeadFieldNumber = 1,
    kMsgParaFieldNumber = 2,
  };
  // required .CProxyHead msgHead = 1;
  bool has_msghead() const;
  private:
  bool _internal_has_msghead() const;
  public:
  void clear_msghead();
  const ::CProxyHead& msghead() const;
  PROTOBUF_NODISCARD ::CProxyHead* release_msghead();
  ::CProxyHead* mutable_msghead();
  void set_allocated_msghead(::CProxyHead* msghead);
  private:
  const ::CProxyHead& _internal_msghead() const;
  ::CProxyHead* _internal_mutable_msghead();
  public:
  void unsafe_arena_set_allocated_msghead(
      ::CProxyHead* msghead);
  ::CProxyHead* unsafe_arena_release_msghead();

  // optional fixed64 msgPara = 2 [default = 0];
  bool has_msgpara() const;
  private:
  bool _internal_has_msgpara() const;
  public:
  void clear_msgpara();
  uint64_t msgpara() const;
  void set_msgpara(uint64_t value);
  private:
  uint64_t _internal_msgpara() const;
  void _internal_set_msgpara(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CProxyMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CProxyHead* msghead_;
  uint64_t msgpara_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSocketInfo

// required int32 socketID = 1;
inline bool CSocketInfo::_internal_has_socketid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSocketInfo::has_socketid() const {
  return _internal_has_socketid();
}
inline void CSocketInfo::clear_socketid() {
  socketid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CSocketInfo::_internal_socketid() const {
  return socketid_;
}
inline int32_t CSocketInfo::socketid() const {
  // @@protoc_insertion_point(field_get:CSocketInfo.socketID)
  return _internal_socketid();
}
inline void CSocketInfo::_internal_set_socketid(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  socketid_ = value;
}
inline void CSocketInfo::set_socketid(int32_t value) {
  _internal_set_socketid(value);
  // @@protoc_insertion_point(field_set:CSocketInfo.socketID)
}

// required int64 createTime = 2;
inline bool CSocketInfo::_internal_has_createtime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSocketInfo::has_createtime() const {
  return _internal_has_createtime();
}
inline void CSocketInfo::clear_createtime() {
  createtime_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t CSocketInfo::_internal_createtime() const {
  return createtime_;
}
inline int64_t CSocketInfo::createtime() const {
  // @@protoc_insertion_point(field_get:CSocketInfo.createTime)
  return _internal_createtime();
}
inline void CSocketInfo::_internal_set_createtime(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  createtime_ = value;
}
inline void CSocketInfo::set_createtime(int64_t value) {
  _internal_set_createtime(value);
  // @@protoc_insertion_point(field_set:CSocketInfo.createTime)
}

// required int32 state = 3;
inline bool CSocketInfo::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSocketInfo::has_state() const {
  return _internal_has_state();
}
inline void CSocketInfo::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CSocketInfo::_internal_state() const {
  return state_;
}
inline int32_t CSocketInfo::state() const {
  // @@protoc_insertion_point(field_get:CSocketInfo.state)
  return _internal_state();
}
inline void CSocketInfo::_internal_set_state(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  state_ = value;
}
inline void CSocketInfo::set_state(int32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:CSocketInfo.state)
}

// -------------------------------------------------------------------

// CMessG2G

// repeated .CSocketInfo socketInfos = 1;
inline int CMessG2G::_internal_socketinfos_size() const {
  return socketinfos_.size();
}
inline int CMessG2G::socketinfos_size() const {
  return _internal_socketinfos_size();
}
inline void CMessG2G::clear_socketinfos() {
  socketinfos_.Clear();
}
inline ::CSocketInfo* CMessG2G::mutable_socketinfos(int index) {
  // @@protoc_insertion_point(field_mutable:CMessG2G.socketInfos)
  return socketinfos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSocketInfo >*
CMessG2G::mutable_socketinfos() {
  // @@protoc_insertion_point(field_mutable_list:CMessG2G.socketInfos)
  return &socketinfos_;
}
inline const ::CSocketInfo& CMessG2G::_internal_socketinfos(int index) const {
  return socketinfos_.Get(index);
}
inline const ::CSocketInfo& CMessG2G::socketinfos(int index) const {
  // @@protoc_insertion_point(field_get:CMessG2G.socketInfos)
  return _internal_socketinfos(index);
}
inline ::CSocketInfo* CMessG2G::_internal_add_socketinfos() {
  return socketinfos_.Add();
}
inline ::CSocketInfo* CMessG2G::add_socketinfos() {
  ::CSocketInfo* _add = _internal_add_socketinfos();
  // @@protoc_insertion_point(field_add:CMessG2G.socketInfos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSocketInfo >&
CMessG2G::socketinfos() const {
  // @@protoc_insertion_point(field_list:CMessG2G.socketInfos)
  return socketinfos_;
}

// required bytes messerial = 2;
inline bool CMessG2G::_internal_has_messerial() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMessG2G::has_messerial() const {
  return _internal_has_messerial();
}
inline void CMessG2G::clear_messerial() {
  messerial_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMessG2G::messerial() const {
  // @@protoc_insertion_point(field_get:CMessG2G.messerial)
  return _internal_messerial();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMessG2G::set_messerial(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 messerial_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMessG2G.messerial)
}
inline std::string* CMessG2G::mutable_messerial() {
  std::string* _s = _internal_mutable_messerial();
  // @@protoc_insertion_point(field_mutable:CMessG2G.messerial)
  return _s;
}
inline const std::string& CMessG2G::_internal_messerial() const {
  return messerial_.Get();
}
inline void CMessG2G::_internal_set_messerial(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  messerial_.Set(value, GetArenaForAllocation());
}
inline std::string* CMessG2G::_internal_mutable_messerial() {
  _has_bits_[0] |= 0x00000001u;
  return messerial_.Mutable(GetArenaForAllocation());
}
inline std::string* CMessG2G::release_messerial() {
  // @@protoc_insertion_point(field_release:CMessG2G.messerial)
  if (!_internal_has_messerial()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = messerial_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (messerial_.IsDefault()) {
    messerial_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMessG2G::set_allocated_messerial(std::string* messerial) {
  if (messerial != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  messerial_.SetAllocated(messerial, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (messerial_.IsDefault()) {
    messerial_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMessG2G.messerial)
}

// -------------------------------------------------------------------

// CMesHead

// required .enMessageCmd opFlag = 1 [default = MESS_NULL];
inline bool CMesHead::_internal_has_opflag() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMesHead::has_opflag() const {
  return _internal_has_opflag();
}
inline void CMesHead::clear_opflag() {
  opflag_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::enMessageCmd CMesHead::_internal_opflag() const {
  return static_cast< ::enMessageCmd >(opflag_);
}
inline ::enMessageCmd CMesHead::opflag() const {
  // @@protoc_insertion_point(field_get:CMesHead.opFlag)
  return _internal_opflag();
}
inline void CMesHead::_internal_set_opflag(::enMessageCmd value) {
  assert(::enMessageCmd_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  opflag_ = value;
}
inline void CMesHead::set_opflag(::enMessageCmd value) {
  _internal_set_opflag(value);
  // @@protoc_insertion_point(field_set:CMesHead.opFlag)
}

// repeated .CSocketInfo socketInfos = 2;
inline int CMesHead::_internal_socketinfos_size() const {
  return socketinfos_.size();
}
inline int CMesHead::socketinfos_size() const {
  return _internal_socketinfos_size();
}
inline void CMesHead::clear_socketinfos() {
  socketinfos_.Clear();
}
inline ::CSocketInfo* CMesHead::mutable_socketinfos(int index) {
  // @@protoc_insertion_point(field_mutable:CMesHead.socketInfos)
  return socketinfos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSocketInfo >*
CMesHead::mutable_socketinfos() {
  // @@protoc_insertion_point(field_mutable_list:CMesHead.socketInfos)
  return &socketinfos_;
}
inline const ::CSocketInfo& CMesHead::_internal_socketinfos(int index) const {
  return socketinfos_.Get(index);
}
inline const ::CSocketInfo& CMesHead::socketinfos(int index) const {
  // @@protoc_insertion_point(field_get:CMesHead.socketInfos)
  return _internal_socketinfos(index);
}
inline ::CSocketInfo* CMesHead::_internal_add_socketinfos() {
  return socketinfos_.Add();
}
inline ::CSocketInfo* CMesHead::add_socketinfos() {
  ::CSocketInfo* _add = _internal_add_socketinfos();
  // @@protoc_insertion_point(field_add:CMesHead.socketInfos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSocketInfo >&
CMesHead::socketinfos() const {
  // @@protoc_insertion_point(field_list:CMesHead.socketInfos)
  return socketinfos_;
}

// optional int32 cmd = 3;
inline bool CMesHead::_internal_has_cmd() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMesHead::has_cmd() const {
  return _internal_has_cmd();
}
inline void CMesHead::clear_cmd() {
  cmd_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMesHead::_internal_cmd() const {
  return cmd_;
}
inline int32_t CMesHead::cmd() const {
  // @@protoc_insertion_point(field_get:CMesHead.cmd)
  return _internal_cmd();
}
inline void CMesHead::_internal_set_cmd(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  cmd_ = value;
}
inline void CMesHead::set_cmd(int32_t value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:CMesHead.cmd)
}

// optional int32 serial = 4;
inline bool CMesHead::_internal_has_serial() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMesHead::has_serial() const {
  return _internal_has_serial();
}
inline void CMesHead::clear_serial() {
  serial_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMesHead::_internal_serial() const {
  return serial_;
}
inline int32_t CMesHead::serial() const {
  // @@protoc_insertion_point(field_get:CMesHead.serial)
  return _internal_serial();
}
inline void CMesHead::_internal_set_serial(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  serial_ = value;
}
inline void CMesHead::set_serial(int32_t value) {
  _internal_set_serial(value);
  // @@protoc_insertion_point(field_set:CMesHead.serial)
}

// optional int32 seq = 5;
inline bool CMesHead::_internal_has_seq() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMesHead::has_seq() const {
  return _internal_has_seq();
}
inline void CMesHead::clear_seq() {
  seq_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t CMesHead::_internal_seq() const {
  return seq_;
}
inline int32_t CMesHead::seq() const {
  // @@protoc_insertion_point(field_get:CMesHead.seq)
  return _internal_seq();
}
inline void CMesHead::_internal_set_seq(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  seq_ = value;
}
inline void CMesHead::set_seq(int32_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:CMesHead.seq)
}

// -------------------------------------------------------------------

// CMessage

// required .CMesHead msgHead = 1;
inline bool CMessage::_internal_has_msghead() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || msghead_ != nullptr);
  return value;
}
inline bool CMessage::has_msghead() const {
  return _internal_has_msghead();
}
inline void CMessage::clear_msghead() {
  if (msghead_ != nullptr) msghead_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMesHead& CMessage::_internal_msghead() const {
  const ::CMesHead* p = msghead_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMesHead&>(
      ::_CMesHead_default_instance_);
}
inline const ::CMesHead& CMessage::msghead() const {
  // @@protoc_insertion_point(field_get:CMessage.msgHead)
  return _internal_msghead();
}
inline void CMessage::unsafe_arena_set_allocated_msghead(
    ::CMesHead* msghead) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msghead_);
  }
  msghead_ = msghead;
  if (msghead) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMessage.msgHead)
}
inline ::CMesHead* CMessage::release_msghead() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMesHead* temp = msghead_;
  msghead_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMesHead* CMessage::unsafe_arena_release_msghead() {
  // @@protoc_insertion_point(field_release:CMessage.msgHead)
  _has_bits_[0] &= ~0x00000001u;
  ::CMesHead* temp = msghead_;
  msghead_ = nullptr;
  return temp;
}
inline ::CMesHead* CMessage::_internal_mutable_msghead() {
  _has_bits_[0] |= 0x00000001u;
  if (msghead_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMesHead>(GetArenaForAllocation());
    msghead_ = p;
  }
  return msghead_;
}
inline ::CMesHead* CMessage::mutable_msghead() {
  ::CMesHead* _msg = _internal_mutable_msghead();
  // @@protoc_insertion_point(field_mutable:CMessage.msgHead)
  return _msg;
}
inline void CMessage::set_allocated_msghead(::CMesHead* msghead) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete msghead_;
  }
  if (msghead) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(msghead);
    if (message_arena != submessage_arena) {
      msghead = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msghead, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  msghead_ = msghead;
  // @@protoc_insertion_point(field_set_allocated:CMessage.msgHead)
}

// required fixed64 msgPara = 2 [default = 0];
inline bool CMessage::_internal_has_msgpara() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMessage::has_msgpara() const {
  return _internal_has_msgpara();
}
inline void CMessage::clear_msgpara() {
  msgpara_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMessage::_internal_msgpara() const {
  return msgpara_;
}
inline uint64_t CMessage::msgpara() const {
  // @@protoc_insertion_point(field_get:CMessage.msgPara)
  return _internal_msgpara();
}
inline void CMessage::_internal_set_msgpara(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  msgpara_ = value;
}
inline void CMessage::set_msgpara(uint64_t value) {
  _internal_set_msgpara(value);
  // @@protoc_insertion_point(field_set:CMessage.msgPara)
}

// -------------------------------------------------------------------

// CProxyHead

// required uint32 srcFE = 1;
inline bool CProxyHead::_internal_has_srcfe() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CProxyHead::has_srcfe() const {
  return _internal_has_srcfe();
}
inline void CProxyHead::clear_srcfe() {
  srcfe_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CProxyHead::_internal_srcfe() const {
  return srcfe_;
}
inline uint32_t CProxyHead::srcfe() const {
  // @@protoc_insertion_point(field_get:CProxyHead.srcFE)
  return _internal_srcfe();
}
inline void CProxyHead::_internal_set_srcfe(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  srcfe_ = value;
}
inline void CProxyHead::set_srcfe(uint32_t value) {
  _internal_set_srcfe(value);
  // @@protoc_insertion_point(field_set:CProxyHead.srcFE)
}

// required uint32 srcID = 2;
inline bool CProxyHead::_internal_has_srcid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CProxyHead::has_srcid() const {
  return _internal_has_srcid();
}
inline void CProxyHead::clear_srcid() {
  srcid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CProxyHead::_internal_srcid() const {
  return srcid_;
}
inline uint32_t CProxyHead::srcid() const {
  // @@protoc_insertion_point(field_get:CProxyHead.srcID)
  return _internal_srcid();
}
inline void CProxyHead::_internal_set_srcid(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  srcid_ = value;
}
inline void CProxyHead::set_srcid(uint32_t value) {
  _internal_set_srcid(value);
  // @@protoc_insertion_point(field_set:CProxyHead.srcID)
}

// required uint32 dstFE = 3;
inline bool CProxyHead::_internal_has_dstfe() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CProxyHead::has_dstfe() const {
  return _internal_has_dstfe();
}
inline void CProxyHead::clear_dstfe() {
  dstfe_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CProxyHead::_internal_dstfe() const {
  return dstfe_;
}
inline uint32_t CProxyHead::dstfe() const {
  // @@protoc_insertion_point(field_get:CProxyHead.dstFE)
  return _internal_dstfe();
}
inline void CProxyHead::_internal_set_dstfe(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  dstfe_ = value;
}
inline void CProxyHead::set_dstfe(uint32_t value) {
  _internal_set_dstfe(value);
  // @@protoc_insertion_point(field_set:CProxyHead.dstFE)
}

// required uint32 dstID = 4;
inline bool CProxyHead::_internal_has_dstid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CProxyHead::has_dstid() const {
  return _internal_has_dstid();
}
inline void CProxyHead::clear_dstid() {
  dstid_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CProxyHead::_internal_dstid() const {
  return dstid_;
}
inline uint32_t CProxyHead::dstid() const {
  // @@protoc_insertion_point(field_get:CProxyHead.dstID)
  return _internal_dstid();
}
inline void CProxyHead::_internal_set_dstid(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  dstid_ = value;
}
inline void CProxyHead::set_dstid(uint32_t value) {
  _internal_set_dstid(value);
  // @@protoc_insertion_point(field_set:CProxyHead.dstID)
}

// required uint64 timeStamp = 5;
inline bool CProxyHead::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CProxyHead::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CProxyHead::clear_timestamp() {
  timestamp_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline uint64_t CProxyHead::_internal_timestamp() const {
  return timestamp_;
}
inline uint64_t CProxyHead::timestamp() const {
  // @@protoc_insertion_point(field_get:CProxyHead.timeStamp)
  return _internal_timestamp();
}
inline void CProxyHead::_internal_set_timestamp(uint64_t value) {
  _has_bits_[0] |= 0x00000020u;
  timestamp_ = value;
}
inline void CProxyHead::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CProxyHead.timeStamp)
}

// optional .enMessageCmd opFlag = 6 [default = MESS_NULL];
inline bool CProxyHead::_internal_has_opflag() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CProxyHead::has_opflag() const {
  return _internal_has_opflag();
}
inline void CProxyHead::clear_opflag() {
  opflag_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::enMessageCmd CProxyHead::_internal_opflag() const {
  return static_cast< ::enMessageCmd >(opflag_);
}
inline ::enMessageCmd CProxyHead::opflag() const {
  // @@protoc_insertion_point(field_get:CProxyHead.opFlag)
  return _internal_opflag();
}
inline void CProxyHead::_internal_set_opflag(::enMessageCmd value) {
  assert(::enMessageCmd_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  opflag_ = value;
}
inline void CProxyHead::set_opflag(::enMessageCmd value) {
  _internal_set_opflag(value);
  // @@protoc_insertion_point(field_set:CProxyHead.opFlag)
}

// optional uint32 messageId = 7;
inline bool CProxyHead::_internal_has_messageid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CProxyHead::has_messageid() const {
  return _internal_has_messageid();
}
inline void CProxyHead::clear_messageid() {
  messageid_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CProxyHead::_internal_messageid() const {
  return messageid_;
}
inline uint32_t CProxyHead::messageid() const {
  // @@protoc_insertion_point(field_get:CProxyHead.messageId)
  return _internal_messageid();
}
inline void CProxyHead::_internal_set_messageid(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  messageid_ = value;
}
inline void CProxyHead::set_messageid(uint32_t value) {
  _internal_set_messageid(value);
  // @@protoc_insertion_point(field_set:CProxyHead.messageId)
}

// optional .CMesHead msgHead = 8;
inline bool CProxyHead::_internal_has_msghead() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || msghead_ != nullptr);
  return value;
}
inline bool CProxyHead::has_msghead() const {
  return _internal_has_msghead();
}
inline void CProxyHead::clear_msghead() {
  if (msghead_ != nullptr) msghead_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMesHead& CProxyHead::_internal_msghead() const {
  const ::CMesHead* p = msghead_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMesHead&>(
      ::_CMesHead_default_instance_);
}
inline const ::CMesHead& CProxyHead::msghead() const {
  // @@protoc_insertion_point(field_get:CProxyHead.msgHead)
  return _internal_msghead();
}
inline void CProxyHead::unsafe_arena_set_allocated_msghead(
    ::CMesHead* msghead) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msghead_);
  }
  msghead_ = msghead;
  if (msghead) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CProxyHead.msgHead)
}
inline ::CMesHead* CProxyHead::release_msghead() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMesHead* temp = msghead_;
  msghead_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMesHead* CProxyHead::unsafe_arena_release_msghead() {
  // @@protoc_insertion_point(field_release:CProxyHead.msgHead)
  _has_bits_[0] &= ~0x00000001u;
  ::CMesHead* temp = msghead_;
  msghead_ = nullptr;
  return temp;
}
inline ::CMesHead* CProxyHead::_internal_mutable_msghead() {
  _has_bits_[0] |= 0x00000001u;
  if (msghead_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMesHead>(GetArenaForAllocation());
    msghead_ = p;
  }
  return msghead_;
}
inline ::CMesHead* CProxyHead::mutable_msghead() {
  ::CMesHead* _msg = _internal_mutable_msghead();
  // @@protoc_insertion_point(field_mutable:CProxyHead.msgHead)
  return _msg;
}
inline void CProxyHead::set_allocated_msghead(::CMesHead* msghead) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete msghead_;
  }
  if (msghead) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(msghead);
    if (message_arena != submessage_arena) {
      msghead = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msghead, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  msghead_ = msghead;
  // @@protoc_insertion_point(field_set_allocated:CProxyHead.msgHead)
}

// -------------------------------------------------------------------

// CProxyMessage

// required .CProxyHead msgHead = 1;
inline bool CProxyMessage::_internal_has_msghead() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || msghead_ != nullptr);
  return value;
}
inline bool CProxyMessage::has_msghead() const {
  return _internal_has_msghead();
}
inline void CProxyMessage::clear_msghead() {
  if (msghead_ != nullptr) msghead_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CProxyHead& CProxyMessage::_internal_msghead() const {
  const ::CProxyHead* p = msghead_;
  return p != nullptr ? *p : reinterpret_cast<const ::CProxyHead&>(
      ::_CProxyHead_default_instance_);
}
inline const ::CProxyHead& CProxyMessage::msghead() const {
  // @@protoc_insertion_point(field_get:CProxyMessage.msgHead)
  return _internal_msghead();
}
inline void CProxyMessage::unsafe_arena_set_allocated_msghead(
    ::CProxyHead* msghead) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msghead_);
  }
  msghead_ = msghead;
  if (msghead) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CProxyMessage.msgHead)
}
inline ::CProxyHead* CProxyMessage::release_msghead() {
  _has_bits_[0] &= ~0x00000001u;
  ::CProxyHead* temp = msghead_;
  msghead_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CProxyHead* CProxyMessage::unsafe_arena_release_msghead() {
  // @@protoc_insertion_point(field_release:CProxyMessage.msgHead)
  _has_bits_[0] &= ~0x00000001u;
  ::CProxyHead* temp = msghead_;
  msghead_ = nullptr;
  return temp;
}
inline ::CProxyHead* CProxyMessage::_internal_mutable_msghead() {
  _has_bits_[0] |= 0x00000001u;
  if (msghead_ == nullptr) {
    auto* p = CreateMaybeMessage<::CProxyHead>(GetArenaForAllocation());
    msghead_ = p;
  }
  return msghead_;
}
inline ::CProxyHead* CProxyMessage::mutable_msghead() {
  ::CProxyHead* _msg = _internal_mutable_msghead();
  // @@protoc_insertion_point(field_mutable:CProxyMessage.msgHead)
  return _msg;
}
inline void CProxyMessage::set_allocated_msghead(::CProxyHead* msghead) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete msghead_;
  }
  if (msghead) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(msghead);
    if (message_arena != submessage_arena) {
      msghead = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msghead, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  msghead_ = msghead;
  // @@protoc_insertion_point(field_set_allocated:CProxyMessage.msgHead)
}

// optional fixed64 msgPara = 2 [default = 0];
inline bool CProxyMessage::_internal_has_msgpara() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CProxyMessage::has_msgpara() const {
  return _internal_has_msgpara();
}
inline void CProxyMessage::clear_msgpara() {
  msgpara_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CProxyMessage::_internal_msgpara() const {
  return msgpara_;
}
inline uint64_t CProxyMessage::msgpara() const {
  // @@protoc_insertion_point(field_get:CProxyMessage.msgPara)
  return _internal_msgpara();
}
inline void CProxyMessage::_internal_set_msgpara(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  msgpara_ = value;
}
inline void CProxyMessage::set_msgpara(uint64_t value) {
  _internal_set_msgpara(value);
  // @@protoc_insertion_point(field_set:CProxyMessage.msgPara)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::enServerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::enServerType>() {
  return ::enServerType_descriptor();
}
template <> struct is_proto_enum< ::enMessageCmd> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::enMessageCmd>() {
  return ::enMessageCmd_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
