// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
class CGonnReq;
struct CGonnReqDefaultTypeInternal;
extern CGonnReqDefaultTypeInternal _CGonnReq_default_instance_;
class ProxyHead;
struct ProxyHeadDefaultTypeInternal;
extern ProxyHeadDefaultTypeInternal _ProxyHead_default_instance_;
class ProxyMessage;
struct ProxyMessageDefaultTypeInternal;
extern ProxyMessageDefaultTypeInternal _ProxyMessage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CGonnReq* Arena::CreateMaybeMessage<::CGonnReq>(Arena*);
template<> ::ProxyHead* Arena::CreateMaybeMessage<::ProxyHead>(Arena*);
template<> ::ProxyMessage* Arena::CreateMaybeMessage<::ProxyMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ProxyMessage_Msg : int {
  ProxyMessage_Msg_MsgID = 10000
};
bool ProxyMessage_Msg_IsValid(int value);
constexpr ProxyMessage_Msg ProxyMessage_Msg_Msg_MIN = ProxyMessage_Msg_MsgID;
constexpr ProxyMessage_Msg ProxyMessage_Msg_Msg_MAX = ProxyMessage_Msg_MsgID;
constexpr int ProxyMessage_Msg_Msg_ARRAYSIZE = ProxyMessage_Msg_Msg_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProxyMessage_Msg_descriptor();
template<typename T>
inline const std::string& ProxyMessage_Msg_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProxyMessage_Msg>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProxyMessage_Msg_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProxyMessage_Msg_descriptor(), enum_t_value);
}
inline bool ProxyMessage_Msg_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProxyMessage_Msg* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProxyMessage_Msg>(
    ProxyMessage_Msg_descriptor(), name, value);
}
enum CGonnReq_Msg : int {
  CGonnReq_Msg_MsgID = 10001
};
bool CGonnReq_Msg_IsValid(int value);
constexpr CGonnReq_Msg CGonnReq_Msg_Msg_MIN = CGonnReq_Msg_MsgID;
constexpr CGonnReq_Msg CGonnReq_Msg_Msg_MAX = CGonnReq_Msg_MsgID;
constexpr int CGonnReq_Msg_Msg_ARRAYSIZE = CGonnReq_Msg_Msg_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CGonnReq_Msg_descriptor();
template<typename T>
inline const std::string& CGonnReq_Msg_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CGonnReq_Msg>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CGonnReq_Msg_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CGonnReq_Msg_descriptor(), enum_t_value);
}
inline bool CGonnReq_Msg_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CGonnReq_Msg* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CGonnReq_Msg>(
    CGonnReq_Msg_descriptor(), name, value);
}
enum enServerType : int {
  FE_GAMESERVER = 0,
  FE_PROXYSERVER = 1,
  FE_WEBSERVER = 2
};
bool enServerType_IsValid(int value);
constexpr enServerType enServerType_MIN = FE_GAMESERVER;
constexpr enServerType enServerType_MAX = FE_WEBSERVER;
constexpr int enServerType_ARRAYSIZE = enServerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* enServerType_descriptor();
template<typename T>
inline const std::string& enServerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, enServerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function enServerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    enServerType_descriptor(), enum_t_value);
}
inline bool enServerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, enServerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<enServerType>(
    enServerType_descriptor(), name, value);
}
enum enMessageCmd : int {
  MESS_LOGIC = 0,
  MESS_REGISTER = 1,
  MESS_KEEPALIVE = 2
};
bool enMessageCmd_IsValid(int value);
constexpr enMessageCmd enMessageCmd_MIN = MESS_LOGIC;
constexpr enMessageCmd enMessageCmd_MAX = MESS_KEEPALIVE;
constexpr int enMessageCmd_ARRAYSIZE = enMessageCmd_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* enMessageCmd_descriptor();
template<typename T>
inline const std::string& enMessageCmd_Name(T enum_t_value) {
  static_assert(::std::is_same<T, enMessageCmd>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function enMessageCmd_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    enMessageCmd_descriptor(), enum_t_value);
}
inline bool enMessageCmd_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, enMessageCmd* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<enMessageCmd>(
    enMessageCmd_descriptor(), name, value);
}
// ===================================================================

class ProxyHead final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProxyHead) */ {
 public:
  inline ProxyHead() : ProxyHead(nullptr) {}
  ~ProxyHead() override;
  explicit PROTOBUF_CONSTEXPR ProxyHead(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProxyHead(const ProxyHead& from);
  ProxyHead(ProxyHead&& from) noexcept
    : ProxyHead() {
    *this = ::std::move(from);
  }

  inline ProxyHead& operator=(const ProxyHead& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProxyHead& operator=(ProxyHead&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProxyHead& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProxyHead* internal_default_instance() {
    return reinterpret_cast<const ProxyHead*>(
               &_ProxyHead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProxyHead& a, ProxyHead& b) {
    a.Swap(&b);
  }
  inline void Swap(ProxyHead* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProxyHead* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProxyHead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProxyHead>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProxyHead& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProxyHead& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProxyHead* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProxyHead";
  }
  protected:
  explicit ProxyHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcFEFieldNumber = 1,
    kSrcIDFieldNumber = 2,
    kDstFEFieldNumber = 3,
    kDstIDFieldNumber = 4,
    kTimeStampFieldNumber = 5,
    kOpFlagFieldNumber = 6,
  };
  // required uint32 srcFE = 1;
  bool has_srcfe() const;
  private:
  bool _internal_has_srcfe() const;
  public:
  void clear_srcfe();
  uint32_t srcfe() const;
  void set_srcfe(uint32_t value);
  private:
  uint32_t _internal_srcfe() const;
  void _internal_set_srcfe(uint32_t value);
  public:

  // required uint32 srcID = 2;
  bool has_srcid() const;
  private:
  bool _internal_has_srcid() const;
  public:
  void clear_srcid();
  uint32_t srcid() const;
  void set_srcid(uint32_t value);
  private:
  uint32_t _internal_srcid() const;
  void _internal_set_srcid(uint32_t value);
  public:

  // required uint32 dstFE = 3;
  bool has_dstfe() const;
  private:
  bool _internal_has_dstfe() const;
  public:
  void clear_dstfe();
  uint32_t dstfe() const;
  void set_dstfe(uint32_t value);
  private:
  uint32_t _internal_dstfe() const;
  void _internal_set_dstfe(uint32_t value);
  public:

  // required uint32 dstID = 4;
  bool has_dstid() const;
  private:
  bool _internal_has_dstid() const;
  public:
  void clear_dstid();
  uint32_t dstid() const;
  void set_dstid(uint32_t value);
  private:
  uint32_t _internal_dstid() const;
  void _internal_set_dstid(uint32_t value);
  public:

  // required uint64 timeStamp = 5;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // optional .enMessageCmd opFlag = 6;
  bool has_opflag() const;
  private:
  bool _internal_has_opflag() const;
  public:
  void clear_opflag();
  ::enMessageCmd opflag() const;
  void set_opflag(::enMessageCmd value);
  private:
  ::enMessageCmd _internal_opflag() const;
  void _internal_set_opflag(::enMessageCmd value);
  public:

  // @@protoc_insertion_point(class_scope:ProxyHead)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t srcfe_;
  uint32_t srcid_;
  uint32_t dstfe_;
  uint32_t dstid_;
  uint64_t timestamp_;
  int opflag_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ProxyMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProxyMessage) */ {
 public:
  inline ProxyMessage() : ProxyMessage(nullptr) {}
  ~ProxyMessage() override;
  explicit PROTOBUF_CONSTEXPR ProxyMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProxyMessage(const ProxyMessage& from);
  ProxyMessage(ProxyMessage&& from) noexcept
    : ProxyMessage() {
    *this = ::std::move(from);
  }

  inline ProxyMessage& operator=(const ProxyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProxyMessage& operator=(ProxyMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProxyMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProxyMessage* internal_default_instance() {
    return reinterpret_cast<const ProxyMessage*>(
               &_ProxyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProxyMessage& a, ProxyMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ProxyMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProxyMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProxyMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProxyMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProxyMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProxyMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProxyMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProxyMessage";
  }
  protected:
  explicit ProxyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ProxyMessage_Msg Msg;
  static constexpr Msg MsgID =
    ProxyMessage_Msg_MsgID;
  static inline bool Msg_IsValid(int value) {
    return ProxyMessage_Msg_IsValid(value);
  }
  static constexpr Msg Msg_MIN =
    ProxyMessage_Msg_Msg_MIN;
  static constexpr Msg Msg_MAX =
    ProxyMessage_Msg_Msg_MAX;
  static constexpr int Msg_ARRAYSIZE =
    ProxyMessage_Msg_Msg_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Msg_descriptor() {
    return ProxyMessage_Msg_descriptor();
  }
  template<typename T>
  static inline const std::string& Msg_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Msg>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Msg_Name.");
    return ProxyMessage_Msg_Name(enum_t_value);
  }
  static inline bool Msg_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Msg* value) {
    return ProxyMessage_Msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBuffFieldNumber = 3,
    kMsgHeadFieldNumber = 1,
    kMsgcmdFieldNumber = 2,
  };
  // optional bytes buff = 3;
  bool has_buff() const;
  private:
  bool _internal_has_buff() const;
  public:
  void clear_buff();
  const std::string& buff() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buff(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buff();
  PROTOBUF_NODISCARD std::string* release_buff();
  void set_allocated_buff(std::string* buff);
  private:
  const std::string& _internal_buff() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buff(const std::string& value);
  std::string* _internal_mutable_buff();
  public:

  // required .ProxyHead msgHead = 1;
  bool has_msghead() const;
  private:
  bool _internal_has_msghead() const;
  public:
  void clear_msghead();
  const ::ProxyHead& msghead() const;
  PROTOBUF_NODISCARD ::ProxyHead* release_msghead();
  ::ProxyHead* mutable_msghead();
  void set_allocated_msghead(::ProxyHead* msghead);
  private:
  const ::ProxyHead& _internal_msghead() const;
  ::ProxyHead* _internal_mutable_msghead();
  public:
  void unsafe_arena_set_allocated_msghead(
      ::ProxyHead* msghead);
  ::ProxyHead* unsafe_arena_release_msghead();

  // required uint32 msgcmd = 2;
  bool has_msgcmd() const;
  private:
  bool _internal_has_msgcmd() const;
  public:
  void clear_msgcmd();
  uint32_t msgcmd() const;
  void set_msgcmd(uint32_t value);
  private:
  uint32_t _internal_msgcmd() const;
  void _internal_set_msgcmd(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProxyMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buff_;
  ::ProxyHead* msghead_;
  uint32_t msgcmd_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class CGonnReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGonnReq) */ {
 public:
  inline CGonnReq() : CGonnReq(nullptr) {}
  ~CGonnReq() override;
  explicit PROTOBUF_CONSTEXPR CGonnReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGonnReq(const CGonnReq& from);
  CGonnReq(CGonnReq&& from) noexcept
    : CGonnReq() {
    *this = ::std::move(from);
  }

  inline CGonnReq& operator=(const CGonnReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGonnReq& operator=(CGonnReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGonnReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGonnReq* internal_default_instance() {
    return reinterpret_cast<const CGonnReq*>(
               &_CGonnReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CGonnReq& a, CGonnReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CGonnReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGonnReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGonnReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CGonnReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGonnReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CGonnReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGonnReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGonnReq";
  }
  protected:
  explicit CGonnReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CGonnReq_Msg Msg;
  static constexpr Msg MsgID =
    CGonnReq_Msg_MsgID;
  static inline bool Msg_IsValid(int value) {
    return CGonnReq_Msg_IsValid(value);
  }
  static constexpr Msg Msg_MIN =
    CGonnReq_Msg_Msg_MIN;
  static constexpr Msg Msg_MAX =
    CGonnReq_Msg_Msg_MAX;
  static constexpr int Msg_ARRAYSIZE =
    CGonnReq_Msg_Msg_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Msg_descriptor() {
    return CGonnReq_Msg_descriptor();
  }
  template<typename T>
  static inline const std::string& Msg_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Msg>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Msg_Name.");
    return CGonnReq_Msg_Name(enum_t_value);
  }
  static inline bool Msg_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Msg* value) {
    return CGonnReq_Msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kSessionFieldNumber = 4,
    kPFromFieldNumber = 3,
  };
  // required string Account = 1;
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_NODISCARD std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // optional string Password = 2;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // required string Session = 4;
  bool has_session() const;
  private:
  bool _internal_has_session() const;
  public:
  void clear_session();
  const std::string& session() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session();
  PROTOBUF_NODISCARD std::string* release_session();
  void set_allocated_session(std::string* session);
  private:
  const std::string& _internal_session() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session(const std::string& value);
  std::string* _internal_mutable_session();
  public:

  // optional int32 PFrom = 3;
  bool has_pfrom() const;
  private:
  bool _internal_has_pfrom() const;
  public:
  void clear_pfrom();
  int32_t pfrom() const;
  void set_pfrom(int32_t value);
  private:
  int32_t _internal_pfrom() const;
  void _internal_set_pfrom(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CGonnReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_;
  int32_t pfrom_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProxyHead

// required uint32 srcFE = 1;
inline bool ProxyHead::_internal_has_srcfe() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProxyHead::has_srcfe() const {
  return _internal_has_srcfe();
}
inline void ProxyHead::clear_srcfe() {
  srcfe_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t ProxyHead::_internal_srcfe() const {
  return srcfe_;
}
inline uint32_t ProxyHead::srcfe() const {
  // @@protoc_insertion_point(field_get:ProxyHead.srcFE)
  return _internal_srcfe();
}
inline void ProxyHead::_internal_set_srcfe(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  srcfe_ = value;
}
inline void ProxyHead::set_srcfe(uint32_t value) {
  _internal_set_srcfe(value);
  // @@protoc_insertion_point(field_set:ProxyHead.srcFE)
}

// required uint32 srcID = 2;
inline bool ProxyHead::_internal_has_srcid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProxyHead::has_srcid() const {
  return _internal_has_srcid();
}
inline void ProxyHead::clear_srcid() {
  srcid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t ProxyHead::_internal_srcid() const {
  return srcid_;
}
inline uint32_t ProxyHead::srcid() const {
  // @@protoc_insertion_point(field_get:ProxyHead.srcID)
  return _internal_srcid();
}
inline void ProxyHead::_internal_set_srcid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  srcid_ = value;
}
inline void ProxyHead::set_srcid(uint32_t value) {
  _internal_set_srcid(value);
  // @@protoc_insertion_point(field_set:ProxyHead.srcID)
}

// required uint32 dstFE = 3;
inline bool ProxyHead::_internal_has_dstfe() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProxyHead::has_dstfe() const {
  return _internal_has_dstfe();
}
inline void ProxyHead::clear_dstfe() {
  dstfe_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t ProxyHead::_internal_dstfe() const {
  return dstfe_;
}
inline uint32_t ProxyHead::dstfe() const {
  // @@protoc_insertion_point(field_get:ProxyHead.dstFE)
  return _internal_dstfe();
}
inline void ProxyHead::_internal_set_dstfe(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  dstfe_ = value;
}
inline void ProxyHead::set_dstfe(uint32_t value) {
  _internal_set_dstfe(value);
  // @@protoc_insertion_point(field_set:ProxyHead.dstFE)
}

// required uint32 dstID = 4;
inline bool ProxyHead::_internal_has_dstid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ProxyHead::has_dstid() const {
  return _internal_has_dstid();
}
inline void ProxyHead::clear_dstid() {
  dstid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t ProxyHead::_internal_dstid() const {
  return dstid_;
}
inline uint32_t ProxyHead::dstid() const {
  // @@protoc_insertion_point(field_get:ProxyHead.dstID)
  return _internal_dstid();
}
inline void ProxyHead::_internal_set_dstid(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  dstid_ = value;
}
inline void ProxyHead::set_dstid(uint32_t value) {
  _internal_set_dstid(value);
  // @@protoc_insertion_point(field_set:ProxyHead.dstID)
}

// required uint64 timeStamp = 5;
inline bool ProxyHead::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ProxyHead::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void ProxyHead::clear_timestamp() {
  timestamp_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t ProxyHead::_internal_timestamp() const {
  return timestamp_;
}
inline uint64_t ProxyHead::timestamp() const {
  // @@protoc_insertion_point(field_get:ProxyHead.timeStamp)
  return _internal_timestamp();
}
inline void ProxyHead::_internal_set_timestamp(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  timestamp_ = value;
}
inline void ProxyHead::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:ProxyHead.timeStamp)
}

// optional .enMessageCmd opFlag = 6;
inline bool ProxyHead::_internal_has_opflag() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ProxyHead::has_opflag() const {
  return _internal_has_opflag();
}
inline void ProxyHead::clear_opflag() {
  opflag_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::enMessageCmd ProxyHead::_internal_opflag() const {
  return static_cast< ::enMessageCmd >(opflag_);
}
inline ::enMessageCmd ProxyHead::opflag() const {
  // @@protoc_insertion_point(field_get:ProxyHead.opFlag)
  return _internal_opflag();
}
inline void ProxyHead::_internal_set_opflag(::enMessageCmd value) {
  assert(::enMessageCmd_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  opflag_ = value;
}
inline void ProxyHead::set_opflag(::enMessageCmd value) {
  _internal_set_opflag(value);
  // @@protoc_insertion_point(field_set:ProxyHead.opFlag)
}

// -------------------------------------------------------------------

// ProxyMessage

// required .ProxyHead msgHead = 1;
inline bool ProxyMessage::_internal_has_msghead() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || msghead_ != nullptr);
  return value;
}
inline bool ProxyMessage::has_msghead() const {
  return _internal_has_msghead();
}
inline void ProxyMessage::clear_msghead() {
  if (msghead_ != nullptr) msghead_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ProxyHead& ProxyMessage::_internal_msghead() const {
  const ::ProxyHead* p = msghead_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProxyHead&>(
      ::_ProxyHead_default_instance_);
}
inline const ::ProxyHead& ProxyMessage::msghead() const {
  // @@protoc_insertion_point(field_get:ProxyMessage.msgHead)
  return _internal_msghead();
}
inline void ProxyMessage::unsafe_arena_set_allocated_msghead(
    ::ProxyHead* msghead) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msghead_);
  }
  msghead_ = msghead;
  if (msghead) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProxyMessage.msgHead)
}
inline ::ProxyHead* ProxyMessage::release_msghead() {
  _has_bits_[0] &= ~0x00000002u;
  ::ProxyHead* temp = msghead_;
  msghead_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProxyHead* ProxyMessage::unsafe_arena_release_msghead() {
  // @@protoc_insertion_point(field_release:ProxyMessage.msgHead)
  _has_bits_[0] &= ~0x00000002u;
  ::ProxyHead* temp = msghead_;
  msghead_ = nullptr;
  return temp;
}
inline ::ProxyHead* ProxyMessage::_internal_mutable_msghead() {
  _has_bits_[0] |= 0x00000002u;
  if (msghead_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProxyHead>(GetArenaForAllocation());
    msghead_ = p;
  }
  return msghead_;
}
inline ::ProxyHead* ProxyMessage::mutable_msghead() {
  ::ProxyHead* _msg = _internal_mutable_msghead();
  // @@protoc_insertion_point(field_mutable:ProxyMessage.msgHead)
  return _msg;
}
inline void ProxyMessage::set_allocated_msghead(::ProxyHead* msghead) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete msghead_;
  }
  if (msghead) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(msghead);
    if (message_arena != submessage_arena) {
      msghead = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msghead, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  msghead_ = msghead;
  // @@protoc_insertion_point(field_set_allocated:ProxyMessage.msgHead)
}

// required uint32 msgcmd = 2;
inline bool ProxyMessage::_internal_has_msgcmd() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProxyMessage::has_msgcmd() const {
  return _internal_has_msgcmd();
}
inline void ProxyMessage::clear_msgcmd() {
  msgcmd_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t ProxyMessage::_internal_msgcmd() const {
  return msgcmd_;
}
inline uint32_t ProxyMessage::msgcmd() const {
  // @@protoc_insertion_point(field_get:ProxyMessage.msgcmd)
  return _internal_msgcmd();
}
inline void ProxyMessage::_internal_set_msgcmd(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  msgcmd_ = value;
}
inline void ProxyMessage::set_msgcmd(uint32_t value) {
  _internal_set_msgcmd(value);
  // @@protoc_insertion_point(field_set:ProxyMessage.msgcmd)
}

// optional bytes buff = 3;
inline bool ProxyMessage::_internal_has_buff() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProxyMessage::has_buff() const {
  return _internal_has_buff();
}
inline void ProxyMessage::clear_buff() {
  buff_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProxyMessage::buff() const {
  // @@protoc_insertion_point(field_get:ProxyMessage.buff)
  return _internal_buff();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProxyMessage::set_buff(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 buff_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProxyMessage.buff)
}
inline std::string* ProxyMessage::mutable_buff() {
  std::string* _s = _internal_mutable_buff();
  // @@protoc_insertion_point(field_mutable:ProxyMessage.buff)
  return _s;
}
inline const std::string& ProxyMessage::_internal_buff() const {
  return buff_.Get();
}
inline void ProxyMessage::_internal_set_buff(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  buff_.Set(value, GetArenaForAllocation());
}
inline std::string* ProxyMessage::_internal_mutable_buff() {
  _has_bits_[0] |= 0x00000001u;
  return buff_.Mutable(GetArenaForAllocation());
}
inline std::string* ProxyMessage::release_buff() {
  // @@protoc_insertion_point(field_release:ProxyMessage.buff)
  if (!_internal_has_buff()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = buff_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (buff_.IsDefault()) {
    buff_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProxyMessage::set_allocated_buff(std::string* buff) {
  if (buff != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  buff_.SetAllocated(buff, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (buff_.IsDefault()) {
    buff_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProxyMessage.buff)
}

// -------------------------------------------------------------------

// CGonnReq

// required string Account = 1;
inline bool CGonnReq::_internal_has_account() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGonnReq::has_account() const {
  return _internal_has_account();
}
inline void CGonnReq::clear_account() {
  account_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGonnReq::account() const {
  // @@protoc_insertion_point(field_get:CGonnReq.Account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGonnReq::set_account(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 account_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGonnReq.Account)
}
inline std::string* CGonnReq::mutable_account() {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:CGonnReq.Account)
  return _s;
}
inline const std::string& CGonnReq::_internal_account() const {
  return account_.Get();
}
inline void CGonnReq::_internal_set_account(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  account_.Set(value, GetArenaForAllocation());
}
inline std::string* CGonnReq::_internal_mutable_account() {
  _has_bits_[0] |= 0x00000001u;
  return account_.Mutable(GetArenaForAllocation());
}
inline std::string* CGonnReq::release_account() {
  // @@protoc_insertion_point(field_release:CGonnReq.Account)
  if (!_internal_has_account()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = account_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_.IsDefault()) {
    account_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CGonnReq::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  account_.SetAllocated(account, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_.IsDefault()) {
    account_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CGonnReq.Account)
}

// optional string Password = 2;
inline bool CGonnReq::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGonnReq::has_password() const {
  return _internal_has_password();
}
inline void CGonnReq::clear_password() {
  password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CGonnReq::password() const {
  // @@protoc_insertion_point(field_get:CGonnReq.Password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGonnReq::set_password(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGonnReq.Password)
}
inline std::string* CGonnReq::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:CGonnReq.Password)
  return _s;
}
inline const std::string& CGonnReq::_internal_password() const {
  return password_.Get();
}
inline void CGonnReq::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.Set(value, GetArenaForAllocation());
}
inline std::string* CGonnReq::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000002u;
  return password_.Mutable(GetArenaForAllocation());
}
inline std::string* CGonnReq::release_password() {
  // @@protoc_insertion_point(field_release:CGonnReq.Password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = password_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault()) {
    password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CGonnReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault()) {
    password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CGonnReq.Password)
}

// optional int32 PFrom = 3;
inline bool CGonnReq::_internal_has_pfrom() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CGonnReq::has_pfrom() const {
  return _internal_has_pfrom();
}
inline void CGonnReq::clear_pfrom() {
  pfrom_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t CGonnReq::_internal_pfrom() const {
  return pfrom_;
}
inline int32_t CGonnReq::pfrom() const {
  // @@protoc_insertion_point(field_get:CGonnReq.PFrom)
  return _internal_pfrom();
}
inline void CGonnReq::_internal_set_pfrom(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  pfrom_ = value;
}
inline void CGonnReq::set_pfrom(int32_t value) {
  _internal_set_pfrom(value);
  // @@protoc_insertion_point(field_set:CGonnReq.PFrom)
}

// required string Session = 4;
inline bool CGonnReq::_internal_has_session() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGonnReq::has_session() const {
  return _internal_has_session();
}
inline void CGonnReq::clear_session() {
  session_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CGonnReq::session() const {
  // @@protoc_insertion_point(field_get:CGonnReq.Session)
  return _internal_session();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGonnReq::set_session(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 session_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGonnReq.Session)
}
inline std::string* CGonnReq::mutable_session() {
  std::string* _s = _internal_mutable_session();
  // @@protoc_insertion_point(field_mutable:CGonnReq.Session)
  return _s;
}
inline const std::string& CGonnReq::_internal_session() const {
  return session_.Get();
}
inline void CGonnReq::_internal_set_session(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  session_.Set(value, GetArenaForAllocation());
}
inline std::string* CGonnReq::_internal_mutable_session() {
  _has_bits_[0] |= 0x00000004u;
  return session_.Mutable(GetArenaForAllocation());
}
inline std::string* CGonnReq::release_session() {
  // @@protoc_insertion_point(field_release:CGonnReq.Session)
  if (!_internal_has_session()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = session_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_.IsDefault()) {
    session_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CGonnReq::set_allocated_session(std::string* session) {
  if (session != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  session_.SetAllocated(session, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_.IsDefault()) {
    session_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CGonnReq.Session)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ProxyMessage_Msg> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProxyMessage_Msg>() {
  return ::ProxyMessage_Msg_descriptor();
}
template <> struct is_proto_enum< ::CGonnReq_Msg> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CGonnReq_Msg>() {
  return ::CGonnReq_Msg_descriptor();
}
template <> struct is_proto_enum< ::enServerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::enServerType>() {
  return ::enServerType_descriptor();
}
template <> struct is_proto_enum< ::enMessageCmd> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::enMessageCmd>() {
  return ::enMessageCmd_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
