// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: roommessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "roommessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PBRoomServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRoomServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRoleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRoleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBConnectInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBConnectInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgR2HRegistHallRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgR2HRegistHallRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgR2HRegistHallRequest_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgH2RRegistHallResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgH2RRegistHallResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgH2RRegistHallResponse_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgR2HUpdateRoomRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgR2HUpdateRoomRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgR2HUpdateRoomRequest_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgH2RUpdateRoomResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgH2RUpdateRoomResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgH2RUpdateRoomResponse_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgLoginRoomRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLoginRoomRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgLoginRoomRequest_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgLoginRoomResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLoginRoomResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgLoginRoomResponse_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgH2RCreateRoomRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgH2RCreateRoomRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgH2RCreateRoomRequest_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgR2HCreateRoomResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgR2HCreateRoomResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgR2HCreateRoomResponse_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgGoRoomResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGoRoomResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgGoRoomResponse_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgJoinGameRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgJoinGameRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgJoinGameRequest_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgJoinGameResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgJoinGameResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgJoinGameResponse_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgUpdateRoleInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgUpdateRoleInfoResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgUpdateRoleInfoResponse_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgLeaveRoomRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLeaveRoomRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgLeaveRoomRequest_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgR2HLeaveRoomResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgR2HLeaveRoomResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgR2HLeaveRoomResponse_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgR2HUpdateRoleDataResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgR2HUpdateRoleDataResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgR2HUpdateRoleDataResponse_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgLucky28ShotRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLucky28ShotRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgLucky28ShotRequest_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgLucky28PrepareResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLucky28PrepareResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgLucky28PrepareResponse_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgLucky28StartResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLucky28StartResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgLucky28StartResponse_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgLucky28EndResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLucky28EndResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgLucky28EndResponse_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgLucky28ShotRoleResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLucky28ShotRoleResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgLucky28ShotRoleResponse_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgLucky28ShotResultResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLucky28ShotResultResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgLucky28ShotResultResponse_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsg8BallStartGameRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsg8BallStartGameRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsg8BallStartGameRequest_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsg8BallRoundStartResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsg8BallRoundStartResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsg8BallRoundStartResponse_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsg8BallKickInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsg8BallKickInfoRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsg8BallKickInfoRequest_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsg8BallKickInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsg8BallKickInfoResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsg8BallKickInfoResponse_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsg8BallPositionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsg8BallPositionRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsg8BallPositionRequest_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsg8BallPositionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsg8BallPositionResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsg8BallPositionResponse_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsg8BallRoundEndRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsg8BallRoundEndRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsg8BallRoundEndRequest_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsg8BallEndGameResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsg8BallEndGameResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsg8BallEndGameResponse_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsg8BallCannotContinueResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsg8BallCannotContinueResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsg8BallCannotContinueResponse_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgLucky28SettlementEndRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLucky28SettlementEndRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgLucky28SettlementEndRequest_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsg8BallLeaveMatchRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsg8BallLeaveMatchRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsg8BallLeaveMatchRequest_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsg8BallLeaveMatchResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsg8BallLeaveMatchResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsg8BallLeaveMatchResponse_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsg8BallMoveBallRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsg8BallMoveBallRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsg8BallMoveBallRequest_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsg8BallMoveBallResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsg8BallMoveBallResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsg8BallMoveBallResponse_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsg8BallMoveGunRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsg8BallMoveGunRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsg8BallMoveGunRequest_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsg8BallMoveGunResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsg8BallMoveGunResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsg8BallMoveGunResponse_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsg8Ball3PFoulResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsg8Ball3PFoulResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsg8Ball3PFoulResponse_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsg8BallUpdateResultToHall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsg8BallUpdateResultToHall_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsg8BallUpdateResultToHall_Msg_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_roommessage_2eproto() {
  protobuf_AddDesc_roommessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "roommessage.proto");
  GOOGLE_CHECK(file != NULL);
  PBRoomServerInfo_descriptor_ = file->message_type(0);
  static const int PBRoomServerInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoomServerInfo, roomserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoomServerInfo, curroomnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoomServerInfo, currolenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoomServerInfo, maxroomnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoomServerInfo, maxrolenum_),
  };
  PBRoomServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRoomServerInfo_descriptor_,
      PBRoomServerInfo::default_instance_,
      PBRoomServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoomServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoomServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRoomServerInfo));
  PBRoomInfo_descriptor_ = file->message_type(1);
  static const int PBRoomInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoomInfo, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoomInfo, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoomInfo, rolelist_),
  };
  PBRoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRoomInfo_descriptor_,
      PBRoomInfo::default_instance_,
      PBRoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRoomInfo));
  PBRoleInfo_descriptor_ = file->message_type(2);
  static const int PBRoleInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleInfo, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleInfo, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleInfo, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleInfo, gunid_),
  };
  PBRoleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRoleInfo_descriptor_,
      PBRoleInfo::default_instance_,
      PBRoleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRoleInfo));
  PBConnectInfo_descriptor_ = file->message_type(3);
  static const int PBConnectInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConnectInfo, srcip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConnectInfo, srcport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConnectInfo, socketid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConnectInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConnectInfo, tcpid_),
  };
  PBConnectInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBConnectInfo_descriptor_,
      PBConnectInfo::default_instance_,
      PBConnectInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConnectInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConnectInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBConnectInfo));
  CMsgR2HRegistHallRequest_descriptor_ = file->message_type(4);
  static const int CMsgR2HRegistHallRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgR2HRegistHallRequest, roomserverinfo_),
  };
  CMsgR2HRegistHallRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgR2HRegistHallRequest_descriptor_,
      CMsgR2HRegistHallRequest::default_instance_,
      CMsgR2HRegistHallRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgR2HRegistHallRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgR2HRegistHallRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgR2HRegistHallRequest));
  CMsgR2HRegistHallRequest_Msg_descriptor_ = CMsgR2HRegistHallRequest_descriptor_->enum_type(0);
  CMsgH2RRegistHallResponse_descriptor_ = file->message_type(5);
  static const int CMsgH2RRegistHallResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgH2RRegistHallResponse, result_),
  };
  CMsgH2RRegistHallResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgH2RRegistHallResponse_descriptor_,
      CMsgH2RRegistHallResponse::default_instance_,
      CMsgH2RRegistHallResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgH2RRegistHallResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgH2RRegistHallResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgH2RRegistHallResponse));
  CMsgH2RRegistHallResponse_Msg_descriptor_ = CMsgH2RRegistHallResponse_descriptor_->enum_type(0);
  CMsgR2HUpdateRoomRequest_descriptor_ = file->message_type(6);
  static const int CMsgR2HUpdateRoomRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgR2HUpdateRoomRequest, roomserverinfo_),
  };
  CMsgR2HUpdateRoomRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgR2HUpdateRoomRequest_descriptor_,
      CMsgR2HUpdateRoomRequest::default_instance_,
      CMsgR2HUpdateRoomRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgR2HUpdateRoomRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgR2HUpdateRoomRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgR2HUpdateRoomRequest));
  CMsgR2HUpdateRoomRequest_Msg_descriptor_ = CMsgR2HUpdateRoomRequest_descriptor_->enum_type(0);
  CMsgH2RUpdateRoomResponse_descriptor_ = file->message_type(7);
  static const int CMsgH2RUpdateRoomResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgH2RUpdateRoomResponse, result_),
  };
  CMsgH2RUpdateRoomResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgH2RUpdateRoomResponse_descriptor_,
      CMsgH2RUpdateRoomResponse::default_instance_,
      CMsgH2RUpdateRoomResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgH2RUpdateRoomResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgH2RUpdateRoomResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgH2RUpdateRoomResponse));
  CMsgH2RUpdateRoomResponse_Msg_descriptor_ = CMsgH2RUpdateRoomResponse_descriptor_->enum_type(0);
  CMsgLoginRoomRequest_descriptor_ = file->message_type(8);
  static const int CMsgLoginRoomRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLoginRoomRequest, roomtype_),
  };
  CMsgLoginRoomRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgLoginRoomRequest_descriptor_,
      CMsgLoginRoomRequest::default_instance_,
      CMsgLoginRoomRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLoginRoomRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLoginRoomRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgLoginRoomRequest));
  CMsgLoginRoomRequest_Msg_descriptor_ = CMsgLoginRoomRequest_descriptor_->enum_type(0);
  CMsgLoginRoomResponse_descriptor_ = file->message_type(9);
  static const int CMsgLoginRoomResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLoginRoomResponse, result_),
  };
  CMsgLoginRoomResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgLoginRoomResponse_descriptor_,
      CMsgLoginRoomResponse::default_instance_,
      CMsgLoginRoomResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLoginRoomResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLoginRoomResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgLoginRoomResponse));
  CMsgLoginRoomResponse_Msg_descriptor_ = CMsgLoginRoomResponse_descriptor_->enum_type(0);
  CMsgH2RCreateRoomRequest_descriptor_ = file->message_type(10);
  static const int CMsgH2RCreateRoomRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgH2RCreateRoomRequest, roominfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgH2RCreateRoomRequest, connectinfo_),
  };
  CMsgH2RCreateRoomRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgH2RCreateRoomRequest_descriptor_,
      CMsgH2RCreateRoomRequest::default_instance_,
      CMsgH2RCreateRoomRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgH2RCreateRoomRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgH2RCreateRoomRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgH2RCreateRoomRequest));
  CMsgH2RCreateRoomRequest_Msg_descriptor_ = CMsgH2RCreateRoomRequest_descriptor_->enum_type(0);
  CMsgR2HCreateRoomResponse_descriptor_ = file->message_type(11);
  static const int CMsgR2HCreateRoomResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgR2HCreateRoomResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgR2HCreateRoomResponse, roomserverinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgR2HCreateRoomResponse, roominfo_),
  };
  CMsgR2HCreateRoomResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgR2HCreateRoomResponse_descriptor_,
      CMsgR2HCreateRoomResponse::default_instance_,
      CMsgR2HCreateRoomResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgR2HCreateRoomResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgR2HCreateRoomResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgR2HCreateRoomResponse));
  CMsgR2HCreateRoomResponse_Msg_descriptor_ = CMsgR2HCreateRoomResponse_descriptor_->enum_type(0);
  CMsgGoRoomResponse_descriptor_ = file->message_type(12);
  static const int CMsgGoRoomResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGoRoomResponse, roomserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGoRoomResponse, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGoRoomResponse, goroomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGoRoomResponse, roomtype_),
  };
  CMsgGoRoomResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGoRoomResponse_descriptor_,
      CMsgGoRoomResponse::default_instance_,
      CMsgGoRoomResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGoRoomResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGoRoomResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGoRoomResponse));
  CMsgGoRoomResponse_Msg_descriptor_ = CMsgGoRoomResponse_descriptor_->enum_type(0);
  CMsgJoinGameRequest_descriptor_ = file->message_type(13);
  static const int CMsgJoinGameRequest_offsets_[1] = {
  };
  CMsgJoinGameRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgJoinGameRequest_descriptor_,
      CMsgJoinGameRequest::default_instance_,
      CMsgJoinGameRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinGameRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinGameRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgJoinGameRequest));
  CMsgJoinGameRequest_Msg_descriptor_ = CMsgJoinGameRequest_descriptor_->enum_type(0);
  CMsgJoinGameResponse_descriptor_ = file->message_type(14);
  static const int CMsgJoinGameResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinGameResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinGameResponse, goroomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinGameResponse, roleinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinGameResponse, roomtype_),
  };
  CMsgJoinGameResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgJoinGameResponse_descriptor_,
      CMsgJoinGameResponse::default_instance_,
      CMsgJoinGameResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinGameResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinGameResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgJoinGameResponse));
  CMsgJoinGameResponse_Msg_descriptor_ = CMsgJoinGameResponse_descriptor_->enum_type(0);
  CMsgUpdateRoleInfoResponse_descriptor_ = file->message_type(15);
  static const int CMsgUpdateRoleInfoResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdateRoleInfoResponse, roleinfos_),
  };
  CMsgUpdateRoleInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgUpdateRoleInfoResponse_descriptor_,
      CMsgUpdateRoleInfoResponse::default_instance_,
      CMsgUpdateRoleInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdateRoleInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdateRoleInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgUpdateRoleInfoResponse));
  CMsgUpdateRoleInfoResponse_Msg_descriptor_ = CMsgUpdateRoleInfoResponse_descriptor_->enum_type(0);
  CMsgLeaveRoomRequest_descriptor_ = file->message_type(16);
  static const int CMsgLeaveRoomRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaveRoomRequest, leavetype_),
  };
  CMsgLeaveRoomRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgLeaveRoomRequest_descriptor_,
      CMsgLeaveRoomRequest::default_instance_,
      CMsgLeaveRoomRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaveRoomRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaveRoomRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgLeaveRoomRequest));
  CMsgLeaveRoomRequest_Msg_descriptor_ = CMsgLeaveRoomRequest_descriptor_->enum_type(0);
  CMsgR2HLeaveRoomResponse_descriptor_ = file->message_type(17);
  static const int CMsgR2HLeaveRoomResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgR2HLeaveRoomResponse, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgR2HLeaveRoomResponse, leavetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgR2HLeaveRoomResponse, roomtype_),
  };
  CMsgR2HLeaveRoomResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgR2HLeaveRoomResponse_descriptor_,
      CMsgR2HLeaveRoomResponse::default_instance_,
      CMsgR2HLeaveRoomResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgR2HLeaveRoomResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgR2HLeaveRoomResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgR2HLeaveRoomResponse));
  CMsgR2HLeaveRoomResponse_Msg_descriptor_ = CMsgR2HLeaveRoomResponse_descriptor_->enum_type(0);
  CMsgR2HUpdateRoleDataResponse_descriptor_ = file->message_type(18);
  static const int CMsgR2HUpdateRoleDataResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgR2HUpdateRoleDataResponse, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgR2HUpdateRoleDataResponse, gold_),
  };
  CMsgR2HUpdateRoleDataResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgR2HUpdateRoleDataResponse_descriptor_,
      CMsgR2HUpdateRoleDataResponse::default_instance_,
      CMsgR2HUpdateRoleDataResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgR2HUpdateRoleDataResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgR2HUpdateRoleDataResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgR2HUpdateRoleDataResponse));
  CMsgR2HUpdateRoleDataResponse_Msg_descriptor_ = CMsgR2HUpdateRoleDataResponse_descriptor_->enum_type(0);
  CMsgLucky28ShotRequest_descriptor_ = file->message_type(19);
  static const int CMsgLucky28ShotRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLucky28ShotRequest, shottype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLucky28ShotRequest, bettype_),
  };
  CMsgLucky28ShotRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgLucky28ShotRequest_descriptor_,
      CMsgLucky28ShotRequest::default_instance_,
      CMsgLucky28ShotRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLucky28ShotRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLucky28ShotRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgLucky28ShotRequest));
  CMsgLucky28ShotRequest_Msg_descriptor_ = CMsgLucky28ShotRequest_descriptor_->enum_type(0);
  CMsgLucky28PrepareResponse_descriptor_ = file->message_type(20);
  static const int CMsgLucky28PrepareResponse_offsets_[1] = {
  };
  CMsgLucky28PrepareResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgLucky28PrepareResponse_descriptor_,
      CMsgLucky28PrepareResponse::default_instance_,
      CMsgLucky28PrepareResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLucky28PrepareResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLucky28PrepareResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgLucky28PrepareResponse));
  CMsgLucky28PrepareResponse_Msg_descriptor_ = CMsgLucky28PrepareResponse_descriptor_->enum_type(0);
  CMsgLucky28StartResponse_descriptor_ = file->message_type(21);
  static const int CMsgLucky28StartResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLucky28StartResponse, roundinfo_),
  };
  CMsgLucky28StartResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgLucky28StartResponse_descriptor_,
      CMsgLucky28StartResponse::default_instance_,
      CMsgLucky28StartResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLucky28StartResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLucky28StartResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgLucky28StartResponse));
  CMsgLucky28StartResponse_Msg_descriptor_ = CMsgLucky28StartResponse_descriptor_->enum_type(0);
  CMsgLucky28EndResponse_descriptor_ = file->message_type(22);
  static const int CMsgLucky28EndResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLucky28EndResponse, results_),
  };
  CMsgLucky28EndResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgLucky28EndResponse_descriptor_,
      CMsgLucky28EndResponse::default_instance_,
      CMsgLucky28EndResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLucky28EndResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLucky28EndResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgLucky28EndResponse));
  CMsgLucky28EndResponse_Msg_descriptor_ = CMsgLucky28EndResponse_descriptor_->enum_type(0);
  CMsgLucky28ShotRoleResponse_descriptor_ = file->message_type(23);
  static const int CMsgLucky28ShotRoleResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLucky28ShotRoleResponse, shotroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLucky28ShotRoleResponse, roundnum_),
  };
  CMsgLucky28ShotRoleResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgLucky28ShotRoleResponse_descriptor_,
      CMsgLucky28ShotRoleResponse::default_instance_,
      CMsgLucky28ShotRoleResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLucky28ShotRoleResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLucky28ShotRoleResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgLucky28ShotRoleResponse));
  CMsgLucky28ShotRoleResponse_Msg_descriptor_ = CMsgLucky28ShotRoleResponse_descriptor_->enum_type(0);
  CMsgLucky28ShotResultResponse_descriptor_ = file->message_type(24);
  static const int CMsgLucky28ShotResultResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLucky28ShotResultResponse, shotroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLucky28ShotResultResponse, getball_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLucky28ShotResultResponse, shottype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLucky28ShotResultResponse, bettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLucky28ShotResultResponse, roundinfo_),
  };
  CMsgLucky28ShotResultResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgLucky28ShotResultResponse_descriptor_,
      CMsgLucky28ShotResultResponse::default_instance_,
      CMsgLucky28ShotResultResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLucky28ShotResultResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLucky28ShotResultResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgLucky28ShotResultResponse));
  CMsgLucky28ShotResultResponse_Msg_descriptor_ = CMsgLucky28ShotResultResponse_descriptor_->enum_type(0);
  CMsg8BallStartGameRequest_descriptor_ = file->message_type(25);
  static const int CMsg8BallStartGameRequest_offsets_[1] = {
  };
  CMsg8BallStartGameRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsg8BallStartGameRequest_descriptor_,
      CMsg8BallStartGameRequest::default_instance_,
      CMsg8BallStartGameRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallStartGameRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallStartGameRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsg8BallStartGameRequest));
  CMsg8BallStartGameRequest_Msg_descriptor_ = CMsg8BallStartGameRequest_descriptor_->enum_type(0);
  CMsg8BallRoundStartResponse_descriptor_ = file->message_type(26);
  static const int CMsg8BallRoundStartResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallRoundStartResponse, selfstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallRoundStartResponse, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallRoundStartResponse, lastresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallRoundStartResponse, balllist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallRoundStartResponse, ballgroup_),
  };
  CMsg8BallRoundStartResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsg8BallRoundStartResponse_descriptor_,
      CMsg8BallRoundStartResponse::default_instance_,
      CMsg8BallRoundStartResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallRoundStartResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallRoundStartResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsg8BallRoundStartResponse));
  CMsg8BallRoundStartResponse_Msg_descriptor_ = CMsg8BallRoundStartResponse_descriptor_->enum_type(0);
  CMsg8BallKickInfoRequest_descriptor_ = file->message_type(27);
  static const int CMsg8BallKickInfoRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallKickInfoRequest, kickinfo_),
  };
  CMsg8BallKickInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsg8BallKickInfoRequest_descriptor_,
      CMsg8BallKickInfoRequest::default_instance_,
      CMsg8BallKickInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallKickInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallKickInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsg8BallKickInfoRequest));
  CMsg8BallKickInfoRequest_Msg_descriptor_ = CMsg8BallKickInfoRequest_descriptor_->enum_type(0);
  CMsg8BallKickInfoResponse_descriptor_ = file->message_type(28);
  static const int CMsg8BallKickInfoResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallKickInfoResponse, kickinfo_),
  };
  CMsg8BallKickInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsg8BallKickInfoResponse_descriptor_,
      CMsg8BallKickInfoResponse::default_instance_,
      CMsg8BallKickInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallKickInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallKickInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsg8BallKickInfoResponse));
  CMsg8BallKickInfoResponse_Msg_descriptor_ = CMsg8BallKickInfoResponse_descriptor_->enum_type(0);
  CMsg8BallPositionRequest_descriptor_ = file->message_type(29);
  static const int CMsg8BallPositionRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallPositionRequest, balllist_),
  };
  CMsg8BallPositionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsg8BallPositionRequest_descriptor_,
      CMsg8BallPositionRequest::default_instance_,
      CMsg8BallPositionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallPositionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallPositionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsg8BallPositionRequest));
  CMsg8BallPositionRequest_Msg_descriptor_ = CMsg8BallPositionRequest_descriptor_->enum_type(0);
  CMsg8BallPositionResponse_descriptor_ = file->message_type(30);
  static const int CMsg8BallPositionResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallPositionResponse, balllist_),
  };
  CMsg8BallPositionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsg8BallPositionResponse_descriptor_,
      CMsg8BallPositionResponse::default_instance_,
      CMsg8BallPositionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallPositionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallPositionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsg8BallPositionResponse));
  CMsg8BallPositionResponse_Msg_descriptor_ = CMsg8BallPositionResponse_descriptor_->enum_type(0);
  CMsg8BallRoundEndRequest_descriptor_ = file->message_type(31);
  static const int CMsg8BallRoundEndRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallRoundEndRequest, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallRoundEndRequest, balllist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallRoundEndRequest, ballgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallRoundEndRequest, sucroleid_),
  };
  CMsg8BallRoundEndRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsg8BallRoundEndRequest_descriptor_,
      CMsg8BallRoundEndRequest::default_instance_,
      CMsg8BallRoundEndRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallRoundEndRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallRoundEndRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsg8BallRoundEndRequest));
  CMsg8BallRoundEndRequest_Msg_descriptor_ = CMsg8BallRoundEndRequest_descriptor_->enum_type(0);
  CMsg8BallEndGameResponse_descriptor_ = file->message_type(32);
  static const int CMsg8BallEndGameResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallEndGameResponse, result_),
  };
  CMsg8BallEndGameResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsg8BallEndGameResponse_descriptor_,
      CMsg8BallEndGameResponse::default_instance_,
      CMsg8BallEndGameResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallEndGameResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallEndGameResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsg8BallEndGameResponse));
  CMsg8BallEndGameResponse_Msg_descriptor_ = CMsg8BallEndGameResponse_descriptor_->enum_type(0);
  CMsg8BallCannotContinueResponse_descriptor_ = file->message_type(33);
  static const int CMsg8BallCannotContinueResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallCannotContinueResponse, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallCannotContinueResponse, result_),
  };
  CMsg8BallCannotContinueResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsg8BallCannotContinueResponse_descriptor_,
      CMsg8BallCannotContinueResponse::default_instance_,
      CMsg8BallCannotContinueResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallCannotContinueResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallCannotContinueResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsg8BallCannotContinueResponse));
  CMsg8BallCannotContinueResponse_Msg_descriptor_ = CMsg8BallCannotContinueResponse_descriptor_->enum_type(0);
  CMsgLucky28SettlementEndRequest_descriptor_ = file->message_type(34);
  static const int CMsgLucky28SettlementEndRequest_offsets_[1] = {
  };
  CMsgLucky28SettlementEndRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgLucky28SettlementEndRequest_descriptor_,
      CMsgLucky28SettlementEndRequest::default_instance_,
      CMsgLucky28SettlementEndRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLucky28SettlementEndRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLucky28SettlementEndRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgLucky28SettlementEndRequest));
  CMsgLucky28SettlementEndRequest_Msg_descriptor_ = CMsgLucky28SettlementEndRequest_descriptor_->enum_type(0);
  CMsg8BallLeaveMatchRequest_descriptor_ = file->message_type(35);
  static const int CMsg8BallLeaveMatchRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallLeaveMatchRequest, roomtype_),
  };
  CMsg8BallLeaveMatchRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsg8BallLeaveMatchRequest_descriptor_,
      CMsg8BallLeaveMatchRequest::default_instance_,
      CMsg8BallLeaveMatchRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallLeaveMatchRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallLeaveMatchRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsg8BallLeaveMatchRequest));
  CMsg8BallLeaveMatchRequest_Msg_descriptor_ = CMsg8BallLeaveMatchRequest_descriptor_->enum_type(0);
  CMsg8BallLeaveMatchResponse_descriptor_ = file->message_type(36);
  static const int CMsg8BallLeaveMatchResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallLeaveMatchResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallLeaveMatchResponse, roomtype_),
  };
  CMsg8BallLeaveMatchResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsg8BallLeaveMatchResponse_descriptor_,
      CMsg8BallLeaveMatchResponse::default_instance_,
      CMsg8BallLeaveMatchResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallLeaveMatchResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallLeaveMatchResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsg8BallLeaveMatchResponse));
  CMsg8BallLeaveMatchResponse_Msg_descriptor_ = CMsg8BallLeaveMatchResponse_descriptor_->enum_type(0);
  CMsg8BallMoveBallRequest_descriptor_ = file->message_type(37);
  static const int CMsg8BallMoveBallRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallMoveBallRequest, ball_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallMoveBallRequest, angle_),
  };
  CMsg8BallMoveBallRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsg8BallMoveBallRequest_descriptor_,
      CMsg8BallMoveBallRequest::default_instance_,
      CMsg8BallMoveBallRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallMoveBallRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallMoveBallRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsg8BallMoveBallRequest));
  CMsg8BallMoveBallRequest_Msg_descriptor_ = CMsg8BallMoveBallRequest_descriptor_->enum_type(0);
  CMsg8BallMoveBallResponse_descriptor_ = file->message_type(38);
  static const int CMsg8BallMoveBallResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallMoveBallResponse, ball_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallMoveBallResponse, angle_),
  };
  CMsg8BallMoveBallResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsg8BallMoveBallResponse_descriptor_,
      CMsg8BallMoveBallResponse::default_instance_,
      CMsg8BallMoveBallResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallMoveBallResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallMoveBallResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsg8BallMoveBallResponse));
  CMsg8BallMoveBallResponse_Msg_descriptor_ = CMsg8BallMoveBallResponse_descriptor_->enum_type(0);
  CMsg8BallMoveGunRequest_descriptor_ = file->message_type(39);
  static const int CMsg8BallMoveGunRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallMoveGunRequest, angle_),
  };
  CMsg8BallMoveGunRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsg8BallMoveGunRequest_descriptor_,
      CMsg8BallMoveGunRequest::default_instance_,
      CMsg8BallMoveGunRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallMoveGunRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallMoveGunRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsg8BallMoveGunRequest));
  CMsg8BallMoveGunRequest_Msg_descriptor_ = CMsg8BallMoveGunRequest_descriptor_->enum_type(0);
  CMsg8BallMoveGunResponse_descriptor_ = file->message_type(40);
  static const int CMsg8BallMoveGunResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallMoveGunResponse, angle_),
  };
  CMsg8BallMoveGunResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsg8BallMoveGunResponse_descriptor_,
      CMsg8BallMoveGunResponse::default_instance_,
      CMsg8BallMoveGunResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallMoveGunResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallMoveGunResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsg8BallMoveGunResponse));
  CMsg8BallMoveGunResponse_Msg_descriptor_ = CMsg8BallMoveGunResponse_descriptor_->enum_type(0);
  CMsg8Ball3PFoulResponse_descriptor_ = file->message_type(41);
  static const int CMsg8Ball3PFoulResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8Ball3PFoulResponse, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8Ball3PFoulResponse, ballnum_),
  };
  CMsg8Ball3PFoulResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsg8Ball3PFoulResponse_descriptor_,
      CMsg8Ball3PFoulResponse::default_instance_,
      CMsg8Ball3PFoulResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8Ball3PFoulResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8Ball3PFoulResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsg8Ball3PFoulResponse));
  CMsg8Ball3PFoulResponse_Msg_descriptor_ = CMsg8Ball3PFoulResponse_descriptor_->enum_type(0);
  CMsg8BallUpdateResultToHall_descriptor_ = file->message_type(42);
  static const int CMsg8BallUpdateResultToHall_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallUpdateResultToHall, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallUpdateResultToHall, data_),
  };
  CMsg8BallUpdateResultToHall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsg8BallUpdateResultToHall_descriptor_,
      CMsg8BallUpdateResultToHall::default_instance_,
      CMsg8BallUpdateResultToHall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallUpdateResultToHall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg8BallUpdateResultToHall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsg8BallUpdateResultToHall));
  CMsg8BallUpdateResultToHall_Msg_descriptor_ = CMsg8BallUpdateResultToHall_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_roommessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRoomServerInfo_descriptor_, &PBRoomServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRoomInfo_descriptor_, &PBRoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRoleInfo_descriptor_, &PBRoleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBConnectInfo_descriptor_, &PBConnectInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgR2HRegistHallRequest_descriptor_, &CMsgR2HRegistHallRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgH2RRegistHallResponse_descriptor_, &CMsgH2RRegistHallResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgR2HUpdateRoomRequest_descriptor_, &CMsgR2HUpdateRoomRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgH2RUpdateRoomResponse_descriptor_, &CMsgH2RUpdateRoomResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgLoginRoomRequest_descriptor_, &CMsgLoginRoomRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgLoginRoomResponse_descriptor_, &CMsgLoginRoomResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgH2RCreateRoomRequest_descriptor_, &CMsgH2RCreateRoomRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgR2HCreateRoomResponse_descriptor_, &CMsgR2HCreateRoomResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGoRoomResponse_descriptor_, &CMsgGoRoomResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgJoinGameRequest_descriptor_, &CMsgJoinGameRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgJoinGameResponse_descriptor_, &CMsgJoinGameResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgUpdateRoleInfoResponse_descriptor_, &CMsgUpdateRoleInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgLeaveRoomRequest_descriptor_, &CMsgLeaveRoomRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgR2HLeaveRoomResponse_descriptor_, &CMsgR2HLeaveRoomResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgR2HUpdateRoleDataResponse_descriptor_, &CMsgR2HUpdateRoleDataResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgLucky28ShotRequest_descriptor_, &CMsgLucky28ShotRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgLucky28PrepareResponse_descriptor_, &CMsgLucky28PrepareResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgLucky28StartResponse_descriptor_, &CMsgLucky28StartResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgLucky28EndResponse_descriptor_, &CMsgLucky28EndResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgLucky28ShotRoleResponse_descriptor_, &CMsgLucky28ShotRoleResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgLucky28ShotResultResponse_descriptor_, &CMsgLucky28ShotResultResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsg8BallStartGameRequest_descriptor_, &CMsg8BallStartGameRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsg8BallRoundStartResponse_descriptor_, &CMsg8BallRoundStartResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsg8BallKickInfoRequest_descriptor_, &CMsg8BallKickInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsg8BallKickInfoResponse_descriptor_, &CMsg8BallKickInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsg8BallPositionRequest_descriptor_, &CMsg8BallPositionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsg8BallPositionResponse_descriptor_, &CMsg8BallPositionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsg8BallRoundEndRequest_descriptor_, &CMsg8BallRoundEndRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsg8BallEndGameResponse_descriptor_, &CMsg8BallEndGameResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsg8BallCannotContinueResponse_descriptor_, &CMsg8BallCannotContinueResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgLucky28SettlementEndRequest_descriptor_, &CMsgLucky28SettlementEndRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsg8BallLeaveMatchRequest_descriptor_, &CMsg8BallLeaveMatchRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsg8BallLeaveMatchResponse_descriptor_, &CMsg8BallLeaveMatchResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsg8BallMoveBallRequest_descriptor_, &CMsg8BallMoveBallRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsg8BallMoveBallResponse_descriptor_, &CMsg8BallMoveBallResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsg8BallMoveGunRequest_descriptor_, &CMsg8BallMoveGunRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsg8BallMoveGunResponse_descriptor_, &CMsg8BallMoveGunResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsg8Ball3PFoulResponse_descriptor_, &CMsg8Ball3PFoulResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsg8BallUpdateResultToHall_descriptor_, &CMsg8BallUpdateResultToHall::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_roommessage_2eproto() {
  delete PBRoomServerInfo::default_instance_;
  delete PBRoomServerInfo_reflection_;
  delete PBRoomInfo::default_instance_;
  delete PBRoomInfo_reflection_;
  delete PBRoleInfo::default_instance_;
  delete PBRoleInfo_reflection_;
  delete PBConnectInfo::default_instance_;
  delete PBConnectInfo_reflection_;
  delete CMsgR2HRegistHallRequest::default_instance_;
  delete CMsgR2HRegistHallRequest_reflection_;
  delete CMsgH2RRegistHallResponse::default_instance_;
  delete CMsgH2RRegistHallResponse_reflection_;
  delete CMsgR2HUpdateRoomRequest::default_instance_;
  delete CMsgR2HUpdateRoomRequest_reflection_;
  delete CMsgH2RUpdateRoomResponse::default_instance_;
  delete CMsgH2RUpdateRoomResponse_reflection_;
  delete CMsgLoginRoomRequest::default_instance_;
  delete CMsgLoginRoomRequest_reflection_;
  delete CMsgLoginRoomResponse::default_instance_;
  delete CMsgLoginRoomResponse_reflection_;
  delete CMsgH2RCreateRoomRequest::default_instance_;
  delete CMsgH2RCreateRoomRequest_reflection_;
  delete CMsgR2HCreateRoomResponse::default_instance_;
  delete CMsgR2HCreateRoomResponse_reflection_;
  delete CMsgGoRoomResponse::default_instance_;
  delete CMsgGoRoomResponse_reflection_;
  delete CMsgJoinGameRequest::default_instance_;
  delete CMsgJoinGameRequest_reflection_;
  delete CMsgJoinGameResponse::default_instance_;
  delete CMsgJoinGameResponse_reflection_;
  delete CMsgUpdateRoleInfoResponse::default_instance_;
  delete CMsgUpdateRoleInfoResponse_reflection_;
  delete CMsgLeaveRoomRequest::default_instance_;
  delete CMsgLeaveRoomRequest_reflection_;
  delete CMsgR2HLeaveRoomResponse::default_instance_;
  delete CMsgR2HLeaveRoomResponse_reflection_;
  delete CMsgR2HUpdateRoleDataResponse::default_instance_;
  delete CMsgR2HUpdateRoleDataResponse_reflection_;
  delete CMsgLucky28ShotRequest::default_instance_;
  delete CMsgLucky28ShotRequest_reflection_;
  delete CMsgLucky28PrepareResponse::default_instance_;
  delete CMsgLucky28PrepareResponse_reflection_;
  delete CMsgLucky28StartResponse::default_instance_;
  delete CMsgLucky28StartResponse_reflection_;
  delete CMsgLucky28EndResponse::default_instance_;
  delete CMsgLucky28EndResponse_reflection_;
  delete CMsgLucky28ShotRoleResponse::default_instance_;
  delete CMsgLucky28ShotRoleResponse_reflection_;
  delete CMsgLucky28ShotResultResponse::default_instance_;
  delete CMsgLucky28ShotResultResponse_reflection_;
  delete CMsg8BallStartGameRequest::default_instance_;
  delete CMsg8BallStartGameRequest_reflection_;
  delete CMsg8BallRoundStartResponse::default_instance_;
  delete CMsg8BallRoundStartResponse_reflection_;
  delete CMsg8BallKickInfoRequest::default_instance_;
  delete CMsg8BallKickInfoRequest_reflection_;
  delete CMsg8BallKickInfoResponse::default_instance_;
  delete CMsg8BallKickInfoResponse_reflection_;
  delete CMsg8BallPositionRequest::default_instance_;
  delete CMsg8BallPositionRequest_reflection_;
  delete CMsg8BallPositionResponse::default_instance_;
  delete CMsg8BallPositionResponse_reflection_;
  delete CMsg8BallRoundEndRequest::default_instance_;
  delete CMsg8BallRoundEndRequest_reflection_;
  delete CMsg8BallEndGameResponse::default_instance_;
  delete CMsg8BallEndGameResponse_reflection_;
  delete CMsg8BallCannotContinueResponse::default_instance_;
  delete CMsg8BallCannotContinueResponse_reflection_;
  delete CMsgLucky28SettlementEndRequest::default_instance_;
  delete CMsgLucky28SettlementEndRequest_reflection_;
  delete CMsg8BallLeaveMatchRequest::default_instance_;
  delete CMsg8BallLeaveMatchRequest_reflection_;
  delete CMsg8BallLeaveMatchResponse::default_instance_;
  delete CMsg8BallLeaveMatchResponse_reflection_;
  delete CMsg8BallMoveBallRequest::default_instance_;
  delete CMsg8BallMoveBallRequest_reflection_;
  delete CMsg8BallMoveBallResponse::default_instance_;
  delete CMsg8BallMoveBallResponse_reflection_;
  delete CMsg8BallMoveGunRequest::default_instance_;
  delete CMsg8BallMoveGunRequest_reflection_;
  delete CMsg8BallMoveGunResponse::default_instance_;
  delete CMsg8BallMoveGunResponse_reflection_;
  delete CMsg8Ball3PFoulResponse::default_instance_;
  delete CMsg8Ball3PFoulResponse_reflection_;
  delete CMsg8BallUpdateResultToHall::default_instance_;
  delete CMsg8BallUpdateResultToHall_reflection_;
}

void protobuf_AddDesc_roommessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_resourcemessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021roommessage.proto\032\025resourcemessage.pro"
    "to\"x\n\020PBRoomServerInfo\022\024\n\014RoomserverID\030\001"
    " \002(\005\022\022\n\nCurRoomNum\030\002 \002(\005\022\022\n\nCurRoleNum\030\003"
    " \002(\005\022\022\n\nMaxRoomNum\030\004 \002(\005\022\022\n\nMaxRoleNum\030\005"
    " \002(\005\"Z\n\nPBRoomInfo\022\016\n\006RoomID\030\001 \002(\005\022\035\n\010Ro"
    "omType\030\002 \002(\0162\013.enRoomType\022\035\n\010RoleList\030\003 "
    "\003(\0132\013.PBRoleInfo\"g\n\nPBRoleInfo\022\016\n\006RoleID"
    "\030\001 \002(\003\022\014\n\004Name\030\002 \002(\t\022\016\n\006HeadID\030\003 \002(\005\022\014\n\004"
    "Gold\030\004 \002(\003\022\016\n\006Status\030\005 \002(\005\022\r\n\005gunid\030\006 \002("
    "\005\"d\n\rPBConnectInfo\022\r\n\005SrcIP\030\001 \001(\005\022\017\n\007Src"
    "Port\030\002 \001(\005\022\020\n\010SocketID\030\003 \001(\005\022\022\n\nCreateTi"
    "me\030\004 \001(\003\022\r\n\005TcpID\030\005 \001(\005\"Y\n\030CMsgR2HRegist"
    "HallRequest\022)\n\016RoomServerInfo\030\001 \002(\0132\021.PB"
    "RoomServerInfo\"\022\n\003Msg\022\013\n\005MsgID\020\201\200\010\"\?\n\031CM"
    "sgH2RRegistHallResponse\022\016\n\006Result\030\001 \002(\005\""
    "\022\n\003Msg\022\013\n\005MsgID\020\202\200\010\"Y\n\030CMsgR2HUpdateRoom"
    "Request\022)\n\016RoomServerInfo\030\001 \002(\0132\021.PBRoom"
    "ServerInfo\"\022\n\003Msg\022\013\n\005MsgID\020\203\200\010\"\?\n\031CMsgH2"
    "RUpdateRoomResponse\022\016\n\006Result\030\001 \002(\005\"\022\n\003M"
    "sg\022\013\n\005MsgID\020\204\200\010\"<\n\024CMsgLoginRoomRequest\022"
    "\020\n\010RoomType\030\001 \002(\005\"\022\n\003Msg\022\013\n\005MsgID\020\205\200\010\";\n"
    "\025CMsgLoginRoomResponse\022\016\n\006Result\030\001 \002(\005\"\022"
    "\n\003Msg\022\013\n\005MsgID\020\206\200\010\"r\n\030CMsgH2RCreateRoomR"
    "equest\022\035\n\010RoomInfo\030\001 \002(\0132\013.PBRoomInfo\022#\n"
    "\013ConnectInfo\030\002 \003(\0132\016.PBConnectInfo\"\022\n\003Ms"
    "g\022\013\n\005MsgID\020\207\200\010\"\211\001\n\031CMsgR2HCreateRoomResp"
    "onse\022\016\n\006Result\030\001 \002(\005\022)\n\016RoomServerInfo\030\002"
    " \002(\0132\021.PBRoomServerInfo\022\035\n\010RoomInfo\030\003 \001("
    "\0132\013.PBRoomInfo\"\022\n\003Msg\022\013\n\005MsgID\020\210\200\010\"\217\001\n\022C"
    "MsgGoRoomResponse\022\024\n\014RoomServerID\030\001 \002(\005\022"
    "\016\n\006RoomID\030\002 \002(\005\022 \n\nGoRoomType\030\003 \002(\0162\014.EG"
    "oRoomType\022\035\n\010RoomType\030\004 \002(\0162\013.enRoomType"
    "\"\022\n\003Msg\022\013\n\005MsgID\020\211\200\010\"*\n\023CMsgJoinGameRequ"
    "est\"\023\n\003Msg\022\014\n\005MsgID\020\212\200\210\010\"\233\001\n\024CMsgJoinGam"
    "eResponse\022\016\n\006Result\030\001 \002(\005\022 \n\nGoRoomType\030"
    "\002 \002(\0162\014.EGoRoomType\022\036\n\tRoleInfos\030\003 \003(\0132\013"
    ".PBRoleInfo\022\035\n\010RoomType\030\004 \002(\0162\013.enRoomTy"
    "pe\"\022\n\003Msg\022\013\n\005MsgID\020\213\200\010\"P\n\032CMsgUpdateRole"
    "InfoResponse\022\036\n\tRoleInfos\030\001 \003(\0132\013.PBRole"
    "Info\"\022\n\003Msg\022\013\n\005MsgID\020\216\200\010\"O\n\024CMsgLeaveRoo"
    "mRequest\022\"\n\tleavetype\030\001 \002(\0162\017.ELeaveRoom"
    "Type\"\023\n\003Msg\022\014\n\005MsgID\020\217\200\210\010\"\201\001\n\030CMsgR2HLea"
    "veRoomResponse\022\016\n\006roleid\030\001 \002(\003\022\"\n\tleavet"
    "ype\030\002 \002(\0162\017.ELeaveRoomType\022\035\n\010roomtype\030\003"
    " \002(\0162\013.enRoomType\"\022\n\003Msg\022\013\n\005MsgID\020\220\200\010\"Q\n"
    "\035CMsgR2HUpdateRoleDataResponse\022\016\n\006roleid"
    "\030\001 \002(\003\022\014\n\004gold\030\002 \002(\003\"\022\n\003Msg\022\013\n\005MsgID\020\221\200\010"
    "\"u\n\026CMsgLucky28ShotRequest\022#\n\010shottype\030\001"
    " \002(\0162\021.eLucky28ShotType\022!\n\007bettype\030\002 \002(\016"
    "2\020.eLucky28BetType\"\023\n\003Msg\022\014\n\005MsgID\020\222\200\210\010\""
    "0\n\032CMsgLucky28PrepareResponse\"\022\n\003Msg\022\013\n\005"
    "MsgID\020\223\200\010\"V\n\030CMsgLucky28StartResponse\022&\n"
    "\troundinfo\030\001 \002(\0132\023.PBLucky28RoundInfo\"\022\n"
    "\003Msg\022\013\n\005MsgID\020\224\200\010\"Q\n\026CMsgLucky28EndRespo"
    "nse\022#\n\007results\030\001 \003(\0132\022.PBLuckey28EndGame"
    "\"\022\n\003Msg\022\013\n\005MsgID\020\225\200\010\"W\n\033CMsgLucky28ShotR"
    "oleResponse\022\022\n\nshotroleid\030\001 \002(\003\022\020\n\010round"
    "num\030\002 \002(\005\"\022\n\003Msg\022\013\n\005MsgID\020\226\200\010\"\310\001\n\035CMsgLu"
    "cky28ShotResultResponse\022\022\n\nshotroleid\030\001 "
    "\002(\003\022\017\n\007getball\030\002 \002(\005\022#\n\010shottype\030\003 \002(\0162\021"
    ".eLucky28ShotType\022!\n\007bettype\030\004 \002(\0162\020.eLu"
    "cky28BetType\022&\n\troundinfo\030\005 \002(\0132\023.PBLuck"
    "y28RoundInfo\"\022\n\003Msg\022\013\n\005MsgID\020\227\200\010\"0\n\031CMsg"
    "8BallStartGameRequest\"\023\n\003Msg\022\014\n\005MsgID\020\230\200"
    "\210\010\"\247\001\n\033CMsg8BallRoundStartResponse\022\022\n\nse"
    "lfstatus\030\001 \002(\005\022\016\n\006roleid\030\002 \002(\003\022\022\n\nLastRe"
    "sult\030\003 \002(\005\022\032\n\010balllist\030\004 \001(\0132\010.PBBalls\022 "
    "\n\tballgroup\030\005 \003(\0132\r.PB8BallGroup\"\022\n\003Msg\022"
    "\013\n\005MsgID\020\231\200\010\"R\n\030CMsg8BallKickInfoRequest"
    "\022!\n\010kickinfo\030\001 \002(\0132\017.PBKickBallInfo\"\023\n\003M"
    "sg\022\014\n\005MsgID\020\232\200\210\010\"R\n\031CMsg8BallKickInfoRes"
    "ponse\022!\n\010kickinfo\030\001 \002(\0132\017.PBKickBallInfo"
    "\"\022\n\003Msg\022\013\n\005MsgID\020\233\200\010\"K\n\030CMsg8BallPositio"
    "nRequest\022\032\n\010balllist\030\001 \002(\0132\010.PBBalls\"\023\n\003"
    "Msg\022\014\n\005MsgID\020\234\200\210\010\"K\n\031CMsg8BallPositionRe"
    "sponse\022\032\n\010balllist\030\001 \002(\0132\010.PBBalls\"\022\n\003Ms"
    "g\022\013\n\005MsgID\020\235\200\010\"\220\001\n\030CMsg8BallRoundEndRequ"
    "est\022\016\n\006result\030\001 \002(\005\022\032\n\010balllist\030\002 \002(\0132\010."
    "PBBalls\022 \n\tballgroup\030\003 \003(\0132\r.PB8BallGrou"
    "p\022\021\n\tsucroleid\030\004 \001(\003\"\023\n\003Msg\022\014\n\005MsgID\020\236\200\210"
    "\010\"Q\n\030CMsg8BallEndGameResponse\022!\n\006result\030"
    "\001 \003(\0132\021.PB8BallEndResult\"\022\n\003Msg\022\013\n\005MsgID"
    "\020\237\200\010\"d\n\037CMsg8BallCannotContinueResponse\022"
    "\035\n\010roomtype\030\001 \002(\0162\013.enRoomType\022\016\n\006result"
    "\030\002 \002(\005\"\022\n\003Msg\022\013\n\005MsgID\020\240\200\010\"6\n\037CMsgLucky2"
    "8SettlementEndRequest\"\023\n\003Msg\022\014\n\005MsgID\020\241\200"
    "\210\010\"O\n\032CMsg8BallLeaveMatchRequest\022\035\n\010room"
    "type\030\001 \002(\0162\013.enRoomType\"\022\n\003Msg\022\013\n\005MsgID\020"
    "\242\200\010\"`\n\033CMsg8BallLeaveMatchResponse\022\016\n\006re"
    "sult\030\001 \002(\005\022\035\n\010roomtype\030\002 \002(\0162\013.enRoomTyp"
    "e\"\022\n\003Msg\022\013\n\005MsgID\020\243\200\010\"[\n\030CMsg8BallMoveBa"
    "llRequest\022\033\n\004ball\030\001 \002(\0132\r.PBSingleBall\022\r"
    "\n\005angle\030\002 \002(\005\"\023\n\003Msg\022\014\n\005MsgID\020\244\200\210\010\"[\n\031CM"
    "sg8BallMoveBallResponse\022\033\n\004ball\030\001 \002(\0132\r."
    "PBSingleBall\022\r\n\005angle\030\002 \002(\005\"\022\n\003Msg\022\013\n\005Ms"
    "gID\020\245\200\010\"=\n\027CMsg8BallMoveGunRequest\022\r\n\005an"
    "gle\030\001 \002(\005\"\023\n\003Msg\022\014\n\005MsgID\020\246\200\210\010\"=\n\030CMsg8B"
    "allMoveGunResponse\022\r\n\005angle\030\001 \002(\005\"\022\n\003Msg"
    "\022\013\n\005MsgID\020\247\200\010\"N\n\027CMsg8Ball3PFoulResponse"
    "\022\016\n\006roleid\030\001 \002(\003\022\017\n\007ballnum\030\002 \002(\005\"\022\n\003Msg"
    "\022\013\n\005MsgID\020\250\200\010\"{\n\033CMsg8BallUpdateResultTo"
    "Hall\022\"\n\004type\030\001 \002(\0162\024.EDataStatisticsType"
    "\022$\n\004data\030\002 \003(\0132\026.PB8BallDataStatistics\"\022"
    "\n\003Msg\022\013\n\005MsgID\020\251\200\010B\002H\001", 4142);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "roommessage.proto", &protobuf_RegisterTypes);
  PBRoomServerInfo::default_instance_ = new PBRoomServerInfo();
  PBRoomInfo::default_instance_ = new PBRoomInfo();
  PBRoleInfo::default_instance_ = new PBRoleInfo();
  PBConnectInfo::default_instance_ = new PBConnectInfo();
  CMsgR2HRegistHallRequest::default_instance_ = new CMsgR2HRegistHallRequest();
  CMsgH2RRegistHallResponse::default_instance_ = new CMsgH2RRegistHallResponse();
  CMsgR2HUpdateRoomRequest::default_instance_ = new CMsgR2HUpdateRoomRequest();
  CMsgH2RUpdateRoomResponse::default_instance_ = new CMsgH2RUpdateRoomResponse();
  CMsgLoginRoomRequest::default_instance_ = new CMsgLoginRoomRequest();
  CMsgLoginRoomResponse::default_instance_ = new CMsgLoginRoomResponse();
  CMsgH2RCreateRoomRequest::default_instance_ = new CMsgH2RCreateRoomRequest();
  CMsgR2HCreateRoomResponse::default_instance_ = new CMsgR2HCreateRoomResponse();
  CMsgGoRoomResponse::default_instance_ = new CMsgGoRoomResponse();
  CMsgJoinGameRequest::default_instance_ = new CMsgJoinGameRequest();
  CMsgJoinGameResponse::default_instance_ = new CMsgJoinGameResponse();
  CMsgUpdateRoleInfoResponse::default_instance_ = new CMsgUpdateRoleInfoResponse();
  CMsgLeaveRoomRequest::default_instance_ = new CMsgLeaveRoomRequest();
  CMsgR2HLeaveRoomResponse::default_instance_ = new CMsgR2HLeaveRoomResponse();
  CMsgR2HUpdateRoleDataResponse::default_instance_ = new CMsgR2HUpdateRoleDataResponse();
  CMsgLucky28ShotRequest::default_instance_ = new CMsgLucky28ShotRequest();
  CMsgLucky28PrepareResponse::default_instance_ = new CMsgLucky28PrepareResponse();
  CMsgLucky28StartResponse::default_instance_ = new CMsgLucky28StartResponse();
  CMsgLucky28EndResponse::default_instance_ = new CMsgLucky28EndResponse();
  CMsgLucky28ShotRoleResponse::default_instance_ = new CMsgLucky28ShotRoleResponse();
  CMsgLucky28ShotResultResponse::default_instance_ = new CMsgLucky28ShotResultResponse();
  CMsg8BallStartGameRequest::default_instance_ = new CMsg8BallStartGameRequest();
  CMsg8BallRoundStartResponse::default_instance_ = new CMsg8BallRoundStartResponse();
  CMsg8BallKickInfoRequest::default_instance_ = new CMsg8BallKickInfoRequest();
  CMsg8BallKickInfoResponse::default_instance_ = new CMsg8BallKickInfoResponse();
  CMsg8BallPositionRequest::default_instance_ = new CMsg8BallPositionRequest();
  CMsg8BallPositionResponse::default_instance_ = new CMsg8BallPositionResponse();
  CMsg8BallRoundEndRequest::default_instance_ = new CMsg8BallRoundEndRequest();
  CMsg8BallEndGameResponse::default_instance_ = new CMsg8BallEndGameResponse();
  CMsg8BallCannotContinueResponse::default_instance_ = new CMsg8BallCannotContinueResponse();
  CMsgLucky28SettlementEndRequest::default_instance_ = new CMsgLucky28SettlementEndRequest();
  CMsg8BallLeaveMatchRequest::default_instance_ = new CMsg8BallLeaveMatchRequest();
  CMsg8BallLeaveMatchResponse::default_instance_ = new CMsg8BallLeaveMatchResponse();
  CMsg8BallMoveBallRequest::default_instance_ = new CMsg8BallMoveBallRequest();
  CMsg8BallMoveBallResponse::default_instance_ = new CMsg8BallMoveBallResponse();
  CMsg8BallMoveGunRequest::default_instance_ = new CMsg8BallMoveGunRequest();
  CMsg8BallMoveGunResponse::default_instance_ = new CMsg8BallMoveGunResponse();
  CMsg8Ball3PFoulResponse::default_instance_ = new CMsg8Ball3PFoulResponse();
  CMsg8BallUpdateResultToHall::default_instance_ = new CMsg8BallUpdateResultToHall();
  PBRoomServerInfo::default_instance_->InitAsDefaultInstance();
  PBRoomInfo::default_instance_->InitAsDefaultInstance();
  PBRoleInfo::default_instance_->InitAsDefaultInstance();
  PBConnectInfo::default_instance_->InitAsDefaultInstance();
  CMsgR2HRegistHallRequest::default_instance_->InitAsDefaultInstance();
  CMsgH2RRegistHallResponse::default_instance_->InitAsDefaultInstance();
  CMsgR2HUpdateRoomRequest::default_instance_->InitAsDefaultInstance();
  CMsgH2RUpdateRoomResponse::default_instance_->InitAsDefaultInstance();
  CMsgLoginRoomRequest::default_instance_->InitAsDefaultInstance();
  CMsgLoginRoomResponse::default_instance_->InitAsDefaultInstance();
  CMsgH2RCreateRoomRequest::default_instance_->InitAsDefaultInstance();
  CMsgR2HCreateRoomResponse::default_instance_->InitAsDefaultInstance();
  CMsgGoRoomResponse::default_instance_->InitAsDefaultInstance();
  CMsgJoinGameRequest::default_instance_->InitAsDefaultInstance();
  CMsgJoinGameResponse::default_instance_->InitAsDefaultInstance();
  CMsgUpdateRoleInfoResponse::default_instance_->InitAsDefaultInstance();
  CMsgLeaveRoomRequest::default_instance_->InitAsDefaultInstance();
  CMsgR2HLeaveRoomResponse::default_instance_->InitAsDefaultInstance();
  CMsgR2HUpdateRoleDataResponse::default_instance_->InitAsDefaultInstance();
  CMsgLucky28ShotRequest::default_instance_->InitAsDefaultInstance();
  CMsgLucky28PrepareResponse::default_instance_->InitAsDefaultInstance();
  CMsgLucky28StartResponse::default_instance_->InitAsDefaultInstance();
  CMsgLucky28EndResponse::default_instance_->InitAsDefaultInstance();
  CMsgLucky28ShotRoleResponse::default_instance_->InitAsDefaultInstance();
  CMsgLucky28ShotResultResponse::default_instance_->InitAsDefaultInstance();
  CMsg8BallStartGameRequest::default_instance_->InitAsDefaultInstance();
  CMsg8BallRoundStartResponse::default_instance_->InitAsDefaultInstance();
  CMsg8BallKickInfoRequest::default_instance_->InitAsDefaultInstance();
  CMsg8BallKickInfoResponse::default_instance_->InitAsDefaultInstance();
  CMsg8BallPositionRequest::default_instance_->InitAsDefaultInstance();
  CMsg8BallPositionResponse::default_instance_->InitAsDefaultInstance();
  CMsg8BallRoundEndRequest::default_instance_->InitAsDefaultInstance();
  CMsg8BallEndGameResponse::default_instance_->InitAsDefaultInstance();
  CMsg8BallCannotContinueResponse::default_instance_->InitAsDefaultInstance();
  CMsgLucky28SettlementEndRequest::default_instance_->InitAsDefaultInstance();
  CMsg8BallLeaveMatchRequest::default_instance_->InitAsDefaultInstance();
  CMsg8BallLeaveMatchResponse::default_instance_->InitAsDefaultInstance();
  CMsg8BallMoveBallRequest::default_instance_->InitAsDefaultInstance();
  CMsg8BallMoveBallResponse::default_instance_->InitAsDefaultInstance();
  CMsg8BallMoveGunRequest::default_instance_->InitAsDefaultInstance();
  CMsg8BallMoveGunResponse::default_instance_->InitAsDefaultInstance();
  CMsg8Ball3PFoulResponse::default_instance_->InitAsDefaultInstance();
  CMsg8BallUpdateResultToHall::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_roommessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_roommessage_2eproto {
  StaticDescriptorInitializer_roommessage_2eproto() {
    protobuf_AddDesc_roommessage_2eproto();
  }
} static_descriptor_initializer_roommessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PBRoomServerInfo::kRoomserverIDFieldNumber;
const int PBRoomServerInfo::kCurRoomNumFieldNumber;
const int PBRoomServerInfo::kCurRoleNumFieldNumber;
const int PBRoomServerInfo::kMaxRoomNumFieldNumber;
const int PBRoomServerInfo::kMaxRoleNumFieldNumber;
#endif  // !_MSC_VER

PBRoomServerInfo::PBRoomServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRoomServerInfo::InitAsDefaultInstance() {
}

PBRoomServerInfo::PBRoomServerInfo(const PBRoomServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRoomServerInfo::SharedCtor() {
  _cached_size_ = 0;
  roomserverid_ = 0;
  curroomnum_ = 0;
  currolenum_ = 0;
  maxroomnum_ = 0;
  maxrolenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRoomServerInfo::~PBRoomServerInfo() {
  SharedDtor();
}

void PBRoomServerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBRoomServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBRoomServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRoomServerInfo_descriptor_;
}

const PBRoomServerInfo& PBRoomServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

PBRoomServerInfo* PBRoomServerInfo::default_instance_ = NULL;

PBRoomServerInfo* PBRoomServerInfo::New() const {
  return new PBRoomServerInfo;
}

void PBRoomServerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomserverid_ = 0;
    curroomnum_ = 0;
    currolenum_ = 0;
    maxroomnum_ = 0;
    maxrolenum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRoomServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 RoomserverID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomserverid_)));
          set_has_roomserverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CurRoomNum;
        break;
      }

      // required int32 CurRoomNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurRoomNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curroomnum_)));
          set_has_curroomnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_CurRoleNum;
        break;
      }

      // required int32 CurRoleNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurRoleNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currolenum_)));
          set_has_currolenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_MaxRoomNum;
        break;
      }

      // required int32 MaxRoomNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxRoomNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxroomnum_)));
          set_has_maxroomnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_MaxRoleNum;
        break;
      }

      // required int32 MaxRoleNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxRoleNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxrolenum_)));
          set_has_maxrolenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRoomServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 RoomserverID = 1;
  if (has_roomserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomserverid(), output);
  }

  // required int32 CurRoomNum = 2;
  if (has_curroomnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->curroomnum(), output);
  }

  // required int32 CurRoleNum = 3;
  if (has_currolenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->currolenum(), output);
  }

  // required int32 MaxRoomNum = 4;
  if (has_maxroomnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxroomnum(), output);
  }

  // required int32 MaxRoleNum = 5;
  if (has_maxrolenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxrolenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRoomServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 RoomserverID = 1;
  if (has_roomserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomserverid(), target);
  }

  // required int32 CurRoomNum = 2;
  if (has_curroomnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->curroomnum(), target);
  }

  // required int32 CurRoleNum = 3;
  if (has_currolenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->currolenum(), target);
  }

  // required int32 MaxRoomNum = 4;
  if (has_maxroomnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->maxroomnum(), target);
  }

  // required int32 MaxRoleNum = 5;
  if (has_maxrolenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maxrolenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRoomServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 RoomserverID = 1;
    if (has_roomserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomserverid());
    }

    // required int32 CurRoomNum = 2;
    if (has_curroomnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curroomnum());
    }

    // required int32 CurRoleNum = 3;
    if (has_currolenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currolenum());
    }

    // required int32 MaxRoomNum = 4;
    if (has_maxroomnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxroomnum());
    }

    // required int32 MaxRoleNum = 5;
    if (has_maxrolenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxrolenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBRoomServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRoomServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRoomServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRoomServerInfo::MergeFrom(const PBRoomServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomserverid()) {
      set_roomserverid(from.roomserverid());
    }
    if (from.has_curroomnum()) {
      set_curroomnum(from.curroomnum());
    }
    if (from.has_currolenum()) {
      set_currolenum(from.currolenum());
    }
    if (from.has_maxroomnum()) {
      set_maxroomnum(from.maxroomnum());
    }
    if (from.has_maxrolenum()) {
      set_maxrolenum(from.maxrolenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRoomServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRoomServerInfo::CopyFrom(const PBRoomServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBRoomServerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void PBRoomServerInfo::Swap(PBRoomServerInfo* other) {
  if (other != this) {
    std::swap(roomserverid_, other->roomserverid_);
    std::swap(curroomnum_, other->curroomnum_);
    std::swap(currolenum_, other->currolenum_);
    std::swap(maxroomnum_, other->maxroomnum_);
    std::swap(maxrolenum_, other->maxrolenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBRoomServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBRoomServerInfo_descriptor_;
  metadata.reflection = PBRoomServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBRoomInfo::kRoomIDFieldNumber;
const int PBRoomInfo::kRoomTypeFieldNumber;
const int PBRoomInfo::kRoleListFieldNumber;
#endif  // !_MSC_VER

PBRoomInfo::PBRoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRoomInfo::InitAsDefaultInstance() {
}

PBRoomInfo::PBRoomInfo(const PBRoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRoomInfo::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  roomtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRoomInfo::~PBRoomInfo() {
  SharedDtor();
}

void PBRoomInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRoomInfo_descriptor_;
}

const PBRoomInfo& PBRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

PBRoomInfo* PBRoomInfo::default_instance_ = NULL;

PBRoomInfo* PBRoomInfo::New() const {
  return new PBRoomInfo;
}

void PBRoomInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
    roomtype_ = 0;
  }
  rolelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 RoomID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RoomType;
        break;
      }

      // required .enRoomType RoomType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoomType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enRoomType_IsValid(value)) {
            set_roomtype(static_cast< ::enRoomType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_RoleList;
        break;
      }

      // repeated .PBRoleInfo RoleList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoleList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rolelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_RoleList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 RoomID = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // required .enRoomType RoomType = 2;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->roomtype(), output);
  }

  // repeated .PBRoleInfo RoleList = 3;
  for (int i = 0; i < this->rolelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rolelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 RoomID = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // required .enRoomType RoomType = 2;
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->roomtype(), target);
  }

  // repeated .PBRoleInfo RoleList = 3;
  for (int i = 0; i < this->rolelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rolelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 RoomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // required .enRoomType RoomType = 2;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->roomtype());
    }

  }
  // repeated .PBRoleInfo RoleList = 3;
  total_size += 1 * this->rolelist_size();
  for (int i = 0; i < this->rolelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rolelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRoomInfo::MergeFrom(const PBRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rolelist_.MergeFrom(from.rolelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRoomInfo::CopyFrom(const PBRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBRoomInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < rolelist_size(); i++) {
    if (!this->rolelist(i).IsInitialized()) return false;
  }
  return true;
}

void PBRoomInfo::Swap(PBRoomInfo* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(roomtype_, other->roomtype_);
    rolelist_.Swap(&other->rolelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBRoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBRoomInfo_descriptor_;
  metadata.reflection = PBRoomInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBRoleInfo::kRoleIDFieldNumber;
const int PBRoleInfo::kNameFieldNumber;
const int PBRoleInfo::kHeadIDFieldNumber;
const int PBRoleInfo::kGoldFieldNumber;
const int PBRoleInfo::kStatusFieldNumber;
const int PBRoleInfo::kGunidFieldNumber;
#endif  // !_MSC_VER

PBRoleInfo::PBRoleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRoleInfo::InitAsDefaultInstance() {
}

PBRoleInfo::PBRoleInfo(const PBRoleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRoleInfo::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headid_ = 0;
  gold_ = GOOGLE_LONGLONG(0);
  status_ = 0;
  gunid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRoleInfo::~PBRoleInfo() {
  SharedDtor();
}

void PBRoleInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PBRoleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBRoleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRoleInfo_descriptor_;
}

const PBRoleInfo& PBRoleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

PBRoleInfo* PBRoleInfo::default_instance_ = NULL;

PBRoleInfo* PBRoleInfo::New() const {
  return new PBRoleInfo;
}

void PBRoleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    headid_ = 0;
    gold_ = GOOGLE_LONGLONG(0);
    status_ = 0;
    gunid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // required string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_HeadID;
        break;
      }

      // required int32 HeadID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HeadID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Gold;
        break;
      }

      // required int64 Gold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Status;
        break;
      }

      // required int32 Status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gunid;
        break;
      }

      // required int32 gunid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gunid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gunid_)));
          set_has_gunid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 RoleID = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleid(), output);
  }

  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required int32 HeadID = 3;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->headid(), output);
  }

  // required int64 Gold = 4;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->gold(), output);
  }

  // required int32 Status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  // required int32 gunid = 6;
  if (has_gunid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gunid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRoleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 RoleID = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleid(), target);
  }

  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int32 HeadID = 3;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->headid(), target);
  }

  // required int64 Gold = 4;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->gold(), target);
  }

  // required int32 Status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }

  // required int32 gunid = 6;
  if (has_gunid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gunid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRoleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleid());
    }

    // required string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 HeadID = 3;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headid());
    }

    // required int64 Gold = 4;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

    // required int32 Status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // required int32 gunid = 6;
    if (has_gunid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gunid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBRoleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRoleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRoleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRoleInfo::MergeFrom(const PBRoleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_gunid()) {
      set_gunid(from.gunid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRoleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRoleInfo::CopyFrom(const PBRoleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBRoleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void PBRoleInfo::Swap(PBRoleInfo* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(name_, other->name_);
    std::swap(headid_, other->headid_);
    std::swap(gold_, other->gold_);
    std::swap(status_, other->status_);
    std::swap(gunid_, other->gunid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBRoleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBRoleInfo_descriptor_;
  metadata.reflection = PBRoleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBConnectInfo::kSrcIPFieldNumber;
const int PBConnectInfo::kSrcPortFieldNumber;
const int PBConnectInfo::kSocketIDFieldNumber;
const int PBConnectInfo::kCreateTimeFieldNumber;
const int PBConnectInfo::kTcpIDFieldNumber;
#endif  // !_MSC_VER

PBConnectInfo::PBConnectInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBConnectInfo::InitAsDefaultInstance() {
}

PBConnectInfo::PBConnectInfo(const PBConnectInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBConnectInfo::SharedCtor() {
  _cached_size_ = 0;
  srcip_ = 0;
  srcport_ = 0;
  socketid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  tcpid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBConnectInfo::~PBConnectInfo() {
  SharedDtor();
}

void PBConnectInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBConnectInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBConnectInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBConnectInfo_descriptor_;
}

const PBConnectInfo& PBConnectInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

PBConnectInfo* PBConnectInfo::default_instance_ = NULL;

PBConnectInfo* PBConnectInfo::New() const {
  return new PBConnectInfo;
}

void PBConnectInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srcip_ = 0;
    srcport_ = 0;
    socketid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    tcpid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBConnectInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SrcIP = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srcip_)));
          set_has_srcip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SrcPort;
        break;
      }

      // optional int32 SrcPort = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SrcPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srcport_)));
          set_has_srcport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SocketID;
        break;
      }

      // optional int32 SocketID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SocketID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &socketid_)));
          set_has_socketid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_CreateTime;
        break;
      }

      // optional int64 CreateTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_TcpID;
        break;
      }

      // optional int32 TcpID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TcpID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tcpid_)));
          set_has_tcpid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBConnectInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 SrcIP = 1;
  if (has_srcip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->srcip(), output);
  }

  // optional int32 SrcPort = 2;
  if (has_srcport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->srcport(), output);
  }

  // optional int32 SocketID = 3;
  if (has_socketid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->socketid(), output);
  }

  // optional int64 CreateTime = 4;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->createtime(), output);
  }

  // optional int32 TcpID = 5;
  if (has_tcpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tcpid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBConnectInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 SrcIP = 1;
  if (has_srcip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->srcip(), target);
  }

  // optional int32 SrcPort = 2;
  if (has_srcport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->srcport(), target);
  }

  // optional int32 SocketID = 3;
  if (has_socketid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->socketid(), target);
  }

  // optional int64 CreateTime = 4;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->createtime(), target);
  }

  // optional int32 TcpID = 5;
  if (has_tcpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tcpid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBConnectInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SrcIP = 1;
    if (has_srcip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->srcip());
    }

    // optional int32 SrcPort = 2;
    if (has_srcport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->srcport());
    }

    // optional int32 SocketID = 3;
    if (has_socketid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->socketid());
    }

    // optional int64 CreateTime = 4;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // optional int32 TcpID = 5;
    if (has_tcpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tcpid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBConnectInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBConnectInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBConnectInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBConnectInfo::MergeFrom(const PBConnectInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcip()) {
      set_srcip(from.srcip());
    }
    if (from.has_srcport()) {
      set_srcport(from.srcport());
    }
    if (from.has_socketid()) {
      set_socketid(from.socketid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_tcpid()) {
      set_tcpid(from.tcpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBConnectInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBConnectInfo::CopyFrom(const PBConnectInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBConnectInfo::IsInitialized() const {

  return true;
}

void PBConnectInfo::Swap(PBConnectInfo* other) {
  if (other != this) {
    std::swap(srcip_, other->srcip_);
    std::swap(srcport_, other->srcport_);
    std::swap(socketid_, other->socketid_);
    std::swap(createtime_, other->createtime_);
    std::swap(tcpid_, other->tcpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBConnectInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBConnectInfo_descriptor_;
  metadata.reflection = PBConnectInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgR2HRegistHallRequest_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgR2HRegistHallRequest_Msg_descriptor_;
}
bool CMsgR2HRegistHallRequest_Msg_IsValid(int value) {
  switch(value) {
    case 131073:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgR2HRegistHallRequest_Msg CMsgR2HRegistHallRequest::MsgID;
const CMsgR2HRegistHallRequest_Msg CMsgR2HRegistHallRequest::Msg_MIN;
const CMsgR2HRegistHallRequest_Msg CMsgR2HRegistHallRequest::Msg_MAX;
const int CMsgR2HRegistHallRequest::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgR2HRegistHallRequest::kRoomServerInfoFieldNumber;
#endif  // !_MSC_VER

CMsgR2HRegistHallRequest::CMsgR2HRegistHallRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgR2HRegistHallRequest::InitAsDefaultInstance() {
  roomserverinfo_ = const_cast< ::PBRoomServerInfo*>(&::PBRoomServerInfo::default_instance());
}

CMsgR2HRegistHallRequest::CMsgR2HRegistHallRequest(const CMsgR2HRegistHallRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgR2HRegistHallRequest::SharedCtor() {
  _cached_size_ = 0;
  roomserverinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgR2HRegistHallRequest::~CMsgR2HRegistHallRequest() {
  SharedDtor();
}

void CMsgR2HRegistHallRequest::SharedDtor() {
  if (this != default_instance_) {
    delete roomserverinfo_;
  }
}

void CMsgR2HRegistHallRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgR2HRegistHallRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgR2HRegistHallRequest_descriptor_;
}

const CMsgR2HRegistHallRequest& CMsgR2HRegistHallRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

CMsgR2HRegistHallRequest* CMsgR2HRegistHallRequest::default_instance_ = NULL;

CMsgR2HRegistHallRequest* CMsgR2HRegistHallRequest::New() const {
  return new CMsgR2HRegistHallRequest;
}

void CMsgR2HRegistHallRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roomserverinfo()) {
      if (roomserverinfo_ != NULL) roomserverinfo_->::PBRoomServerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgR2HRegistHallRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PBRoomServerInfo RoomServerInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roomserverinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgR2HRegistHallRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PBRoomServerInfo RoomServerInfo = 1;
  if (has_roomserverinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roomserverinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgR2HRegistHallRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PBRoomServerInfo RoomServerInfo = 1;
  if (has_roomserverinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roomserverinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgR2HRegistHallRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PBRoomServerInfo RoomServerInfo = 1;
    if (has_roomserverinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roomserverinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgR2HRegistHallRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgR2HRegistHallRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgR2HRegistHallRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgR2HRegistHallRequest::MergeFrom(const CMsgR2HRegistHallRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomserverinfo()) {
      mutable_roomserverinfo()->::PBRoomServerInfo::MergeFrom(from.roomserverinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgR2HRegistHallRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgR2HRegistHallRequest::CopyFrom(const CMsgR2HRegistHallRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgR2HRegistHallRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_roomserverinfo()) {
    if (!this->roomserverinfo().IsInitialized()) return false;
  }
  return true;
}

void CMsgR2HRegistHallRequest::Swap(CMsgR2HRegistHallRequest* other) {
  if (other != this) {
    std::swap(roomserverinfo_, other->roomserverinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgR2HRegistHallRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgR2HRegistHallRequest_descriptor_;
  metadata.reflection = CMsgR2HRegistHallRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgH2RRegistHallResponse_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgH2RRegistHallResponse_Msg_descriptor_;
}
bool CMsgH2RRegistHallResponse_Msg_IsValid(int value) {
  switch(value) {
    case 131074:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgH2RRegistHallResponse_Msg CMsgH2RRegistHallResponse::MsgID;
const CMsgH2RRegistHallResponse_Msg CMsgH2RRegistHallResponse::Msg_MIN;
const CMsgH2RRegistHallResponse_Msg CMsgH2RRegistHallResponse::Msg_MAX;
const int CMsgH2RRegistHallResponse::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgH2RRegistHallResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgH2RRegistHallResponse::CMsgH2RRegistHallResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgH2RRegistHallResponse::InitAsDefaultInstance() {
}

CMsgH2RRegistHallResponse::CMsgH2RRegistHallResponse(const CMsgH2RRegistHallResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgH2RRegistHallResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgH2RRegistHallResponse::~CMsgH2RRegistHallResponse() {
  SharedDtor();
}

void CMsgH2RRegistHallResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgH2RRegistHallResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgH2RRegistHallResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgH2RRegistHallResponse_descriptor_;
}

const CMsgH2RRegistHallResponse& CMsgH2RRegistHallResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

CMsgH2RRegistHallResponse* CMsgH2RRegistHallResponse::default_instance_ = NULL;

CMsgH2RRegistHallResponse* CMsgH2RRegistHallResponse::New() const {
  return new CMsgH2RRegistHallResponse;
}

void CMsgH2RRegistHallResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgH2RRegistHallResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgH2RRegistHallResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgH2RRegistHallResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgH2RRegistHallResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgH2RRegistHallResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgH2RRegistHallResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgH2RRegistHallResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgH2RRegistHallResponse::MergeFrom(const CMsgH2RRegistHallResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgH2RRegistHallResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgH2RRegistHallResponse::CopyFrom(const CMsgH2RRegistHallResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgH2RRegistHallResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMsgH2RRegistHallResponse::Swap(CMsgH2RRegistHallResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgH2RRegistHallResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgH2RRegistHallResponse_descriptor_;
  metadata.reflection = CMsgH2RRegistHallResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgR2HUpdateRoomRequest_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgR2HUpdateRoomRequest_Msg_descriptor_;
}
bool CMsgR2HUpdateRoomRequest_Msg_IsValid(int value) {
  switch(value) {
    case 131075:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgR2HUpdateRoomRequest_Msg CMsgR2HUpdateRoomRequest::MsgID;
const CMsgR2HUpdateRoomRequest_Msg CMsgR2HUpdateRoomRequest::Msg_MIN;
const CMsgR2HUpdateRoomRequest_Msg CMsgR2HUpdateRoomRequest::Msg_MAX;
const int CMsgR2HUpdateRoomRequest::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgR2HUpdateRoomRequest::kRoomServerInfoFieldNumber;
#endif  // !_MSC_VER

CMsgR2HUpdateRoomRequest::CMsgR2HUpdateRoomRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgR2HUpdateRoomRequest::InitAsDefaultInstance() {
  roomserverinfo_ = const_cast< ::PBRoomServerInfo*>(&::PBRoomServerInfo::default_instance());
}

CMsgR2HUpdateRoomRequest::CMsgR2HUpdateRoomRequest(const CMsgR2HUpdateRoomRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgR2HUpdateRoomRequest::SharedCtor() {
  _cached_size_ = 0;
  roomserverinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgR2HUpdateRoomRequest::~CMsgR2HUpdateRoomRequest() {
  SharedDtor();
}

void CMsgR2HUpdateRoomRequest::SharedDtor() {
  if (this != default_instance_) {
    delete roomserverinfo_;
  }
}

void CMsgR2HUpdateRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgR2HUpdateRoomRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgR2HUpdateRoomRequest_descriptor_;
}

const CMsgR2HUpdateRoomRequest& CMsgR2HUpdateRoomRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

CMsgR2HUpdateRoomRequest* CMsgR2HUpdateRoomRequest::default_instance_ = NULL;

CMsgR2HUpdateRoomRequest* CMsgR2HUpdateRoomRequest::New() const {
  return new CMsgR2HUpdateRoomRequest;
}

void CMsgR2HUpdateRoomRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roomserverinfo()) {
      if (roomserverinfo_ != NULL) roomserverinfo_->::PBRoomServerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgR2HUpdateRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PBRoomServerInfo RoomServerInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roomserverinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgR2HUpdateRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PBRoomServerInfo RoomServerInfo = 1;
  if (has_roomserverinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roomserverinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgR2HUpdateRoomRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PBRoomServerInfo RoomServerInfo = 1;
  if (has_roomserverinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roomserverinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgR2HUpdateRoomRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PBRoomServerInfo RoomServerInfo = 1;
    if (has_roomserverinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roomserverinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgR2HUpdateRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgR2HUpdateRoomRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgR2HUpdateRoomRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgR2HUpdateRoomRequest::MergeFrom(const CMsgR2HUpdateRoomRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomserverinfo()) {
      mutable_roomserverinfo()->::PBRoomServerInfo::MergeFrom(from.roomserverinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgR2HUpdateRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgR2HUpdateRoomRequest::CopyFrom(const CMsgR2HUpdateRoomRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgR2HUpdateRoomRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_roomserverinfo()) {
    if (!this->roomserverinfo().IsInitialized()) return false;
  }
  return true;
}

void CMsgR2HUpdateRoomRequest::Swap(CMsgR2HUpdateRoomRequest* other) {
  if (other != this) {
    std::swap(roomserverinfo_, other->roomserverinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgR2HUpdateRoomRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgR2HUpdateRoomRequest_descriptor_;
  metadata.reflection = CMsgR2HUpdateRoomRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgH2RUpdateRoomResponse_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgH2RUpdateRoomResponse_Msg_descriptor_;
}
bool CMsgH2RUpdateRoomResponse_Msg_IsValid(int value) {
  switch(value) {
    case 131076:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgH2RUpdateRoomResponse_Msg CMsgH2RUpdateRoomResponse::MsgID;
const CMsgH2RUpdateRoomResponse_Msg CMsgH2RUpdateRoomResponse::Msg_MIN;
const CMsgH2RUpdateRoomResponse_Msg CMsgH2RUpdateRoomResponse::Msg_MAX;
const int CMsgH2RUpdateRoomResponse::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgH2RUpdateRoomResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgH2RUpdateRoomResponse::CMsgH2RUpdateRoomResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgH2RUpdateRoomResponse::InitAsDefaultInstance() {
}

CMsgH2RUpdateRoomResponse::CMsgH2RUpdateRoomResponse(const CMsgH2RUpdateRoomResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgH2RUpdateRoomResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgH2RUpdateRoomResponse::~CMsgH2RUpdateRoomResponse() {
  SharedDtor();
}

void CMsgH2RUpdateRoomResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgH2RUpdateRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgH2RUpdateRoomResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgH2RUpdateRoomResponse_descriptor_;
}

const CMsgH2RUpdateRoomResponse& CMsgH2RUpdateRoomResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

CMsgH2RUpdateRoomResponse* CMsgH2RUpdateRoomResponse::default_instance_ = NULL;

CMsgH2RUpdateRoomResponse* CMsgH2RUpdateRoomResponse::New() const {
  return new CMsgH2RUpdateRoomResponse;
}

void CMsgH2RUpdateRoomResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgH2RUpdateRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgH2RUpdateRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgH2RUpdateRoomResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgH2RUpdateRoomResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgH2RUpdateRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgH2RUpdateRoomResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgH2RUpdateRoomResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgH2RUpdateRoomResponse::MergeFrom(const CMsgH2RUpdateRoomResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgH2RUpdateRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgH2RUpdateRoomResponse::CopyFrom(const CMsgH2RUpdateRoomResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgH2RUpdateRoomResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMsgH2RUpdateRoomResponse::Swap(CMsgH2RUpdateRoomResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgH2RUpdateRoomResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgH2RUpdateRoomResponse_descriptor_;
  metadata.reflection = CMsgH2RUpdateRoomResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgLoginRoomRequest_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLoginRoomRequest_Msg_descriptor_;
}
bool CMsgLoginRoomRequest_Msg_IsValid(int value) {
  switch(value) {
    case 131077:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgLoginRoomRequest_Msg CMsgLoginRoomRequest::MsgID;
const CMsgLoginRoomRequest_Msg CMsgLoginRoomRequest::Msg_MIN;
const CMsgLoginRoomRequest_Msg CMsgLoginRoomRequest::Msg_MAX;
const int CMsgLoginRoomRequest::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgLoginRoomRequest::kRoomTypeFieldNumber;
#endif  // !_MSC_VER

CMsgLoginRoomRequest::CMsgLoginRoomRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgLoginRoomRequest::InitAsDefaultInstance() {
}

CMsgLoginRoomRequest::CMsgLoginRoomRequest(const CMsgLoginRoomRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgLoginRoomRequest::SharedCtor() {
  _cached_size_ = 0;
  roomtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLoginRoomRequest::~CMsgLoginRoomRequest() {
  SharedDtor();
}

void CMsgLoginRoomRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgLoginRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLoginRoomRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLoginRoomRequest_descriptor_;
}

const CMsgLoginRoomRequest& CMsgLoginRoomRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

CMsgLoginRoomRequest* CMsgLoginRoomRequest::default_instance_ = NULL;

CMsgLoginRoomRequest* CMsgLoginRoomRequest::New() const {
  return new CMsgLoginRoomRequest;
}

void CMsgLoginRoomRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgLoginRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 RoomType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomtype_)));
          set_has_roomtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgLoginRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 RoomType = 1;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgLoginRoomRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 RoomType = 1;
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgLoginRoomRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 RoomType = 1;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLoginRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgLoginRoomRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgLoginRoomRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLoginRoomRequest::MergeFrom(const CMsgLoginRoomRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgLoginRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLoginRoomRequest::CopyFrom(const CMsgLoginRoomRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLoginRoomRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMsgLoginRoomRequest::Swap(CMsgLoginRoomRequest* other) {
  if (other != this) {
    std::swap(roomtype_, other->roomtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgLoginRoomRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLoginRoomRequest_descriptor_;
  metadata.reflection = CMsgLoginRoomRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgLoginRoomResponse_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLoginRoomResponse_Msg_descriptor_;
}
bool CMsgLoginRoomResponse_Msg_IsValid(int value) {
  switch(value) {
    case 131078:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgLoginRoomResponse_Msg CMsgLoginRoomResponse::MsgID;
const CMsgLoginRoomResponse_Msg CMsgLoginRoomResponse::Msg_MIN;
const CMsgLoginRoomResponse_Msg CMsgLoginRoomResponse::Msg_MAX;
const int CMsgLoginRoomResponse::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgLoginRoomResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgLoginRoomResponse::CMsgLoginRoomResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgLoginRoomResponse::InitAsDefaultInstance() {
}

CMsgLoginRoomResponse::CMsgLoginRoomResponse(const CMsgLoginRoomResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgLoginRoomResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLoginRoomResponse::~CMsgLoginRoomResponse() {
  SharedDtor();
}

void CMsgLoginRoomResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgLoginRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLoginRoomResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLoginRoomResponse_descriptor_;
}

const CMsgLoginRoomResponse& CMsgLoginRoomResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

CMsgLoginRoomResponse* CMsgLoginRoomResponse::default_instance_ = NULL;

CMsgLoginRoomResponse* CMsgLoginRoomResponse::New() const {
  return new CMsgLoginRoomResponse;
}

void CMsgLoginRoomResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgLoginRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgLoginRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgLoginRoomResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgLoginRoomResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLoginRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgLoginRoomResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgLoginRoomResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLoginRoomResponse::MergeFrom(const CMsgLoginRoomResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgLoginRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLoginRoomResponse::CopyFrom(const CMsgLoginRoomResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLoginRoomResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMsgLoginRoomResponse::Swap(CMsgLoginRoomResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgLoginRoomResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLoginRoomResponse_descriptor_;
  metadata.reflection = CMsgLoginRoomResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgH2RCreateRoomRequest_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgH2RCreateRoomRequest_Msg_descriptor_;
}
bool CMsgH2RCreateRoomRequest_Msg_IsValid(int value) {
  switch(value) {
    case 131079:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgH2RCreateRoomRequest_Msg CMsgH2RCreateRoomRequest::MsgID;
const CMsgH2RCreateRoomRequest_Msg CMsgH2RCreateRoomRequest::Msg_MIN;
const CMsgH2RCreateRoomRequest_Msg CMsgH2RCreateRoomRequest::Msg_MAX;
const int CMsgH2RCreateRoomRequest::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgH2RCreateRoomRequest::kRoomInfoFieldNumber;
const int CMsgH2RCreateRoomRequest::kConnectInfoFieldNumber;
#endif  // !_MSC_VER

CMsgH2RCreateRoomRequest::CMsgH2RCreateRoomRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgH2RCreateRoomRequest::InitAsDefaultInstance() {
  roominfo_ = const_cast< ::PBRoomInfo*>(&::PBRoomInfo::default_instance());
}

CMsgH2RCreateRoomRequest::CMsgH2RCreateRoomRequest(const CMsgH2RCreateRoomRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgH2RCreateRoomRequest::SharedCtor() {
  _cached_size_ = 0;
  roominfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgH2RCreateRoomRequest::~CMsgH2RCreateRoomRequest() {
  SharedDtor();
}

void CMsgH2RCreateRoomRequest::SharedDtor() {
  if (this != default_instance_) {
    delete roominfo_;
  }
}

void CMsgH2RCreateRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgH2RCreateRoomRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgH2RCreateRoomRequest_descriptor_;
}

const CMsgH2RCreateRoomRequest& CMsgH2RCreateRoomRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

CMsgH2RCreateRoomRequest* CMsgH2RCreateRoomRequest::default_instance_ = NULL;

CMsgH2RCreateRoomRequest* CMsgH2RCreateRoomRequest::New() const {
  return new CMsgH2RCreateRoomRequest;
}

void CMsgH2RCreateRoomRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roominfo()) {
      if (roominfo_ != NULL) roominfo_->::PBRoomInfo::Clear();
    }
  }
  connectinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgH2RCreateRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PBRoomInfo RoomInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roominfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ConnectInfo;
        break;
      }

      // repeated .PBConnectInfo ConnectInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ConnectInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_connectinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ConnectInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgH2RCreateRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PBRoomInfo RoomInfo = 1;
  if (has_roominfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roominfo(), output);
  }

  // repeated .PBConnectInfo ConnectInfo = 2;
  for (int i = 0; i < this->connectinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->connectinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgH2RCreateRoomRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PBRoomInfo RoomInfo = 1;
  if (has_roominfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roominfo(), target);
  }

  // repeated .PBConnectInfo ConnectInfo = 2;
  for (int i = 0; i < this->connectinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->connectinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgH2RCreateRoomRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PBRoomInfo RoomInfo = 1;
    if (has_roominfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roominfo());
    }

  }
  // repeated .PBConnectInfo ConnectInfo = 2;
  total_size += 1 * this->connectinfo_size();
  for (int i = 0; i < this->connectinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->connectinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgH2RCreateRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgH2RCreateRoomRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgH2RCreateRoomRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgH2RCreateRoomRequest::MergeFrom(const CMsgH2RCreateRoomRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  connectinfo_.MergeFrom(from.connectinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roominfo()) {
      mutable_roominfo()->::PBRoomInfo::MergeFrom(from.roominfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgH2RCreateRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgH2RCreateRoomRequest::CopyFrom(const CMsgH2RCreateRoomRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgH2RCreateRoomRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_roominfo()) {
    if (!this->roominfo().IsInitialized()) return false;
  }
  return true;
}

void CMsgH2RCreateRoomRequest::Swap(CMsgH2RCreateRoomRequest* other) {
  if (other != this) {
    std::swap(roominfo_, other->roominfo_);
    connectinfo_.Swap(&other->connectinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgH2RCreateRoomRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgH2RCreateRoomRequest_descriptor_;
  metadata.reflection = CMsgH2RCreateRoomRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgR2HCreateRoomResponse_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgR2HCreateRoomResponse_Msg_descriptor_;
}
bool CMsgR2HCreateRoomResponse_Msg_IsValid(int value) {
  switch(value) {
    case 131080:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgR2HCreateRoomResponse_Msg CMsgR2HCreateRoomResponse::MsgID;
const CMsgR2HCreateRoomResponse_Msg CMsgR2HCreateRoomResponse::Msg_MIN;
const CMsgR2HCreateRoomResponse_Msg CMsgR2HCreateRoomResponse::Msg_MAX;
const int CMsgR2HCreateRoomResponse::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgR2HCreateRoomResponse::kResultFieldNumber;
const int CMsgR2HCreateRoomResponse::kRoomServerInfoFieldNumber;
const int CMsgR2HCreateRoomResponse::kRoomInfoFieldNumber;
#endif  // !_MSC_VER

CMsgR2HCreateRoomResponse::CMsgR2HCreateRoomResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgR2HCreateRoomResponse::InitAsDefaultInstance() {
  roomserverinfo_ = const_cast< ::PBRoomServerInfo*>(&::PBRoomServerInfo::default_instance());
  roominfo_ = const_cast< ::PBRoomInfo*>(&::PBRoomInfo::default_instance());
}

CMsgR2HCreateRoomResponse::CMsgR2HCreateRoomResponse(const CMsgR2HCreateRoomResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgR2HCreateRoomResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  roomserverinfo_ = NULL;
  roominfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgR2HCreateRoomResponse::~CMsgR2HCreateRoomResponse() {
  SharedDtor();
}

void CMsgR2HCreateRoomResponse::SharedDtor() {
  if (this != default_instance_) {
    delete roomserverinfo_;
    delete roominfo_;
  }
}

void CMsgR2HCreateRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgR2HCreateRoomResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgR2HCreateRoomResponse_descriptor_;
}

const CMsgR2HCreateRoomResponse& CMsgR2HCreateRoomResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

CMsgR2HCreateRoomResponse* CMsgR2HCreateRoomResponse::default_instance_ = NULL;

CMsgR2HCreateRoomResponse* CMsgR2HCreateRoomResponse::New() const {
  return new CMsgR2HCreateRoomResponse;
}

void CMsgR2HCreateRoomResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_roomserverinfo()) {
      if (roomserverinfo_ != NULL) roomserverinfo_->::PBRoomServerInfo::Clear();
    }
    if (has_roominfo()) {
      if (roominfo_ != NULL) roominfo_->::PBRoomInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgR2HCreateRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RoomServerInfo;
        break;
      }

      // required .PBRoomServerInfo RoomServerInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoomServerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roomserverinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_RoomInfo;
        break;
      }

      // optional .PBRoomInfo RoomInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoomInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roominfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgR2HCreateRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required .PBRoomServerInfo RoomServerInfo = 2;
  if (has_roomserverinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->roomserverinfo(), output);
  }

  // optional .PBRoomInfo RoomInfo = 3;
  if (has_roominfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->roominfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgR2HCreateRoomResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required .PBRoomServerInfo RoomServerInfo = 2;
  if (has_roomserverinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->roomserverinfo(), target);
  }

  // optional .PBRoomInfo RoomInfo = 3;
  if (has_roominfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->roominfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgR2HCreateRoomResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required .PBRoomServerInfo RoomServerInfo = 2;
    if (has_roomserverinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roomserverinfo());
    }

    // optional .PBRoomInfo RoomInfo = 3;
    if (has_roominfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roominfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgR2HCreateRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgR2HCreateRoomResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgR2HCreateRoomResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgR2HCreateRoomResponse::MergeFrom(const CMsgR2HCreateRoomResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_roomserverinfo()) {
      mutable_roomserverinfo()->::PBRoomServerInfo::MergeFrom(from.roomserverinfo());
    }
    if (from.has_roominfo()) {
      mutable_roominfo()->::PBRoomInfo::MergeFrom(from.roominfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgR2HCreateRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgR2HCreateRoomResponse::CopyFrom(const CMsgR2HCreateRoomResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgR2HCreateRoomResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_roomserverinfo()) {
    if (!this->roomserverinfo().IsInitialized()) return false;
  }
  if (has_roominfo()) {
    if (!this->roominfo().IsInitialized()) return false;
  }
  return true;
}

void CMsgR2HCreateRoomResponse::Swap(CMsgR2HCreateRoomResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(roomserverinfo_, other->roomserverinfo_);
    std::swap(roominfo_, other->roominfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgR2HCreateRoomResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgR2HCreateRoomResponse_descriptor_;
  metadata.reflection = CMsgR2HCreateRoomResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgGoRoomResponse_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGoRoomResponse_Msg_descriptor_;
}
bool CMsgGoRoomResponse_Msg_IsValid(int value) {
  switch(value) {
    case 131081:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgGoRoomResponse_Msg CMsgGoRoomResponse::MsgID;
const CMsgGoRoomResponse_Msg CMsgGoRoomResponse::Msg_MIN;
const CMsgGoRoomResponse_Msg CMsgGoRoomResponse::Msg_MAX;
const int CMsgGoRoomResponse::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgGoRoomResponse::kRoomServerIDFieldNumber;
const int CMsgGoRoomResponse::kRoomIDFieldNumber;
const int CMsgGoRoomResponse::kGoRoomTypeFieldNumber;
const int CMsgGoRoomResponse::kRoomTypeFieldNumber;
#endif  // !_MSC_VER

CMsgGoRoomResponse::CMsgGoRoomResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGoRoomResponse::InitAsDefaultInstance() {
}

CMsgGoRoomResponse::CMsgGoRoomResponse(const CMsgGoRoomResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGoRoomResponse::SharedCtor() {
  _cached_size_ = 0;
  roomserverid_ = 0;
  roomid_ = 0;
  goroomtype_ = 0;
  roomtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGoRoomResponse::~CMsgGoRoomResponse() {
  SharedDtor();
}

void CMsgGoRoomResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGoRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGoRoomResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGoRoomResponse_descriptor_;
}

const CMsgGoRoomResponse& CMsgGoRoomResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

CMsgGoRoomResponse* CMsgGoRoomResponse::default_instance_ = NULL;

CMsgGoRoomResponse* CMsgGoRoomResponse::New() const {
  return new CMsgGoRoomResponse;
}

void CMsgGoRoomResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomserverid_ = 0;
    roomid_ = 0;
    goroomtype_ = 0;
    roomtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGoRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 RoomServerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomserverid_)));
          set_has_roomserverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RoomID;
        break;
      }

      // required int32 RoomID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoomID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_GoRoomType;
        break;
      }

      // required .EGoRoomType GoRoomType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GoRoomType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EGoRoomType_IsValid(value)) {
            set_goroomtype(static_cast< ::EGoRoomType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_RoomType;
        break;
      }

      // required .enRoomType RoomType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoomType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enRoomType_IsValid(value)) {
            set_roomtype(static_cast< ::enRoomType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGoRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 RoomServerID = 1;
  if (has_roomserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomserverid(), output);
  }

  // required int32 RoomID = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // required .EGoRoomType GoRoomType = 3;
  if (has_goroomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->goroomtype(), output);
  }

  // required .enRoomType RoomType = 4;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->roomtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGoRoomResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 RoomServerID = 1;
  if (has_roomserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomserverid(), target);
  }

  // required int32 RoomID = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // required .EGoRoomType GoRoomType = 3;
  if (has_goroomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->goroomtype(), target);
  }

  // required .enRoomType RoomType = 4;
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->roomtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGoRoomResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 RoomServerID = 1;
    if (has_roomserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomserverid());
    }

    // required int32 RoomID = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // required .EGoRoomType GoRoomType = 3;
    if (has_goroomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->goroomtype());
    }

    // required .enRoomType RoomType = 4;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->roomtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGoRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGoRoomResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGoRoomResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGoRoomResponse::MergeFrom(const CMsgGoRoomResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomserverid()) {
      set_roomserverid(from.roomserverid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_goroomtype()) {
      set_goroomtype(from.goroomtype());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGoRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGoRoomResponse::CopyFrom(const CMsgGoRoomResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGoRoomResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CMsgGoRoomResponse::Swap(CMsgGoRoomResponse* other) {
  if (other != this) {
    std::swap(roomserverid_, other->roomserverid_);
    std::swap(roomid_, other->roomid_);
    std::swap(goroomtype_, other->goroomtype_);
    std::swap(roomtype_, other->roomtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGoRoomResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGoRoomResponse_descriptor_;
  metadata.reflection = CMsgGoRoomResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgJoinGameRequest_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgJoinGameRequest_Msg_descriptor_;
}
bool CMsgJoinGameRequest_Msg_IsValid(int value) {
  switch(value) {
    case 16908298:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgJoinGameRequest_Msg CMsgJoinGameRequest::MsgID;
const CMsgJoinGameRequest_Msg CMsgJoinGameRequest::Msg_MIN;
const CMsgJoinGameRequest_Msg CMsgJoinGameRequest::Msg_MAX;
const int CMsgJoinGameRequest::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgJoinGameRequest::CMsgJoinGameRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgJoinGameRequest::InitAsDefaultInstance() {
}

CMsgJoinGameRequest::CMsgJoinGameRequest(const CMsgJoinGameRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgJoinGameRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgJoinGameRequest::~CMsgJoinGameRequest() {
  SharedDtor();
}

void CMsgJoinGameRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgJoinGameRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgJoinGameRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgJoinGameRequest_descriptor_;
}

const CMsgJoinGameRequest& CMsgJoinGameRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

CMsgJoinGameRequest* CMsgJoinGameRequest::default_instance_ = NULL;

CMsgJoinGameRequest* CMsgJoinGameRequest::New() const {
  return new CMsgJoinGameRequest;
}

void CMsgJoinGameRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgJoinGameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgJoinGameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgJoinGameRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgJoinGameRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgJoinGameRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgJoinGameRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgJoinGameRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgJoinGameRequest::MergeFrom(const CMsgJoinGameRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgJoinGameRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJoinGameRequest::CopyFrom(const CMsgJoinGameRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJoinGameRequest::IsInitialized() const {

  return true;
}

void CMsgJoinGameRequest::Swap(CMsgJoinGameRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgJoinGameRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgJoinGameRequest_descriptor_;
  metadata.reflection = CMsgJoinGameRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgJoinGameResponse_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgJoinGameResponse_Msg_descriptor_;
}
bool CMsgJoinGameResponse_Msg_IsValid(int value) {
  switch(value) {
    case 131083:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgJoinGameResponse_Msg CMsgJoinGameResponse::MsgID;
const CMsgJoinGameResponse_Msg CMsgJoinGameResponse::Msg_MIN;
const CMsgJoinGameResponse_Msg CMsgJoinGameResponse::Msg_MAX;
const int CMsgJoinGameResponse::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgJoinGameResponse::kResultFieldNumber;
const int CMsgJoinGameResponse::kGoRoomTypeFieldNumber;
const int CMsgJoinGameResponse::kRoleInfosFieldNumber;
const int CMsgJoinGameResponse::kRoomTypeFieldNumber;
#endif  // !_MSC_VER

CMsgJoinGameResponse::CMsgJoinGameResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgJoinGameResponse::InitAsDefaultInstance() {
}

CMsgJoinGameResponse::CMsgJoinGameResponse(const CMsgJoinGameResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgJoinGameResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  goroomtype_ = 0;
  roomtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgJoinGameResponse::~CMsgJoinGameResponse() {
  SharedDtor();
}

void CMsgJoinGameResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgJoinGameResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgJoinGameResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgJoinGameResponse_descriptor_;
}

const CMsgJoinGameResponse& CMsgJoinGameResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

CMsgJoinGameResponse* CMsgJoinGameResponse::default_instance_ = NULL;

CMsgJoinGameResponse* CMsgJoinGameResponse::New() const {
  return new CMsgJoinGameResponse;
}

void CMsgJoinGameResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    goroomtype_ = 0;
    roomtype_ = 0;
  }
  roleinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgJoinGameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GoRoomType;
        break;
      }

      // required .EGoRoomType GoRoomType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GoRoomType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EGoRoomType_IsValid(value)) {
            set_goroomtype(static_cast< ::EGoRoomType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_RoleInfos;
        break;
      }

      // repeated .PBRoleInfo RoleInfos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoleInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roleinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_RoleInfos;
        if (input->ExpectTag(32)) goto parse_RoomType;
        break;
      }

      // required .enRoomType RoomType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoomType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enRoomType_IsValid(value)) {
            set_roomtype(static_cast< ::enRoomType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgJoinGameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required .EGoRoomType GoRoomType = 2;
  if (has_goroomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->goroomtype(), output);
  }

  // repeated .PBRoleInfo RoleInfos = 3;
  for (int i = 0; i < this->roleinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->roleinfos(i), output);
  }

  // required .enRoomType RoomType = 4;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->roomtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgJoinGameResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required .EGoRoomType GoRoomType = 2;
  if (has_goroomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->goroomtype(), target);
  }

  // repeated .PBRoleInfo RoleInfos = 3;
  for (int i = 0; i < this->roleinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->roleinfos(i), target);
  }

  // required .enRoomType RoomType = 4;
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->roomtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgJoinGameResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required .EGoRoomType GoRoomType = 2;
    if (has_goroomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->goroomtype());
    }

    // required .enRoomType RoomType = 4;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->roomtype());
    }

  }
  // repeated .PBRoleInfo RoleInfos = 3;
  total_size += 1 * this->roleinfos_size();
  for (int i = 0; i < this->roleinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roleinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgJoinGameResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgJoinGameResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgJoinGameResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgJoinGameResponse::MergeFrom(const CMsgJoinGameResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleinfos_.MergeFrom(from.roleinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_goroomtype()) {
      set_goroomtype(from.goroomtype());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgJoinGameResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJoinGameResponse::CopyFrom(const CMsgJoinGameResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJoinGameResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  for (int i = 0; i < roleinfos_size(); i++) {
    if (!this->roleinfos(i).IsInitialized()) return false;
  }
  return true;
}

void CMsgJoinGameResponse::Swap(CMsgJoinGameResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(goroomtype_, other->goroomtype_);
    roleinfos_.Swap(&other->roleinfos_);
    std::swap(roomtype_, other->roomtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgJoinGameResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgJoinGameResponse_descriptor_;
  metadata.reflection = CMsgJoinGameResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgUpdateRoleInfoResponse_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgUpdateRoleInfoResponse_Msg_descriptor_;
}
bool CMsgUpdateRoleInfoResponse_Msg_IsValid(int value) {
  switch(value) {
    case 131086:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgUpdateRoleInfoResponse_Msg CMsgUpdateRoleInfoResponse::MsgID;
const CMsgUpdateRoleInfoResponse_Msg CMsgUpdateRoleInfoResponse::Msg_MIN;
const CMsgUpdateRoleInfoResponse_Msg CMsgUpdateRoleInfoResponse::Msg_MAX;
const int CMsgUpdateRoleInfoResponse::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgUpdateRoleInfoResponse::kRoleInfosFieldNumber;
#endif  // !_MSC_VER

CMsgUpdateRoleInfoResponse::CMsgUpdateRoleInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgUpdateRoleInfoResponse::InitAsDefaultInstance() {
}

CMsgUpdateRoleInfoResponse::CMsgUpdateRoleInfoResponse(const CMsgUpdateRoleInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgUpdateRoleInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgUpdateRoleInfoResponse::~CMsgUpdateRoleInfoResponse() {
  SharedDtor();
}

void CMsgUpdateRoleInfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgUpdateRoleInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgUpdateRoleInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgUpdateRoleInfoResponse_descriptor_;
}

const CMsgUpdateRoleInfoResponse& CMsgUpdateRoleInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

CMsgUpdateRoleInfoResponse* CMsgUpdateRoleInfoResponse::default_instance_ = NULL;

CMsgUpdateRoleInfoResponse* CMsgUpdateRoleInfoResponse::New() const {
  return new CMsgUpdateRoleInfoResponse;
}

void CMsgUpdateRoleInfoResponse::Clear() {
  roleinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgUpdateRoleInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBRoleInfo RoleInfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoleInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roleinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_RoleInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgUpdateRoleInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBRoleInfo RoleInfos = 1;
  for (int i = 0; i < this->roleinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roleinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgUpdateRoleInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBRoleInfo RoleInfos = 1;
  for (int i = 0; i < this->roleinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roleinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgUpdateRoleInfoResponse::ByteSize() const {
  int total_size = 0;

  // repeated .PBRoleInfo RoleInfos = 1;
  total_size += 1 * this->roleinfos_size();
  for (int i = 0; i < this->roleinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roleinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgUpdateRoleInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgUpdateRoleInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgUpdateRoleInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgUpdateRoleInfoResponse::MergeFrom(const CMsgUpdateRoleInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleinfos_.MergeFrom(from.roleinfos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgUpdateRoleInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgUpdateRoleInfoResponse::CopyFrom(const CMsgUpdateRoleInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgUpdateRoleInfoResponse::IsInitialized() const {

  for (int i = 0; i < roleinfos_size(); i++) {
    if (!this->roleinfos(i).IsInitialized()) return false;
  }
  return true;
}

void CMsgUpdateRoleInfoResponse::Swap(CMsgUpdateRoleInfoResponse* other) {
  if (other != this) {
    roleinfos_.Swap(&other->roleinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgUpdateRoleInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgUpdateRoleInfoResponse_descriptor_;
  metadata.reflection = CMsgUpdateRoleInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgLeaveRoomRequest_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLeaveRoomRequest_Msg_descriptor_;
}
bool CMsgLeaveRoomRequest_Msg_IsValid(int value) {
  switch(value) {
    case 16908303:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgLeaveRoomRequest_Msg CMsgLeaveRoomRequest::MsgID;
const CMsgLeaveRoomRequest_Msg CMsgLeaveRoomRequest::Msg_MIN;
const CMsgLeaveRoomRequest_Msg CMsgLeaveRoomRequest::Msg_MAX;
const int CMsgLeaveRoomRequest::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgLeaveRoomRequest::kLeavetypeFieldNumber;
#endif  // !_MSC_VER

CMsgLeaveRoomRequest::CMsgLeaveRoomRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgLeaveRoomRequest::InitAsDefaultInstance() {
}

CMsgLeaveRoomRequest::CMsgLeaveRoomRequest(const CMsgLeaveRoomRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgLeaveRoomRequest::SharedCtor() {
  _cached_size_ = 0;
  leavetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLeaveRoomRequest::~CMsgLeaveRoomRequest() {
  SharedDtor();
}

void CMsgLeaveRoomRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgLeaveRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLeaveRoomRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLeaveRoomRequest_descriptor_;
}

const CMsgLeaveRoomRequest& CMsgLeaveRoomRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

CMsgLeaveRoomRequest* CMsgLeaveRoomRequest::default_instance_ = NULL;

CMsgLeaveRoomRequest* CMsgLeaveRoomRequest::New() const {
  return new CMsgLeaveRoomRequest;
}

void CMsgLeaveRoomRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    leavetype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgLeaveRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ELeaveRoomType leavetype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ELeaveRoomType_IsValid(value)) {
            set_leavetype(static_cast< ::ELeaveRoomType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgLeaveRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ELeaveRoomType leavetype = 1;
  if (has_leavetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->leavetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgLeaveRoomRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ELeaveRoomType leavetype = 1;
  if (has_leavetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->leavetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgLeaveRoomRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ELeaveRoomType leavetype = 1;
    if (has_leavetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->leavetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLeaveRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgLeaveRoomRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgLeaveRoomRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLeaveRoomRequest::MergeFrom(const CMsgLeaveRoomRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leavetype()) {
      set_leavetype(from.leavetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgLeaveRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLeaveRoomRequest::CopyFrom(const CMsgLeaveRoomRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLeaveRoomRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMsgLeaveRoomRequest::Swap(CMsgLeaveRoomRequest* other) {
  if (other != this) {
    std::swap(leavetype_, other->leavetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgLeaveRoomRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLeaveRoomRequest_descriptor_;
  metadata.reflection = CMsgLeaveRoomRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgR2HLeaveRoomResponse_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgR2HLeaveRoomResponse_Msg_descriptor_;
}
bool CMsgR2HLeaveRoomResponse_Msg_IsValid(int value) {
  switch(value) {
    case 131088:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgR2HLeaveRoomResponse_Msg CMsgR2HLeaveRoomResponse::MsgID;
const CMsgR2HLeaveRoomResponse_Msg CMsgR2HLeaveRoomResponse::Msg_MIN;
const CMsgR2HLeaveRoomResponse_Msg CMsgR2HLeaveRoomResponse::Msg_MAX;
const int CMsgR2HLeaveRoomResponse::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgR2HLeaveRoomResponse::kRoleidFieldNumber;
const int CMsgR2HLeaveRoomResponse::kLeavetypeFieldNumber;
const int CMsgR2HLeaveRoomResponse::kRoomtypeFieldNumber;
#endif  // !_MSC_VER

CMsgR2HLeaveRoomResponse::CMsgR2HLeaveRoomResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgR2HLeaveRoomResponse::InitAsDefaultInstance() {
}

CMsgR2HLeaveRoomResponse::CMsgR2HLeaveRoomResponse(const CMsgR2HLeaveRoomResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgR2HLeaveRoomResponse::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_LONGLONG(0);
  leavetype_ = 0;
  roomtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgR2HLeaveRoomResponse::~CMsgR2HLeaveRoomResponse() {
  SharedDtor();
}

void CMsgR2HLeaveRoomResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgR2HLeaveRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgR2HLeaveRoomResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgR2HLeaveRoomResponse_descriptor_;
}

const CMsgR2HLeaveRoomResponse& CMsgR2HLeaveRoomResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

CMsgR2HLeaveRoomResponse* CMsgR2HLeaveRoomResponse::default_instance_ = NULL;

CMsgR2HLeaveRoomResponse* CMsgR2HLeaveRoomResponse::New() const {
  return new CMsgR2HLeaveRoomResponse;
}

void CMsgR2HLeaveRoomResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_LONGLONG(0);
    leavetype_ = 0;
    roomtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgR2HLeaveRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_leavetype;
        break;
      }

      // required .ELeaveRoomType leavetype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leavetype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ELeaveRoomType_IsValid(value)) {
            set_leavetype(static_cast< ::ELeaveRoomType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roomtype;
        break;
      }

      // required .enRoomType roomtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enRoomType_IsValid(value)) {
            set_roomtype(static_cast< ::enRoomType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgR2HLeaveRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleid(), output);
  }

  // required .ELeaveRoomType leavetype = 2;
  if (has_leavetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->leavetype(), output);
  }

  // required .enRoomType roomtype = 3;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->roomtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgR2HLeaveRoomResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleid(), target);
  }

  // required .ELeaveRoomType leavetype = 2;
  if (has_leavetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->leavetype(), target);
  }

  // required .enRoomType roomtype = 3;
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->roomtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgR2HLeaveRoomResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleid());
    }

    // required .ELeaveRoomType leavetype = 2;
    if (has_leavetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->leavetype());
    }

    // required .enRoomType roomtype = 3;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->roomtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgR2HLeaveRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgR2HLeaveRoomResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgR2HLeaveRoomResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgR2HLeaveRoomResponse::MergeFrom(const CMsgR2HLeaveRoomResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_leavetype()) {
      set_leavetype(from.leavetype());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgR2HLeaveRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgR2HLeaveRoomResponse::CopyFrom(const CMsgR2HLeaveRoomResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgR2HLeaveRoomResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CMsgR2HLeaveRoomResponse::Swap(CMsgR2HLeaveRoomResponse* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(leavetype_, other->leavetype_);
    std::swap(roomtype_, other->roomtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgR2HLeaveRoomResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgR2HLeaveRoomResponse_descriptor_;
  metadata.reflection = CMsgR2HLeaveRoomResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgR2HUpdateRoleDataResponse_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgR2HUpdateRoleDataResponse_Msg_descriptor_;
}
bool CMsgR2HUpdateRoleDataResponse_Msg_IsValid(int value) {
  switch(value) {
    case 131089:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgR2HUpdateRoleDataResponse_Msg CMsgR2HUpdateRoleDataResponse::MsgID;
const CMsgR2HUpdateRoleDataResponse_Msg CMsgR2HUpdateRoleDataResponse::Msg_MIN;
const CMsgR2HUpdateRoleDataResponse_Msg CMsgR2HUpdateRoleDataResponse::Msg_MAX;
const int CMsgR2HUpdateRoleDataResponse::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgR2HUpdateRoleDataResponse::kRoleidFieldNumber;
const int CMsgR2HUpdateRoleDataResponse::kGoldFieldNumber;
#endif  // !_MSC_VER

CMsgR2HUpdateRoleDataResponse::CMsgR2HUpdateRoleDataResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgR2HUpdateRoleDataResponse::InitAsDefaultInstance() {
}

CMsgR2HUpdateRoleDataResponse::CMsgR2HUpdateRoleDataResponse(const CMsgR2HUpdateRoleDataResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgR2HUpdateRoleDataResponse::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_LONGLONG(0);
  gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgR2HUpdateRoleDataResponse::~CMsgR2HUpdateRoleDataResponse() {
  SharedDtor();
}

void CMsgR2HUpdateRoleDataResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgR2HUpdateRoleDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgR2HUpdateRoleDataResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgR2HUpdateRoleDataResponse_descriptor_;
}

const CMsgR2HUpdateRoleDataResponse& CMsgR2HUpdateRoleDataResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

CMsgR2HUpdateRoleDataResponse* CMsgR2HUpdateRoleDataResponse::default_instance_ = NULL;

CMsgR2HUpdateRoleDataResponse* CMsgR2HUpdateRoleDataResponse::New() const {
  return new CMsgR2HUpdateRoleDataResponse;
}

void CMsgR2HUpdateRoleDataResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_LONGLONG(0);
    gold_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgR2HUpdateRoleDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }

      // required int64 gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgR2HUpdateRoleDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleid(), output);
  }

  // required int64 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgR2HUpdateRoleDataResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleid(), target);
  }

  // required int64 gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgR2HUpdateRoleDataResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleid());
    }

    // required int64 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgR2HUpdateRoleDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgR2HUpdateRoleDataResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgR2HUpdateRoleDataResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgR2HUpdateRoleDataResponse::MergeFrom(const CMsgR2HUpdateRoleDataResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgR2HUpdateRoleDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgR2HUpdateRoleDataResponse::CopyFrom(const CMsgR2HUpdateRoleDataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgR2HUpdateRoleDataResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMsgR2HUpdateRoleDataResponse::Swap(CMsgR2HUpdateRoleDataResponse* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(gold_, other->gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgR2HUpdateRoleDataResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgR2HUpdateRoleDataResponse_descriptor_;
  metadata.reflection = CMsgR2HUpdateRoleDataResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgLucky28ShotRequest_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLucky28ShotRequest_Msg_descriptor_;
}
bool CMsgLucky28ShotRequest_Msg_IsValid(int value) {
  switch(value) {
    case 16908306:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgLucky28ShotRequest_Msg CMsgLucky28ShotRequest::MsgID;
const CMsgLucky28ShotRequest_Msg CMsgLucky28ShotRequest::Msg_MIN;
const CMsgLucky28ShotRequest_Msg CMsgLucky28ShotRequest::Msg_MAX;
const int CMsgLucky28ShotRequest::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgLucky28ShotRequest::kShottypeFieldNumber;
const int CMsgLucky28ShotRequest::kBettypeFieldNumber;
#endif  // !_MSC_VER

CMsgLucky28ShotRequest::CMsgLucky28ShotRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgLucky28ShotRequest::InitAsDefaultInstance() {
}

CMsgLucky28ShotRequest::CMsgLucky28ShotRequest(const CMsgLucky28ShotRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgLucky28ShotRequest::SharedCtor() {
  _cached_size_ = 0;
  shottype_ = 1;
  bettype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLucky28ShotRequest::~CMsgLucky28ShotRequest() {
  SharedDtor();
}

void CMsgLucky28ShotRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgLucky28ShotRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLucky28ShotRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLucky28ShotRequest_descriptor_;
}

const CMsgLucky28ShotRequest& CMsgLucky28ShotRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

CMsgLucky28ShotRequest* CMsgLucky28ShotRequest::default_instance_ = NULL;

CMsgLucky28ShotRequest* CMsgLucky28ShotRequest::New() const {
  return new CMsgLucky28ShotRequest;
}

void CMsgLucky28ShotRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shottype_ = 1;
    bettype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgLucky28ShotRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .eLucky28ShotType shottype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::eLucky28ShotType_IsValid(value)) {
            set_shottype(static_cast< ::eLucky28ShotType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bettype;
        break;
      }

      // required .eLucky28BetType bettype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bettype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::eLucky28BetType_IsValid(value)) {
            set_bettype(static_cast< ::eLucky28BetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgLucky28ShotRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .eLucky28ShotType shottype = 1;
  if (has_shottype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->shottype(), output);
  }

  // required .eLucky28BetType bettype = 2;
  if (has_bettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->bettype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgLucky28ShotRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .eLucky28ShotType shottype = 1;
  if (has_shottype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->shottype(), target);
  }

  // required .eLucky28BetType bettype = 2;
  if (has_bettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->bettype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgLucky28ShotRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .eLucky28ShotType shottype = 1;
    if (has_shottype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->shottype());
    }

    // required .eLucky28BetType bettype = 2;
    if (has_bettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bettype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLucky28ShotRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgLucky28ShotRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgLucky28ShotRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLucky28ShotRequest::MergeFrom(const CMsgLucky28ShotRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shottype()) {
      set_shottype(from.shottype());
    }
    if (from.has_bettype()) {
      set_bettype(from.bettype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgLucky28ShotRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLucky28ShotRequest::CopyFrom(const CMsgLucky28ShotRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLucky28ShotRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMsgLucky28ShotRequest::Swap(CMsgLucky28ShotRequest* other) {
  if (other != this) {
    std::swap(shottype_, other->shottype_);
    std::swap(bettype_, other->bettype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgLucky28ShotRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLucky28ShotRequest_descriptor_;
  metadata.reflection = CMsgLucky28ShotRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgLucky28PrepareResponse_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLucky28PrepareResponse_Msg_descriptor_;
}
bool CMsgLucky28PrepareResponse_Msg_IsValid(int value) {
  switch(value) {
    case 131091:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgLucky28PrepareResponse_Msg CMsgLucky28PrepareResponse::MsgID;
const CMsgLucky28PrepareResponse_Msg CMsgLucky28PrepareResponse::Msg_MIN;
const CMsgLucky28PrepareResponse_Msg CMsgLucky28PrepareResponse::Msg_MAX;
const int CMsgLucky28PrepareResponse::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgLucky28PrepareResponse::CMsgLucky28PrepareResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgLucky28PrepareResponse::InitAsDefaultInstance() {
}

CMsgLucky28PrepareResponse::CMsgLucky28PrepareResponse(const CMsgLucky28PrepareResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgLucky28PrepareResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLucky28PrepareResponse::~CMsgLucky28PrepareResponse() {
  SharedDtor();
}

void CMsgLucky28PrepareResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgLucky28PrepareResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLucky28PrepareResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLucky28PrepareResponse_descriptor_;
}

const CMsgLucky28PrepareResponse& CMsgLucky28PrepareResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

CMsgLucky28PrepareResponse* CMsgLucky28PrepareResponse::default_instance_ = NULL;

CMsgLucky28PrepareResponse* CMsgLucky28PrepareResponse::New() const {
  return new CMsgLucky28PrepareResponse;
}

void CMsgLucky28PrepareResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgLucky28PrepareResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgLucky28PrepareResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgLucky28PrepareResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgLucky28PrepareResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLucky28PrepareResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgLucky28PrepareResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgLucky28PrepareResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLucky28PrepareResponse::MergeFrom(const CMsgLucky28PrepareResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgLucky28PrepareResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLucky28PrepareResponse::CopyFrom(const CMsgLucky28PrepareResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLucky28PrepareResponse::IsInitialized() const {

  return true;
}

void CMsgLucky28PrepareResponse::Swap(CMsgLucky28PrepareResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgLucky28PrepareResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLucky28PrepareResponse_descriptor_;
  metadata.reflection = CMsgLucky28PrepareResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgLucky28StartResponse_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLucky28StartResponse_Msg_descriptor_;
}
bool CMsgLucky28StartResponse_Msg_IsValid(int value) {
  switch(value) {
    case 131092:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgLucky28StartResponse_Msg CMsgLucky28StartResponse::MsgID;
const CMsgLucky28StartResponse_Msg CMsgLucky28StartResponse::Msg_MIN;
const CMsgLucky28StartResponse_Msg CMsgLucky28StartResponse::Msg_MAX;
const int CMsgLucky28StartResponse::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgLucky28StartResponse::kRoundinfoFieldNumber;
#endif  // !_MSC_VER

CMsgLucky28StartResponse::CMsgLucky28StartResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgLucky28StartResponse::InitAsDefaultInstance() {
  roundinfo_ = const_cast< ::PBLucky28RoundInfo*>(&::PBLucky28RoundInfo::default_instance());
}

CMsgLucky28StartResponse::CMsgLucky28StartResponse(const CMsgLucky28StartResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgLucky28StartResponse::SharedCtor() {
  _cached_size_ = 0;
  roundinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLucky28StartResponse::~CMsgLucky28StartResponse() {
  SharedDtor();
}

void CMsgLucky28StartResponse::SharedDtor() {
  if (this != default_instance_) {
    delete roundinfo_;
  }
}

void CMsgLucky28StartResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLucky28StartResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLucky28StartResponse_descriptor_;
}

const CMsgLucky28StartResponse& CMsgLucky28StartResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

CMsgLucky28StartResponse* CMsgLucky28StartResponse::default_instance_ = NULL;

CMsgLucky28StartResponse* CMsgLucky28StartResponse::New() const {
  return new CMsgLucky28StartResponse;
}

void CMsgLucky28StartResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roundinfo()) {
      if (roundinfo_ != NULL) roundinfo_->::PBLucky28RoundInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgLucky28StartResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PBLucky28RoundInfo roundinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roundinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgLucky28StartResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PBLucky28RoundInfo roundinfo = 1;
  if (has_roundinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roundinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgLucky28StartResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PBLucky28RoundInfo roundinfo = 1;
  if (has_roundinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roundinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgLucky28StartResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PBLucky28RoundInfo roundinfo = 1;
    if (has_roundinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roundinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLucky28StartResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgLucky28StartResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgLucky28StartResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLucky28StartResponse::MergeFrom(const CMsgLucky28StartResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roundinfo()) {
      mutable_roundinfo()->::PBLucky28RoundInfo::MergeFrom(from.roundinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgLucky28StartResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLucky28StartResponse::CopyFrom(const CMsgLucky28StartResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLucky28StartResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_roundinfo()) {
    if (!this->roundinfo().IsInitialized()) return false;
  }
  return true;
}

void CMsgLucky28StartResponse::Swap(CMsgLucky28StartResponse* other) {
  if (other != this) {
    std::swap(roundinfo_, other->roundinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgLucky28StartResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLucky28StartResponse_descriptor_;
  metadata.reflection = CMsgLucky28StartResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgLucky28EndResponse_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLucky28EndResponse_Msg_descriptor_;
}
bool CMsgLucky28EndResponse_Msg_IsValid(int value) {
  switch(value) {
    case 131093:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgLucky28EndResponse_Msg CMsgLucky28EndResponse::MsgID;
const CMsgLucky28EndResponse_Msg CMsgLucky28EndResponse::Msg_MIN;
const CMsgLucky28EndResponse_Msg CMsgLucky28EndResponse::Msg_MAX;
const int CMsgLucky28EndResponse::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgLucky28EndResponse::kResultsFieldNumber;
#endif  // !_MSC_VER

CMsgLucky28EndResponse::CMsgLucky28EndResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgLucky28EndResponse::InitAsDefaultInstance() {
}

CMsgLucky28EndResponse::CMsgLucky28EndResponse(const CMsgLucky28EndResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgLucky28EndResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLucky28EndResponse::~CMsgLucky28EndResponse() {
  SharedDtor();
}

void CMsgLucky28EndResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgLucky28EndResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLucky28EndResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLucky28EndResponse_descriptor_;
}

const CMsgLucky28EndResponse& CMsgLucky28EndResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

CMsgLucky28EndResponse* CMsgLucky28EndResponse::default_instance_ = NULL;

CMsgLucky28EndResponse* CMsgLucky28EndResponse::New() const {
  return new CMsgLucky28EndResponse;
}

void CMsgLucky28EndResponse::Clear() {
  results_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgLucky28EndResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBLuckey28EndGame results = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_results;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgLucky28EndResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBLuckey28EndGame results = 1;
  for (int i = 0; i < this->results_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->results(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgLucky28EndResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBLuckey28EndGame results = 1;
  for (int i = 0; i < this->results_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->results(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgLucky28EndResponse::ByteSize() const {
  int total_size = 0;

  // repeated .PBLuckey28EndGame results = 1;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLucky28EndResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgLucky28EndResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgLucky28EndResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLucky28EndResponse::MergeFrom(const CMsgLucky28EndResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  results_.MergeFrom(from.results_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgLucky28EndResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLucky28EndResponse::CopyFrom(const CMsgLucky28EndResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLucky28EndResponse::IsInitialized() const {

  for (int i = 0; i < results_size(); i++) {
    if (!this->results(i).IsInitialized()) return false;
  }
  return true;
}

void CMsgLucky28EndResponse::Swap(CMsgLucky28EndResponse* other) {
  if (other != this) {
    results_.Swap(&other->results_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgLucky28EndResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLucky28EndResponse_descriptor_;
  metadata.reflection = CMsgLucky28EndResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgLucky28ShotRoleResponse_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLucky28ShotRoleResponse_Msg_descriptor_;
}
bool CMsgLucky28ShotRoleResponse_Msg_IsValid(int value) {
  switch(value) {
    case 131094:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgLucky28ShotRoleResponse_Msg CMsgLucky28ShotRoleResponse::MsgID;
const CMsgLucky28ShotRoleResponse_Msg CMsgLucky28ShotRoleResponse::Msg_MIN;
const CMsgLucky28ShotRoleResponse_Msg CMsgLucky28ShotRoleResponse::Msg_MAX;
const int CMsgLucky28ShotRoleResponse::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgLucky28ShotRoleResponse::kShotroleidFieldNumber;
const int CMsgLucky28ShotRoleResponse::kRoundnumFieldNumber;
#endif  // !_MSC_VER

CMsgLucky28ShotRoleResponse::CMsgLucky28ShotRoleResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgLucky28ShotRoleResponse::InitAsDefaultInstance() {
}

CMsgLucky28ShotRoleResponse::CMsgLucky28ShotRoleResponse(const CMsgLucky28ShotRoleResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgLucky28ShotRoleResponse::SharedCtor() {
  _cached_size_ = 0;
  shotroleid_ = GOOGLE_LONGLONG(0);
  roundnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLucky28ShotRoleResponse::~CMsgLucky28ShotRoleResponse() {
  SharedDtor();
}

void CMsgLucky28ShotRoleResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgLucky28ShotRoleResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLucky28ShotRoleResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLucky28ShotRoleResponse_descriptor_;
}

const CMsgLucky28ShotRoleResponse& CMsgLucky28ShotRoleResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

CMsgLucky28ShotRoleResponse* CMsgLucky28ShotRoleResponse::default_instance_ = NULL;

CMsgLucky28ShotRoleResponse* CMsgLucky28ShotRoleResponse::New() const {
  return new CMsgLucky28ShotRoleResponse;
}

void CMsgLucky28ShotRoleResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shotroleid_ = GOOGLE_LONGLONG(0);
    roundnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgLucky28ShotRoleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 shotroleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &shotroleid_)));
          set_has_shotroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roundnum;
        break;
      }

      // required int32 roundnum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roundnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roundnum_)));
          set_has_roundnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgLucky28ShotRoleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 shotroleid = 1;
  if (has_shotroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->shotroleid(), output);
  }

  // required int32 roundnum = 2;
  if (has_roundnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roundnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgLucky28ShotRoleResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 shotroleid = 1;
  if (has_shotroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->shotroleid(), target);
  }

  // required int32 roundnum = 2;
  if (has_roundnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roundnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgLucky28ShotRoleResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 shotroleid = 1;
    if (has_shotroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->shotroleid());
    }

    // required int32 roundnum = 2;
    if (has_roundnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roundnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLucky28ShotRoleResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgLucky28ShotRoleResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgLucky28ShotRoleResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLucky28ShotRoleResponse::MergeFrom(const CMsgLucky28ShotRoleResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shotroleid()) {
      set_shotroleid(from.shotroleid());
    }
    if (from.has_roundnum()) {
      set_roundnum(from.roundnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgLucky28ShotRoleResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLucky28ShotRoleResponse::CopyFrom(const CMsgLucky28ShotRoleResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLucky28ShotRoleResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMsgLucky28ShotRoleResponse::Swap(CMsgLucky28ShotRoleResponse* other) {
  if (other != this) {
    std::swap(shotroleid_, other->shotroleid_);
    std::swap(roundnum_, other->roundnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgLucky28ShotRoleResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLucky28ShotRoleResponse_descriptor_;
  metadata.reflection = CMsgLucky28ShotRoleResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgLucky28ShotResultResponse_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLucky28ShotResultResponse_Msg_descriptor_;
}
bool CMsgLucky28ShotResultResponse_Msg_IsValid(int value) {
  switch(value) {
    case 131095:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgLucky28ShotResultResponse_Msg CMsgLucky28ShotResultResponse::MsgID;
const CMsgLucky28ShotResultResponse_Msg CMsgLucky28ShotResultResponse::Msg_MIN;
const CMsgLucky28ShotResultResponse_Msg CMsgLucky28ShotResultResponse::Msg_MAX;
const int CMsgLucky28ShotResultResponse::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgLucky28ShotResultResponse::kShotroleidFieldNumber;
const int CMsgLucky28ShotResultResponse::kGetballFieldNumber;
const int CMsgLucky28ShotResultResponse::kShottypeFieldNumber;
const int CMsgLucky28ShotResultResponse::kBettypeFieldNumber;
const int CMsgLucky28ShotResultResponse::kRoundinfoFieldNumber;
#endif  // !_MSC_VER

CMsgLucky28ShotResultResponse::CMsgLucky28ShotResultResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgLucky28ShotResultResponse::InitAsDefaultInstance() {
  roundinfo_ = const_cast< ::PBLucky28RoundInfo*>(&::PBLucky28RoundInfo::default_instance());
}

CMsgLucky28ShotResultResponse::CMsgLucky28ShotResultResponse(const CMsgLucky28ShotResultResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgLucky28ShotResultResponse::SharedCtor() {
  _cached_size_ = 0;
  shotroleid_ = GOOGLE_LONGLONG(0);
  getball_ = 0;
  shottype_ = 1;
  bettype_ = 0;
  roundinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLucky28ShotResultResponse::~CMsgLucky28ShotResultResponse() {
  SharedDtor();
}

void CMsgLucky28ShotResultResponse::SharedDtor() {
  if (this != default_instance_) {
    delete roundinfo_;
  }
}

void CMsgLucky28ShotResultResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLucky28ShotResultResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLucky28ShotResultResponse_descriptor_;
}

const CMsgLucky28ShotResultResponse& CMsgLucky28ShotResultResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

CMsgLucky28ShotResultResponse* CMsgLucky28ShotResultResponse::default_instance_ = NULL;

CMsgLucky28ShotResultResponse* CMsgLucky28ShotResultResponse::New() const {
  return new CMsgLucky28ShotResultResponse;
}

void CMsgLucky28ShotResultResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shotroleid_ = GOOGLE_LONGLONG(0);
    getball_ = 0;
    shottype_ = 1;
    bettype_ = 0;
    if (has_roundinfo()) {
      if (roundinfo_ != NULL) roundinfo_->::PBLucky28RoundInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgLucky28ShotResultResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 shotroleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &shotroleid_)));
          set_has_shotroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_getball;
        break;
      }

      // required int32 getball = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getball:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &getball_)));
          set_has_getball();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_shottype;
        break;
      }

      // required .eLucky28ShotType shottype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shottype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::eLucky28ShotType_IsValid(value)) {
            set_shottype(static_cast< ::eLucky28ShotType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bettype;
        break;
      }

      // required .eLucky28BetType bettype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bettype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::eLucky28BetType_IsValid(value)) {
            set_bettype(static_cast< ::eLucky28BetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_roundinfo;
        break;
      }

      // required .PBLucky28RoundInfo roundinfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roundinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roundinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgLucky28ShotResultResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 shotroleid = 1;
  if (has_shotroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->shotroleid(), output);
  }

  // required int32 getball = 2;
  if (has_getball()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->getball(), output);
  }

  // required .eLucky28ShotType shottype = 3;
  if (has_shottype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->shottype(), output);
  }

  // required .eLucky28BetType bettype = 4;
  if (has_bettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->bettype(), output);
  }

  // required .PBLucky28RoundInfo roundinfo = 5;
  if (has_roundinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->roundinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgLucky28ShotResultResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 shotroleid = 1;
  if (has_shotroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->shotroleid(), target);
  }

  // required int32 getball = 2;
  if (has_getball()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->getball(), target);
  }

  // required .eLucky28ShotType shottype = 3;
  if (has_shottype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->shottype(), target);
  }

  // required .eLucky28BetType bettype = 4;
  if (has_bettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->bettype(), target);
  }

  // required .PBLucky28RoundInfo roundinfo = 5;
  if (has_roundinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->roundinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgLucky28ShotResultResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 shotroleid = 1;
    if (has_shotroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->shotroleid());
    }

    // required int32 getball = 2;
    if (has_getball()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->getball());
    }

    // required .eLucky28ShotType shottype = 3;
    if (has_shottype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->shottype());
    }

    // required .eLucky28BetType bettype = 4;
    if (has_bettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bettype());
    }

    // required .PBLucky28RoundInfo roundinfo = 5;
    if (has_roundinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roundinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLucky28ShotResultResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgLucky28ShotResultResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgLucky28ShotResultResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLucky28ShotResultResponse::MergeFrom(const CMsgLucky28ShotResultResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shotroleid()) {
      set_shotroleid(from.shotroleid());
    }
    if (from.has_getball()) {
      set_getball(from.getball());
    }
    if (from.has_shottype()) {
      set_shottype(from.shottype());
    }
    if (from.has_bettype()) {
      set_bettype(from.bettype());
    }
    if (from.has_roundinfo()) {
      mutable_roundinfo()->::PBLucky28RoundInfo::MergeFrom(from.roundinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgLucky28ShotResultResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLucky28ShotResultResponse::CopyFrom(const CMsgLucky28ShotResultResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLucky28ShotResultResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_roundinfo()) {
    if (!this->roundinfo().IsInitialized()) return false;
  }
  return true;
}

void CMsgLucky28ShotResultResponse::Swap(CMsgLucky28ShotResultResponse* other) {
  if (other != this) {
    std::swap(shotroleid_, other->shotroleid_);
    std::swap(getball_, other->getball_);
    std::swap(shottype_, other->shottype_);
    std::swap(bettype_, other->bettype_);
    std::swap(roundinfo_, other->roundinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgLucky28ShotResultResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLucky28ShotResultResponse_descriptor_;
  metadata.reflection = CMsgLucky28ShotResultResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsg8BallStartGameRequest_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg8BallStartGameRequest_Msg_descriptor_;
}
bool CMsg8BallStartGameRequest_Msg_IsValid(int value) {
  switch(value) {
    case 16908312:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsg8BallStartGameRequest_Msg CMsg8BallStartGameRequest::MsgID;
const CMsg8BallStartGameRequest_Msg CMsg8BallStartGameRequest::Msg_MIN;
const CMsg8BallStartGameRequest_Msg CMsg8BallStartGameRequest::Msg_MAX;
const int CMsg8BallStartGameRequest::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsg8BallStartGameRequest::CMsg8BallStartGameRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsg8BallStartGameRequest::InitAsDefaultInstance() {
}

CMsg8BallStartGameRequest::CMsg8BallStartGameRequest(const CMsg8BallStartGameRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsg8BallStartGameRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsg8BallStartGameRequest::~CMsg8BallStartGameRequest() {
  SharedDtor();
}

void CMsg8BallStartGameRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsg8BallStartGameRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsg8BallStartGameRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg8BallStartGameRequest_descriptor_;
}

const CMsg8BallStartGameRequest& CMsg8BallStartGameRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

CMsg8BallStartGameRequest* CMsg8BallStartGameRequest::default_instance_ = NULL;

CMsg8BallStartGameRequest* CMsg8BallStartGameRequest::New() const {
  return new CMsg8BallStartGameRequest;
}

void CMsg8BallStartGameRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsg8BallStartGameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsg8BallStartGameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsg8BallStartGameRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsg8BallStartGameRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsg8BallStartGameRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsg8BallStartGameRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsg8BallStartGameRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsg8BallStartGameRequest::MergeFrom(const CMsg8BallStartGameRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsg8BallStartGameRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsg8BallStartGameRequest::CopyFrom(const CMsg8BallStartGameRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsg8BallStartGameRequest::IsInitialized() const {

  return true;
}

void CMsg8BallStartGameRequest::Swap(CMsg8BallStartGameRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsg8BallStartGameRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsg8BallStartGameRequest_descriptor_;
  metadata.reflection = CMsg8BallStartGameRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsg8BallRoundStartResponse_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg8BallRoundStartResponse_Msg_descriptor_;
}
bool CMsg8BallRoundStartResponse_Msg_IsValid(int value) {
  switch(value) {
    case 131097:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsg8BallRoundStartResponse_Msg CMsg8BallRoundStartResponse::MsgID;
const CMsg8BallRoundStartResponse_Msg CMsg8BallRoundStartResponse::Msg_MIN;
const CMsg8BallRoundStartResponse_Msg CMsg8BallRoundStartResponse::Msg_MAX;
const int CMsg8BallRoundStartResponse::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsg8BallRoundStartResponse::kSelfstatusFieldNumber;
const int CMsg8BallRoundStartResponse::kRoleidFieldNumber;
const int CMsg8BallRoundStartResponse::kLastResultFieldNumber;
const int CMsg8BallRoundStartResponse::kBalllistFieldNumber;
const int CMsg8BallRoundStartResponse::kBallgroupFieldNumber;
#endif  // !_MSC_VER

CMsg8BallRoundStartResponse::CMsg8BallRoundStartResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsg8BallRoundStartResponse::InitAsDefaultInstance() {
  balllist_ = const_cast< ::PBBalls*>(&::PBBalls::default_instance());
}

CMsg8BallRoundStartResponse::CMsg8BallRoundStartResponse(const CMsg8BallRoundStartResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsg8BallRoundStartResponse::SharedCtor() {
  _cached_size_ = 0;
  selfstatus_ = 0;
  roleid_ = GOOGLE_LONGLONG(0);
  lastresult_ = 0;
  balllist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsg8BallRoundStartResponse::~CMsg8BallRoundStartResponse() {
  SharedDtor();
}

void CMsg8BallRoundStartResponse::SharedDtor() {
  if (this != default_instance_) {
    delete balllist_;
  }
}

void CMsg8BallRoundStartResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsg8BallRoundStartResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg8BallRoundStartResponse_descriptor_;
}

const CMsg8BallRoundStartResponse& CMsg8BallRoundStartResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

CMsg8BallRoundStartResponse* CMsg8BallRoundStartResponse::default_instance_ = NULL;

CMsg8BallRoundStartResponse* CMsg8BallRoundStartResponse::New() const {
  return new CMsg8BallRoundStartResponse;
}

void CMsg8BallRoundStartResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    selfstatus_ = 0;
    roleid_ = GOOGLE_LONGLONG(0);
    lastresult_ = 0;
    if (has_balllist()) {
      if (balllist_ != NULL) balllist_->::PBBalls::Clear();
    }
  }
  ballgroup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsg8BallRoundStartResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 selfstatus = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfstatus_)));
          set_has_selfstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleid;
        break;
      }

      // required int64 roleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_LastResult;
        break;
      }

      // required int32 LastResult = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LastResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastresult_)));
          set_has_lastresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_balllist;
        break;
      }

      // optional .PBBalls balllist = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_balllist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_balllist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ballgroup;
        break;
      }

      // repeated .PB8BallGroup ballgroup = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ballgroup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ballgroup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ballgroup;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsg8BallRoundStartResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 selfstatus = 1;
  if (has_selfstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->selfstatus(), output);
  }

  // required int64 roleid = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->roleid(), output);
  }

  // required int32 LastResult = 3;
  if (has_lastresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lastresult(), output);
  }

  // optional .PBBalls balllist = 4;
  if (has_balllist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->balllist(), output);
  }

  // repeated .PB8BallGroup ballgroup = 5;
  for (int i = 0; i < this->ballgroup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ballgroup(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsg8BallRoundStartResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 selfstatus = 1;
  if (has_selfstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->selfstatus(), target);
  }

  // required int64 roleid = 2;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->roleid(), target);
  }

  // required int32 LastResult = 3;
  if (has_lastresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lastresult(), target);
  }

  // optional .PBBalls balllist = 4;
  if (has_balllist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->balllist(), target);
  }

  // repeated .PB8BallGroup ballgroup = 5;
  for (int i = 0; i < this->ballgroup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ballgroup(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsg8BallRoundStartResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 selfstatus = 1;
    if (has_selfstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfstatus());
    }

    // required int64 roleid = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleid());
    }

    // required int32 LastResult = 3;
    if (has_lastresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastresult());
    }

    // optional .PBBalls balllist = 4;
    if (has_balllist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->balllist());
    }

  }
  // repeated .PB8BallGroup ballgroup = 5;
  total_size += 1 * this->ballgroup_size();
  for (int i = 0; i < this->ballgroup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ballgroup(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsg8BallRoundStartResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsg8BallRoundStartResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsg8BallRoundStartResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsg8BallRoundStartResponse::MergeFrom(const CMsg8BallRoundStartResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  ballgroup_.MergeFrom(from.ballgroup_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfstatus()) {
      set_selfstatus(from.selfstatus());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_lastresult()) {
      set_lastresult(from.lastresult());
    }
    if (from.has_balllist()) {
      mutable_balllist()->::PBBalls::MergeFrom(from.balllist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsg8BallRoundStartResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsg8BallRoundStartResponse::CopyFrom(const CMsg8BallRoundStartResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsg8BallRoundStartResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_balllist()) {
    if (!this->balllist().IsInitialized()) return false;
  }
  for (int i = 0; i < ballgroup_size(); i++) {
    if (!this->ballgroup(i).IsInitialized()) return false;
  }
  return true;
}

void CMsg8BallRoundStartResponse::Swap(CMsg8BallRoundStartResponse* other) {
  if (other != this) {
    std::swap(selfstatus_, other->selfstatus_);
    std::swap(roleid_, other->roleid_);
    std::swap(lastresult_, other->lastresult_);
    std::swap(balllist_, other->balllist_);
    ballgroup_.Swap(&other->ballgroup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsg8BallRoundStartResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsg8BallRoundStartResponse_descriptor_;
  metadata.reflection = CMsg8BallRoundStartResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsg8BallKickInfoRequest_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg8BallKickInfoRequest_Msg_descriptor_;
}
bool CMsg8BallKickInfoRequest_Msg_IsValid(int value) {
  switch(value) {
    case 16908314:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsg8BallKickInfoRequest_Msg CMsg8BallKickInfoRequest::MsgID;
const CMsg8BallKickInfoRequest_Msg CMsg8BallKickInfoRequest::Msg_MIN;
const CMsg8BallKickInfoRequest_Msg CMsg8BallKickInfoRequest::Msg_MAX;
const int CMsg8BallKickInfoRequest::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsg8BallKickInfoRequest::kKickinfoFieldNumber;
#endif  // !_MSC_VER

CMsg8BallKickInfoRequest::CMsg8BallKickInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsg8BallKickInfoRequest::InitAsDefaultInstance() {
  kickinfo_ = const_cast< ::PBKickBallInfo*>(&::PBKickBallInfo::default_instance());
}

CMsg8BallKickInfoRequest::CMsg8BallKickInfoRequest(const CMsg8BallKickInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsg8BallKickInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  kickinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsg8BallKickInfoRequest::~CMsg8BallKickInfoRequest() {
  SharedDtor();
}

void CMsg8BallKickInfoRequest::SharedDtor() {
  if (this != default_instance_) {
    delete kickinfo_;
  }
}

void CMsg8BallKickInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsg8BallKickInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg8BallKickInfoRequest_descriptor_;
}

const CMsg8BallKickInfoRequest& CMsg8BallKickInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

CMsg8BallKickInfoRequest* CMsg8BallKickInfoRequest::default_instance_ = NULL;

CMsg8BallKickInfoRequest* CMsg8BallKickInfoRequest::New() const {
  return new CMsg8BallKickInfoRequest;
}

void CMsg8BallKickInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_kickinfo()) {
      if (kickinfo_ != NULL) kickinfo_->::PBKickBallInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsg8BallKickInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PBKickBallInfo kickinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kickinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsg8BallKickInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PBKickBallInfo kickinfo = 1;
  if (has_kickinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->kickinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsg8BallKickInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PBKickBallInfo kickinfo = 1;
  if (has_kickinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->kickinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsg8BallKickInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PBKickBallInfo kickinfo = 1;
    if (has_kickinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kickinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsg8BallKickInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsg8BallKickInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsg8BallKickInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsg8BallKickInfoRequest::MergeFrom(const CMsg8BallKickInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kickinfo()) {
      mutable_kickinfo()->::PBKickBallInfo::MergeFrom(from.kickinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsg8BallKickInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsg8BallKickInfoRequest::CopyFrom(const CMsg8BallKickInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsg8BallKickInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_kickinfo()) {
    if (!this->kickinfo().IsInitialized()) return false;
  }
  return true;
}

void CMsg8BallKickInfoRequest::Swap(CMsg8BallKickInfoRequest* other) {
  if (other != this) {
    std::swap(kickinfo_, other->kickinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsg8BallKickInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsg8BallKickInfoRequest_descriptor_;
  metadata.reflection = CMsg8BallKickInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsg8BallKickInfoResponse_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg8BallKickInfoResponse_Msg_descriptor_;
}
bool CMsg8BallKickInfoResponse_Msg_IsValid(int value) {
  switch(value) {
    case 131099:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsg8BallKickInfoResponse_Msg CMsg8BallKickInfoResponse::MsgID;
const CMsg8BallKickInfoResponse_Msg CMsg8BallKickInfoResponse::Msg_MIN;
const CMsg8BallKickInfoResponse_Msg CMsg8BallKickInfoResponse::Msg_MAX;
const int CMsg8BallKickInfoResponse::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsg8BallKickInfoResponse::kKickinfoFieldNumber;
#endif  // !_MSC_VER

CMsg8BallKickInfoResponse::CMsg8BallKickInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsg8BallKickInfoResponse::InitAsDefaultInstance() {
  kickinfo_ = const_cast< ::PBKickBallInfo*>(&::PBKickBallInfo::default_instance());
}

CMsg8BallKickInfoResponse::CMsg8BallKickInfoResponse(const CMsg8BallKickInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsg8BallKickInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  kickinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsg8BallKickInfoResponse::~CMsg8BallKickInfoResponse() {
  SharedDtor();
}

void CMsg8BallKickInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete kickinfo_;
  }
}

void CMsg8BallKickInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsg8BallKickInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg8BallKickInfoResponse_descriptor_;
}

const CMsg8BallKickInfoResponse& CMsg8BallKickInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

CMsg8BallKickInfoResponse* CMsg8BallKickInfoResponse::default_instance_ = NULL;

CMsg8BallKickInfoResponse* CMsg8BallKickInfoResponse::New() const {
  return new CMsg8BallKickInfoResponse;
}

void CMsg8BallKickInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_kickinfo()) {
      if (kickinfo_ != NULL) kickinfo_->::PBKickBallInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsg8BallKickInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PBKickBallInfo kickinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kickinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsg8BallKickInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PBKickBallInfo kickinfo = 1;
  if (has_kickinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->kickinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsg8BallKickInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PBKickBallInfo kickinfo = 1;
  if (has_kickinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->kickinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsg8BallKickInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PBKickBallInfo kickinfo = 1;
    if (has_kickinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kickinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsg8BallKickInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsg8BallKickInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsg8BallKickInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsg8BallKickInfoResponse::MergeFrom(const CMsg8BallKickInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kickinfo()) {
      mutable_kickinfo()->::PBKickBallInfo::MergeFrom(from.kickinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsg8BallKickInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsg8BallKickInfoResponse::CopyFrom(const CMsg8BallKickInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsg8BallKickInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_kickinfo()) {
    if (!this->kickinfo().IsInitialized()) return false;
  }
  return true;
}

void CMsg8BallKickInfoResponse::Swap(CMsg8BallKickInfoResponse* other) {
  if (other != this) {
    std::swap(kickinfo_, other->kickinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsg8BallKickInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsg8BallKickInfoResponse_descriptor_;
  metadata.reflection = CMsg8BallKickInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsg8BallPositionRequest_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg8BallPositionRequest_Msg_descriptor_;
}
bool CMsg8BallPositionRequest_Msg_IsValid(int value) {
  switch(value) {
    case 16908316:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsg8BallPositionRequest_Msg CMsg8BallPositionRequest::MsgID;
const CMsg8BallPositionRequest_Msg CMsg8BallPositionRequest::Msg_MIN;
const CMsg8BallPositionRequest_Msg CMsg8BallPositionRequest::Msg_MAX;
const int CMsg8BallPositionRequest::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsg8BallPositionRequest::kBalllistFieldNumber;
#endif  // !_MSC_VER

CMsg8BallPositionRequest::CMsg8BallPositionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsg8BallPositionRequest::InitAsDefaultInstance() {
  balllist_ = const_cast< ::PBBalls*>(&::PBBalls::default_instance());
}

CMsg8BallPositionRequest::CMsg8BallPositionRequest(const CMsg8BallPositionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsg8BallPositionRequest::SharedCtor() {
  _cached_size_ = 0;
  balllist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsg8BallPositionRequest::~CMsg8BallPositionRequest() {
  SharedDtor();
}

void CMsg8BallPositionRequest::SharedDtor() {
  if (this != default_instance_) {
    delete balllist_;
  }
}

void CMsg8BallPositionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsg8BallPositionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg8BallPositionRequest_descriptor_;
}

const CMsg8BallPositionRequest& CMsg8BallPositionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

CMsg8BallPositionRequest* CMsg8BallPositionRequest::default_instance_ = NULL;

CMsg8BallPositionRequest* CMsg8BallPositionRequest::New() const {
  return new CMsg8BallPositionRequest;
}

void CMsg8BallPositionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_balllist()) {
      if (balllist_ != NULL) balllist_->::PBBalls::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsg8BallPositionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PBBalls balllist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_balllist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsg8BallPositionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PBBalls balllist = 1;
  if (has_balllist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->balllist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsg8BallPositionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PBBalls balllist = 1;
  if (has_balllist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->balllist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsg8BallPositionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PBBalls balllist = 1;
    if (has_balllist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->balllist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsg8BallPositionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsg8BallPositionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsg8BallPositionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsg8BallPositionRequest::MergeFrom(const CMsg8BallPositionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_balllist()) {
      mutable_balllist()->::PBBalls::MergeFrom(from.balllist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsg8BallPositionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsg8BallPositionRequest::CopyFrom(const CMsg8BallPositionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsg8BallPositionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_balllist()) {
    if (!this->balllist().IsInitialized()) return false;
  }
  return true;
}

void CMsg8BallPositionRequest::Swap(CMsg8BallPositionRequest* other) {
  if (other != this) {
    std::swap(balllist_, other->balllist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsg8BallPositionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsg8BallPositionRequest_descriptor_;
  metadata.reflection = CMsg8BallPositionRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsg8BallPositionResponse_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg8BallPositionResponse_Msg_descriptor_;
}
bool CMsg8BallPositionResponse_Msg_IsValid(int value) {
  switch(value) {
    case 131101:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsg8BallPositionResponse_Msg CMsg8BallPositionResponse::MsgID;
const CMsg8BallPositionResponse_Msg CMsg8BallPositionResponse::Msg_MIN;
const CMsg8BallPositionResponse_Msg CMsg8BallPositionResponse::Msg_MAX;
const int CMsg8BallPositionResponse::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsg8BallPositionResponse::kBalllistFieldNumber;
#endif  // !_MSC_VER

CMsg8BallPositionResponse::CMsg8BallPositionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsg8BallPositionResponse::InitAsDefaultInstance() {
  balllist_ = const_cast< ::PBBalls*>(&::PBBalls::default_instance());
}

CMsg8BallPositionResponse::CMsg8BallPositionResponse(const CMsg8BallPositionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsg8BallPositionResponse::SharedCtor() {
  _cached_size_ = 0;
  balllist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsg8BallPositionResponse::~CMsg8BallPositionResponse() {
  SharedDtor();
}

void CMsg8BallPositionResponse::SharedDtor() {
  if (this != default_instance_) {
    delete balllist_;
  }
}

void CMsg8BallPositionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsg8BallPositionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg8BallPositionResponse_descriptor_;
}

const CMsg8BallPositionResponse& CMsg8BallPositionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

CMsg8BallPositionResponse* CMsg8BallPositionResponse::default_instance_ = NULL;

CMsg8BallPositionResponse* CMsg8BallPositionResponse::New() const {
  return new CMsg8BallPositionResponse;
}

void CMsg8BallPositionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_balllist()) {
      if (balllist_ != NULL) balllist_->::PBBalls::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsg8BallPositionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PBBalls balllist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_balllist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsg8BallPositionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PBBalls balllist = 1;
  if (has_balllist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->balllist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsg8BallPositionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PBBalls balllist = 1;
  if (has_balllist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->balllist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsg8BallPositionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PBBalls balllist = 1;
    if (has_balllist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->balllist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsg8BallPositionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsg8BallPositionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsg8BallPositionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsg8BallPositionResponse::MergeFrom(const CMsg8BallPositionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_balllist()) {
      mutable_balllist()->::PBBalls::MergeFrom(from.balllist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsg8BallPositionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsg8BallPositionResponse::CopyFrom(const CMsg8BallPositionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsg8BallPositionResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_balllist()) {
    if (!this->balllist().IsInitialized()) return false;
  }
  return true;
}

void CMsg8BallPositionResponse::Swap(CMsg8BallPositionResponse* other) {
  if (other != this) {
    std::swap(balllist_, other->balllist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsg8BallPositionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsg8BallPositionResponse_descriptor_;
  metadata.reflection = CMsg8BallPositionResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsg8BallRoundEndRequest_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg8BallRoundEndRequest_Msg_descriptor_;
}
bool CMsg8BallRoundEndRequest_Msg_IsValid(int value) {
  switch(value) {
    case 16908318:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsg8BallRoundEndRequest_Msg CMsg8BallRoundEndRequest::MsgID;
const CMsg8BallRoundEndRequest_Msg CMsg8BallRoundEndRequest::Msg_MIN;
const CMsg8BallRoundEndRequest_Msg CMsg8BallRoundEndRequest::Msg_MAX;
const int CMsg8BallRoundEndRequest::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsg8BallRoundEndRequest::kResultFieldNumber;
const int CMsg8BallRoundEndRequest::kBalllistFieldNumber;
const int CMsg8BallRoundEndRequest::kBallgroupFieldNumber;
const int CMsg8BallRoundEndRequest::kSucroleidFieldNumber;
#endif  // !_MSC_VER

CMsg8BallRoundEndRequest::CMsg8BallRoundEndRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsg8BallRoundEndRequest::InitAsDefaultInstance() {
  balllist_ = const_cast< ::PBBalls*>(&::PBBalls::default_instance());
}

CMsg8BallRoundEndRequest::CMsg8BallRoundEndRequest(const CMsg8BallRoundEndRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsg8BallRoundEndRequest::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  balllist_ = NULL;
  sucroleid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsg8BallRoundEndRequest::~CMsg8BallRoundEndRequest() {
  SharedDtor();
}

void CMsg8BallRoundEndRequest::SharedDtor() {
  if (this != default_instance_) {
    delete balllist_;
  }
}

void CMsg8BallRoundEndRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsg8BallRoundEndRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg8BallRoundEndRequest_descriptor_;
}

const CMsg8BallRoundEndRequest& CMsg8BallRoundEndRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

CMsg8BallRoundEndRequest* CMsg8BallRoundEndRequest::default_instance_ = NULL;

CMsg8BallRoundEndRequest* CMsg8BallRoundEndRequest::New() const {
  return new CMsg8BallRoundEndRequest;
}

void CMsg8BallRoundEndRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_balllist()) {
      if (balllist_ != NULL) balllist_->::PBBalls::Clear();
    }
    sucroleid_ = GOOGLE_LONGLONG(0);
  }
  ballgroup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsg8BallRoundEndRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_balllist;
        break;
      }

      // required .PBBalls balllist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_balllist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_balllist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ballgroup;
        break;
      }

      // repeated .PB8BallGroup ballgroup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ballgroup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ballgroup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ballgroup;
        if (input->ExpectTag(32)) goto parse_sucroleid;
        break;
      }

      // optional int64 sucroleid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sucroleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sucroleid_)));
          set_has_sucroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsg8BallRoundEndRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required .PBBalls balllist = 2;
  if (has_balllist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->balllist(), output);
  }

  // repeated .PB8BallGroup ballgroup = 3;
  for (int i = 0; i < this->ballgroup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ballgroup(i), output);
  }

  // optional int64 sucroleid = 4;
  if (has_sucroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->sucroleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsg8BallRoundEndRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required .PBBalls balllist = 2;
  if (has_balllist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->balllist(), target);
  }

  // repeated .PB8BallGroup ballgroup = 3;
  for (int i = 0; i < this->ballgroup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ballgroup(i), target);
  }

  // optional int64 sucroleid = 4;
  if (has_sucroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->sucroleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsg8BallRoundEndRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required .PBBalls balllist = 2;
    if (has_balllist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->balllist());
    }

    // optional int64 sucroleid = 4;
    if (has_sucroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sucroleid());
    }

  }
  // repeated .PB8BallGroup ballgroup = 3;
  total_size += 1 * this->ballgroup_size();
  for (int i = 0; i < this->ballgroup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ballgroup(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsg8BallRoundEndRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsg8BallRoundEndRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsg8BallRoundEndRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsg8BallRoundEndRequest::MergeFrom(const CMsg8BallRoundEndRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  ballgroup_.MergeFrom(from.ballgroup_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_balllist()) {
      mutable_balllist()->::PBBalls::MergeFrom(from.balllist());
    }
    if (from.has_sucroleid()) {
      set_sucroleid(from.sucroleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsg8BallRoundEndRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsg8BallRoundEndRequest::CopyFrom(const CMsg8BallRoundEndRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsg8BallRoundEndRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_balllist()) {
    if (!this->balllist().IsInitialized()) return false;
  }
  for (int i = 0; i < ballgroup_size(); i++) {
    if (!this->ballgroup(i).IsInitialized()) return false;
  }
  return true;
}

void CMsg8BallRoundEndRequest::Swap(CMsg8BallRoundEndRequest* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(balllist_, other->balllist_);
    ballgroup_.Swap(&other->ballgroup_);
    std::swap(sucroleid_, other->sucroleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsg8BallRoundEndRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsg8BallRoundEndRequest_descriptor_;
  metadata.reflection = CMsg8BallRoundEndRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsg8BallEndGameResponse_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg8BallEndGameResponse_Msg_descriptor_;
}
bool CMsg8BallEndGameResponse_Msg_IsValid(int value) {
  switch(value) {
    case 131103:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsg8BallEndGameResponse_Msg CMsg8BallEndGameResponse::MsgID;
const CMsg8BallEndGameResponse_Msg CMsg8BallEndGameResponse::Msg_MIN;
const CMsg8BallEndGameResponse_Msg CMsg8BallEndGameResponse::Msg_MAX;
const int CMsg8BallEndGameResponse::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsg8BallEndGameResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsg8BallEndGameResponse::CMsg8BallEndGameResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsg8BallEndGameResponse::InitAsDefaultInstance() {
}

CMsg8BallEndGameResponse::CMsg8BallEndGameResponse(const CMsg8BallEndGameResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsg8BallEndGameResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsg8BallEndGameResponse::~CMsg8BallEndGameResponse() {
  SharedDtor();
}

void CMsg8BallEndGameResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsg8BallEndGameResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsg8BallEndGameResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg8BallEndGameResponse_descriptor_;
}

const CMsg8BallEndGameResponse& CMsg8BallEndGameResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

CMsg8BallEndGameResponse* CMsg8BallEndGameResponse::default_instance_ = NULL;

CMsg8BallEndGameResponse* CMsg8BallEndGameResponse::New() const {
  return new CMsg8BallEndGameResponse;
}

void CMsg8BallEndGameResponse::Clear() {
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsg8BallEndGameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB8BallEndResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_result;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsg8BallEndGameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB8BallEndResult result = 1;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsg8BallEndGameResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB8BallEndResult result = 1;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsg8BallEndGameResponse::ByteSize() const {
  int total_size = 0;

  // repeated .PB8BallEndResult result = 1;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsg8BallEndGameResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsg8BallEndGameResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsg8BallEndGameResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsg8BallEndGameResponse::MergeFrom(const CMsg8BallEndGameResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsg8BallEndGameResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsg8BallEndGameResponse::CopyFrom(const CMsg8BallEndGameResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsg8BallEndGameResponse::IsInitialized() const {

  for (int i = 0; i < result_size(); i++) {
    if (!this->result(i).IsInitialized()) return false;
  }
  return true;
}

void CMsg8BallEndGameResponse::Swap(CMsg8BallEndGameResponse* other) {
  if (other != this) {
    result_.Swap(&other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsg8BallEndGameResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsg8BallEndGameResponse_descriptor_;
  metadata.reflection = CMsg8BallEndGameResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsg8BallCannotContinueResponse_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg8BallCannotContinueResponse_Msg_descriptor_;
}
bool CMsg8BallCannotContinueResponse_Msg_IsValid(int value) {
  switch(value) {
    case 131104:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsg8BallCannotContinueResponse_Msg CMsg8BallCannotContinueResponse::MsgID;
const CMsg8BallCannotContinueResponse_Msg CMsg8BallCannotContinueResponse::Msg_MIN;
const CMsg8BallCannotContinueResponse_Msg CMsg8BallCannotContinueResponse::Msg_MAX;
const int CMsg8BallCannotContinueResponse::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsg8BallCannotContinueResponse::kRoomtypeFieldNumber;
const int CMsg8BallCannotContinueResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsg8BallCannotContinueResponse::CMsg8BallCannotContinueResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsg8BallCannotContinueResponse::InitAsDefaultInstance() {
}

CMsg8BallCannotContinueResponse::CMsg8BallCannotContinueResponse(const CMsg8BallCannotContinueResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsg8BallCannotContinueResponse::SharedCtor() {
  _cached_size_ = 0;
  roomtype_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsg8BallCannotContinueResponse::~CMsg8BallCannotContinueResponse() {
  SharedDtor();
}

void CMsg8BallCannotContinueResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsg8BallCannotContinueResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsg8BallCannotContinueResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg8BallCannotContinueResponse_descriptor_;
}

const CMsg8BallCannotContinueResponse& CMsg8BallCannotContinueResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

CMsg8BallCannotContinueResponse* CMsg8BallCannotContinueResponse::default_instance_ = NULL;

CMsg8BallCannotContinueResponse* CMsg8BallCannotContinueResponse::New() const {
  return new CMsg8BallCannotContinueResponse;
}

void CMsg8BallCannotContinueResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomtype_ = 0;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsg8BallCannotContinueResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .enRoomType roomtype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enRoomType_IsValid(value)) {
            set_roomtype(static_cast< ::enRoomType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsg8BallCannotContinueResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .enRoomType roomtype = 1;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->roomtype(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsg8BallCannotContinueResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .enRoomType roomtype = 1;
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->roomtype(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsg8BallCannotContinueResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .enRoomType roomtype = 1;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->roomtype());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsg8BallCannotContinueResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsg8BallCannotContinueResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsg8BallCannotContinueResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsg8BallCannotContinueResponse::MergeFrom(const CMsg8BallCannotContinueResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsg8BallCannotContinueResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsg8BallCannotContinueResponse::CopyFrom(const CMsg8BallCannotContinueResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsg8BallCannotContinueResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMsg8BallCannotContinueResponse::Swap(CMsg8BallCannotContinueResponse* other) {
  if (other != this) {
    std::swap(roomtype_, other->roomtype_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsg8BallCannotContinueResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsg8BallCannotContinueResponse_descriptor_;
  metadata.reflection = CMsg8BallCannotContinueResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgLucky28SettlementEndRequest_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLucky28SettlementEndRequest_Msg_descriptor_;
}
bool CMsgLucky28SettlementEndRequest_Msg_IsValid(int value) {
  switch(value) {
    case 16908321:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgLucky28SettlementEndRequest_Msg CMsgLucky28SettlementEndRequest::MsgID;
const CMsgLucky28SettlementEndRequest_Msg CMsgLucky28SettlementEndRequest::Msg_MIN;
const CMsgLucky28SettlementEndRequest_Msg CMsgLucky28SettlementEndRequest::Msg_MAX;
const int CMsgLucky28SettlementEndRequest::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgLucky28SettlementEndRequest::CMsgLucky28SettlementEndRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgLucky28SettlementEndRequest::InitAsDefaultInstance() {
}

CMsgLucky28SettlementEndRequest::CMsgLucky28SettlementEndRequest(const CMsgLucky28SettlementEndRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgLucky28SettlementEndRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLucky28SettlementEndRequest::~CMsgLucky28SettlementEndRequest() {
  SharedDtor();
}

void CMsgLucky28SettlementEndRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgLucky28SettlementEndRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLucky28SettlementEndRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLucky28SettlementEndRequest_descriptor_;
}

const CMsgLucky28SettlementEndRequest& CMsgLucky28SettlementEndRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

CMsgLucky28SettlementEndRequest* CMsgLucky28SettlementEndRequest::default_instance_ = NULL;

CMsgLucky28SettlementEndRequest* CMsgLucky28SettlementEndRequest::New() const {
  return new CMsgLucky28SettlementEndRequest;
}

void CMsgLucky28SettlementEndRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgLucky28SettlementEndRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgLucky28SettlementEndRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgLucky28SettlementEndRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgLucky28SettlementEndRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLucky28SettlementEndRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgLucky28SettlementEndRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgLucky28SettlementEndRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLucky28SettlementEndRequest::MergeFrom(const CMsgLucky28SettlementEndRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgLucky28SettlementEndRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLucky28SettlementEndRequest::CopyFrom(const CMsgLucky28SettlementEndRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLucky28SettlementEndRequest::IsInitialized() const {

  return true;
}

void CMsgLucky28SettlementEndRequest::Swap(CMsgLucky28SettlementEndRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgLucky28SettlementEndRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLucky28SettlementEndRequest_descriptor_;
  metadata.reflection = CMsgLucky28SettlementEndRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsg8BallLeaveMatchRequest_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg8BallLeaveMatchRequest_Msg_descriptor_;
}
bool CMsg8BallLeaveMatchRequest_Msg_IsValid(int value) {
  switch(value) {
    case 131106:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsg8BallLeaveMatchRequest_Msg CMsg8BallLeaveMatchRequest::MsgID;
const CMsg8BallLeaveMatchRequest_Msg CMsg8BallLeaveMatchRequest::Msg_MIN;
const CMsg8BallLeaveMatchRequest_Msg CMsg8BallLeaveMatchRequest::Msg_MAX;
const int CMsg8BallLeaveMatchRequest::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsg8BallLeaveMatchRequest::kRoomtypeFieldNumber;
#endif  // !_MSC_VER

CMsg8BallLeaveMatchRequest::CMsg8BallLeaveMatchRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsg8BallLeaveMatchRequest::InitAsDefaultInstance() {
}

CMsg8BallLeaveMatchRequest::CMsg8BallLeaveMatchRequest(const CMsg8BallLeaveMatchRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsg8BallLeaveMatchRequest::SharedCtor() {
  _cached_size_ = 0;
  roomtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsg8BallLeaveMatchRequest::~CMsg8BallLeaveMatchRequest() {
  SharedDtor();
}

void CMsg8BallLeaveMatchRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsg8BallLeaveMatchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsg8BallLeaveMatchRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg8BallLeaveMatchRequest_descriptor_;
}

const CMsg8BallLeaveMatchRequest& CMsg8BallLeaveMatchRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

CMsg8BallLeaveMatchRequest* CMsg8BallLeaveMatchRequest::default_instance_ = NULL;

CMsg8BallLeaveMatchRequest* CMsg8BallLeaveMatchRequest::New() const {
  return new CMsg8BallLeaveMatchRequest;
}

void CMsg8BallLeaveMatchRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsg8BallLeaveMatchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .enRoomType roomtype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enRoomType_IsValid(value)) {
            set_roomtype(static_cast< ::enRoomType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsg8BallLeaveMatchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .enRoomType roomtype = 1;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->roomtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsg8BallLeaveMatchRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .enRoomType roomtype = 1;
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->roomtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsg8BallLeaveMatchRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .enRoomType roomtype = 1;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->roomtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsg8BallLeaveMatchRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsg8BallLeaveMatchRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsg8BallLeaveMatchRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsg8BallLeaveMatchRequest::MergeFrom(const CMsg8BallLeaveMatchRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsg8BallLeaveMatchRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsg8BallLeaveMatchRequest::CopyFrom(const CMsg8BallLeaveMatchRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsg8BallLeaveMatchRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMsg8BallLeaveMatchRequest::Swap(CMsg8BallLeaveMatchRequest* other) {
  if (other != this) {
    std::swap(roomtype_, other->roomtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsg8BallLeaveMatchRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsg8BallLeaveMatchRequest_descriptor_;
  metadata.reflection = CMsg8BallLeaveMatchRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsg8BallLeaveMatchResponse_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg8BallLeaveMatchResponse_Msg_descriptor_;
}
bool CMsg8BallLeaveMatchResponse_Msg_IsValid(int value) {
  switch(value) {
    case 131107:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsg8BallLeaveMatchResponse_Msg CMsg8BallLeaveMatchResponse::MsgID;
const CMsg8BallLeaveMatchResponse_Msg CMsg8BallLeaveMatchResponse::Msg_MIN;
const CMsg8BallLeaveMatchResponse_Msg CMsg8BallLeaveMatchResponse::Msg_MAX;
const int CMsg8BallLeaveMatchResponse::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsg8BallLeaveMatchResponse::kResultFieldNumber;
const int CMsg8BallLeaveMatchResponse::kRoomtypeFieldNumber;
#endif  // !_MSC_VER

CMsg8BallLeaveMatchResponse::CMsg8BallLeaveMatchResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsg8BallLeaveMatchResponse::InitAsDefaultInstance() {
}

CMsg8BallLeaveMatchResponse::CMsg8BallLeaveMatchResponse(const CMsg8BallLeaveMatchResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsg8BallLeaveMatchResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  roomtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsg8BallLeaveMatchResponse::~CMsg8BallLeaveMatchResponse() {
  SharedDtor();
}

void CMsg8BallLeaveMatchResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsg8BallLeaveMatchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsg8BallLeaveMatchResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg8BallLeaveMatchResponse_descriptor_;
}

const CMsg8BallLeaveMatchResponse& CMsg8BallLeaveMatchResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

CMsg8BallLeaveMatchResponse* CMsg8BallLeaveMatchResponse::default_instance_ = NULL;

CMsg8BallLeaveMatchResponse* CMsg8BallLeaveMatchResponse::New() const {
  return new CMsg8BallLeaveMatchResponse;
}

void CMsg8BallLeaveMatchResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    roomtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsg8BallLeaveMatchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomtype;
        break;
      }

      // required .enRoomType roomtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enRoomType_IsValid(value)) {
            set_roomtype(static_cast< ::enRoomType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsg8BallLeaveMatchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required .enRoomType roomtype = 2;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->roomtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsg8BallLeaveMatchResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required .enRoomType roomtype = 2;
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->roomtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsg8BallLeaveMatchResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required .enRoomType roomtype = 2;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->roomtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsg8BallLeaveMatchResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsg8BallLeaveMatchResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsg8BallLeaveMatchResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsg8BallLeaveMatchResponse::MergeFrom(const CMsg8BallLeaveMatchResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsg8BallLeaveMatchResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsg8BallLeaveMatchResponse::CopyFrom(const CMsg8BallLeaveMatchResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsg8BallLeaveMatchResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMsg8BallLeaveMatchResponse::Swap(CMsg8BallLeaveMatchResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(roomtype_, other->roomtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsg8BallLeaveMatchResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsg8BallLeaveMatchResponse_descriptor_;
  metadata.reflection = CMsg8BallLeaveMatchResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsg8BallMoveBallRequest_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg8BallMoveBallRequest_Msg_descriptor_;
}
bool CMsg8BallMoveBallRequest_Msg_IsValid(int value) {
  switch(value) {
    case 16908324:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsg8BallMoveBallRequest_Msg CMsg8BallMoveBallRequest::MsgID;
const CMsg8BallMoveBallRequest_Msg CMsg8BallMoveBallRequest::Msg_MIN;
const CMsg8BallMoveBallRequest_Msg CMsg8BallMoveBallRequest::Msg_MAX;
const int CMsg8BallMoveBallRequest::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsg8BallMoveBallRequest::kBallFieldNumber;
const int CMsg8BallMoveBallRequest::kAngleFieldNumber;
#endif  // !_MSC_VER

CMsg8BallMoveBallRequest::CMsg8BallMoveBallRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsg8BallMoveBallRequest::InitAsDefaultInstance() {
  ball_ = const_cast< ::PBSingleBall*>(&::PBSingleBall::default_instance());
}

CMsg8BallMoveBallRequest::CMsg8BallMoveBallRequest(const CMsg8BallMoveBallRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsg8BallMoveBallRequest::SharedCtor() {
  _cached_size_ = 0;
  ball_ = NULL;
  angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsg8BallMoveBallRequest::~CMsg8BallMoveBallRequest() {
  SharedDtor();
}

void CMsg8BallMoveBallRequest::SharedDtor() {
  if (this != default_instance_) {
    delete ball_;
  }
}

void CMsg8BallMoveBallRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsg8BallMoveBallRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg8BallMoveBallRequest_descriptor_;
}

const CMsg8BallMoveBallRequest& CMsg8BallMoveBallRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

CMsg8BallMoveBallRequest* CMsg8BallMoveBallRequest::default_instance_ = NULL;

CMsg8BallMoveBallRequest* CMsg8BallMoveBallRequest::New() const {
  return new CMsg8BallMoveBallRequest;
}

void CMsg8BallMoveBallRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ball()) {
      if (ball_ != NULL) ball_->::PBSingleBall::Clear();
    }
    angle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsg8BallMoveBallRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PBSingleBall ball = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ball()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_angle;
        break;
      }

      // required int32 angle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsg8BallMoveBallRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PBSingleBall ball = 1;
  if (has_ball()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ball(), output);
  }

  // required int32 angle = 2;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->angle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsg8BallMoveBallRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PBSingleBall ball = 1;
  if (has_ball()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ball(), target);
  }

  // required int32 angle = 2;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->angle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsg8BallMoveBallRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PBSingleBall ball = 1;
    if (has_ball()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ball());
    }

    // required int32 angle = 2;
    if (has_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->angle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsg8BallMoveBallRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsg8BallMoveBallRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsg8BallMoveBallRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsg8BallMoveBallRequest::MergeFrom(const CMsg8BallMoveBallRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ball()) {
      mutable_ball()->::PBSingleBall::MergeFrom(from.ball());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsg8BallMoveBallRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsg8BallMoveBallRequest::CopyFrom(const CMsg8BallMoveBallRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsg8BallMoveBallRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_ball()) {
    if (!this->ball().IsInitialized()) return false;
  }
  return true;
}

void CMsg8BallMoveBallRequest::Swap(CMsg8BallMoveBallRequest* other) {
  if (other != this) {
    std::swap(ball_, other->ball_);
    std::swap(angle_, other->angle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsg8BallMoveBallRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsg8BallMoveBallRequest_descriptor_;
  metadata.reflection = CMsg8BallMoveBallRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsg8BallMoveBallResponse_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg8BallMoveBallResponse_Msg_descriptor_;
}
bool CMsg8BallMoveBallResponse_Msg_IsValid(int value) {
  switch(value) {
    case 131109:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsg8BallMoveBallResponse_Msg CMsg8BallMoveBallResponse::MsgID;
const CMsg8BallMoveBallResponse_Msg CMsg8BallMoveBallResponse::Msg_MIN;
const CMsg8BallMoveBallResponse_Msg CMsg8BallMoveBallResponse::Msg_MAX;
const int CMsg8BallMoveBallResponse::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsg8BallMoveBallResponse::kBallFieldNumber;
const int CMsg8BallMoveBallResponse::kAngleFieldNumber;
#endif  // !_MSC_VER

CMsg8BallMoveBallResponse::CMsg8BallMoveBallResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsg8BallMoveBallResponse::InitAsDefaultInstance() {
  ball_ = const_cast< ::PBSingleBall*>(&::PBSingleBall::default_instance());
}

CMsg8BallMoveBallResponse::CMsg8BallMoveBallResponse(const CMsg8BallMoveBallResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsg8BallMoveBallResponse::SharedCtor() {
  _cached_size_ = 0;
  ball_ = NULL;
  angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsg8BallMoveBallResponse::~CMsg8BallMoveBallResponse() {
  SharedDtor();
}

void CMsg8BallMoveBallResponse::SharedDtor() {
  if (this != default_instance_) {
    delete ball_;
  }
}

void CMsg8BallMoveBallResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsg8BallMoveBallResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg8BallMoveBallResponse_descriptor_;
}

const CMsg8BallMoveBallResponse& CMsg8BallMoveBallResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

CMsg8BallMoveBallResponse* CMsg8BallMoveBallResponse::default_instance_ = NULL;

CMsg8BallMoveBallResponse* CMsg8BallMoveBallResponse::New() const {
  return new CMsg8BallMoveBallResponse;
}

void CMsg8BallMoveBallResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ball()) {
      if (ball_ != NULL) ball_->::PBSingleBall::Clear();
    }
    angle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsg8BallMoveBallResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PBSingleBall ball = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ball()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_angle;
        break;
      }

      // required int32 angle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsg8BallMoveBallResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PBSingleBall ball = 1;
  if (has_ball()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ball(), output);
  }

  // required int32 angle = 2;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->angle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsg8BallMoveBallResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PBSingleBall ball = 1;
  if (has_ball()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ball(), target);
  }

  // required int32 angle = 2;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->angle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsg8BallMoveBallResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PBSingleBall ball = 1;
    if (has_ball()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ball());
    }

    // required int32 angle = 2;
    if (has_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->angle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsg8BallMoveBallResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsg8BallMoveBallResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsg8BallMoveBallResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsg8BallMoveBallResponse::MergeFrom(const CMsg8BallMoveBallResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ball()) {
      mutable_ball()->::PBSingleBall::MergeFrom(from.ball());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsg8BallMoveBallResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsg8BallMoveBallResponse::CopyFrom(const CMsg8BallMoveBallResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsg8BallMoveBallResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_ball()) {
    if (!this->ball().IsInitialized()) return false;
  }
  return true;
}

void CMsg8BallMoveBallResponse::Swap(CMsg8BallMoveBallResponse* other) {
  if (other != this) {
    std::swap(ball_, other->ball_);
    std::swap(angle_, other->angle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsg8BallMoveBallResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsg8BallMoveBallResponse_descriptor_;
  metadata.reflection = CMsg8BallMoveBallResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsg8BallMoveGunRequest_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg8BallMoveGunRequest_Msg_descriptor_;
}
bool CMsg8BallMoveGunRequest_Msg_IsValid(int value) {
  switch(value) {
    case 16908326:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsg8BallMoveGunRequest_Msg CMsg8BallMoveGunRequest::MsgID;
const CMsg8BallMoveGunRequest_Msg CMsg8BallMoveGunRequest::Msg_MIN;
const CMsg8BallMoveGunRequest_Msg CMsg8BallMoveGunRequest::Msg_MAX;
const int CMsg8BallMoveGunRequest::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsg8BallMoveGunRequest::kAngleFieldNumber;
#endif  // !_MSC_VER

CMsg8BallMoveGunRequest::CMsg8BallMoveGunRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsg8BallMoveGunRequest::InitAsDefaultInstance() {
}

CMsg8BallMoveGunRequest::CMsg8BallMoveGunRequest(const CMsg8BallMoveGunRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsg8BallMoveGunRequest::SharedCtor() {
  _cached_size_ = 0;
  angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsg8BallMoveGunRequest::~CMsg8BallMoveGunRequest() {
  SharedDtor();
}

void CMsg8BallMoveGunRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsg8BallMoveGunRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsg8BallMoveGunRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg8BallMoveGunRequest_descriptor_;
}

const CMsg8BallMoveGunRequest& CMsg8BallMoveGunRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

CMsg8BallMoveGunRequest* CMsg8BallMoveGunRequest::default_instance_ = NULL;

CMsg8BallMoveGunRequest* CMsg8BallMoveGunRequest::New() const {
  return new CMsg8BallMoveGunRequest;
}

void CMsg8BallMoveGunRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    angle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsg8BallMoveGunRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 angle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsg8BallMoveGunRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 angle = 1;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->angle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsg8BallMoveGunRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 angle = 1;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->angle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsg8BallMoveGunRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 angle = 1;
    if (has_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->angle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsg8BallMoveGunRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsg8BallMoveGunRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsg8BallMoveGunRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsg8BallMoveGunRequest::MergeFrom(const CMsg8BallMoveGunRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_angle()) {
      set_angle(from.angle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsg8BallMoveGunRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsg8BallMoveGunRequest::CopyFrom(const CMsg8BallMoveGunRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsg8BallMoveGunRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMsg8BallMoveGunRequest::Swap(CMsg8BallMoveGunRequest* other) {
  if (other != this) {
    std::swap(angle_, other->angle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsg8BallMoveGunRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsg8BallMoveGunRequest_descriptor_;
  metadata.reflection = CMsg8BallMoveGunRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsg8BallMoveGunResponse_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg8BallMoveGunResponse_Msg_descriptor_;
}
bool CMsg8BallMoveGunResponse_Msg_IsValid(int value) {
  switch(value) {
    case 131111:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsg8BallMoveGunResponse_Msg CMsg8BallMoveGunResponse::MsgID;
const CMsg8BallMoveGunResponse_Msg CMsg8BallMoveGunResponse::Msg_MIN;
const CMsg8BallMoveGunResponse_Msg CMsg8BallMoveGunResponse::Msg_MAX;
const int CMsg8BallMoveGunResponse::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsg8BallMoveGunResponse::kAngleFieldNumber;
#endif  // !_MSC_VER

CMsg8BallMoveGunResponse::CMsg8BallMoveGunResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsg8BallMoveGunResponse::InitAsDefaultInstance() {
}

CMsg8BallMoveGunResponse::CMsg8BallMoveGunResponse(const CMsg8BallMoveGunResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsg8BallMoveGunResponse::SharedCtor() {
  _cached_size_ = 0;
  angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsg8BallMoveGunResponse::~CMsg8BallMoveGunResponse() {
  SharedDtor();
}

void CMsg8BallMoveGunResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsg8BallMoveGunResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsg8BallMoveGunResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg8BallMoveGunResponse_descriptor_;
}

const CMsg8BallMoveGunResponse& CMsg8BallMoveGunResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

CMsg8BallMoveGunResponse* CMsg8BallMoveGunResponse::default_instance_ = NULL;

CMsg8BallMoveGunResponse* CMsg8BallMoveGunResponse::New() const {
  return new CMsg8BallMoveGunResponse;
}

void CMsg8BallMoveGunResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    angle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsg8BallMoveGunResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 angle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsg8BallMoveGunResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 angle = 1;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->angle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsg8BallMoveGunResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 angle = 1;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->angle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsg8BallMoveGunResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 angle = 1;
    if (has_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->angle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsg8BallMoveGunResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsg8BallMoveGunResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsg8BallMoveGunResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsg8BallMoveGunResponse::MergeFrom(const CMsg8BallMoveGunResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_angle()) {
      set_angle(from.angle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsg8BallMoveGunResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsg8BallMoveGunResponse::CopyFrom(const CMsg8BallMoveGunResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsg8BallMoveGunResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMsg8BallMoveGunResponse::Swap(CMsg8BallMoveGunResponse* other) {
  if (other != this) {
    std::swap(angle_, other->angle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsg8BallMoveGunResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsg8BallMoveGunResponse_descriptor_;
  metadata.reflection = CMsg8BallMoveGunResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsg8Ball3PFoulResponse_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg8Ball3PFoulResponse_Msg_descriptor_;
}
bool CMsg8Ball3PFoulResponse_Msg_IsValid(int value) {
  switch(value) {
    case 131112:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsg8Ball3PFoulResponse_Msg CMsg8Ball3PFoulResponse::MsgID;
const CMsg8Ball3PFoulResponse_Msg CMsg8Ball3PFoulResponse::Msg_MIN;
const CMsg8Ball3PFoulResponse_Msg CMsg8Ball3PFoulResponse::Msg_MAX;
const int CMsg8Ball3PFoulResponse::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsg8Ball3PFoulResponse::kRoleidFieldNumber;
const int CMsg8Ball3PFoulResponse::kBallnumFieldNumber;
#endif  // !_MSC_VER

CMsg8Ball3PFoulResponse::CMsg8Ball3PFoulResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsg8Ball3PFoulResponse::InitAsDefaultInstance() {
}

CMsg8Ball3PFoulResponse::CMsg8Ball3PFoulResponse(const CMsg8Ball3PFoulResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsg8Ball3PFoulResponse::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_LONGLONG(0);
  ballnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsg8Ball3PFoulResponse::~CMsg8Ball3PFoulResponse() {
  SharedDtor();
}

void CMsg8Ball3PFoulResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsg8Ball3PFoulResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsg8Ball3PFoulResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg8Ball3PFoulResponse_descriptor_;
}

const CMsg8Ball3PFoulResponse& CMsg8Ball3PFoulResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

CMsg8Ball3PFoulResponse* CMsg8Ball3PFoulResponse::default_instance_ = NULL;

CMsg8Ball3PFoulResponse* CMsg8Ball3PFoulResponse::New() const {
  return new CMsg8Ball3PFoulResponse;
}

void CMsg8Ball3PFoulResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_LONGLONG(0);
    ballnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsg8Ball3PFoulResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ballnum;
        break;
      }

      // required int32 ballnum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ballnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ballnum_)));
          set_has_ballnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsg8Ball3PFoulResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleid(), output);
  }

  // required int32 ballnum = 2;
  if (has_ballnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ballnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsg8Ball3PFoulResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleid(), target);
  }

  // required int32 ballnum = 2;
  if (has_ballnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ballnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsg8Ball3PFoulResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleid());
    }

    // required int32 ballnum = 2;
    if (has_ballnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ballnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsg8Ball3PFoulResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsg8Ball3PFoulResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsg8Ball3PFoulResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsg8Ball3PFoulResponse::MergeFrom(const CMsg8Ball3PFoulResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_ballnum()) {
      set_ballnum(from.ballnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsg8Ball3PFoulResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsg8Ball3PFoulResponse::CopyFrom(const CMsg8Ball3PFoulResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsg8Ball3PFoulResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMsg8Ball3PFoulResponse::Swap(CMsg8Ball3PFoulResponse* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(ballnum_, other->ballnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsg8Ball3PFoulResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsg8Ball3PFoulResponse_descriptor_;
  metadata.reflection = CMsg8Ball3PFoulResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsg8BallUpdateResultToHall_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg8BallUpdateResultToHall_Msg_descriptor_;
}
bool CMsg8BallUpdateResultToHall_Msg_IsValid(int value) {
  switch(value) {
    case 131113:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsg8BallUpdateResultToHall_Msg CMsg8BallUpdateResultToHall::MsgID;
const CMsg8BallUpdateResultToHall_Msg CMsg8BallUpdateResultToHall::Msg_MIN;
const CMsg8BallUpdateResultToHall_Msg CMsg8BallUpdateResultToHall::Msg_MAX;
const int CMsg8BallUpdateResultToHall::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsg8BallUpdateResultToHall::kTypeFieldNumber;
const int CMsg8BallUpdateResultToHall::kDataFieldNumber;
#endif  // !_MSC_VER

CMsg8BallUpdateResultToHall::CMsg8BallUpdateResultToHall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsg8BallUpdateResultToHall::InitAsDefaultInstance() {
}

CMsg8BallUpdateResultToHall::CMsg8BallUpdateResultToHall(const CMsg8BallUpdateResultToHall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsg8BallUpdateResultToHall::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsg8BallUpdateResultToHall::~CMsg8BallUpdateResultToHall() {
  SharedDtor();
}

void CMsg8BallUpdateResultToHall::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsg8BallUpdateResultToHall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsg8BallUpdateResultToHall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg8BallUpdateResultToHall_descriptor_;
}

const CMsg8BallUpdateResultToHall& CMsg8BallUpdateResultToHall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roommessage_2eproto();
  return *default_instance_;
}

CMsg8BallUpdateResultToHall* CMsg8BallUpdateResultToHall::default_instance_ = NULL;

CMsg8BallUpdateResultToHall* CMsg8BallUpdateResultToHall::New() const {
  return new CMsg8BallUpdateResultToHall;
}

void CMsg8BallUpdateResultToHall::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsg8BallUpdateResultToHall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EDataStatisticsType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EDataStatisticsType_IsValid(value)) {
            set_type(static_cast< ::EDataStatisticsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .PB8BallDataStatistics data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsg8BallUpdateResultToHall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .EDataStatisticsType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .PB8BallDataStatistics data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsg8BallUpdateResultToHall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .EDataStatisticsType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .PB8BallDataStatistics data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsg8BallUpdateResultToHall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .EDataStatisticsType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .PB8BallDataStatistics data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsg8BallUpdateResultToHall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsg8BallUpdateResultToHall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsg8BallUpdateResultToHall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsg8BallUpdateResultToHall::MergeFrom(const CMsg8BallUpdateResultToHall& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsg8BallUpdateResultToHall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsg8BallUpdateResultToHall::CopyFrom(const CMsg8BallUpdateResultToHall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsg8BallUpdateResultToHall::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void CMsg8BallUpdateResultToHall::Swap(CMsg8BallUpdateResultToHall* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsg8BallUpdateResultToHall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsg8BallUpdateResultToHall_descriptor_;
  metadata.reflection = CMsg8BallUpdateResultToHall_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
