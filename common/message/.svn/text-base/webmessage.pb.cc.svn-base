// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webmessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "webmessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgWeb2GameRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgWeb2GameRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgWeb2GameRequest_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgGame2WebResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGame2WebResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgGame2WebResponse_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgGame2WebRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGame2WebRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgGame2WebRequest_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgWeb2GameResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgWeb2GameResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgWeb2GameResponse_Msg_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_webmessage_2eproto() {
  protobuf_AddDesc_webmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "webmessage.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgWeb2GameRequest_descriptor_ = file->message_type(0);
  static const int CMsgWeb2GameRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeb2GameRequest, requesttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeb2GameRequest, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeb2GameRequest, data_),
  };
  CMsgWeb2GameRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgWeb2GameRequest_descriptor_,
      CMsgWeb2GameRequest::default_instance_,
      CMsgWeb2GameRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeb2GameRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeb2GameRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgWeb2GameRequest));
  CMsgWeb2GameRequest_Msg_descriptor_ = CMsgWeb2GameRequest_descriptor_->enum_type(0);
  CMsgGame2WebResponse_descriptor_ = file->message_type(1);
  static const int CMsgGame2WebResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGame2WebResponse, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGame2WebResponse, data_),
  };
  CMsgGame2WebResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGame2WebResponse_descriptor_,
      CMsgGame2WebResponse::default_instance_,
      CMsgGame2WebResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGame2WebResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGame2WebResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGame2WebResponse));
  CMsgGame2WebResponse_Msg_descriptor_ = CMsgGame2WebResponse_descriptor_->enum_type(0);
  CMsgGame2WebRequest_descriptor_ = file->message_type(2);
  static const int CMsgGame2WebRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGame2WebRequest, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGame2WebRequest, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGame2WebRequest, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGame2WebRequest, data_),
  };
  CMsgGame2WebRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGame2WebRequest_descriptor_,
      CMsgGame2WebRequest::default_instance_,
      CMsgGame2WebRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGame2WebRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGame2WebRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGame2WebRequest));
  CMsgGame2WebRequest_Msg_descriptor_ = CMsgGame2WebRequest_descriptor_->enum_type(0);
  CMsgWeb2GameResponse_descriptor_ = file->message_type(3);
  static const int CMsgWeb2GameResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeb2GameResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeb2GameResponse, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeb2GameResponse, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeb2GameResponse, data_),
  };
  CMsgWeb2GameResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgWeb2GameResponse_descriptor_,
      CMsgWeb2GameResponse::default_instance_,
      CMsgWeb2GameResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeb2GameResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeb2GameResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgWeb2GameResponse));
  CMsgWeb2GameResponse_Msg_descriptor_ = CMsgWeb2GameResponse_descriptor_->enum_type(0);
  REQUEST_TYPE_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_webmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgWeb2GameRequest_descriptor_, &CMsgWeb2GameRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGame2WebResponse_descriptor_, &CMsgGame2WebResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGame2WebRequest_descriptor_, &CMsgGame2WebRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgWeb2GameResponse_descriptor_, &CMsgWeb2GameResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_webmessage_2eproto() {
  delete CMsgWeb2GameRequest::default_instance_;
  delete CMsgWeb2GameRequest_reflection_;
  delete CMsgGame2WebResponse::default_instance_;
  delete CMsgGame2WebResponse_reflection_;
  delete CMsgGame2WebRequest::default_instance_;
  delete CMsgGame2WebRequest_reflection_;
  delete CMsgWeb2GameResponse::default_instance_;
  delete CMsgWeb2GameResponse_reflection_;
}

void protobuf_AddDesc_webmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020webmessage.proto\"n\n\023CMsgWeb2GameReques"
    "t\022\"\n\013RequestType\030\001 \001(\0162\r.REQUEST_TYPE\022\021\n"
    "\tSessionID\030\002 \001(\004\022\014\n\004Data\030\003 \001(\014\"\022\n\003Msg\022\013\n"
    "\005MsgID\020\201\200\014\"K\n\024CMsgGame2WebResponse\022\021\n\tSe"
    "ssionID\030\001 \001(\004\022\014\n\004Data\030\002 \001(\014\"\022\n\003Msg\022\013\n\005Ms"
    "gID\020\202\200\014\"j\n\023CMsgGame2WebRequest\022\021\n\tSessio"
    "nID\030\001 \001(\r\022\021\n\tTimeStamp\030\002 \001(\004\022\013\n\003Url\030\003 \002("
    "\t\022\014\n\004Data\030\004 \001(\014\"\022\n\003Msg\022\013\n\005MsgID\020\203\200\014\"n\n\024C"
    "MsgWeb2GameResponse\022\016\n\006Result\030\001 \002(\005\022\021\n\tS"
    "essionID\030\002 \001(\r\022\021\n\tTimeStamp\030\003 \001(\004\022\014\n\004Dat"
    "a\030\004 \001(\014\"\022\n\003Msg\022\013\n\005MsgID\020\204\200\014*\'\n\014REQUEST_T"
    "YPE\022\013\n\007RT_JSON\020\000\022\n\n\006RT_URL\020\001B\002H\001", 472);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "webmessage.proto", &protobuf_RegisterTypes);
  CMsgWeb2GameRequest::default_instance_ = new CMsgWeb2GameRequest();
  CMsgGame2WebResponse::default_instance_ = new CMsgGame2WebResponse();
  CMsgGame2WebRequest::default_instance_ = new CMsgGame2WebRequest();
  CMsgWeb2GameResponse::default_instance_ = new CMsgWeb2GameResponse();
  CMsgWeb2GameRequest::default_instance_->InitAsDefaultInstance();
  CMsgGame2WebResponse::default_instance_->InitAsDefaultInstance();
  CMsgGame2WebRequest::default_instance_->InitAsDefaultInstance();
  CMsgWeb2GameResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_webmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_webmessage_2eproto {
  StaticDescriptorInitializer_webmessage_2eproto() {
    protobuf_AddDesc_webmessage_2eproto();
  }
} static_descriptor_initializer_webmessage_2eproto_;
const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQUEST_TYPE_descriptor_;
}
bool REQUEST_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgWeb2GameRequest_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgWeb2GameRequest_Msg_descriptor_;
}
bool CMsgWeb2GameRequest_Msg_IsValid(int value) {
  switch(value) {
    case 196609:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgWeb2GameRequest_Msg CMsgWeb2GameRequest::MsgID;
const CMsgWeb2GameRequest_Msg CMsgWeb2GameRequest::Msg_MIN;
const CMsgWeb2GameRequest_Msg CMsgWeb2GameRequest::Msg_MAX;
const int CMsgWeb2GameRequest::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgWeb2GameRequest::kRequestTypeFieldNumber;
const int CMsgWeb2GameRequest::kSessionIDFieldNumber;
const int CMsgWeb2GameRequest::kDataFieldNumber;
#endif  // !_MSC_VER

CMsgWeb2GameRequest::CMsgWeb2GameRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgWeb2GameRequest::InitAsDefaultInstance() {
}

CMsgWeb2GameRequest::CMsgWeb2GameRequest(const CMsgWeb2GameRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgWeb2GameRequest::SharedCtor() {
  _cached_size_ = 0;
  requesttype_ = 0;
  sessionid_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgWeb2GameRequest::~CMsgWeb2GameRequest() {
  SharedDtor();
}

void CMsgWeb2GameRequest::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void CMsgWeb2GameRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgWeb2GameRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgWeb2GameRequest_descriptor_;
}

const CMsgWeb2GameRequest& CMsgWeb2GameRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_webmessage_2eproto();
  return *default_instance_;
}

CMsgWeb2GameRequest* CMsgWeb2GameRequest::default_instance_ = NULL;

CMsgWeb2GameRequest* CMsgWeb2GameRequest::New() const {
  return new CMsgWeb2GameRequest;
}

void CMsgWeb2GameRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    requesttype_ = 0;
    sessionid_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgWeb2GameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .REQUEST_TYPE RequestType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::REQUEST_TYPE_IsValid(value)) {
            set_requesttype(static_cast< ::REQUEST_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SessionID;
        break;
      }

      // optional uint64 SessionID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SessionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Data;
        break;
      }

      // optional bytes Data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgWeb2GameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .REQUEST_TYPE RequestType = 1;
  if (has_requesttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->requesttype(), output);
  }

  // optional uint64 SessionID = 2;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->sessionid(), output);
  }

  // optional bytes Data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgWeb2GameRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .REQUEST_TYPE RequestType = 1;
  if (has_requesttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->requesttype(), target);
  }

  // optional uint64 SessionID = 2;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->sessionid(), target);
  }

  // optional bytes Data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgWeb2GameRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .REQUEST_TYPE RequestType = 1;
    if (has_requesttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->requesttype());
    }

    // optional uint64 SessionID = 2;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sessionid());
    }

    // optional bytes Data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgWeb2GameRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgWeb2GameRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgWeb2GameRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgWeb2GameRequest::MergeFrom(const CMsgWeb2GameRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requesttype()) {
      set_requesttype(from.requesttype());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgWeb2GameRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgWeb2GameRequest::CopyFrom(const CMsgWeb2GameRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWeb2GameRequest::IsInitialized() const {

  return true;
}

void CMsgWeb2GameRequest::Swap(CMsgWeb2GameRequest* other) {
  if (other != this) {
    std::swap(requesttype_, other->requesttype_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgWeb2GameRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgWeb2GameRequest_descriptor_;
  metadata.reflection = CMsgWeb2GameRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgGame2WebResponse_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGame2WebResponse_Msg_descriptor_;
}
bool CMsgGame2WebResponse_Msg_IsValid(int value) {
  switch(value) {
    case 196610:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgGame2WebResponse_Msg CMsgGame2WebResponse::MsgID;
const CMsgGame2WebResponse_Msg CMsgGame2WebResponse::Msg_MIN;
const CMsgGame2WebResponse_Msg CMsgGame2WebResponse::Msg_MAX;
const int CMsgGame2WebResponse::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgGame2WebResponse::kSessionIDFieldNumber;
const int CMsgGame2WebResponse::kDataFieldNumber;
#endif  // !_MSC_VER

CMsgGame2WebResponse::CMsgGame2WebResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGame2WebResponse::InitAsDefaultInstance() {
}

CMsgGame2WebResponse::CMsgGame2WebResponse(const CMsgGame2WebResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGame2WebResponse::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGame2WebResponse::~CMsgGame2WebResponse() {
  SharedDtor();
}

void CMsgGame2WebResponse::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGame2WebResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGame2WebResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGame2WebResponse_descriptor_;
}

const CMsgGame2WebResponse& CMsgGame2WebResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_webmessage_2eproto();
  return *default_instance_;
}

CMsgGame2WebResponse* CMsgGame2WebResponse::default_instance_ = NULL;

CMsgGame2WebResponse* CMsgGame2WebResponse::New() const {
  return new CMsgGame2WebResponse;
}

void CMsgGame2WebResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sessionid_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGame2WebResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 SessionID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Data;
        break;
      }

      // optional bytes Data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGame2WebResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 SessionID = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sessionid(), output);
  }

  // optional bytes Data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGame2WebResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 SessionID = 1;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sessionid(), target);
  }

  // optional bytes Data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGame2WebResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 SessionID = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sessionid());
    }

    // optional bytes Data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGame2WebResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGame2WebResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGame2WebResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGame2WebResponse::MergeFrom(const CMsgGame2WebResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGame2WebResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGame2WebResponse::CopyFrom(const CMsgGame2WebResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGame2WebResponse::IsInitialized() const {

  return true;
}

void CMsgGame2WebResponse::Swap(CMsgGame2WebResponse* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGame2WebResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGame2WebResponse_descriptor_;
  metadata.reflection = CMsgGame2WebResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgGame2WebRequest_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGame2WebRequest_Msg_descriptor_;
}
bool CMsgGame2WebRequest_Msg_IsValid(int value) {
  switch(value) {
    case 196611:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgGame2WebRequest_Msg CMsgGame2WebRequest::MsgID;
const CMsgGame2WebRequest_Msg CMsgGame2WebRequest::Msg_MIN;
const CMsgGame2WebRequest_Msg CMsgGame2WebRequest::Msg_MAX;
const int CMsgGame2WebRequest::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgGame2WebRequest::kSessionIDFieldNumber;
const int CMsgGame2WebRequest::kTimeStampFieldNumber;
const int CMsgGame2WebRequest::kUrlFieldNumber;
const int CMsgGame2WebRequest::kDataFieldNumber;
#endif  // !_MSC_VER

CMsgGame2WebRequest::CMsgGame2WebRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGame2WebRequest::InitAsDefaultInstance() {
}

CMsgGame2WebRequest::CMsgGame2WebRequest(const CMsgGame2WebRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGame2WebRequest::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = 0u;
  timestamp_ = GOOGLE_ULONGLONG(0);
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGame2WebRequest::~CMsgGame2WebRequest() {
  SharedDtor();
}

void CMsgGame2WebRequest::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGame2WebRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGame2WebRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGame2WebRequest_descriptor_;
}

const CMsgGame2WebRequest& CMsgGame2WebRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_webmessage_2eproto();
  return *default_instance_;
}

CMsgGame2WebRequest* CMsgGame2WebRequest::default_instance_ = NULL;

CMsgGame2WebRequest* CMsgGame2WebRequest::New() const {
  return new CMsgGame2WebRequest;
}

void CMsgGame2WebRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sessionid_ = 0u;
    timestamp_ = GOOGLE_ULONGLONG(0);
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGame2WebRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SessionID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TimeStamp;
        break;
      }

      // optional uint64 TimeStamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeStamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Url;
        break;
      }

      // required string Url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Data;
        break;
      }

      // optional bytes Data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGame2WebRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 SessionID = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sessionid(), output);
  }

  // optional uint64 TimeStamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
  }

  // required string Url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->url(), output);
  }

  // optional bytes Data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGame2WebRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SessionID = 1;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sessionid(), target);
  }

  // optional uint64 TimeStamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp(), target);
  }

  // required string Url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  // optional bytes Data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGame2WebRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SessionID = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sessionid());
    }

    // optional uint64 TimeStamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // required string Url = 3;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional bytes Data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGame2WebRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGame2WebRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGame2WebRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGame2WebRequest::MergeFrom(const CMsgGame2WebRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGame2WebRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGame2WebRequest::CopyFrom(const CMsgGame2WebRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGame2WebRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void CMsgGame2WebRequest::Swap(CMsgGame2WebRequest* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(url_, other->url_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGame2WebRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGame2WebRequest_descriptor_;
  metadata.reflection = CMsgGame2WebRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgWeb2GameResponse_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgWeb2GameResponse_Msg_descriptor_;
}
bool CMsgWeb2GameResponse_Msg_IsValid(int value) {
  switch(value) {
    case 196612:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgWeb2GameResponse_Msg CMsgWeb2GameResponse::MsgID;
const CMsgWeb2GameResponse_Msg CMsgWeb2GameResponse::Msg_MIN;
const CMsgWeb2GameResponse_Msg CMsgWeb2GameResponse::Msg_MAX;
const int CMsgWeb2GameResponse::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgWeb2GameResponse::kResultFieldNumber;
const int CMsgWeb2GameResponse::kSessionIDFieldNumber;
const int CMsgWeb2GameResponse::kTimeStampFieldNumber;
const int CMsgWeb2GameResponse::kDataFieldNumber;
#endif  // !_MSC_VER

CMsgWeb2GameResponse::CMsgWeb2GameResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgWeb2GameResponse::InitAsDefaultInstance() {
}

CMsgWeb2GameResponse::CMsgWeb2GameResponse(const CMsgWeb2GameResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgWeb2GameResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  sessionid_ = 0u;
  timestamp_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgWeb2GameResponse::~CMsgWeb2GameResponse() {
  SharedDtor();
}

void CMsgWeb2GameResponse::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void CMsgWeb2GameResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgWeb2GameResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgWeb2GameResponse_descriptor_;
}

const CMsgWeb2GameResponse& CMsgWeb2GameResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_webmessage_2eproto();
  return *default_instance_;
}

CMsgWeb2GameResponse* CMsgWeb2GameResponse::default_instance_ = NULL;

CMsgWeb2GameResponse* CMsgWeb2GameResponse::New() const {
  return new CMsgWeb2GameResponse;
}

void CMsgWeb2GameResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    sessionid_ = 0u;
    timestamp_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgWeb2GameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SessionID;
        break;
      }

      // optional uint32 SessionID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SessionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TimeStamp;
        break;
      }

      // optional uint64 TimeStamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeStamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Data;
        break;
      }

      // optional bytes Data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgWeb2GameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint32 SessionID = 2;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sessionid(), output);
  }

  // optional uint64 TimeStamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp(), output);
  }

  // optional bytes Data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgWeb2GameResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint32 SessionID = 2;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sessionid(), target);
  }

  // optional uint64 TimeStamp = 3;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp(), target);
  }

  // optional bytes Data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgWeb2GameResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint32 SessionID = 2;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sessionid());
    }

    // optional uint64 TimeStamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional bytes Data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgWeb2GameResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgWeb2GameResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgWeb2GameResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgWeb2GameResponse::MergeFrom(const CMsgWeb2GameResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgWeb2GameResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgWeb2GameResponse::CopyFrom(const CMsgWeb2GameResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWeb2GameResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMsgWeb2GameResponse::Swap(CMsgWeb2GameResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgWeb2GameResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgWeb2GameResponse_descriptor_;
  metadata.reflection = CMsgWeb2GameResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
