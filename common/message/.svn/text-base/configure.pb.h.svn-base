// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: configure.proto

#ifndef PROTOBUF_configure_2eproto__INCLUDED
#define PROTOBUF_configure_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_configure_2eproto();
void protobuf_AssignDesc_configure_2eproto();
void protobuf_ShutdownFile_configure_2eproto();

class PBProxy;
class PBGate;
class PBLog;
class PBDBConfig;
class PBHallConfig;
class PBRoomConfig;
class PBProxyConfig;
class PBTcpConfig;
class PBGateConfig;
class PBClientConfig;
class CConfigure;

// ===================================================================

class PBProxy : public ::google::protobuf::Message {
 public:
  PBProxy();
  virtual ~PBProxy();

  PBProxy(const PBProxy& from);

  inline PBProxy& operator=(const PBProxy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBProxy& default_instance();

  void Swap(PBProxy* other);

  // implements Message ----------------------------------------------

  PBProxy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBProxy& from);
  void MergeFrom(const PBProxy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PBProxy)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_configure_2eproto();
  friend void protobuf_AssignDesc_configure_2eproto();
  friend void protobuf_ShutdownFile_configure_2eproto();

  void InitAsDefaultInstance();
  static PBProxy* default_instance_;
};
// -------------------------------------------------------------------

class PBGate : public ::google::protobuf::Message {
 public:
  PBGate();
  virtual ~PBGate();

  PBGate(const PBGate& from);

  inline PBGate& operator=(const PBGate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGate& default_instance();

  void Swap(PBGate* other);

  // implements Message ----------------------------------------------

  PBGate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGate& from);
  void MergeFrom(const PBGate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PBGate)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_configure_2eproto();
  friend void protobuf_AssignDesc_configure_2eproto();
  friend void protobuf_ShutdownFile_configure_2eproto();

  void InitAsDefaultInstance();
  static PBGate* default_instance_;
};
// -------------------------------------------------------------------

class PBLog : public ::google::protobuf::Message {
 public:
  PBLog();
  virtual ~PBLog();

  PBLog(const PBLog& from);

  inline PBLog& operator=(const PBLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBLog& default_instance();

  void Swap(PBLog* other);

  // implements Message ----------------------------------------------

  PBLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBLog& from);
  void MergeFrom(const PBLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string identifier = 1;
  inline bool has_identifier() const;
  inline void clear_identifier();
  static const int kIdentifierFieldNumber = 1;
  inline const ::std::string& identifier() const;
  inline void set_identifier(const ::std::string& value);
  inline void set_identifier(const char* value);
  inline void set_identifier(const char* value, size_t size);
  inline ::std::string* mutable_identifier();
  inline ::std::string* release_identifier();
  inline void set_allocated_identifier(::std::string* identifier);

  // required string directory = 2;
  inline bool has_directory() const;
  inline void clear_directory();
  static const int kDirectoryFieldNumber = 2;
  inline const ::std::string& directory() const;
  inline void set_directory(const ::std::string& value);
  inline void set_directory(const char* value);
  inline void set_directory(const char* value, size_t size);
  inline ::std::string* mutable_directory();
  inline ::std::string* release_directory();
  inline void set_allocated_directory(::std::string* directory);

  // required uint32 priority = 3;
  inline bool has_priority() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 3;
  inline ::google::protobuf::uint32 priority() const;
  inline void set_priority(::google::protobuf::uint32 value);

  // required uint32 maxfilesize = 4;
  inline bool has_maxfilesize() const;
  inline void clear_maxfilesize();
  static const int kMaxfilesizeFieldNumber = 4;
  inline ::google::protobuf::uint32 maxfilesize() const;
  inline void set_maxfilesize(::google::protobuf::uint32 value);

  // required uint32 maxbackupindex = 5;
  inline bool has_maxbackupindex() const;
  inline void clear_maxbackupindex();
  static const int kMaxbackupindexFieldNumber = 5;
  inline ::google::protobuf::uint32 maxbackupindex() const;
  inline void set_maxbackupindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PBLog)
 private:
  inline void set_has_identifier();
  inline void clear_has_identifier();
  inline void set_has_directory();
  inline void clear_has_directory();
  inline void set_has_priority();
  inline void clear_has_priority();
  inline void set_has_maxfilesize();
  inline void clear_has_maxfilesize();
  inline void set_has_maxbackupindex();
  inline void clear_has_maxbackupindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* identifier_;
  ::std::string* directory_;
  ::google::protobuf::uint32 priority_;
  ::google::protobuf::uint32 maxfilesize_;
  ::google::protobuf::uint32 maxbackupindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_configure_2eproto();
  friend void protobuf_AssignDesc_configure_2eproto();
  friend void protobuf_ShutdownFile_configure_2eproto();

  void InitAsDefaultInstance();
  static PBLog* default_instance_;
};
// -------------------------------------------------------------------

class PBDBConfig : public ::google::protobuf::Message {
 public:
  PBDBConfig();
  virtual ~PBDBConfig();

  PBDBConfig(const PBDBConfig& from);

  inline PBDBConfig& operator=(const PBDBConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBDBConfig& default_instance();

  void Swap(PBDBConfig* other);

  // implements Message ----------------------------------------------

  PBDBConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBDBConfig& from);
  void MergeFrom(const PBDBConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string selfip = 1;
  inline bool has_selfip() const;
  inline void clear_selfip();
  static const int kSelfipFieldNumber = 1;
  inline const ::std::string& selfip() const;
  inline void set_selfip(const ::std::string& value);
  inline void set_selfip(const char* value);
  inline void set_selfip(const char* value, size_t size);
  inline ::std::string* mutable_selfip();
  inline ::std::string* release_selfip();
  inline void set_allocated_selfip(::std::string* selfip);

  // required uint32 selfport = 2;
  inline bool has_selfport() const;
  inline void clear_selfport();
  static const int kSelfportFieldNumber = 2;
  inline ::google::protobuf::uint32 selfport() const;
  inline void set_selfport(::google::protobuf::uint32 value);

  // required uint32 serverid = 3;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 3;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // repeated .PBProxy proxyinfo = 4;
  inline int proxyinfo_size() const;
  inline void clear_proxyinfo();
  static const int kProxyinfoFieldNumber = 4;
  inline const ::PBProxy& proxyinfo(int index) const;
  inline ::PBProxy* mutable_proxyinfo(int index);
  inline ::PBProxy* add_proxyinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::PBProxy >&
      proxyinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBProxy >*
      mutable_proxyinfo();

  // required string mysqlinfo = 5;
  inline bool has_mysqlinfo() const;
  inline void clear_mysqlinfo();
  static const int kMysqlinfoFieldNumber = 5;
  inline const ::std::string& mysqlinfo() const;
  inline void set_mysqlinfo(const ::std::string& value);
  inline void set_mysqlinfo(const char* value);
  inline void set_mysqlinfo(const char* value, size_t size);
  inline ::std::string* mutable_mysqlinfo();
  inline ::std::string* release_mysqlinfo();
  inline void set_allocated_mysqlinfo(::std::string* mysqlinfo);

  // required uint32 loglvl = 6;
  inline bool has_loglvl() const;
  inline void clear_loglvl();
  static const int kLoglvlFieldNumber = 6;
  inline ::google::protobuf::uint32 loglvl() const;
  inline void set_loglvl(::google::protobuf::uint32 value);

  // required uint32 rwtimeout = 7;
  inline bool has_rwtimeout() const;
  inline void clear_rwtimeout();
  static const int kRwtimeoutFieldNumber = 7;
  inline ::google::protobuf::uint32 rwtimeout() const;
  inline void set_rwtimeout(::google::protobuf::uint32 value);

  // required uint32 sleeptime = 8;
  inline bool has_sleeptime() const;
  inline void clear_sleeptime();
  static const int kSleeptimeFieldNumber = 8;
  inline ::google::protobuf::uint32 sleeptime() const;
  inline void set_sleeptime(::google::protobuf::uint32 value);

  // required uint32 loop = 9;
  inline bool has_loop() const;
  inline void clear_loop();
  static const int kLoopFieldNumber = 9;
  inline ::google::protobuf::uint32 loop() const;
  inline void set_loop(::google::protobuf::uint32 value);

  // required int64 keepalive = 10;
  inline bool has_keepalive() const;
  inline void clear_keepalive();
  static const int kKeepaliveFieldNumber = 10;
  inline ::google::protobuf::int64 keepalive() const;
  inline void set_keepalive(::google::protobuf::int64 value);

  // required int64 servertick = 11;
  inline bool has_servertick() const;
  inline void clear_servertick();
  static const int kServertickFieldNumber = 11;
  inline ::google::protobuf::int64 servertick() const;
  inline void set_servertick(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PBDBConfig)
 private:
  inline void set_has_selfip();
  inline void clear_has_selfip();
  inline void set_has_selfport();
  inline void clear_has_selfport();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_mysqlinfo();
  inline void clear_has_mysqlinfo();
  inline void set_has_loglvl();
  inline void clear_has_loglvl();
  inline void set_has_rwtimeout();
  inline void clear_has_rwtimeout();
  inline void set_has_sleeptime();
  inline void clear_has_sleeptime();
  inline void set_has_loop();
  inline void clear_has_loop();
  inline void set_has_keepalive();
  inline void clear_has_keepalive();
  inline void set_has_servertick();
  inline void clear_has_servertick();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* selfip_;
  ::google::protobuf::uint32 selfport_;
  ::google::protobuf::uint32 serverid_;
  ::google::protobuf::RepeatedPtrField< ::PBProxy > proxyinfo_;
  ::std::string* mysqlinfo_;
  ::google::protobuf::uint32 loglvl_;
  ::google::protobuf::uint32 rwtimeout_;
  ::google::protobuf::uint32 sleeptime_;
  ::google::protobuf::uint32 loop_;
  ::google::protobuf::int64 keepalive_;
  ::google::protobuf::int64 servertick_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_configure_2eproto();
  friend void protobuf_AssignDesc_configure_2eproto();
  friend void protobuf_ShutdownFile_configure_2eproto();

  void InitAsDefaultInstance();
  static PBDBConfig* default_instance_;
};
// -------------------------------------------------------------------

class PBHallConfig : public ::google::protobuf::Message {
 public:
  PBHallConfig();
  virtual ~PBHallConfig();

  PBHallConfig(const PBHallConfig& from);

  inline PBHallConfig& operator=(const PBHallConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBHallConfig& default_instance();

  void Swap(PBHallConfig* other);

  // implements Message ----------------------------------------------

  PBHallConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBHallConfig& from);
  void MergeFrom(const PBHallConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 proxytimeout = 1;
  inline bool has_proxytimeout() const;
  inline void clear_proxytimeout();
  static const int kProxytimeoutFieldNumber = 1;
  inline ::google::protobuf::int64 proxytimeout() const;
  inline void set_proxytimeout(::google::protobuf::int64 value);

  // required int32 serverid = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 2;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // repeated .PBProxy proxyinfo = 3;
  inline int proxyinfo_size() const;
  inline void clear_proxyinfo();
  static const int kProxyinfoFieldNumber = 3;
  inline const ::PBProxy& proxyinfo(int index) const;
  inline ::PBProxy* mutable_proxyinfo(int index);
  inline ::PBProxy* add_proxyinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::PBProxy >&
      proxyinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBProxy >*
      mutable_proxyinfo();

  // repeated .PBLog loginfo = 4;
  inline int loginfo_size() const;
  inline void clear_loginfo();
  static const int kLoginfoFieldNumber = 4;
  inline const ::PBLog& loginfo(int index) const;
  inline ::PBLog* mutable_loginfo(int index);
  inline ::PBLog* add_loginfo();
  inline const ::google::protobuf::RepeatedPtrField< ::PBLog >&
      loginfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBLog >*
      mutable_loginfo();

  // required int64 keepalive = 5;
  inline bool has_keepalive() const;
  inline void clear_keepalive();
  static const int kKeepaliveFieldNumber = 5;
  inline ::google::protobuf::int64 keepalive() const;
  inline void set_keepalive(::google::protobuf::int64 value);

  // required int64 servertick = 6;
  inline bool has_servertick() const;
  inline void clear_servertick();
  static const int kServertickFieldNumber = 6;
  inline ::google::protobuf::int64 servertick() const;
  inline void set_servertick(::google::protobuf::int64 value);

  // required int64 sessiontimeout = 7;
  inline bool has_sessiontimeout() const;
  inline void clear_sessiontimeout();
  static const int kSessiontimeoutFieldNumber = 7;
  inline ::google::protobuf::int64 sessiontimeout() const;
  inline void set_sessiontimeout(::google::protobuf::int64 value);

  // required int64 perffrequecny = 8;
  inline bool has_perffrequecny() const;
  inline void clear_perffrequecny();
  static const int kPerffrequecnyFieldNumber = 8;
  inline ::google::protobuf::int64 perffrequecny() const;
  inline void set_perffrequecny(::google::protobuf::int64 value);

  // required bool encrypt = 9;
  inline bool has_encrypt() const;
  inline void clear_encrypt();
  static const int kEncryptFieldNumber = 9;
  inline bool encrypt() const;
  inline void set_encrypt(bool value);

  // required int64 autosave = 10;
  inline bool has_autosave() const;
  inline void clear_autosave();
  static const int kAutosaveFieldNumber = 10;
  inline ::google::protobuf::int64 autosave() const;
  inline void set_autosave(::google::protobuf::int64 value);

  // required int64 logintimeout = 11;
  inline bool has_logintimeout() const;
  inline void clear_logintimeout();
  static const int kLogintimeoutFieldNumber = 11;
  inline ::google::protobuf::int64 logintimeout() const;
  inline void set_logintimeout(::google::protobuf::int64 value);

  // required int64 nocontraltime = 12;
  inline bool has_nocontraltime() const;
  inline void clear_nocontraltime();
  static const int kNocontraltimeFieldNumber = 12;
  inline ::google::protobuf::int64 nocontraltime() const;
  inline void set_nocontraltime(::google::protobuf::int64 value);

  // required int32 dbserverid = 13;
  inline bool has_dbserverid() const;
  inline void clear_dbserverid();
  static const int kDbserveridFieldNumber = 13;
  inline ::google::protobuf::int32 dbserverid() const;
  inline void set_dbserverid(::google::protobuf::int32 value);

  // required int32 webserverid = 14;
  inline bool has_webserverid() const;
  inline void clear_webserverid();
  static const int kWebserveridFieldNumber = 14;
  inline ::google::protobuf::int32 webserverid() const;
  inline void set_webserverid(::google::protobuf::int32 value);

  // required string urllogincheck = 15;
  inline bool has_urllogincheck() const;
  inline void clear_urllogincheck();
  static const int kUrllogincheckFieldNumber = 15;
  inline const ::std::string& urllogincheck() const;
  inline void set_urllogincheck(const ::std::string& value);
  inline void set_urllogincheck(const char* value);
  inline void set_urllogincheck(const char* value, size_t size);
  inline ::std::string* mutable_urllogincheck();
  inline ::std::string* release_urllogincheck();
  inline void set_allocated_urllogincheck(::std::string* urllogincheck);

  // required string urlprintdot = 16;
  inline bool has_urlprintdot() const;
  inline void clear_urlprintdot();
  static const int kUrlprintdotFieldNumber = 16;
  inline const ::std::string& urlprintdot() const;
  inline void set_urlprintdot(const ::std::string& value);
  inline void set_urlprintdot(const char* value);
  inline void set_urlprintdot(const char* value, size_t size);
  inline ::std::string* mutable_urlprintdot();
  inline ::std::string* release_urlprintdot();
  inline void set_allocated_urlprintdot(::std::string* urlprintdot);

  // required string urlmimessage = 17;
  inline bool has_urlmimessage() const;
  inline void clear_urlmimessage();
  static const int kUrlmimessageFieldNumber = 17;
  inline const ::std::string& urlmimessage() const;
  inline void set_urlmimessage(const ::std::string& value);
  inline void set_urlmimessage(const char* value);
  inline void set_urlmimessage(const char* value, size_t size);
  inline ::std::string* mutable_urlmimessage();
  inline ::std::string* release_urlmimessage();
  inline void set_allocated_urlmimessage(::std::string* urlmimessage);

  // required bool sdkcheck = 18;
  inline bool has_sdkcheck() const;
  inline void clear_sdkcheck();
  static const int kSdkcheckFieldNumber = 18;
  inline bool sdkcheck() const;
  inline void set_sdkcheck(bool value);

  // required .PBGate gateinfo = 19;
  inline bool has_gateinfo() const;
  inline void clear_gateinfo();
  static const int kGateinfoFieldNumber = 19;
  inline const ::PBGate& gateinfo() const;
  inline ::PBGate* mutable_gateinfo();
  inline ::PBGate* release_gateinfo();
  inline void set_allocated_gateinfo(::PBGate* gateinfo);

  // required int32 addgold = 20;
  inline bool has_addgold() const;
  inline void clear_addgold();
  static const int kAddgoldFieldNumber = 20;
  inline ::google::protobuf::int32 addgold() const;
  inline void set_addgold(::google::protobuf::int32 value);

  // required int32 adddiamond = 21;
  inline bool has_adddiamond() const;
  inline void clear_adddiamond();
  static const int kAdddiamondFieldNumber = 21;
  inline ::google::protobuf::int32 adddiamond() const;
  inline void set_adddiamond(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PBHallConfig)
 private:
  inline void set_has_proxytimeout();
  inline void clear_has_proxytimeout();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_keepalive();
  inline void clear_has_keepalive();
  inline void set_has_servertick();
  inline void clear_has_servertick();
  inline void set_has_sessiontimeout();
  inline void clear_has_sessiontimeout();
  inline void set_has_perffrequecny();
  inline void clear_has_perffrequecny();
  inline void set_has_encrypt();
  inline void clear_has_encrypt();
  inline void set_has_autosave();
  inline void clear_has_autosave();
  inline void set_has_logintimeout();
  inline void clear_has_logintimeout();
  inline void set_has_nocontraltime();
  inline void clear_has_nocontraltime();
  inline void set_has_dbserverid();
  inline void clear_has_dbserverid();
  inline void set_has_webserverid();
  inline void clear_has_webserverid();
  inline void set_has_urllogincheck();
  inline void clear_has_urllogincheck();
  inline void set_has_urlprintdot();
  inline void clear_has_urlprintdot();
  inline void set_has_urlmimessage();
  inline void clear_has_urlmimessage();
  inline void set_has_sdkcheck();
  inline void clear_has_sdkcheck();
  inline void set_has_gateinfo();
  inline void clear_has_gateinfo();
  inline void set_has_addgold();
  inline void clear_has_addgold();
  inline void set_has_adddiamond();
  inline void clear_has_adddiamond();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 proxytimeout_;
  ::google::protobuf::RepeatedPtrField< ::PBProxy > proxyinfo_;
  ::google::protobuf::RepeatedPtrField< ::PBLog > loginfo_;
  ::google::protobuf::int64 keepalive_;
  ::google::protobuf::int64 servertick_;
  ::google::protobuf::int64 sessiontimeout_;
  ::google::protobuf::int32 serverid_;
  ::google::protobuf::int32 dbserverid_;
  ::google::protobuf::int64 perffrequecny_;
  ::google::protobuf::int64 autosave_;
  ::google::protobuf::int64 logintimeout_;
  ::google::protobuf::int64 nocontraltime_;
  bool encrypt_;
  bool sdkcheck_;
  ::google::protobuf::int32 webserverid_;
  ::std::string* urllogincheck_;
  ::std::string* urlprintdot_;
  ::std::string* urlmimessage_;
  ::PBGate* gateinfo_;
  ::google::protobuf::int32 addgold_;
  ::google::protobuf::int32 adddiamond_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(21 + 31) / 32];

  friend void  protobuf_AddDesc_configure_2eproto();
  friend void protobuf_AssignDesc_configure_2eproto();
  friend void protobuf_ShutdownFile_configure_2eproto();

  void InitAsDefaultInstance();
  static PBHallConfig* default_instance_;
};
// -------------------------------------------------------------------

class PBRoomConfig : public ::google::protobuf::Message {
 public:
  PBRoomConfig();
  virtual ~PBRoomConfig();

  PBRoomConfig(const PBRoomConfig& from);

  inline PBRoomConfig& operator=(const PBRoomConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBRoomConfig& default_instance();

  void Swap(PBRoomConfig* other);

  // implements Message ----------------------------------------------

  PBRoomConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBRoomConfig& from);
  void MergeFrom(const PBRoomConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 proxytimeout = 1;
  inline bool has_proxytimeout() const;
  inline void clear_proxytimeout();
  static const int kProxytimeoutFieldNumber = 1;
  inline ::google::protobuf::int64 proxytimeout() const;
  inline void set_proxytimeout(::google::protobuf::int64 value);

  // required int32 serverid = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 2;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // repeated .PBProxy proxyinfo = 3;
  inline int proxyinfo_size() const;
  inline void clear_proxyinfo();
  static const int kProxyinfoFieldNumber = 3;
  inline const ::PBProxy& proxyinfo(int index) const;
  inline ::PBProxy* mutable_proxyinfo(int index);
  inline ::PBProxy* add_proxyinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::PBProxy >&
      proxyinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBProxy >*
      mutable_proxyinfo();

  // repeated .PBLog loginfo = 4;
  inline int loginfo_size() const;
  inline void clear_loginfo();
  static const int kLoginfoFieldNumber = 4;
  inline const ::PBLog& loginfo(int index) const;
  inline ::PBLog* mutable_loginfo(int index);
  inline ::PBLog* add_loginfo();
  inline const ::google::protobuf::RepeatedPtrField< ::PBLog >&
      loginfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBLog >*
      mutable_loginfo();

  // required int64 keepalive = 5;
  inline bool has_keepalive() const;
  inline void clear_keepalive();
  static const int kKeepaliveFieldNumber = 5;
  inline ::google::protobuf::int64 keepalive() const;
  inline void set_keepalive(::google::protobuf::int64 value);

  // required int64 servertick = 6;
  inline bool has_servertick() const;
  inline void clear_servertick();
  static const int kServertickFieldNumber = 6;
  inline ::google::protobuf::int64 servertick() const;
  inline void set_servertick(::google::protobuf::int64 value);

  // required int64 sessiontimeout = 7;
  inline bool has_sessiontimeout() const;
  inline void clear_sessiontimeout();
  static const int kSessiontimeoutFieldNumber = 7;
  inline ::google::protobuf::int64 sessiontimeout() const;
  inline void set_sessiontimeout(::google::protobuf::int64 value);

  // required int64 perffrequecny = 8;
  inline bool has_perffrequecny() const;
  inline void clear_perffrequecny();
  static const int kPerffrequecnyFieldNumber = 8;
  inline ::google::protobuf::int64 perffrequecny() const;
  inline void set_perffrequecny(::google::protobuf::int64 value);

  // required bool encrypt = 9;
  inline bool has_encrypt() const;
  inline void clear_encrypt();
  static const int kEncryptFieldNumber = 9;
  inline bool encrypt() const;
  inline void set_encrypt(bool value);

  // required .PBGate gateinfo = 10;
  inline bool has_gateinfo() const;
  inline void clear_gateinfo();
  static const int kGateinfoFieldNumber = 10;
  inline const ::PBGate& gateinfo() const;
  inline ::PBGate* mutable_gateinfo();
  inline ::PBGate* release_gateinfo();
  inline void set_allocated_gateinfo(::PBGate* gateinfo);

  // @@protoc_insertion_point(class_scope:PBRoomConfig)
 private:
  inline void set_has_proxytimeout();
  inline void clear_has_proxytimeout();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_keepalive();
  inline void clear_has_keepalive();
  inline void set_has_servertick();
  inline void clear_has_servertick();
  inline void set_has_sessiontimeout();
  inline void clear_has_sessiontimeout();
  inline void set_has_perffrequecny();
  inline void clear_has_perffrequecny();
  inline void set_has_encrypt();
  inline void clear_has_encrypt();
  inline void set_has_gateinfo();
  inline void clear_has_gateinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 proxytimeout_;
  ::google::protobuf::RepeatedPtrField< ::PBProxy > proxyinfo_;
  ::google::protobuf::RepeatedPtrField< ::PBLog > loginfo_;
  ::google::protobuf::int64 keepalive_;
  ::google::protobuf::int32 serverid_;
  bool encrypt_;
  ::google::protobuf::int64 servertick_;
  ::google::protobuf::int64 sessiontimeout_;
  ::google::protobuf::int64 perffrequecny_;
  ::PBGate* gateinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_configure_2eproto();
  friend void protobuf_AssignDesc_configure_2eproto();
  friend void protobuf_ShutdownFile_configure_2eproto();

  void InitAsDefaultInstance();
  static PBRoomConfig* default_instance_;
};
// -------------------------------------------------------------------

class PBProxyConfig : public ::google::protobuf::Message {
 public:
  PBProxyConfig();
  virtual ~PBProxyConfig();

  PBProxyConfig(const PBProxyConfig& from);

  inline PBProxyConfig& operator=(const PBProxyConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBProxyConfig& default_instance();

  void Swap(PBProxyConfig* other);

  // implements Message ----------------------------------------------

  PBProxyConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBProxyConfig& from);
  void MergeFrom(const PBProxyConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PBProxyConfig)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_configure_2eproto();
  friend void protobuf_AssignDesc_configure_2eproto();
  friend void protobuf_ShutdownFile_configure_2eproto();

  void InitAsDefaultInstance();
  static PBProxyConfig* default_instance_;
};
// -------------------------------------------------------------------

class PBTcpConfig : public ::google::protobuf::Message {
 public:
  PBTcpConfig();
  virtual ~PBTcpConfig();

  PBTcpConfig(const PBTcpConfig& from);

  inline PBTcpConfig& operator=(const PBTcpConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBTcpConfig& default_instance();

  void Swap(PBTcpConfig* other);

  // implements Message ----------------------------------------------

  PBTcpConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBTcpConfig& from);
  void MergeFrom(const PBTcpConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .PBGate gateinfo = 1;
  inline bool has_gateinfo() const;
  inline void clear_gateinfo();
  static const int kGateinfoFieldNumber = 1;
  inline const ::PBGate& gateinfo() const;
  inline ::PBGate* mutable_gateinfo();
  inline ::PBGate* release_gateinfo();
  inline void set_allocated_gateinfo(::PBGate* gateinfo);

  // repeated .PBLog loginfo = 2;
  inline int loginfo_size() const;
  inline void clear_loginfo();
  static const int kLoginfoFieldNumber = 2;
  inline const ::PBLog& loginfo(int index) const;
  inline ::PBLog* mutable_loginfo(int index);
  inline ::PBLog* add_loginfo();
  inline const ::google::protobuf::RepeatedPtrField< ::PBLog >&
      loginfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBLog >*
      mutable_loginfo();

  // required int32 listenport = 3;
  inline bool has_listenport() const;
  inline void clear_listenport();
  static const int kListenportFieldNumber = 3;
  inline ::google::protobuf::int32 listenport() const;
  inline void set_listenport(::google::protobuf::int32 value);

  // required int32 checktimegap = 4;
  inline bool has_checktimegap() const;
  inline void clear_checktimegap();
  static const int kChecktimegapFieldNumber = 4;
  inline ::google::protobuf::int32 checktimegap() const;
  inline void set_checktimegap(::google::protobuf::int32 value);

  // required int32 sockettimeout = 5;
  inline bool has_sockettimeout() const;
  inline void clear_sockettimeout();
  static const int kSockettimeoutFieldNumber = 5;
  inline ::google::protobuf::int32 sockettimeout() const;
  inline void set_sockettimeout(::google::protobuf::int32 value);

  // required int32 conntimeout = 6;
  inline bool has_conntimeout() const;
  inline void clear_conntimeout();
  static const int kConntimeoutFieldNumber = 6;
  inline ::google::protobuf::int32 conntimeout() const;
  inline void set_conntimeout(::google::protobuf::int32 value);

  // required int32 maxlogcount = 7;
  inline bool has_maxlogcount() const;
  inline void clear_maxlogcount();
  static const int kMaxlogcountFieldNumber = 7;
  inline ::google::protobuf::int32 maxlogcount() const;
  inline void set_maxlogcount(::google::protobuf::int32 value);

  // required int32 tcpbuflen = 8;
  inline bool has_tcpbuflen() const;
  inline void clear_tcpbuflen();
  static const int kTcpbuflenFieldNumber = 8;
  inline ::google::protobuf::int32 tcpbuflen() const;
  inline void set_tcpbuflen(::google::protobuf::int32 value);

  // required int32 writestatgap = 9;
  inline bool has_writestatgap() const;
  inline void clear_writestatgap();
  static const int kWritestatgapFieldNumber = 9;
  inline ::google::protobuf::int32 writestatgap() const;
  inline void set_writestatgap(::google::protobuf::int32 value);

  // required int32 tcpserverid = 10;
  inline bool has_tcpserverid() const;
  inline void clear_tcpserverid();
  static const int kTcpserveridFieldNumber = 10;
  inline ::google::protobuf::int32 tcpserverid() const;
  inline void set_tcpserverid(::google::protobuf::int32 value);

  // required int64 gatetimeout = 11;
  inline bool has_gatetimeout() const;
  inline void clear_gatetimeout();
  static const int kGatetimeoutFieldNumber = 11;
  inline ::google::protobuf::int64 gatetimeout() const;
  inline void set_gatetimeout(::google::protobuf::int64 value);

  // required int64 keepalive = 12;
  inline bool has_keepalive() const;
  inline void clear_keepalive();
  static const int kKeepaliveFieldNumber = 12;
  inline ::google::protobuf::int64 keepalive() const;
  inline void set_keepalive(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PBTcpConfig)
 private:
  inline void set_has_gateinfo();
  inline void clear_has_gateinfo();
  inline void set_has_listenport();
  inline void clear_has_listenport();
  inline void set_has_checktimegap();
  inline void clear_has_checktimegap();
  inline void set_has_sockettimeout();
  inline void clear_has_sockettimeout();
  inline void set_has_conntimeout();
  inline void clear_has_conntimeout();
  inline void set_has_maxlogcount();
  inline void clear_has_maxlogcount();
  inline void set_has_tcpbuflen();
  inline void clear_has_tcpbuflen();
  inline void set_has_writestatgap();
  inline void clear_has_writestatgap();
  inline void set_has_tcpserverid();
  inline void clear_has_tcpserverid();
  inline void set_has_gatetimeout();
  inline void clear_has_gatetimeout();
  inline void set_has_keepalive();
  inline void clear_has_keepalive();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PBGate* gateinfo_;
  ::google::protobuf::RepeatedPtrField< ::PBLog > loginfo_;
  ::google::protobuf::int32 listenport_;
  ::google::protobuf::int32 checktimegap_;
  ::google::protobuf::int32 sockettimeout_;
  ::google::protobuf::int32 conntimeout_;
  ::google::protobuf::int32 maxlogcount_;
  ::google::protobuf::int32 tcpbuflen_;
  ::google::protobuf::int32 writestatgap_;
  ::google::protobuf::int32 tcpserverid_;
  ::google::protobuf::int64 gatetimeout_;
  ::google::protobuf::int64 keepalive_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_configure_2eproto();
  friend void protobuf_AssignDesc_configure_2eproto();
  friend void protobuf_ShutdownFile_configure_2eproto();

  void InitAsDefaultInstance();
  static PBTcpConfig* default_instance_;
};
// -------------------------------------------------------------------

class PBGateConfig : public ::google::protobuf::Message {
 public:
  PBGateConfig();
  virtual ~PBGateConfig();

  PBGateConfig(const PBGateConfig& from);

  inline PBGateConfig& operator=(const PBGateConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGateConfig& default_instance();

  void Swap(PBGateConfig* other);

  // implements Message ----------------------------------------------

  PBGateConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGateConfig& from);
  void MergeFrom(const PBGateConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PBGateConfig)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_configure_2eproto();
  friend void protobuf_AssignDesc_configure_2eproto();
  friend void protobuf_ShutdownFile_configure_2eproto();

  void InitAsDefaultInstance();
  static PBGateConfig* default_instance_;
};
// -------------------------------------------------------------------

class PBClientConfig : public ::google::protobuf::Message {
 public:
  PBClientConfig();
  virtual ~PBClientConfig();

  PBClientConfig(const PBClientConfig& from);

  inline PBClientConfig& operator=(const PBClientConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBClientConfig& default_instance();

  void Swap(PBClientConfig* other);

  // implements Message ----------------------------------------------

  PBClientConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBClientConfig& from);
  void MergeFrom(const PBClientConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // required int32 connnum = 3;
  inline bool has_connnum() const;
  inline void clear_connnum();
  static const int kConnnumFieldNumber = 3;
  inline ::google::protobuf::int32 connnum() const;
  inline void set_connnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PBClientConfig)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_connnum();
  inline void clear_has_connnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 connnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_configure_2eproto();
  friend void protobuf_AssignDesc_configure_2eproto();
  friend void protobuf_ShutdownFile_configure_2eproto();

  void InitAsDefaultInstance();
  static PBClientConfig* default_instance_;
};
// -------------------------------------------------------------------

class CConfigure : public ::google::protobuf::Message {
 public:
  CConfigure();
  virtual ~CConfigure();

  CConfigure(const CConfigure& from);

  inline CConfigure& operator=(const CConfigure& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CConfigure& default_instance();

  void Swap(CConfigure* other);

  // implements Message ----------------------------------------------

  CConfigure* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CConfigure& from);
  void MergeFrom(const CConfigure& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PBDBConfig dbconfig = 1;
  inline bool has_dbconfig() const;
  inline void clear_dbconfig();
  static const int kDbconfigFieldNumber = 1;
  inline const ::PBDBConfig& dbconfig() const;
  inline ::PBDBConfig* mutable_dbconfig();
  inline ::PBDBConfig* release_dbconfig();
  inline void set_allocated_dbconfig(::PBDBConfig* dbconfig);

  // optional .PBHallConfig hallconfig = 2;
  inline bool has_hallconfig() const;
  inline void clear_hallconfig();
  static const int kHallconfigFieldNumber = 2;
  inline const ::PBHallConfig& hallconfig() const;
  inline ::PBHallConfig* mutable_hallconfig();
  inline ::PBHallConfig* release_hallconfig();
  inline void set_allocated_hallconfig(::PBHallConfig* hallconfig);

  // optional .PBProxyConfig proxyconfig = 3;
  inline bool has_proxyconfig() const;
  inline void clear_proxyconfig();
  static const int kProxyconfigFieldNumber = 3;
  inline const ::PBProxyConfig& proxyconfig() const;
  inline ::PBProxyConfig* mutable_proxyconfig();
  inline ::PBProxyConfig* release_proxyconfig();
  inline void set_allocated_proxyconfig(::PBProxyConfig* proxyconfig);

  // optional .PBTcpConfig tcpconfig = 4;
  inline bool has_tcpconfig() const;
  inline void clear_tcpconfig();
  static const int kTcpconfigFieldNumber = 4;
  inline const ::PBTcpConfig& tcpconfig() const;
  inline ::PBTcpConfig* mutable_tcpconfig();
  inline ::PBTcpConfig* release_tcpconfig();
  inline void set_allocated_tcpconfig(::PBTcpConfig* tcpconfig);

  // optional .PBGateConfig gateconfig = 5;
  inline bool has_gateconfig() const;
  inline void clear_gateconfig();
  static const int kGateconfigFieldNumber = 5;
  inline const ::PBGateConfig& gateconfig() const;
  inline ::PBGateConfig* mutable_gateconfig();
  inline ::PBGateConfig* release_gateconfig();
  inline void set_allocated_gateconfig(::PBGateConfig* gateconfig);

  // optional .PBClientConfig clientconfig = 6;
  inline bool has_clientconfig() const;
  inline void clear_clientconfig();
  static const int kClientconfigFieldNumber = 6;
  inline const ::PBClientConfig& clientconfig() const;
  inline ::PBClientConfig* mutable_clientconfig();
  inline ::PBClientConfig* release_clientconfig();
  inline void set_allocated_clientconfig(::PBClientConfig* clientconfig);

  // optional .PBRoomConfig roomconfig = 7;
  inline bool has_roomconfig() const;
  inline void clear_roomconfig();
  static const int kRoomconfigFieldNumber = 7;
  inline const ::PBRoomConfig& roomconfig() const;
  inline ::PBRoomConfig* mutable_roomconfig();
  inline ::PBRoomConfig* release_roomconfig();
  inline void set_allocated_roomconfig(::PBRoomConfig* roomconfig);

  // @@protoc_insertion_point(class_scope:CConfigure)
 private:
  inline void set_has_dbconfig();
  inline void clear_has_dbconfig();
  inline void set_has_hallconfig();
  inline void clear_has_hallconfig();
  inline void set_has_proxyconfig();
  inline void clear_has_proxyconfig();
  inline void set_has_tcpconfig();
  inline void clear_has_tcpconfig();
  inline void set_has_gateconfig();
  inline void clear_has_gateconfig();
  inline void set_has_clientconfig();
  inline void clear_has_clientconfig();
  inline void set_has_roomconfig();
  inline void clear_has_roomconfig();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PBDBConfig* dbconfig_;
  ::PBHallConfig* hallconfig_;
  ::PBProxyConfig* proxyconfig_;
  ::PBTcpConfig* tcpconfig_;
  ::PBGateConfig* gateconfig_;
  ::PBClientConfig* clientconfig_;
  ::PBRoomConfig* roomconfig_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_configure_2eproto();
  friend void protobuf_AssignDesc_configure_2eproto();
  friend void protobuf_ShutdownFile_configure_2eproto();

  void InitAsDefaultInstance();
  static CConfigure* default_instance_;
};
// ===================================================================


// ===================================================================

// PBProxy

// required uint32 id = 1;
inline bool PBProxy::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBProxy::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBProxy::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBProxy::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 PBProxy::id() const {
  return id_;
}
inline void PBProxy::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required string ip = 2;
inline bool PBProxy::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBProxy::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBProxy::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBProxy::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& PBProxy::ip() const {
  return *ip_;
}
inline void PBProxy::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void PBProxy::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void PBProxy::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBProxy::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* PBProxy::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBProxy::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 port = 3;
inline bool PBProxy::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBProxy::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBProxy::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBProxy::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 PBProxy::port() const {
  return port_;
}
inline void PBProxy::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// PBGate

// required uint32 id = 1;
inline bool PBGate::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBGate::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBGate::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBGate::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 PBGate::id() const {
  return id_;
}
inline void PBGate::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required string ip = 2;
inline bool PBGate::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBGate::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBGate::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBGate::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& PBGate::ip() const {
  return *ip_;
}
inline void PBGate::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void PBGate::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void PBGate::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBGate::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* PBGate::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBGate::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 port = 3;
inline bool PBGate::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBGate::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBGate::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBGate::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 PBGate::port() const {
  return port_;
}
inline void PBGate::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// PBLog

// required string identifier = 1;
inline bool PBLog::has_identifier() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBLog::set_has_identifier() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBLog::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBLog::clear_identifier() {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    identifier_->clear();
  }
  clear_has_identifier();
}
inline const ::std::string& PBLog::identifier() const {
  return *identifier_;
}
inline void PBLog::set_identifier(const ::std::string& value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
}
inline void PBLog::set_identifier(const char* value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
}
inline void PBLog::set_identifier(const char* value, size_t size) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBLog::mutable_identifier() {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  return identifier_;
}
inline ::std::string* PBLog::release_identifier() {
  clear_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = identifier_;
    identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBLog::set_allocated_identifier(::std::string* identifier) {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete identifier_;
  }
  if (identifier) {
    set_has_identifier();
    identifier_ = identifier;
  } else {
    clear_has_identifier();
    identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string directory = 2;
inline bool PBLog::has_directory() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBLog::set_has_directory() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBLog::clear_has_directory() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBLog::clear_directory() {
  if (directory_ != &::google::protobuf::internal::kEmptyString) {
    directory_->clear();
  }
  clear_has_directory();
}
inline const ::std::string& PBLog::directory() const {
  return *directory_;
}
inline void PBLog::set_directory(const ::std::string& value) {
  set_has_directory();
  if (directory_ == &::google::protobuf::internal::kEmptyString) {
    directory_ = new ::std::string;
  }
  directory_->assign(value);
}
inline void PBLog::set_directory(const char* value) {
  set_has_directory();
  if (directory_ == &::google::protobuf::internal::kEmptyString) {
    directory_ = new ::std::string;
  }
  directory_->assign(value);
}
inline void PBLog::set_directory(const char* value, size_t size) {
  set_has_directory();
  if (directory_ == &::google::protobuf::internal::kEmptyString) {
    directory_ = new ::std::string;
  }
  directory_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBLog::mutable_directory() {
  set_has_directory();
  if (directory_ == &::google::protobuf::internal::kEmptyString) {
    directory_ = new ::std::string;
  }
  return directory_;
}
inline ::std::string* PBLog::release_directory() {
  clear_has_directory();
  if (directory_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = directory_;
    directory_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBLog::set_allocated_directory(::std::string* directory) {
  if (directory_ != &::google::protobuf::internal::kEmptyString) {
    delete directory_;
  }
  if (directory) {
    set_has_directory();
    directory_ = directory;
  } else {
    clear_has_directory();
    directory_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 priority = 3;
inline bool PBLog::has_priority() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBLog::set_has_priority() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBLog::clear_has_priority() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBLog::clear_priority() {
  priority_ = 0u;
  clear_has_priority();
}
inline ::google::protobuf::uint32 PBLog::priority() const {
  return priority_;
}
inline void PBLog::set_priority(::google::protobuf::uint32 value) {
  set_has_priority();
  priority_ = value;
}

// required uint32 maxfilesize = 4;
inline bool PBLog::has_maxfilesize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBLog::set_has_maxfilesize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBLog::clear_has_maxfilesize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBLog::clear_maxfilesize() {
  maxfilesize_ = 0u;
  clear_has_maxfilesize();
}
inline ::google::protobuf::uint32 PBLog::maxfilesize() const {
  return maxfilesize_;
}
inline void PBLog::set_maxfilesize(::google::protobuf::uint32 value) {
  set_has_maxfilesize();
  maxfilesize_ = value;
}

// required uint32 maxbackupindex = 5;
inline bool PBLog::has_maxbackupindex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBLog::set_has_maxbackupindex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBLog::clear_has_maxbackupindex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBLog::clear_maxbackupindex() {
  maxbackupindex_ = 0u;
  clear_has_maxbackupindex();
}
inline ::google::protobuf::uint32 PBLog::maxbackupindex() const {
  return maxbackupindex_;
}
inline void PBLog::set_maxbackupindex(::google::protobuf::uint32 value) {
  set_has_maxbackupindex();
  maxbackupindex_ = value;
}

// -------------------------------------------------------------------

// PBDBConfig

// required string selfip = 1;
inline bool PBDBConfig::has_selfip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBDBConfig::set_has_selfip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBDBConfig::clear_has_selfip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBDBConfig::clear_selfip() {
  if (selfip_ != &::google::protobuf::internal::kEmptyString) {
    selfip_->clear();
  }
  clear_has_selfip();
}
inline const ::std::string& PBDBConfig::selfip() const {
  return *selfip_;
}
inline void PBDBConfig::set_selfip(const ::std::string& value) {
  set_has_selfip();
  if (selfip_ == &::google::protobuf::internal::kEmptyString) {
    selfip_ = new ::std::string;
  }
  selfip_->assign(value);
}
inline void PBDBConfig::set_selfip(const char* value) {
  set_has_selfip();
  if (selfip_ == &::google::protobuf::internal::kEmptyString) {
    selfip_ = new ::std::string;
  }
  selfip_->assign(value);
}
inline void PBDBConfig::set_selfip(const char* value, size_t size) {
  set_has_selfip();
  if (selfip_ == &::google::protobuf::internal::kEmptyString) {
    selfip_ = new ::std::string;
  }
  selfip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBDBConfig::mutable_selfip() {
  set_has_selfip();
  if (selfip_ == &::google::protobuf::internal::kEmptyString) {
    selfip_ = new ::std::string;
  }
  return selfip_;
}
inline ::std::string* PBDBConfig::release_selfip() {
  clear_has_selfip();
  if (selfip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = selfip_;
    selfip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBDBConfig::set_allocated_selfip(::std::string* selfip) {
  if (selfip_ != &::google::protobuf::internal::kEmptyString) {
    delete selfip_;
  }
  if (selfip) {
    set_has_selfip();
    selfip_ = selfip;
  } else {
    clear_has_selfip();
    selfip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 selfport = 2;
inline bool PBDBConfig::has_selfport() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBDBConfig::set_has_selfport() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBDBConfig::clear_has_selfport() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBDBConfig::clear_selfport() {
  selfport_ = 0u;
  clear_has_selfport();
}
inline ::google::protobuf::uint32 PBDBConfig::selfport() const {
  return selfport_;
}
inline void PBDBConfig::set_selfport(::google::protobuf::uint32 value) {
  set_has_selfport();
  selfport_ = value;
}

// required uint32 serverid = 3;
inline bool PBDBConfig::has_serverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBDBConfig::set_has_serverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBDBConfig::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBDBConfig::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 PBDBConfig::serverid() const {
  return serverid_;
}
inline void PBDBConfig::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// repeated .PBProxy proxyinfo = 4;
inline int PBDBConfig::proxyinfo_size() const {
  return proxyinfo_.size();
}
inline void PBDBConfig::clear_proxyinfo() {
  proxyinfo_.Clear();
}
inline const ::PBProxy& PBDBConfig::proxyinfo(int index) const {
  return proxyinfo_.Get(index);
}
inline ::PBProxy* PBDBConfig::mutable_proxyinfo(int index) {
  return proxyinfo_.Mutable(index);
}
inline ::PBProxy* PBDBConfig::add_proxyinfo() {
  return proxyinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBProxy >&
PBDBConfig::proxyinfo() const {
  return proxyinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBProxy >*
PBDBConfig::mutable_proxyinfo() {
  return &proxyinfo_;
}

// required string mysqlinfo = 5;
inline bool PBDBConfig::has_mysqlinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBDBConfig::set_has_mysqlinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBDBConfig::clear_has_mysqlinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBDBConfig::clear_mysqlinfo() {
  if (mysqlinfo_ != &::google::protobuf::internal::kEmptyString) {
    mysqlinfo_->clear();
  }
  clear_has_mysqlinfo();
}
inline const ::std::string& PBDBConfig::mysqlinfo() const {
  return *mysqlinfo_;
}
inline void PBDBConfig::set_mysqlinfo(const ::std::string& value) {
  set_has_mysqlinfo();
  if (mysqlinfo_ == &::google::protobuf::internal::kEmptyString) {
    mysqlinfo_ = new ::std::string;
  }
  mysqlinfo_->assign(value);
}
inline void PBDBConfig::set_mysqlinfo(const char* value) {
  set_has_mysqlinfo();
  if (mysqlinfo_ == &::google::protobuf::internal::kEmptyString) {
    mysqlinfo_ = new ::std::string;
  }
  mysqlinfo_->assign(value);
}
inline void PBDBConfig::set_mysqlinfo(const char* value, size_t size) {
  set_has_mysqlinfo();
  if (mysqlinfo_ == &::google::protobuf::internal::kEmptyString) {
    mysqlinfo_ = new ::std::string;
  }
  mysqlinfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBDBConfig::mutable_mysqlinfo() {
  set_has_mysqlinfo();
  if (mysqlinfo_ == &::google::protobuf::internal::kEmptyString) {
    mysqlinfo_ = new ::std::string;
  }
  return mysqlinfo_;
}
inline ::std::string* PBDBConfig::release_mysqlinfo() {
  clear_has_mysqlinfo();
  if (mysqlinfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mysqlinfo_;
    mysqlinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBDBConfig::set_allocated_mysqlinfo(::std::string* mysqlinfo) {
  if (mysqlinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete mysqlinfo_;
  }
  if (mysqlinfo) {
    set_has_mysqlinfo();
    mysqlinfo_ = mysqlinfo;
  } else {
    clear_has_mysqlinfo();
    mysqlinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 loglvl = 6;
inline bool PBDBConfig::has_loglvl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBDBConfig::set_has_loglvl() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBDBConfig::clear_has_loglvl() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBDBConfig::clear_loglvl() {
  loglvl_ = 0u;
  clear_has_loglvl();
}
inline ::google::protobuf::uint32 PBDBConfig::loglvl() const {
  return loglvl_;
}
inline void PBDBConfig::set_loglvl(::google::protobuf::uint32 value) {
  set_has_loglvl();
  loglvl_ = value;
}

// required uint32 rwtimeout = 7;
inline bool PBDBConfig::has_rwtimeout() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PBDBConfig::set_has_rwtimeout() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PBDBConfig::clear_has_rwtimeout() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PBDBConfig::clear_rwtimeout() {
  rwtimeout_ = 0u;
  clear_has_rwtimeout();
}
inline ::google::protobuf::uint32 PBDBConfig::rwtimeout() const {
  return rwtimeout_;
}
inline void PBDBConfig::set_rwtimeout(::google::protobuf::uint32 value) {
  set_has_rwtimeout();
  rwtimeout_ = value;
}

// required uint32 sleeptime = 8;
inline bool PBDBConfig::has_sleeptime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PBDBConfig::set_has_sleeptime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PBDBConfig::clear_has_sleeptime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PBDBConfig::clear_sleeptime() {
  sleeptime_ = 0u;
  clear_has_sleeptime();
}
inline ::google::protobuf::uint32 PBDBConfig::sleeptime() const {
  return sleeptime_;
}
inline void PBDBConfig::set_sleeptime(::google::protobuf::uint32 value) {
  set_has_sleeptime();
  sleeptime_ = value;
}

// required uint32 loop = 9;
inline bool PBDBConfig::has_loop() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PBDBConfig::set_has_loop() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PBDBConfig::clear_has_loop() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PBDBConfig::clear_loop() {
  loop_ = 0u;
  clear_has_loop();
}
inline ::google::protobuf::uint32 PBDBConfig::loop() const {
  return loop_;
}
inline void PBDBConfig::set_loop(::google::protobuf::uint32 value) {
  set_has_loop();
  loop_ = value;
}

// required int64 keepalive = 10;
inline bool PBDBConfig::has_keepalive() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PBDBConfig::set_has_keepalive() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PBDBConfig::clear_has_keepalive() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PBDBConfig::clear_keepalive() {
  keepalive_ = GOOGLE_LONGLONG(0);
  clear_has_keepalive();
}
inline ::google::protobuf::int64 PBDBConfig::keepalive() const {
  return keepalive_;
}
inline void PBDBConfig::set_keepalive(::google::protobuf::int64 value) {
  set_has_keepalive();
  keepalive_ = value;
}

// required int64 servertick = 11;
inline bool PBDBConfig::has_servertick() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PBDBConfig::set_has_servertick() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PBDBConfig::clear_has_servertick() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PBDBConfig::clear_servertick() {
  servertick_ = GOOGLE_LONGLONG(0);
  clear_has_servertick();
}
inline ::google::protobuf::int64 PBDBConfig::servertick() const {
  return servertick_;
}
inline void PBDBConfig::set_servertick(::google::protobuf::int64 value) {
  set_has_servertick();
  servertick_ = value;
}

// -------------------------------------------------------------------

// PBHallConfig

// required int64 proxytimeout = 1;
inline bool PBHallConfig::has_proxytimeout() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBHallConfig::set_has_proxytimeout() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBHallConfig::clear_has_proxytimeout() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBHallConfig::clear_proxytimeout() {
  proxytimeout_ = GOOGLE_LONGLONG(0);
  clear_has_proxytimeout();
}
inline ::google::protobuf::int64 PBHallConfig::proxytimeout() const {
  return proxytimeout_;
}
inline void PBHallConfig::set_proxytimeout(::google::protobuf::int64 value) {
  set_has_proxytimeout();
  proxytimeout_ = value;
}

// required int32 serverid = 2;
inline bool PBHallConfig::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBHallConfig::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBHallConfig::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBHallConfig::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 PBHallConfig::serverid() const {
  return serverid_;
}
inline void PBHallConfig::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
}

// repeated .PBProxy proxyinfo = 3;
inline int PBHallConfig::proxyinfo_size() const {
  return proxyinfo_.size();
}
inline void PBHallConfig::clear_proxyinfo() {
  proxyinfo_.Clear();
}
inline const ::PBProxy& PBHallConfig::proxyinfo(int index) const {
  return proxyinfo_.Get(index);
}
inline ::PBProxy* PBHallConfig::mutable_proxyinfo(int index) {
  return proxyinfo_.Mutable(index);
}
inline ::PBProxy* PBHallConfig::add_proxyinfo() {
  return proxyinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBProxy >&
PBHallConfig::proxyinfo() const {
  return proxyinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBProxy >*
PBHallConfig::mutable_proxyinfo() {
  return &proxyinfo_;
}

// repeated .PBLog loginfo = 4;
inline int PBHallConfig::loginfo_size() const {
  return loginfo_.size();
}
inline void PBHallConfig::clear_loginfo() {
  loginfo_.Clear();
}
inline const ::PBLog& PBHallConfig::loginfo(int index) const {
  return loginfo_.Get(index);
}
inline ::PBLog* PBHallConfig::mutable_loginfo(int index) {
  return loginfo_.Mutable(index);
}
inline ::PBLog* PBHallConfig::add_loginfo() {
  return loginfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBLog >&
PBHallConfig::loginfo() const {
  return loginfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBLog >*
PBHallConfig::mutable_loginfo() {
  return &loginfo_;
}

// required int64 keepalive = 5;
inline bool PBHallConfig::has_keepalive() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBHallConfig::set_has_keepalive() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBHallConfig::clear_has_keepalive() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBHallConfig::clear_keepalive() {
  keepalive_ = GOOGLE_LONGLONG(0);
  clear_has_keepalive();
}
inline ::google::protobuf::int64 PBHallConfig::keepalive() const {
  return keepalive_;
}
inline void PBHallConfig::set_keepalive(::google::protobuf::int64 value) {
  set_has_keepalive();
  keepalive_ = value;
}

// required int64 servertick = 6;
inline bool PBHallConfig::has_servertick() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBHallConfig::set_has_servertick() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBHallConfig::clear_has_servertick() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBHallConfig::clear_servertick() {
  servertick_ = GOOGLE_LONGLONG(0);
  clear_has_servertick();
}
inline ::google::protobuf::int64 PBHallConfig::servertick() const {
  return servertick_;
}
inline void PBHallConfig::set_servertick(::google::protobuf::int64 value) {
  set_has_servertick();
  servertick_ = value;
}

// required int64 sessiontimeout = 7;
inline bool PBHallConfig::has_sessiontimeout() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PBHallConfig::set_has_sessiontimeout() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PBHallConfig::clear_has_sessiontimeout() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PBHallConfig::clear_sessiontimeout() {
  sessiontimeout_ = GOOGLE_LONGLONG(0);
  clear_has_sessiontimeout();
}
inline ::google::protobuf::int64 PBHallConfig::sessiontimeout() const {
  return sessiontimeout_;
}
inline void PBHallConfig::set_sessiontimeout(::google::protobuf::int64 value) {
  set_has_sessiontimeout();
  sessiontimeout_ = value;
}

// required int64 perffrequecny = 8;
inline bool PBHallConfig::has_perffrequecny() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PBHallConfig::set_has_perffrequecny() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PBHallConfig::clear_has_perffrequecny() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PBHallConfig::clear_perffrequecny() {
  perffrequecny_ = GOOGLE_LONGLONG(0);
  clear_has_perffrequecny();
}
inline ::google::protobuf::int64 PBHallConfig::perffrequecny() const {
  return perffrequecny_;
}
inline void PBHallConfig::set_perffrequecny(::google::protobuf::int64 value) {
  set_has_perffrequecny();
  perffrequecny_ = value;
}

// required bool encrypt = 9;
inline bool PBHallConfig::has_encrypt() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PBHallConfig::set_has_encrypt() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PBHallConfig::clear_has_encrypt() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PBHallConfig::clear_encrypt() {
  encrypt_ = false;
  clear_has_encrypt();
}
inline bool PBHallConfig::encrypt() const {
  return encrypt_;
}
inline void PBHallConfig::set_encrypt(bool value) {
  set_has_encrypt();
  encrypt_ = value;
}

// required int64 autosave = 10;
inline bool PBHallConfig::has_autosave() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PBHallConfig::set_has_autosave() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PBHallConfig::clear_has_autosave() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PBHallConfig::clear_autosave() {
  autosave_ = GOOGLE_LONGLONG(0);
  clear_has_autosave();
}
inline ::google::protobuf::int64 PBHallConfig::autosave() const {
  return autosave_;
}
inline void PBHallConfig::set_autosave(::google::protobuf::int64 value) {
  set_has_autosave();
  autosave_ = value;
}

// required int64 logintimeout = 11;
inline bool PBHallConfig::has_logintimeout() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PBHallConfig::set_has_logintimeout() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PBHallConfig::clear_has_logintimeout() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PBHallConfig::clear_logintimeout() {
  logintimeout_ = GOOGLE_LONGLONG(0);
  clear_has_logintimeout();
}
inline ::google::protobuf::int64 PBHallConfig::logintimeout() const {
  return logintimeout_;
}
inline void PBHallConfig::set_logintimeout(::google::protobuf::int64 value) {
  set_has_logintimeout();
  logintimeout_ = value;
}

// required int64 nocontraltime = 12;
inline bool PBHallConfig::has_nocontraltime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PBHallConfig::set_has_nocontraltime() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PBHallConfig::clear_has_nocontraltime() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PBHallConfig::clear_nocontraltime() {
  nocontraltime_ = GOOGLE_LONGLONG(0);
  clear_has_nocontraltime();
}
inline ::google::protobuf::int64 PBHallConfig::nocontraltime() const {
  return nocontraltime_;
}
inline void PBHallConfig::set_nocontraltime(::google::protobuf::int64 value) {
  set_has_nocontraltime();
  nocontraltime_ = value;
}

// required int32 dbserverid = 13;
inline bool PBHallConfig::has_dbserverid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PBHallConfig::set_has_dbserverid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PBHallConfig::clear_has_dbserverid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PBHallConfig::clear_dbserverid() {
  dbserverid_ = 0;
  clear_has_dbserverid();
}
inline ::google::protobuf::int32 PBHallConfig::dbserverid() const {
  return dbserverid_;
}
inline void PBHallConfig::set_dbserverid(::google::protobuf::int32 value) {
  set_has_dbserverid();
  dbserverid_ = value;
}

// required int32 webserverid = 14;
inline bool PBHallConfig::has_webserverid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PBHallConfig::set_has_webserverid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PBHallConfig::clear_has_webserverid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PBHallConfig::clear_webserverid() {
  webserverid_ = 0;
  clear_has_webserverid();
}
inline ::google::protobuf::int32 PBHallConfig::webserverid() const {
  return webserverid_;
}
inline void PBHallConfig::set_webserverid(::google::protobuf::int32 value) {
  set_has_webserverid();
  webserverid_ = value;
}

// required string urllogincheck = 15;
inline bool PBHallConfig::has_urllogincheck() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PBHallConfig::set_has_urllogincheck() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PBHallConfig::clear_has_urllogincheck() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PBHallConfig::clear_urllogincheck() {
  if (urllogincheck_ != &::google::protobuf::internal::kEmptyString) {
    urllogincheck_->clear();
  }
  clear_has_urllogincheck();
}
inline const ::std::string& PBHallConfig::urllogincheck() const {
  return *urllogincheck_;
}
inline void PBHallConfig::set_urllogincheck(const ::std::string& value) {
  set_has_urllogincheck();
  if (urllogincheck_ == &::google::protobuf::internal::kEmptyString) {
    urllogincheck_ = new ::std::string;
  }
  urllogincheck_->assign(value);
}
inline void PBHallConfig::set_urllogincheck(const char* value) {
  set_has_urllogincheck();
  if (urllogincheck_ == &::google::protobuf::internal::kEmptyString) {
    urllogincheck_ = new ::std::string;
  }
  urllogincheck_->assign(value);
}
inline void PBHallConfig::set_urllogincheck(const char* value, size_t size) {
  set_has_urllogincheck();
  if (urllogincheck_ == &::google::protobuf::internal::kEmptyString) {
    urllogincheck_ = new ::std::string;
  }
  urllogincheck_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBHallConfig::mutable_urllogincheck() {
  set_has_urllogincheck();
  if (urllogincheck_ == &::google::protobuf::internal::kEmptyString) {
    urllogincheck_ = new ::std::string;
  }
  return urllogincheck_;
}
inline ::std::string* PBHallConfig::release_urllogincheck() {
  clear_has_urllogincheck();
  if (urllogincheck_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = urllogincheck_;
    urllogincheck_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBHallConfig::set_allocated_urllogincheck(::std::string* urllogincheck) {
  if (urllogincheck_ != &::google::protobuf::internal::kEmptyString) {
    delete urllogincheck_;
  }
  if (urllogincheck) {
    set_has_urllogincheck();
    urllogincheck_ = urllogincheck;
  } else {
    clear_has_urllogincheck();
    urllogincheck_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string urlprintdot = 16;
inline bool PBHallConfig::has_urlprintdot() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PBHallConfig::set_has_urlprintdot() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PBHallConfig::clear_has_urlprintdot() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PBHallConfig::clear_urlprintdot() {
  if (urlprintdot_ != &::google::protobuf::internal::kEmptyString) {
    urlprintdot_->clear();
  }
  clear_has_urlprintdot();
}
inline const ::std::string& PBHallConfig::urlprintdot() const {
  return *urlprintdot_;
}
inline void PBHallConfig::set_urlprintdot(const ::std::string& value) {
  set_has_urlprintdot();
  if (urlprintdot_ == &::google::protobuf::internal::kEmptyString) {
    urlprintdot_ = new ::std::string;
  }
  urlprintdot_->assign(value);
}
inline void PBHallConfig::set_urlprintdot(const char* value) {
  set_has_urlprintdot();
  if (urlprintdot_ == &::google::protobuf::internal::kEmptyString) {
    urlprintdot_ = new ::std::string;
  }
  urlprintdot_->assign(value);
}
inline void PBHallConfig::set_urlprintdot(const char* value, size_t size) {
  set_has_urlprintdot();
  if (urlprintdot_ == &::google::protobuf::internal::kEmptyString) {
    urlprintdot_ = new ::std::string;
  }
  urlprintdot_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBHallConfig::mutable_urlprintdot() {
  set_has_urlprintdot();
  if (urlprintdot_ == &::google::protobuf::internal::kEmptyString) {
    urlprintdot_ = new ::std::string;
  }
  return urlprintdot_;
}
inline ::std::string* PBHallConfig::release_urlprintdot() {
  clear_has_urlprintdot();
  if (urlprintdot_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = urlprintdot_;
    urlprintdot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBHallConfig::set_allocated_urlprintdot(::std::string* urlprintdot) {
  if (urlprintdot_ != &::google::protobuf::internal::kEmptyString) {
    delete urlprintdot_;
  }
  if (urlprintdot) {
    set_has_urlprintdot();
    urlprintdot_ = urlprintdot;
  } else {
    clear_has_urlprintdot();
    urlprintdot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string urlmimessage = 17;
inline bool PBHallConfig::has_urlmimessage() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PBHallConfig::set_has_urlmimessage() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PBHallConfig::clear_has_urlmimessage() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PBHallConfig::clear_urlmimessage() {
  if (urlmimessage_ != &::google::protobuf::internal::kEmptyString) {
    urlmimessage_->clear();
  }
  clear_has_urlmimessage();
}
inline const ::std::string& PBHallConfig::urlmimessage() const {
  return *urlmimessage_;
}
inline void PBHallConfig::set_urlmimessage(const ::std::string& value) {
  set_has_urlmimessage();
  if (urlmimessage_ == &::google::protobuf::internal::kEmptyString) {
    urlmimessage_ = new ::std::string;
  }
  urlmimessage_->assign(value);
}
inline void PBHallConfig::set_urlmimessage(const char* value) {
  set_has_urlmimessage();
  if (urlmimessage_ == &::google::protobuf::internal::kEmptyString) {
    urlmimessage_ = new ::std::string;
  }
  urlmimessage_->assign(value);
}
inline void PBHallConfig::set_urlmimessage(const char* value, size_t size) {
  set_has_urlmimessage();
  if (urlmimessage_ == &::google::protobuf::internal::kEmptyString) {
    urlmimessage_ = new ::std::string;
  }
  urlmimessage_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBHallConfig::mutable_urlmimessage() {
  set_has_urlmimessage();
  if (urlmimessage_ == &::google::protobuf::internal::kEmptyString) {
    urlmimessage_ = new ::std::string;
  }
  return urlmimessage_;
}
inline ::std::string* PBHallConfig::release_urlmimessage() {
  clear_has_urlmimessage();
  if (urlmimessage_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = urlmimessage_;
    urlmimessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBHallConfig::set_allocated_urlmimessage(::std::string* urlmimessage) {
  if (urlmimessage_ != &::google::protobuf::internal::kEmptyString) {
    delete urlmimessage_;
  }
  if (urlmimessage) {
    set_has_urlmimessage();
    urlmimessage_ = urlmimessage;
  } else {
    clear_has_urlmimessage();
    urlmimessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool sdkcheck = 18;
inline bool PBHallConfig::has_sdkcheck() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PBHallConfig::set_has_sdkcheck() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PBHallConfig::clear_has_sdkcheck() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PBHallConfig::clear_sdkcheck() {
  sdkcheck_ = false;
  clear_has_sdkcheck();
}
inline bool PBHallConfig::sdkcheck() const {
  return sdkcheck_;
}
inline void PBHallConfig::set_sdkcheck(bool value) {
  set_has_sdkcheck();
  sdkcheck_ = value;
}

// required .PBGate gateinfo = 19;
inline bool PBHallConfig::has_gateinfo() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PBHallConfig::set_has_gateinfo() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PBHallConfig::clear_has_gateinfo() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PBHallConfig::clear_gateinfo() {
  if (gateinfo_ != NULL) gateinfo_->::PBGate::Clear();
  clear_has_gateinfo();
}
inline const ::PBGate& PBHallConfig::gateinfo() const {
  return gateinfo_ != NULL ? *gateinfo_ : *default_instance_->gateinfo_;
}
inline ::PBGate* PBHallConfig::mutable_gateinfo() {
  set_has_gateinfo();
  if (gateinfo_ == NULL) gateinfo_ = new ::PBGate;
  return gateinfo_;
}
inline ::PBGate* PBHallConfig::release_gateinfo() {
  clear_has_gateinfo();
  ::PBGate* temp = gateinfo_;
  gateinfo_ = NULL;
  return temp;
}
inline void PBHallConfig::set_allocated_gateinfo(::PBGate* gateinfo) {
  delete gateinfo_;
  gateinfo_ = gateinfo;
  if (gateinfo) {
    set_has_gateinfo();
  } else {
    clear_has_gateinfo();
  }
}

// required int32 addgold = 20;
inline bool PBHallConfig::has_addgold() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PBHallConfig::set_has_addgold() {
  _has_bits_[0] |= 0x00080000u;
}
inline void PBHallConfig::clear_has_addgold() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void PBHallConfig::clear_addgold() {
  addgold_ = 0;
  clear_has_addgold();
}
inline ::google::protobuf::int32 PBHallConfig::addgold() const {
  return addgold_;
}
inline void PBHallConfig::set_addgold(::google::protobuf::int32 value) {
  set_has_addgold();
  addgold_ = value;
}

// required int32 adddiamond = 21;
inline bool PBHallConfig::has_adddiamond() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PBHallConfig::set_has_adddiamond() {
  _has_bits_[0] |= 0x00100000u;
}
inline void PBHallConfig::clear_has_adddiamond() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void PBHallConfig::clear_adddiamond() {
  adddiamond_ = 0;
  clear_has_adddiamond();
}
inline ::google::protobuf::int32 PBHallConfig::adddiamond() const {
  return adddiamond_;
}
inline void PBHallConfig::set_adddiamond(::google::protobuf::int32 value) {
  set_has_adddiamond();
  adddiamond_ = value;
}

// -------------------------------------------------------------------

// PBRoomConfig

// required int64 proxytimeout = 1;
inline bool PBRoomConfig::has_proxytimeout() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBRoomConfig::set_has_proxytimeout() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBRoomConfig::clear_has_proxytimeout() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBRoomConfig::clear_proxytimeout() {
  proxytimeout_ = GOOGLE_LONGLONG(0);
  clear_has_proxytimeout();
}
inline ::google::protobuf::int64 PBRoomConfig::proxytimeout() const {
  return proxytimeout_;
}
inline void PBRoomConfig::set_proxytimeout(::google::protobuf::int64 value) {
  set_has_proxytimeout();
  proxytimeout_ = value;
}

// required int32 serverid = 2;
inline bool PBRoomConfig::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBRoomConfig::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBRoomConfig::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBRoomConfig::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 PBRoomConfig::serverid() const {
  return serverid_;
}
inline void PBRoomConfig::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
}

// repeated .PBProxy proxyinfo = 3;
inline int PBRoomConfig::proxyinfo_size() const {
  return proxyinfo_.size();
}
inline void PBRoomConfig::clear_proxyinfo() {
  proxyinfo_.Clear();
}
inline const ::PBProxy& PBRoomConfig::proxyinfo(int index) const {
  return proxyinfo_.Get(index);
}
inline ::PBProxy* PBRoomConfig::mutable_proxyinfo(int index) {
  return proxyinfo_.Mutable(index);
}
inline ::PBProxy* PBRoomConfig::add_proxyinfo() {
  return proxyinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBProxy >&
PBRoomConfig::proxyinfo() const {
  return proxyinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBProxy >*
PBRoomConfig::mutable_proxyinfo() {
  return &proxyinfo_;
}

// repeated .PBLog loginfo = 4;
inline int PBRoomConfig::loginfo_size() const {
  return loginfo_.size();
}
inline void PBRoomConfig::clear_loginfo() {
  loginfo_.Clear();
}
inline const ::PBLog& PBRoomConfig::loginfo(int index) const {
  return loginfo_.Get(index);
}
inline ::PBLog* PBRoomConfig::mutable_loginfo(int index) {
  return loginfo_.Mutable(index);
}
inline ::PBLog* PBRoomConfig::add_loginfo() {
  return loginfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBLog >&
PBRoomConfig::loginfo() const {
  return loginfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBLog >*
PBRoomConfig::mutable_loginfo() {
  return &loginfo_;
}

// required int64 keepalive = 5;
inline bool PBRoomConfig::has_keepalive() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBRoomConfig::set_has_keepalive() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBRoomConfig::clear_has_keepalive() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBRoomConfig::clear_keepalive() {
  keepalive_ = GOOGLE_LONGLONG(0);
  clear_has_keepalive();
}
inline ::google::protobuf::int64 PBRoomConfig::keepalive() const {
  return keepalive_;
}
inline void PBRoomConfig::set_keepalive(::google::protobuf::int64 value) {
  set_has_keepalive();
  keepalive_ = value;
}

// required int64 servertick = 6;
inline bool PBRoomConfig::has_servertick() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBRoomConfig::set_has_servertick() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBRoomConfig::clear_has_servertick() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBRoomConfig::clear_servertick() {
  servertick_ = GOOGLE_LONGLONG(0);
  clear_has_servertick();
}
inline ::google::protobuf::int64 PBRoomConfig::servertick() const {
  return servertick_;
}
inline void PBRoomConfig::set_servertick(::google::protobuf::int64 value) {
  set_has_servertick();
  servertick_ = value;
}

// required int64 sessiontimeout = 7;
inline bool PBRoomConfig::has_sessiontimeout() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PBRoomConfig::set_has_sessiontimeout() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PBRoomConfig::clear_has_sessiontimeout() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PBRoomConfig::clear_sessiontimeout() {
  sessiontimeout_ = GOOGLE_LONGLONG(0);
  clear_has_sessiontimeout();
}
inline ::google::protobuf::int64 PBRoomConfig::sessiontimeout() const {
  return sessiontimeout_;
}
inline void PBRoomConfig::set_sessiontimeout(::google::protobuf::int64 value) {
  set_has_sessiontimeout();
  sessiontimeout_ = value;
}

// required int64 perffrequecny = 8;
inline bool PBRoomConfig::has_perffrequecny() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PBRoomConfig::set_has_perffrequecny() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PBRoomConfig::clear_has_perffrequecny() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PBRoomConfig::clear_perffrequecny() {
  perffrequecny_ = GOOGLE_LONGLONG(0);
  clear_has_perffrequecny();
}
inline ::google::protobuf::int64 PBRoomConfig::perffrequecny() const {
  return perffrequecny_;
}
inline void PBRoomConfig::set_perffrequecny(::google::protobuf::int64 value) {
  set_has_perffrequecny();
  perffrequecny_ = value;
}

// required bool encrypt = 9;
inline bool PBRoomConfig::has_encrypt() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PBRoomConfig::set_has_encrypt() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PBRoomConfig::clear_has_encrypt() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PBRoomConfig::clear_encrypt() {
  encrypt_ = false;
  clear_has_encrypt();
}
inline bool PBRoomConfig::encrypt() const {
  return encrypt_;
}
inline void PBRoomConfig::set_encrypt(bool value) {
  set_has_encrypt();
  encrypt_ = value;
}

// required .PBGate gateinfo = 10;
inline bool PBRoomConfig::has_gateinfo() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PBRoomConfig::set_has_gateinfo() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PBRoomConfig::clear_has_gateinfo() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PBRoomConfig::clear_gateinfo() {
  if (gateinfo_ != NULL) gateinfo_->::PBGate::Clear();
  clear_has_gateinfo();
}
inline const ::PBGate& PBRoomConfig::gateinfo() const {
  return gateinfo_ != NULL ? *gateinfo_ : *default_instance_->gateinfo_;
}
inline ::PBGate* PBRoomConfig::mutable_gateinfo() {
  set_has_gateinfo();
  if (gateinfo_ == NULL) gateinfo_ = new ::PBGate;
  return gateinfo_;
}
inline ::PBGate* PBRoomConfig::release_gateinfo() {
  clear_has_gateinfo();
  ::PBGate* temp = gateinfo_;
  gateinfo_ = NULL;
  return temp;
}
inline void PBRoomConfig::set_allocated_gateinfo(::PBGate* gateinfo) {
  delete gateinfo_;
  gateinfo_ = gateinfo;
  if (gateinfo) {
    set_has_gateinfo();
  } else {
    clear_has_gateinfo();
  }
}

// -------------------------------------------------------------------

// PBProxyConfig

// required uint32 id = 1;
inline bool PBProxyConfig::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBProxyConfig::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBProxyConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBProxyConfig::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 PBProxyConfig::id() const {
  return id_;
}
inline void PBProxyConfig::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required int32 port = 2;
inline bool PBProxyConfig::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBProxyConfig::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBProxyConfig::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBProxyConfig::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 PBProxyConfig::port() const {
  return port_;
}
inline void PBProxyConfig::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// PBTcpConfig

// required .PBGate gateinfo = 1;
inline bool PBTcpConfig::has_gateinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBTcpConfig::set_has_gateinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBTcpConfig::clear_has_gateinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBTcpConfig::clear_gateinfo() {
  if (gateinfo_ != NULL) gateinfo_->::PBGate::Clear();
  clear_has_gateinfo();
}
inline const ::PBGate& PBTcpConfig::gateinfo() const {
  return gateinfo_ != NULL ? *gateinfo_ : *default_instance_->gateinfo_;
}
inline ::PBGate* PBTcpConfig::mutable_gateinfo() {
  set_has_gateinfo();
  if (gateinfo_ == NULL) gateinfo_ = new ::PBGate;
  return gateinfo_;
}
inline ::PBGate* PBTcpConfig::release_gateinfo() {
  clear_has_gateinfo();
  ::PBGate* temp = gateinfo_;
  gateinfo_ = NULL;
  return temp;
}
inline void PBTcpConfig::set_allocated_gateinfo(::PBGate* gateinfo) {
  delete gateinfo_;
  gateinfo_ = gateinfo;
  if (gateinfo) {
    set_has_gateinfo();
  } else {
    clear_has_gateinfo();
  }
}

// repeated .PBLog loginfo = 2;
inline int PBTcpConfig::loginfo_size() const {
  return loginfo_.size();
}
inline void PBTcpConfig::clear_loginfo() {
  loginfo_.Clear();
}
inline const ::PBLog& PBTcpConfig::loginfo(int index) const {
  return loginfo_.Get(index);
}
inline ::PBLog* PBTcpConfig::mutable_loginfo(int index) {
  return loginfo_.Mutable(index);
}
inline ::PBLog* PBTcpConfig::add_loginfo() {
  return loginfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBLog >&
PBTcpConfig::loginfo() const {
  return loginfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBLog >*
PBTcpConfig::mutable_loginfo() {
  return &loginfo_;
}

// required int32 listenport = 3;
inline bool PBTcpConfig::has_listenport() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBTcpConfig::set_has_listenport() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBTcpConfig::clear_has_listenport() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBTcpConfig::clear_listenport() {
  listenport_ = 0;
  clear_has_listenport();
}
inline ::google::protobuf::int32 PBTcpConfig::listenport() const {
  return listenport_;
}
inline void PBTcpConfig::set_listenport(::google::protobuf::int32 value) {
  set_has_listenport();
  listenport_ = value;
}

// required int32 checktimegap = 4;
inline bool PBTcpConfig::has_checktimegap() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBTcpConfig::set_has_checktimegap() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBTcpConfig::clear_has_checktimegap() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBTcpConfig::clear_checktimegap() {
  checktimegap_ = 0;
  clear_has_checktimegap();
}
inline ::google::protobuf::int32 PBTcpConfig::checktimegap() const {
  return checktimegap_;
}
inline void PBTcpConfig::set_checktimegap(::google::protobuf::int32 value) {
  set_has_checktimegap();
  checktimegap_ = value;
}

// required int32 sockettimeout = 5;
inline bool PBTcpConfig::has_sockettimeout() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBTcpConfig::set_has_sockettimeout() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBTcpConfig::clear_has_sockettimeout() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBTcpConfig::clear_sockettimeout() {
  sockettimeout_ = 0;
  clear_has_sockettimeout();
}
inline ::google::protobuf::int32 PBTcpConfig::sockettimeout() const {
  return sockettimeout_;
}
inline void PBTcpConfig::set_sockettimeout(::google::protobuf::int32 value) {
  set_has_sockettimeout();
  sockettimeout_ = value;
}

// required int32 conntimeout = 6;
inline bool PBTcpConfig::has_conntimeout() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBTcpConfig::set_has_conntimeout() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBTcpConfig::clear_has_conntimeout() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBTcpConfig::clear_conntimeout() {
  conntimeout_ = 0;
  clear_has_conntimeout();
}
inline ::google::protobuf::int32 PBTcpConfig::conntimeout() const {
  return conntimeout_;
}
inline void PBTcpConfig::set_conntimeout(::google::protobuf::int32 value) {
  set_has_conntimeout();
  conntimeout_ = value;
}

// required int32 maxlogcount = 7;
inline bool PBTcpConfig::has_maxlogcount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PBTcpConfig::set_has_maxlogcount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PBTcpConfig::clear_has_maxlogcount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PBTcpConfig::clear_maxlogcount() {
  maxlogcount_ = 0;
  clear_has_maxlogcount();
}
inline ::google::protobuf::int32 PBTcpConfig::maxlogcount() const {
  return maxlogcount_;
}
inline void PBTcpConfig::set_maxlogcount(::google::protobuf::int32 value) {
  set_has_maxlogcount();
  maxlogcount_ = value;
}

// required int32 tcpbuflen = 8;
inline bool PBTcpConfig::has_tcpbuflen() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PBTcpConfig::set_has_tcpbuflen() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PBTcpConfig::clear_has_tcpbuflen() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PBTcpConfig::clear_tcpbuflen() {
  tcpbuflen_ = 0;
  clear_has_tcpbuflen();
}
inline ::google::protobuf::int32 PBTcpConfig::tcpbuflen() const {
  return tcpbuflen_;
}
inline void PBTcpConfig::set_tcpbuflen(::google::protobuf::int32 value) {
  set_has_tcpbuflen();
  tcpbuflen_ = value;
}

// required int32 writestatgap = 9;
inline bool PBTcpConfig::has_writestatgap() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PBTcpConfig::set_has_writestatgap() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PBTcpConfig::clear_has_writestatgap() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PBTcpConfig::clear_writestatgap() {
  writestatgap_ = 0;
  clear_has_writestatgap();
}
inline ::google::protobuf::int32 PBTcpConfig::writestatgap() const {
  return writestatgap_;
}
inline void PBTcpConfig::set_writestatgap(::google::protobuf::int32 value) {
  set_has_writestatgap();
  writestatgap_ = value;
}

// required int32 tcpserverid = 10;
inline bool PBTcpConfig::has_tcpserverid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PBTcpConfig::set_has_tcpserverid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PBTcpConfig::clear_has_tcpserverid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PBTcpConfig::clear_tcpserverid() {
  tcpserverid_ = 0;
  clear_has_tcpserverid();
}
inline ::google::protobuf::int32 PBTcpConfig::tcpserverid() const {
  return tcpserverid_;
}
inline void PBTcpConfig::set_tcpserverid(::google::protobuf::int32 value) {
  set_has_tcpserverid();
  tcpserverid_ = value;
}

// required int64 gatetimeout = 11;
inline bool PBTcpConfig::has_gatetimeout() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PBTcpConfig::set_has_gatetimeout() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PBTcpConfig::clear_has_gatetimeout() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PBTcpConfig::clear_gatetimeout() {
  gatetimeout_ = GOOGLE_LONGLONG(0);
  clear_has_gatetimeout();
}
inline ::google::protobuf::int64 PBTcpConfig::gatetimeout() const {
  return gatetimeout_;
}
inline void PBTcpConfig::set_gatetimeout(::google::protobuf::int64 value) {
  set_has_gatetimeout();
  gatetimeout_ = value;
}

// required int64 keepalive = 12;
inline bool PBTcpConfig::has_keepalive() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PBTcpConfig::set_has_keepalive() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PBTcpConfig::clear_has_keepalive() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PBTcpConfig::clear_keepalive() {
  keepalive_ = GOOGLE_LONGLONG(0);
  clear_has_keepalive();
}
inline ::google::protobuf::int64 PBTcpConfig::keepalive() const {
  return keepalive_;
}
inline void PBTcpConfig::set_keepalive(::google::protobuf::int64 value) {
  set_has_keepalive();
  keepalive_ = value;
}

// -------------------------------------------------------------------

// PBGateConfig

// required uint32 id = 1;
inline bool PBGateConfig::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBGateConfig::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBGateConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBGateConfig::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 PBGateConfig::id() const {
  return id_;
}
inline void PBGateConfig::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required int32 port = 2;
inline bool PBGateConfig::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBGateConfig::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBGateConfig::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBGateConfig::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 PBGateConfig::port() const {
  return port_;
}
inline void PBGateConfig::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// PBClientConfig

// required string ip = 1;
inline bool PBClientConfig::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBClientConfig::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBClientConfig::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBClientConfig::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& PBClientConfig::ip() const {
  return *ip_;
}
inline void PBClientConfig::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void PBClientConfig::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void PBClientConfig::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBClientConfig::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* PBClientConfig::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBClientConfig::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 port = 2;
inline bool PBClientConfig::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBClientConfig::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBClientConfig::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBClientConfig::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 PBClientConfig::port() const {
  return port_;
}
inline void PBClientConfig::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// required int32 connnum = 3;
inline bool PBClientConfig::has_connnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBClientConfig::set_has_connnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBClientConfig::clear_has_connnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBClientConfig::clear_connnum() {
  connnum_ = 0;
  clear_has_connnum();
}
inline ::google::protobuf::int32 PBClientConfig::connnum() const {
  return connnum_;
}
inline void PBClientConfig::set_connnum(::google::protobuf::int32 value) {
  set_has_connnum();
  connnum_ = value;
}

// -------------------------------------------------------------------

// CConfigure

// optional .PBDBConfig dbconfig = 1;
inline bool CConfigure::has_dbconfig() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CConfigure::set_has_dbconfig() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CConfigure::clear_has_dbconfig() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CConfigure::clear_dbconfig() {
  if (dbconfig_ != NULL) dbconfig_->::PBDBConfig::Clear();
  clear_has_dbconfig();
}
inline const ::PBDBConfig& CConfigure::dbconfig() const {
  return dbconfig_ != NULL ? *dbconfig_ : *default_instance_->dbconfig_;
}
inline ::PBDBConfig* CConfigure::mutable_dbconfig() {
  set_has_dbconfig();
  if (dbconfig_ == NULL) dbconfig_ = new ::PBDBConfig;
  return dbconfig_;
}
inline ::PBDBConfig* CConfigure::release_dbconfig() {
  clear_has_dbconfig();
  ::PBDBConfig* temp = dbconfig_;
  dbconfig_ = NULL;
  return temp;
}
inline void CConfigure::set_allocated_dbconfig(::PBDBConfig* dbconfig) {
  delete dbconfig_;
  dbconfig_ = dbconfig;
  if (dbconfig) {
    set_has_dbconfig();
  } else {
    clear_has_dbconfig();
  }
}

// optional .PBHallConfig hallconfig = 2;
inline bool CConfigure::has_hallconfig() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CConfigure::set_has_hallconfig() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CConfigure::clear_has_hallconfig() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CConfigure::clear_hallconfig() {
  if (hallconfig_ != NULL) hallconfig_->::PBHallConfig::Clear();
  clear_has_hallconfig();
}
inline const ::PBHallConfig& CConfigure::hallconfig() const {
  return hallconfig_ != NULL ? *hallconfig_ : *default_instance_->hallconfig_;
}
inline ::PBHallConfig* CConfigure::mutable_hallconfig() {
  set_has_hallconfig();
  if (hallconfig_ == NULL) hallconfig_ = new ::PBHallConfig;
  return hallconfig_;
}
inline ::PBHallConfig* CConfigure::release_hallconfig() {
  clear_has_hallconfig();
  ::PBHallConfig* temp = hallconfig_;
  hallconfig_ = NULL;
  return temp;
}
inline void CConfigure::set_allocated_hallconfig(::PBHallConfig* hallconfig) {
  delete hallconfig_;
  hallconfig_ = hallconfig;
  if (hallconfig) {
    set_has_hallconfig();
  } else {
    clear_has_hallconfig();
  }
}

// optional .PBProxyConfig proxyconfig = 3;
inline bool CConfigure::has_proxyconfig() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CConfigure::set_has_proxyconfig() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CConfigure::clear_has_proxyconfig() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CConfigure::clear_proxyconfig() {
  if (proxyconfig_ != NULL) proxyconfig_->::PBProxyConfig::Clear();
  clear_has_proxyconfig();
}
inline const ::PBProxyConfig& CConfigure::proxyconfig() const {
  return proxyconfig_ != NULL ? *proxyconfig_ : *default_instance_->proxyconfig_;
}
inline ::PBProxyConfig* CConfigure::mutable_proxyconfig() {
  set_has_proxyconfig();
  if (proxyconfig_ == NULL) proxyconfig_ = new ::PBProxyConfig;
  return proxyconfig_;
}
inline ::PBProxyConfig* CConfigure::release_proxyconfig() {
  clear_has_proxyconfig();
  ::PBProxyConfig* temp = proxyconfig_;
  proxyconfig_ = NULL;
  return temp;
}
inline void CConfigure::set_allocated_proxyconfig(::PBProxyConfig* proxyconfig) {
  delete proxyconfig_;
  proxyconfig_ = proxyconfig;
  if (proxyconfig) {
    set_has_proxyconfig();
  } else {
    clear_has_proxyconfig();
  }
}

// optional .PBTcpConfig tcpconfig = 4;
inline bool CConfigure::has_tcpconfig() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CConfigure::set_has_tcpconfig() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CConfigure::clear_has_tcpconfig() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CConfigure::clear_tcpconfig() {
  if (tcpconfig_ != NULL) tcpconfig_->::PBTcpConfig::Clear();
  clear_has_tcpconfig();
}
inline const ::PBTcpConfig& CConfigure::tcpconfig() const {
  return tcpconfig_ != NULL ? *tcpconfig_ : *default_instance_->tcpconfig_;
}
inline ::PBTcpConfig* CConfigure::mutable_tcpconfig() {
  set_has_tcpconfig();
  if (tcpconfig_ == NULL) tcpconfig_ = new ::PBTcpConfig;
  return tcpconfig_;
}
inline ::PBTcpConfig* CConfigure::release_tcpconfig() {
  clear_has_tcpconfig();
  ::PBTcpConfig* temp = tcpconfig_;
  tcpconfig_ = NULL;
  return temp;
}
inline void CConfigure::set_allocated_tcpconfig(::PBTcpConfig* tcpconfig) {
  delete tcpconfig_;
  tcpconfig_ = tcpconfig;
  if (tcpconfig) {
    set_has_tcpconfig();
  } else {
    clear_has_tcpconfig();
  }
}

// optional .PBGateConfig gateconfig = 5;
inline bool CConfigure::has_gateconfig() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CConfigure::set_has_gateconfig() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CConfigure::clear_has_gateconfig() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CConfigure::clear_gateconfig() {
  if (gateconfig_ != NULL) gateconfig_->::PBGateConfig::Clear();
  clear_has_gateconfig();
}
inline const ::PBGateConfig& CConfigure::gateconfig() const {
  return gateconfig_ != NULL ? *gateconfig_ : *default_instance_->gateconfig_;
}
inline ::PBGateConfig* CConfigure::mutable_gateconfig() {
  set_has_gateconfig();
  if (gateconfig_ == NULL) gateconfig_ = new ::PBGateConfig;
  return gateconfig_;
}
inline ::PBGateConfig* CConfigure::release_gateconfig() {
  clear_has_gateconfig();
  ::PBGateConfig* temp = gateconfig_;
  gateconfig_ = NULL;
  return temp;
}
inline void CConfigure::set_allocated_gateconfig(::PBGateConfig* gateconfig) {
  delete gateconfig_;
  gateconfig_ = gateconfig;
  if (gateconfig) {
    set_has_gateconfig();
  } else {
    clear_has_gateconfig();
  }
}

// optional .PBClientConfig clientconfig = 6;
inline bool CConfigure::has_clientconfig() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CConfigure::set_has_clientconfig() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CConfigure::clear_has_clientconfig() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CConfigure::clear_clientconfig() {
  if (clientconfig_ != NULL) clientconfig_->::PBClientConfig::Clear();
  clear_has_clientconfig();
}
inline const ::PBClientConfig& CConfigure::clientconfig() const {
  return clientconfig_ != NULL ? *clientconfig_ : *default_instance_->clientconfig_;
}
inline ::PBClientConfig* CConfigure::mutable_clientconfig() {
  set_has_clientconfig();
  if (clientconfig_ == NULL) clientconfig_ = new ::PBClientConfig;
  return clientconfig_;
}
inline ::PBClientConfig* CConfigure::release_clientconfig() {
  clear_has_clientconfig();
  ::PBClientConfig* temp = clientconfig_;
  clientconfig_ = NULL;
  return temp;
}
inline void CConfigure::set_allocated_clientconfig(::PBClientConfig* clientconfig) {
  delete clientconfig_;
  clientconfig_ = clientconfig;
  if (clientconfig) {
    set_has_clientconfig();
  } else {
    clear_has_clientconfig();
  }
}

// optional .PBRoomConfig roomconfig = 7;
inline bool CConfigure::has_roomconfig() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CConfigure::set_has_roomconfig() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CConfigure::clear_has_roomconfig() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CConfigure::clear_roomconfig() {
  if (roomconfig_ != NULL) roomconfig_->::PBRoomConfig::Clear();
  clear_has_roomconfig();
}
inline const ::PBRoomConfig& CConfigure::roomconfig() const {
  return roomconfig_ != NULL ? *roomconfig_ : *default_instance_->roomconfig_;
}
inline ::PBRoomConfig* CConfigure::mutable_roomconfig() {
  set_has_roomconfig();
  if (roomconfig_ == NULL) roomconfig_ = new ::PBRoomConfig;
  return roomconfig_;
}
inline ::PBRoomConfig* CConfigure::release_roomconfig() {
  clear_has_roomconfig();
  ::PBRoomConfig* temp = roomconfig_;
  roomconfig_ = NULL;
  return temp;
}
inline void CConfigure::set_allocated_roomconfig(::PBRoomConfig* roomconfig) {
  delete roomconfig_;
  roomconfig_ = roomconfig;
  if (roomconfig) {
    set_has_roomconfig();
  } else {
    clear_has_roomconfig();
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_configure_2eproto__INCLUDED
