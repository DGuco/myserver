// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: resourcemessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "resourcemessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PB8BallDataStatistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB8BallDataStatistics_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBOrderGoldData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBOrderGoldData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBEightBallStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBEightBallStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSingleBall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSingleBall_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBalls_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBalls_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB8BallGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB8BallGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBKickBallInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBKickBallInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB8BallEndResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB8BallEndResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBUpdateResource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBUpdateResource_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBLuckey28EndGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBLuckey28EndGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBLucky28RoleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBLucky28RoleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBLucky28RoundInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBLucky28RoundInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBLucky28BallList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBLucky28BallList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGagaleType1SingleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGagaleType1SingleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGagaleType2SingleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGagaleType2SingleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGagaleType3SingleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGagaleType3SingleInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EDataStatisticsType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EOrderType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ELeaveRoomType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGoRoomType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EResourceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EItemShopType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eEightBallStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eBallType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eBallResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EIsPocket_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enRoomType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eLucky28Status_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eLucky28BetType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eLucky28ShotType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGameResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eGagaleDisplay_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_resourcemessage_2eproto() {
  protobuf_AddDesc_resourcemessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "resourcemessage.proto");
  GOOGLE_CHECK(file != NULL);
  PB8BallDataStatistics_descriptor_ = file->message_type(0);
  static const int PB8BallDataStatistics_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB8BallDataStatistics, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB8BallDataStatistics, result_),
  };
  PB8BallDataStatistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB8BallDataStatistics_descriptor_,
      PB8BallDataStatistics::default_instance_,
      PB8BallDataStatistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB8BallDataStatistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB8BallDataStatistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB8BallDataStatistics));
  PBOrderGoldData_descriptor_ = file->message_type(1);
  static const int PBOrderGoldData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOrderGoldData, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOrderGoldData, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOrderGoldData, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOrderGoldData, gold_),
  };
  PBOrderGoldData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBOrderGoldData_descriptor_,
      PBOrderGoldData::default_instance_,
      PBOrderGoldData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOrderGoldData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOrderGoldData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBOrderGoldData));
  PBEightBallStatus_descriptor_ = file->message_type(2);
  static const int PBEightBallStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEightBallStatus, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEightBallStatus, status_),
  };
  PBEightBallStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBEightBallStatus_descriptor_,
      PBEightBallStatus::default_instance_,
      PBEightBallStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEightBallStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEightBallStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBEightBallStatus));
  PBSingleBall_descriptor_ = file->message_type(3);
  static const int PBSingleBall_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleBall, balltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleBall, positionx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleBall, positiony_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleBall, ispocket_),
  };
  PBSingleBall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSingleBall_descriptor_,
      PBSingleBall::default_instance_,
      PBSingleBall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleBall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleBall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSingleBall));
  PBBalls_descriptor_ = file->message_type(4);
  static const int PBBalls_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBalls, balllist_),
  };
  PBBalls_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBalls_descriptor_,
      PBBalls::default_instance_,
      PBBalls_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBalls, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBalls, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBalls));
  PB8BallGroup_descriptor_ = file->message_type(5);
  static const int PB8BallGroup_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB8BallGroup, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB8BallGroup, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB8BallGroup, balllist_),
  };
  PB8BallGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB8BallGroup_descriptor_,
      PB8BallGroup::default_instance_,
      PB8BallGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB8BallGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB8BallGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB8BallGroup));
  PBKickBallInfo_descriptor_ = file->message_type(6);
  static const int PBKickBallInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBKickBallInfo, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBKickBallInfo, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBKickBallInfo, kickpointx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBKickBallInfo, kickpointy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBKickBallInfo, writeball_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBKickBallInfo, startrand_),
  };
  PBKickBallInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBKickBallInfo_descriptor_,
      PBKickBallInfo::default_instance_,
      PBKickBallInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBKickBallInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBKickBallInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBKickBallInfo));
  PB8BallEndResult_descriptor_ = file->message_type(7);
  static const int PB8BallEndResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB8BallEndResult, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB8BallEndResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB8BallEndResult, betgold_),
  };
  PB8BallEndResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB8BallEndResult_descriptor_,
      PB8BallEndResult::default_instance_,
      PB8BallEndResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB8BallEndResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB8BallEndResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB8BallEndResult));
  PBItem_descriptor_ = file->message_type(8);
  static const int PBItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItem, arraryindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItem, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItem, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItem, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItem, endtime_),
  };
  PBItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItem_descriptor_,
      PBItem::default_instance_,
      PBItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItem));
  PBItemList_descriptor_ = file->message_type(9);
  static const int PBItemList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemList, items_),
  };
  PBItemList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemList_descriptor_,
      PBItemList::default_instance_,
      PBItemList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemList));
  PBUpdateResource_descriptor_ = file->message_type(10);
  static const int PBUpdateResource_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUpdateResource, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUpdateResource, num_),
  };
  PBUpdateResource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBUpdateResource_descriptor_,
      PBUpdateResource::default_instance_,
      PBUpdateResource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUpdateResource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUpdateResource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBUpdateResource));
  PBLuckey28EndGame_descriptor_ = file->message_type(11);
  static const int PBLuckey28EndGame_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLuckey28EndGame, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLuckey28EndGame, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLuckey28EndGame, addgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLuckey28EndGame, totalgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLuckey28EndGame, balllist_),
  };
  PBLuckey28EndGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBLuckey28EndGame_descriptor_,
      PBLuckey28EndGame::default_instance_,
      PBLuckey28EndGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLuckey28EndGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLuckey28EndGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBLuckey28EndGame));
  PBLucky28RoleInfo_descriptor_ = file->message_type(12);
  static const int PBLucky28RoleInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLucky28RoleInfo, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLucky28RoleInfo, balllist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLucky28RoleInfo, betgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLucky28RoleInfo, remaingold_),
  };
  PBLucky28RoleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBLucky28RoleInfo_descriptor_,
      PBLucky28RoleInfo::default_instance_,
      PBLucky28RoleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLucky28RoleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLucky28RoleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBLucky28RoleInfo));
  PBLucky28RoundInfo_descriptor_ = file->message_type(13);
  static const int PBLucky28RoundInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLucky28RoundInfo, leftballlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLucky28RoundInfo, roleinfos_),
  };
  PBLucky28RoundInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBLucky28RoundInfo_descriptor_,
      PBLucky28RoundInfo::default_instance_,
      PBLucky28RoundInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLucky28RoundInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLucky28RoundInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBLucky28RoundInfo));
  PBLucky28BallList_descriptor_ = file->message_type(14);
  static const int PBLucky28BallList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLucky28BallList, leftballlist_),
  };
  PBLucky28BallList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBLucky28BallList_descriptor_,
      PBLucky28BallList::default_instance_,
      PBLucky28BallList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLucky28BallList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLucky28BallList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBLucky28BallList));
  PBGagaleType1SingleInfo_descriptor_ = file->message_type(15);
  static const int PBGagaleType1SingleInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGagaleType1SingleInfo, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGagaleType1SingleInfo, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGagaleType1SingleInfo, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGagaleType1SingleInfo, isbig_),
  };
  PBGagaleType1SingleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGagaleType1SingleInfo_descriptor_,
      PBGagaleType1SingleInfo::default_instance_,
      PBGagaleType1SingleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGagaleType1SingleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGagaleType1SingleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGagaleType1SingleInfo));
  PBGagaleType2SingleInfo_descriptor_ = file->message_type(16);
  static const int PBGagaleType2SingleInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGagaleType2SingleInfo, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGagaleType2SingleInfo, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGagaleType2SingleInfo, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGagaleType2SingleInfo, isbig_),
  };
  PBGagaleType2SingleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGagaleType2SingleInfo_descriptor_,
      PBGagaleType2SingleInfo::default_instance_,
      PBGagaleType2SingleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGagaleType2SingleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGagaleType2SingleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGagaleType2SingleInfo));
  PBGagaleType3SingleInfo_descriptor_ = file->message_type(17);
  static const int PBGagaleType3SingleInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGagaleType3SingleInfo, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGagaleType3SingleInfo, rewardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGagaleType3SingleInfo, rewardnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGagaleType3SingleInfo, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGagaleType3SingleInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGagaleType3SingleInfo, isbig_),
  };
  PBGagaleType3SingleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGagaleType3SingleInfo_descriptor_,
      PBGagaleType3SingleInfo::default_instance_,
      PBGagaleType3SingleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGagaleType3SingleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGagaleType3SingleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGagaleType3SingleInfo));
  EDataStatisticsType_descriptor_ = file->enum_type(0);
  EOrderType_descriptor_ = file->enum_type(1);
  ELeaveRoomType_descriptor_ = file->enum_type(2);
  EGoRoomType_descriptor_ = file->enum_type(3);
  EResourceType_descriptor_ = file->enum_type(4);
  EItemShopType_descriptor_ = file->enum_type(5);
  eEightBallStatus_descriptor_ = file->enum_type(6);
  eBallType_descriptor_ = file->enum_type(7);
  eBallResult_descriptor_ = file->enum_type(8);
  EIsPocket_descriptor_ = file->enum_type(9);
  enRoomType_descriptor_ = file->enum_type(10);
  eLucky28Status_descriptor_ = file->enum_type(11);
  eLucky28BetType_descriptor_ = file->enum_type(12);
  eLucky28ShotType_descriptor_ = file->enum_type(13);
  EGameResult_descriptor_ = file->enum_type(14);
  eGagaleDisplay_descriptor_ = file->enum_type(15);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_resourcemessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB8BallDataStatistics_descriptor_, &PB8BallDataStatistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBOrderGoldData_descriptor_, &PBOrderGoldData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBEightBallStatus_descriptor_, &PBEightBallStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSingleBall_descriptor_, &PBSingleBall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBalls_descriptor_, &PBBalls::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB8BallGroup_descriptor_, &PB8BallGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBKickBallInfo_descriptor_, &PBKickBallInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB8BallEndResult_descriptor_, &PB8BallEndResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItem_descriptor_, &PBItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemList_descriptor_, &PBItemList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBUpdateResource_descriptor_, &PBUpdateResource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBLuckey28EndGame_descriptor_, &PBLuckey28EndGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBLucky28RoleInfo_descriptor_, &PBLucky28RoleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBLucky28RoundInfo_descriptor_, &PBLucky28RoundInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBLucky28BallList_descriptor_, &PBLucky28BallList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGagaleType1SingleInfo_descriptor_, &PBGagaleType1SingleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGagaleType2SingleInfo_descriptor_, &PBGagaleType2SingleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGagaleType3SingleInfo_descriptor_, &PBGagaleType3SingleInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_resourcemessage_2eproto() {
  delete PB8BallDataStatistics::default_instance_;
  delete PB8BallDataStatistics_reflection_;
  delete PBOrderGoldData::default_instance_;
  delete PBOrderGoldData_reflection_;
  delete PBEightBallStatus::default_instance_;
  delete PBEightBallStatus_reflection_;
  delete PBSingleBall::default_instance_;
  delete PBSingleBall_reflection_;
  delete PBBalls::default_instance_;
  delete PBBalls_reflection_;
  delete PB8BallGroup::default_instance_;
  delete PB8BallGroup_reflection_;
  delete PBKickBallInfo::default_instance_;
  delete PBKickBallInfo_reflection_;
  delete PB8BallEndResult::default_instance_;
  delete PB8BallEndResult_reflection_;
  delete PBItem::default_instance_;
  delete PBItem_reflection_;
  delete PBItemList::default_instance_;
  delete PBItemList_reflection_;
  delete PBUpdateResource::default_instance_;
  delete PBUpdateResource_reflection_;
  delete PBLuckey28EndGame::default_instance_;
  delete PBLuckey28EndGame_reflection_;
  delete PBLucky28RoleInfo::default_instance_;
  delete PBLucky28RoleInfo_reflection_;
  delete PBLucky28RoundInfo::default_instance_;
  delete PBLucky28RoundInfo_reflection_;
  delete PBLucky28BallList::default_instance_;
  delete PBLucky28BallList_reflection_;
  delete PBGagaleType1SingleInfo::default_instance_;
  delete PBGagaleType1SingleInfo_reflection_;
  delete PBGagaleType2SingleInfo::default_instance_;
  delete PBGagaleType2SingleInfo_reflection_;
  delete PBGagaleType3SingleInfo::default_instance_;
  delete PBGagaleType3SingleInfo_reflection_;
}

void protobuf_AddDesc_resourcemessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025resourcemessage.proto\"E\n\025PB8BallDataSt"
    "atistics\022\016\n\006roleid\030\001 \002(\003\022\034\n\006result\030\002 \002(\016"
    "2\014.EGameResult\"Q\n\017PBOrderGoldData\022\016\n\006rol"
    "eid\030\001 \001(\003\022\020\n\010rolename\030\002 \001(\t\022\016\n\006headid\030\003 "
    "\001(\005\022\014\n\004gold\030\004 \001(\003\"3\n\021PBEightBallStatus\022\016"
    "\n\006roleid\030\001 \002(\003\022\016\n\006status\030\002 \002(\005\"X\n\014PBSing"
    "leBall\022\020\n\010BallType\030\001 \002(\005\022\021\n\tPositionX\030\002 "
    "\002(\005\022\021\n\tPositionY\030\003 \002(\005\022\020\n\010IsPocket\030\004 \002(\005"
    "\"*\n\007PBBalls\022\037\n\010BallList\030\001 \003(\0132\r.PBSingle"
    "Ball\"S\n\014PB8BallGroup\022\016\n\006roleid\030\001 \002(\003\022!\n\006"
    "status\030\002 \002(\0162\021.eEightBallStatus\022\020\n\010balll"
    "ist\030\003 \003(\005\"\213\001\n\016PBKickBallInfo\022\r\n\005angle\030\001 "
    "\002(\005\022\r\n\005power\030\002 \002(\005\022\022\n\nkickpointX\030\003 \002(\005\022\022"
    "\n\nkickpointY\030\004 \002(\005\022 \n\twriteball\030\005 \002(\0132\r."
    "PBSingleBall\022\021\n\tstartrand\030\006 \003(\005\"C\n\020PB8Ba"
    "llEndResult\022\016\n\006roleid\030\001 \002(\003\022\016\n\006result\030\002 "
    "\002(\005\022\017\n\007betgold\030\003 \002(\003\"[\n\006PBItem\022\023\n\013Arrary"
    "Index\030\001 \002(\005\022\016\n\006TempID\030\002 \002(\005\022\013\n\003Num\030\003 \002(\005"
    "\022\016\n\006Status\030\004 \002(\005\022\017\n\007EndTime\030\005 \002(\005\"$\n\nPBI"
    "temList\022\026\n\005Items\030\001 \003(\0132\007.PBItem\"=\n\020PBUpd"
    "ateResource\022\034\n\004type\030\001 \001(\0162\016.EResourceTyp"
    "e\022\013\n\003num\030\002 \001(\003\"w\n\021PBLuckey28EndGame\022\016\n\006r"
    "oleid\030\001 \002(\003\022\034\n\006result\030\002 \002(\0162\014.EGameResul"
    "t\022\017\n\007addgold\030\003 \002(\003\022\021\n\ttotalgold\030\004 \002(\003\022\020\n"
    "\010balllist\030\005 \003(\005\"Z\n\021PBLucky28RoleInfo\022\016\n\006"
    "roleid\030\001 \002(\003\022\020\n\010balllist\030\002 \003(\005\022\017\n\007betgol"
    "d\030\003 \002(\003\022\022\n\nremaingold\030\004 \002(\003\"Q\n\022PBLucky28"
    "RoundInfo\022\024\n\014leftballlist\030\001 \003(\005\022%\n\trolei"
    "nfos\030\002 \003(\0132\022.PBLucky28RoleInfo\")\n\021PBLuck"
    "y28BallList\022\024\n\014leftballlist\030\001 \003(\005\"e\n\027PBG"
    "agaleType1SingleInfo\022\013\n\003num\030\001 \002(\005\022\014\n\004gol"
    "d\030\002 \002(\005\022 \n\007display\030\003 \002(\0162\017.eGagaleDispla"
    "y\022\r\n\005isbig\030\004 \002(\005\"e\n\027PBGagaleType2SingleI"
    "nfo\022\013\n\003num\030\001 \002(\005\022\014\n\004gold\030\002 \002(\005\022 \n\007displa"
    "y\030\003 \002(\0162\017.eGagaleDisplay\022\r\n\005isbig\030\004 \002(\005\""
    "\235\001\n\027PBGagaleType3SingleInfo\022\013\n\003num\030\001 \002(\005"
    "\022\"\n\nrewardtype\030\002 \002(\0162\016.EResourceType\022\021\n\t"
    "rewardnum\030\003 \002(\005\022 \n\007display\030\004 \002(\0162\017.eGaga"
    "leDisplay\022\r\n\005state\030\005 \002(\005\022\r\n\005isbig\030\006 \002(\005*"
    "X\n\023EDataStatisticsType\022 \n\034EDataStatistic"
    "sType_8Ball1v1\020\000\022\037\n\033EDataStatisticsType_"
    "8Ball3P\020\001*!\n\nEOrderType\022\023\n\017EOrderType_Go"
    "ld\020\000*G\n\016ELeaveRoomType\022\033\n\027ELeaveRoomType"
    "_NotMatch\020\000\022\030\n\024ELeaveRoomType_Match\020\001*9\n"
    "\013EGoRoomType\022\024\n\020EGoRoomType_Hall\020\000\022\024\n\020EG"
    "oRoomType_Room\020\001*t\n\rEResourceType\022\031\n\025ERe"
    "sourceType_Invalid\020\000\022\031\n\025EResourceType_Di"
    "amond\020\001\022\026\n\022EResourceType_Gold\020\002\022\025\n\021EReso"
    "urceType_RMB\020\003*}\n\rEItemShopType\022\031\n\025EItem"
    "ShopType_Invalid\020\000\022\031\n\025EItemShopType_Ball"
    "Gun\020\001\022\032\n\026EItemShopType_BallDesk\020\002\022\032\n\026EIt"
    "emShopType_BallItem\020\003*\270\002\n\020eEightBallStat"
    "us\022\036\n\032eEightBallStatus_StartKick\020\000\022\031\n\025eE"
    "ightBallStatus_Wait\020\001\022\031\n\025eEightBallStatu"
    "s_Kick\020\002\022\036\n\032eEightBallStatus_StartGame\020\003"
    "\022\035\n\031eEightBallStatus_RoundEnd\020\004\022\032\n\026eEigh"
    "tBallStatus_Leave\020\005\022\033\n\027eEightBallStatus_"
    "Giveup\020\006\022\034\n\030eEightBallStatus_EndGame\020\007\022\035"
    "\n\031eEightBallStatus_WaitJoin\020\010\022\031\n\025eEightB"
    "allStatus_Join\020\t*\332\002\n\teBallType\022\023\n\017eBallT"
    "ype_Write\020\000\022\021\n\reBallType_One\020\001\022\021\n\reBallT"
    "ype_Two\020\002\022\023\n\017eBallType_Three\020\003\022\022\n\016eBallT"
    "ype_Four\020\004\022\022\n\016eBallType_Five\020\005\022\021\n\reBallT"
    "ype_Six\020\006\022\023\n\017eBallType_Seven\020\007\022\023\n\017eBallT"
    "ype_Eight\020\010\022\022\n\016eBallType_Nine\020\t\022\021\n\reBall"
    "Type_Ten\020\n\022\024\n\020eBallType_Eleven\020\013\022\024\n\020eBal"
    "lType_Twelve\020\014\022\026\n\022eBallType_Thirteen\020\r\022\026"
    "\n\022eBallType_FourTeen\020\016\022\025\n\021eBallType_FifT"
    "een\020\017*z\n\013eBallResult\022\023\n\017eBallResult_Pot\020"
    "\000\022\025\n\021eBallResult_Unpot\020\001\022\024\n\020eBallResult_"
    "Foul\020\002\022\023\n\017eBallResult_End\020\003\022\024\n\020eBallResu"
    "lt_None\020\004*0\n\tEIsPocket\022\020\n\014EIsPocket_No\020\000"
    "\022\021\n\rEIsPocket_Yes\020\001*\255\002\n\nenRoomType\022\016\n\nRT"
    "_INVALID\020\000\022\024\n\020RT_8BALL_1V1_LV1\020\001\022\024\n\020RT_8"
    "BALL_1V1_LV2\020\002\022\024\n\020RT_8BALL_1V1_LV3\020\003\022\024\n\020"
    "RT_8BALL_1V1_LV4\020\004\022\022\n\016RT_LUCKY28_LV1\020\005\022\022"
    "\n\016RT_LUCKY28_LV2\020\006\022\022\n\016RT_LUCKY28_LV3\020\007\022\022"
    "\n\016RT_LUCKY28_LV4\020\010\022\023\n\017RT_8BALL_3P_LV1\020\t\022"
    "\023\n\017RT_8BALL_3P_LV2\020\n\022\023\n\017RT_8BALL_3P_LV3\020"
    "\013\022\023\n\017RT_8BALL_3P_LV4\020\014\022\023\n\017RT_ROOMTYPE_NU"
    "M\020\r*\352\001\n\016eLucky28Status\022\034\n\030eLucky28Status"
    "_StartGame\020\000\022\027\n\023eLucky28Status_Wait\020\001\022\027\n"
    "\023eLucky28Status_Shot\020\002\022\032\n\026eLucky28Status"
    "_EndGame\020\003\022\033\n\027eLucky28Status_WaitJoin\020\004\022"
    "\032\n\026eLucky28Status_Prepare\020\005\022\031\n\025eLucky28S"
    "tatus_Giveup\020\006\022\030\n\024eLucky28Status_Leave\020\007"
    "*\262\001\n\017eLucky28BetType\022\030\n\024eLucky28BetType_"
    "None\020\000\022\031\n\025eLucky28BetType_Shot1\020\001\022\031\n\025eLu"
    "cky28BetType_Shot2\020\002\022\031\n\025eLucky28BetType_"
    "Shot3\020\003\022\031\n\025eLucky28BetType_Shot4\020\004\022\031\n\025eL"
    "ucky28BetType_Shot5\020\005*b\n\020eLucky28ShotTyp"
    "e\022\033\n\027eLucky28ShotType_GiveUp\020\001\022\030\n\024eLucky"
    "28ShotType_Yes\020\002\022\027\n\023eLucky28ShotType_No\020"
    "\003*m\n\013EGameResult\022\027\n\023EGameResult_Succeed\020"
    "\000\022\027\n\023EGameResult_Failure\020\001\022\024\n\020EGameResul"
    "t_Draw\020\002\022\026\n\022EGameResult_Escape\020\003*K\n\016eGag"
    "aleDisplay\022\035\n\031eGagaleDisplay_NotDisplay\020"
    "\000\022\032\n\026eGagaleDisplay_Display\020\001B\002H\001", 3913);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "resourcemessage.proto", &protobuf_RegisterTypes);
  PB8BallDataStatistics::default_instance_ = new PB8BallDataStatistics();
  PBOrderGoldData::default_instance_ = new PBOrderGoldData();
  PBEightBallStatus::default_instance_ = new PBEightBallStatus();
  PBSingleBall::default_instance_ = new PBSingleBall();
  PBBalls::default_instance_ = new PBBalls();
  PB8BallGroup::default_instance_ = new PB8BallGroup();
  PBKickBallInfo::default_instance_ = new PBKickBallInfo();
  PB8BallEndResult::default_instance_ = new PB8BallEndResult();
  PBItem::default_instance_ = new PBItem();
  PBItemList::default_instance_ = new PBItemList();
  PBUpdateResource::default_instance_ = new PBUpdateResource();
  PBLuckey28EndGame::default_instance_ = new PBLuckey28EndGame();
  PBLucky28RoleInfo::default_instance_ = new PBLucky28RoleInfo();
  PBLucky28RoundInfo::default_instance_ = new PBLucky28RoundInfo();
  PBLucky28BallList::default_instance_ = new PBLucky28BallList();
  PBGagaleType1SingleInfo::default_instance_ = new PBGagaleType1SingleInfo();
  PBGagaleType2SingleInfo::default_instance_ = new PBGagaleType2SingleInfo();
  PBGagaleType3SingleInfo::default_instance_ = new PBGagaleType3SingleInfo();
  PB8BallDataStatistics::default_instance_->InitAsDefaultInstance();
  PBOrderGoldData::default_instance_->InitAsDefaultInstance();
  PBEightBallStatus::default_instance_->InitAsDefaultInstance();
  PBSingleBall::default_instance_->InitAsDefaultInstance();
  PBBalls::default_instance_->InitAsDefaultInstance();
  PB8BallGroup::default_instance_->InitAsDefaultInstance();
  PBKickBallInfo::default_instance_->InitAsDefaultInstance();
  PB8BallEndResult::default_instance_->InitAsDefaultInstance();
  PBItem::default_instance_->InitAsDefaultInstance();
  PBItemList::default_instance_->InitAsDefaultInstance();
  PBUpdateResource::default_instance_->InitAsDefaultInstance();
  PBLuckey28EndGame::default_instance_->InitAsDefaultInstance();
  PBLucky28RoleInfo::default_instance_->InitAsDefaultInstance();
  PBLucky28RoundInfo::default_instance_->InitAsDefaultInstance();
  PBLucky28BallList::default_instance_->InitAsDefaultInstance();
  PBGagaleType1SingleInfo::default_instance_->InitAsDefaultInstance();
  PBGagaleType2SingleInfo::default_instance_->InitAsDefaultInstance();
  PBGagaleType3SingleInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_resourcemessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_resourcemessage_2eproto {
  StaticDescriptorInitializer_resourcemessage_2eproto() {
    protobuf_AddDesc_resourcemessage_2eproto();
  }
} static_descriptor_initializer_resourcemessage_2eproto_;
const ::google::protobuf::EnumDescriptor* EDataStatisticsType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDataStatisticsType_descriptor_;
}
bool EDataStatisticsType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EOrderType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EOrderType_descriptor_;
}
bool EOrderType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ELeaveRoomType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ELeaveRoomType_descriptor_;
}
bool ELeaveRoomType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGoRoomType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGoRoomType_descriptor_;
}
bool EGoRoomType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EResourceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EResourceType_descriptor_;
}
bool EResourceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EItemShopType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EItemShopType_descriptor_;
}
bool EItemShopType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eEightBallStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eEightBallStatus_descriptor_;
}
bool eEightBallStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eBallType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eBallType_descriptor_;
}
bool eBallType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eBallResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eBallResult_descriptor_;
}
bool eBallResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EIsPocket_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EIsPocket_descriptor_;
}
bool EIsPocket_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* enRoomType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enRoomType_descriptor_;
}
bool enRoomType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eLucky28Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eLucky28Status_descriptor_;
}
bool eLucky28Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eLucky28BetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eLucky28BetType_descriptor_;
}
bool eLucky28BetType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eLucky28ShotType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eLucky28ShotType_descriptor_;
}
bool eLucky28ShotType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGameResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGameResult_descriptor_;
}
bool EGameResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eGagaleDisplay_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eGagaleDisplay_descriptor_;
}
bool eGagaleDisplay_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PB8BallDataStatistics::kRoleidFieldNumber;
const int PB8BallDataStatistics::kResultFieldNumber;
#endif  // !_MSC_VER

PB8BallDataStatistics::PB8BallDataStatistics()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PB8BallDataStatistics::InitAsDefaultInstance() {
}

PB8BallDataStatistics::PB8BallDataStatistics(const PB8BallDataStatistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PB8BallDataStatistics::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_LONGLONG(0);
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB8BallDataStatistics::~PB8BallDataStatistics() {
  SharedDtor();
}

void PB8BallDataStatistics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB8BallDataStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB8BallDataStatistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB8BallDataStatistics_descriptor_;
}

const PB8BallDataStatistics& PB8BallDataStatistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_resourcemessage_2eproto();
  return *default_instance_;
}

PB8BallDataStatistics* PB8BallDataStatistics::default_instance_ = NULL;

PB8BallDataStatistics* PB8BallDataStatistics::New() const {
  return new PB8BallDataStatistics;
}

void PB8BallDataStatistics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_LONGLONG(0);
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB8BallDataStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .EGameResult result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EGameResult_IsValid(value)) {
            set_result(static_cast< ::EGameResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB8BallDataStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleid(), output);
  }

  // required .EGameResult result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PB8BallDataStatistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleid(), target);
  }

  // required .EGameResult result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PB8BallDataStatistics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleid());
    }

    // required .EGameResult result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB8BallDataStatistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB8BallDataStatistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB8BallDataStatistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB8BallDataStatistics::MergeFrom(const PB8BallDataStatistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB8BallDataStatistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB8BallDataStatistics::CopyFrom(const PB8BallDataStatistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB8BallDataStatistics::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PB8BallDataStatistics::Swap(PB8BallDataStatistics* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB8BallDataStatistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB8BallDataStatistics_descriptor_;
  metadata.reflection = PB8BallDataStatistics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBOrderGoldData::kRoleidFieldNumber;
const int PBOrderGoldData::kRolenameFieldNumber;
const int PBOrderGoldData::kHeadidFieldNumber;
const int PBOrderGoldData::kGoldFieldNumber;
#endif  // !_MSC_VER

PBOrderGoldData::PBOrderGoldData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBOrderGoldData::InitAsDefaultInstance() {
}

PBOrderGoldData::PBOrderGoldData(const PBOrderGoldData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBOrderGoldData::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_LONGLONG(0);
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headid_ = 0;
  gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBOrderGoldData::~PBOrderGoldData() {
  SharedDtor();
}

void PBOrderGoldData::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void PBOrderGoldData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBOrderGoldData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBOrderGoldData_descriptor_;
}

const PBOrderGoldData& PBOrderGoldData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_resourcemessage_2eproto();
  return *default_instance_;
}

PBOrderGoldData* PBOrderGoldData::default_instance_ = NULL;

PBOrderGoldData* PBOrderGoldData::New() const {
  return new PBOrderGoldData;
}

void PBOrderGoldData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_LONGLONG(0);
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    headid_ = 0;
    gold_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBOrderGoldData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rolename;
        break;
      }

      // optional string rolename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_headid;
        break;
      }

      // optional int32 headid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gold;
        break;
      }

      // optional int64 gold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBOrderGoldData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleid(), output);
  }

  // optional string rolename = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rolename(), output);
  }

  // optional int32 headid = 3;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->headid(), output);
  }

  // optional int64 gold = 4;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBOrderGoldData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleid(), target);
  }

  // optional string rolename = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rolename(), target);
  }

  // optional int32 headid = 3;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->headid(), target);
  }

  // optional int64 gold = 4;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBOrderGoldData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleid());
    }

    // optional string rolename = 2;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // optional int32 headid = 3;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headid());
    }

    // optional int64 gold = 4;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBOrderGoldData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBOrderGoldData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBOrderGoldData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBOrderGoldData::MergeFrom(const PBOrderGoldData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBOrderGoldData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBOrderGoldData::CopyFrom(const PBOrderGoldData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBOrderGoldData::IsInitialized() const {

  return true;
}

void PBOrderGoldData::Swap(PBOrderGoldData* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(headid_, other->headid_);
    std::swap(gold_, other->gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBOrderGoldData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBOrderGoldData_descriptor_;
  metadata.reflection = PBOrderGoldData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBEightBallStatus::kRoleidFieldNumber;
const int PBEightBallStatus::kStatusFieldNumber;
#endif  // !_MSC_VER

PBEightBallStatus::PBEightBallStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBEightBallStatus::InitAsDefaultInstance() {
}

PBEightBallStatus::PBEightBallStatus(const PBEightBallStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBEightBallStatus::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_LONGLONG(0);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBEightBallStatus::~PBEightBallStatus() {
  SharedDtor();
}

void PBEightBallStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBEightBallStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBEightBallStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBEightBallStatus_descriptor_;
}

const PBEightBallStatus& PBEightBallStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_resourcemessage_2eproto();
  return *default_instance_;
}

PBEightBallStatus* PBEightBallStatus::default_instance_ = NULL;

PBEightBallStatus* PBEightBallStatus::New() const {
  return new PBEightBallStatus;
}

void PBEightBallStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_LONGLONG(0);
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBEightBallStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBEightBallStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleid(), output);
  }

  // required int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBEightBallStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleid(), target);
  }

  // required int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBEightBallStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleid());
    }

    // required int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBEightBallStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBEightBallStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBEightBallStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBEightBallStatus::MergeFrom(const PBEightBallStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBEightBallStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBEightBallStatus::CopyFrom(const PBEightBallStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBEightBallStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PBEightBallStatus::Swap(PBEightBallStatus* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBEightBallStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBEightBallStatus_descriptor_;
  metadata.reflection = PBEightBallStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSingleBall::kBallTypeFieldNumber;
const int PBSingleBall::kPositionXFieldNumber;
const int PBSingleBall::kPositionYFieldNumber;
const int PBSingleBall::kIsPocketFieldNumber;
#endif  // !_MSC_VER

PBSingleBall::PBSingleBall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSingleBall::InitAsDefaultInstance() {
}

PBSingleBall::PBSingleBall(const PBSingleBall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSingleBall::SharedCtor() {
  _cached_size_ = 0;
  balltype_ = 0;
  positionx_ = 0;
  positiony_ = 0;
  ispocket_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSingleBall::~PBSingleBall() {
  SharedDtor();
}

void PBSingleBall::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBSingleBall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSingleBall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSingleBall_descriptor_;
}

const PBSingleBall& PBSingleBall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_resourcemessage_2eproto();
  return *default_instance_;
}

PBSingleBall* PBSingleBall::default_instance_ = NULL;

PBSingleBall* PBSingleBall::New() const {
  return new PBSingleBall;
}

void PBSingleBall::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    balltype_ = 0;
    positionx_ = 0;
    positiony_ = 0;
    ispocket_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSingleBall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 BallType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &balltype_)));
          set_has_balltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_PositionX;
        break;
      }

      // required int32 PositionX = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PositionX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &positionx_)));
          set_has_positionx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_PositionY;
        break;
      }

      // required int32 PositionY = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PositionY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &positiony_)));
          set_has_positiony();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsPocket;
        break;
      }

      // required int32 IsPocket = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsPocket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ispocket_)));
          set_has_ispocket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSingleBall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 BallType = 1;
  if (has_balltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->balltype(), output);
  }

  // required int32 PositionX = 2;
  if (has_positionx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->positionx(), output);
  }

  // required int32 PositionY = 3;
  if (has_positiony()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->positiony(), output);
  }

  // required int32 IsPocket = 4;
  if (has_ispocket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ispocket(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSingleBall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 BallType = 1;
  if (has_balltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->balltype(), target);
  }

  // required int32 PositionX = 2;
  if (has_positionx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->positionx(), target);
  }

  // required int32 PositionY = 3;
  if (has_positiony()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->positiony(), target);
  }

  // required int32 IsPocket = 4;
  if (has_ispocket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ispocket(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSingleBall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 BallType = 1;
    if (has_balltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->balltype());
    }

    // required int32 PositionX = 2;
    if (has_positionx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->positionx());
    }

    // required int32 PositionY = 3;
    if (has_positiony()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->positiony());
    }

    // required int32 IsPocket = 4;
    if (has_ispocket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ispocket());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSingleBall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSingleBall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSingleBall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSingleBall::MergeFrom(const PBSingleBall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_balltype()) {
      set_balltype(from.balltype());
    }
    if (from.has_positionx()) {
      set_positionx(from.positionx());
    }
    if (from.has_positiony()) {
      set_positiony(from.positiony());
    }
    if (from.has_ispocket()) {
      set_ispocket(from.ispocket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSingleBall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSingleBall::CopyFrom(const PBSingleBall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSingleBall::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PBSingleBall::Swap(PBSingleBall* other) {
  if (other != this) {
    std::swap(balltype_, other->balltype_);
    std::swap(positionx_, other->positionx_);
    std::swap(positiony_, other->positiony_);
    std::swap(ispocket_, other->ispocket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSingleBall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSingleBall_descriptor_;
  metadata.reflection = PBSingleBall_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBBalls::kBallListFieldNumber;
#endif  // !_MSC_VER

PBBalls::PBBalls()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBalls::InitAsDefaultInstance() {
}

PBBalls::PBBalls(const PBBalls& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBalls::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBalls::~PBBalls() {
  SharedDtor();
}

void PBBalls::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBBalls::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBBalls::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBalls_descriptor_;
}

const PBBalls& PBBalls::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_resourcemessage_2eproto();
  return *default_instance_;
}

PBBalls* PBBalls::default_instance_ = NULL;

PBBalls* PBBalls::New() const {
  return new PBBalls;
}

void PBBalls::Clear() {
  balllist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBalls::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBSingleBall BallList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BallList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_balllist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_BallList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBalls::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBSingleBall BallList = 1;
  for (int i = 0; i < this->balllist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->balllist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBalls::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBSingleBall BallList = 1;
  for (int i = 0; i < this->balllist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->balllist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBalls::ByteSize() const {
  int total_size = 0;

  // repeated .PBSingleBall BallList = 1;
  total_size += 1 * this->balllist_size();
  for (int i = 0; i < this->balllist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->balllist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBBalls::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBalls* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBalls*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBalls::MergeFrom(const PBBalls& from) {
  GOOGLE_CHECK_NE(&from, this);
  balllist_.MergeFrom(from.balllist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBalls::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBalls::CopyFrom(const PBBalls& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBBalls::IsInitialized() const {

  for (int i = 0; i < balllist_size(); i++) {
    if (!this->balllist(i).IsInitialized()) return false;
  }
  return true;
}

void PBBalls::Swap(PBBalls* other) {
  if (other != this) {
    balllist_.Swap(&other->balllist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBBalls::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBBalls_descriptor_;
  metadata.reflection = PBBalls_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB8BallGroup::kRoleidFieldNumber;
const int PB8BallGroup::kStatusFieldNumber;
const int PB8BallGroup::kBalllistFieldNumber;
#endif  // !_MSC_VER

PB8BallGroup::PB8BallGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PB8BallGroup::InitAsDefaultInstance() {
}

PB8BallGroup::PB8BallGroup(const PB8BallGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PB8BallGroup::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_LONGLONG(0);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB8BallGroup::~PB8BallGroup() {
  SharedDtor();
}

void PB8BallGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB8BallGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB8BallGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB8BallGroup_descriptor_;
}

const PB8BallGroup& PB8BallGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_resourcemessage_2eproto();
  return *default_instance_;
}

PB8BallGroup* PB8BallGroup::default_instance_ = NULL;

PB8BallGroup* PB8BallGroup::New() const {
  return new PB8BallGroup;
}

void PB8BallGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_LONGLONG(0);
    status_ = 0;
  }
  balllist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB8BallGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .eEightBallStatus status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::eEightBallStatus_IsValid(value)) {
            set_status(static_cast< ::eEightBallStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_balllist;
        break;
      }

      // repeated int32 balllist = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_balllist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_balllist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_balllist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_balllist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB8BallGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleid(), output);
  }

  // required .eEightBallStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // repeated int32 balllist = 3;
  for (int i = 0; i < this->balllist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->balllist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PB8BallGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleid(), target);
  }

  // required .eEightBallStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // repeated int32 balllist = 3;
  for (int i = 0; i < this->balllist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->balllist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PB8BallGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleid());
    }

    // required .eEightBallStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated int32 balllist = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->balllist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->balllist(i));
    }
    total_size += 1 * this->balllist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB8BallGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB8BallGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB8BallGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB8BallGroup::MergeFrom(const PB8BallGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  balllist_.MergeFrom(from.balllist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB8BallGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB8BallGroup::CopyFrom(const PB8BallGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB8BallGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PB8BallGroup::Swap(PB8BallGroup* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(status_, other->status_);
    balllist_.Swap(&other->balllist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB8BallGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB8BallGroup_descriptor_;
  metadata.reflection = PB8BallGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBKickBallInfo::kAngleFieldNumber;
const int PBKickBallInfo::kPowerFieldNumber;
const int PBKickBallInfo::kKickpointXFieldNumber;
const int PBKickBallInfo::kKickpointYFieldNumber;
const int PBKickBallInfo::kWriteballFieldNumber;
const int PBKickBallInfo::kStartrandFieldNumber;
#endif  // !_MSC_VER

PBKickBallInfo::PBKickBallInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBKickBallInfo::InitAsDefaultInstance() {
  writeball_ = const_cast< ::PBSingleBall*>(&::PBSingleBall::default_instance());
}

PBKickBallInfo::PBKickBallInfo(const PBKickBallInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBKickBallInfo::SharedCtor() {
  _cached_size_ = 0;
  angle_ = 0;
  power_ = 0;
  kickpointx_ = 0;
  kickpointy_ = 0;
  writeball_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBKickBallInfo::~PBKickBallInfo() {
  SharedDtor();
}

void PBKickBallInfo::SharedDtor() {
  if (this != default_instance_) {
    delete writeball_;
  }
}

void PBKickBallInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBKickBallInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBKickBallInfo_descriptor_;
}

const PBKickBallInfo& PBKickBallInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_resourcemessage_2eproto();
  return *default_instance_;
}

PBKickBallInfo* PBKickBallInfo::default_instance_ = NULL;

PBKickBallInfo* PBKickBallInfo::New() const {
  return new PBKickBallInfo;
}

void PBKickBallInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    angle_ = 0;
    power_ = 0;
    kickpointx_ = 0;
    kickpointy_ = 0;
    if (has_writeball()) {
      if (writeball_ != NULL) writeball_->::PBSingleBall::Clear();
    }
  }
  startrand_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBKickBallInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 angle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_power;
        break;
      }

      // required int32 power = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kickpointX;
        break;
      }

      // required int32 kickpointX = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kickpointX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kickpointx_)));
          set_has_kickpointx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_kickpointY;
        break;
      }

      // required int32 kickpointY = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kickpointY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kickpointy_)));
          set_has_kickpointy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_writeball;
        break;
      }

      // required .PBSingleBall writeball = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_writeball:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_writeball()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_startrand;
        break;
      }

      // repeated int32 startrand = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startrand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_startrand())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_startrand())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_startrand;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBKickBallInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 angle = 1;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->angle(), output);
  }

  // required int32 power = 2;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->power(), output);
  }

  // required int32 kickpointX = 3;
  if (has_kickpointx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->kickpointx(), output);
  }

  // required int32 kickpointY = 4;
  if (has_kickpointy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->kickpointy(), output);
  }

  // required .PBSingleBall writeball = 5;
  if (has_writeball()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->writeball(), output);
  }

  // repeated int32 startrand = 6;
  for (int i = 0; i < this->startrand_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->startrand(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBKickBallInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 angle = 1;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->angle(), target);
  }

  // required int32 power = 2;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->power(), target);
  }

  // required int32 kickpointX = 3;
  if (has_kickpointx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->kickpointx(), target);
  }

  // required int32 kickpointY = 4;
  if (has_kickpointy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->kickpointy(), target);
  }

  // required .PBSingleBall writeball = 5;
  if (has_writeball()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->writeball(), target);
  }

  // repeated int32 startrand = 6;
  for (int i = 0; i < this->startrand_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->startrand(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBKickBallInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 angle = 1;
    if (has_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->angle());
    }

    // required int32 power = 2;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

    // required int32 kickpointX = 3;
    if (has_kickpointx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kickpointx());
    }

    // required int32 kickpointY = 4;
    if (has_kickpointy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kickpointy());
    }

    // required .PBSingleBall writeball = 5;
    if (has_writeball()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->writeball());
    }

  }
  // repeated int32 startrand = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->startrand_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->startrand(i));
    }
    total_size += 1 * this->startrand_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBKickBallInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBKickBallInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBKickBallInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBKickBallInfo::MergeFrom(const PBKickBallInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  startrand_.MergeFrom(from.startrand_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_kickpointx()) {
      set_kickpointx(from.kickpointx());
    }
    if (from.has_kickpointy()) {
      set_kickpointy(from.kickpointy());
    }
    if (from.has_writeball()) {
      mutable_writeball()->::PBSingleBall::MergeFrom(from.writeball());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBKickBallInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBKickBallInfo::CopyFrom(const PBKickBallInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBKickBallInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_writeball()) {
    if (!this->writeball().IsInitialized()) return false;
  }
  return true;
}

void PBKickBallInfo::Swap(PBKickBallInfo* other) {
  if (other != this) {
    std::swap(angle_, other->angle_);
    std::swap(power_, other->power_);
    std::swap(kickpointx_, other->kickpointx_);
    std::swap(kickpointy_, other->kickpointy_);
    std::swap(writeball_, other->writeball_);
    startrand_.Swap(&other->startrand_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBKickBallInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBKickBallInfo_descriptor_;
  metadata.reflection = PBKickBallInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB8BallEndResult::kRoleidFieldNumber;
const int PB8BallEndResult::kResultFieldNumber;
const int PB8BallEndResult::kBetgoldFieldNumber;
#endif  // !_MSC_VER

PB8BallEndResult::PB8BallEndResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PB8BallEndResult::InitAsDefaultInstance() {
}

PB8BallEndResult::PB8BallEndResult(const PB8BallEndResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PB8BallEndResult::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_LONGLONG(0);
  result_ = 0;
  betgold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB8BallEndResult::~PB8BallEndResult() {
  SharedDtor();
}

void PB8BallEndResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB8BallEndResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB8BallEndResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB8BallEndResult_descriptor_;
}

const PB8BallEndResult& PB8BallEndResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_resourcemessage_2eproto();
  return *default_instance_;
}

PB8BallEndResult* PB8BallEndResult::default_instance_ = NULL;

PB8BallEndResult* PB8BallEndResult::New() const {
  return new PB8BallEndResult;
}

void PB8BallEndResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_LONGLONG(0);
    result_ = 0;
    betgold_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB8BallEndResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_betgold;
        break;
      }

      // required int64 betgold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_betgold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &betgold_)));
          set_has_betgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB8BallEndResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleid(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // required int64 betgold = 3;
  if (has_betgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->betgold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PB8BallEndResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleid(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // required int64 betgold = 3;
  if (has_betgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->betgold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PB8BallEndResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleid());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int64 betgold = 3;
    if (has_betgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->betgold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB8BallEndResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB8BallEndResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB8BallEndResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB8BallEndResult::MergeFrom(const PB8BallEndResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_betgold()) {
      set_betgold(from.betgold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB8BallEndResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB8BallEndResult::CopyFrom(const PB8BallEndResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB8BallEndResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PB8BallEndResult::Swap(PB8BallEndResult* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(result_, other->result_);
    std::swap(betgold_, other->betgold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB8BallEndResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB8BallEndResult_descriptor_;
  metadata.reflection = PB8BallEndResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBItem::kArraryIndexFieldNumber;
const int PBItem::kTempIDFieldNumber;
const int PBItem::kNumFieldNumber;
const int PBItem::kStatusFieldNumber;
const int PBItem::kEndTimeFieldNumber;
#endif  // !_MSC_VER

PBItem::PBItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItem::InitAsDefaultInstance() {
}

PBItem::PBItem(const PBItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItem::SharedCtor() {
  _cached_size_ = 0;
  arraryindex_ = 0;
  tempid_ = 0;
  num_ = 0;
  status_ = 0;
  endtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItem::~PBItem() {
  SharedDtor();
}

void PBItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItem_descriptor_;
}

const PBItem& PBItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_resourcemessage_2eproto();
  return *default_instance_;
}

PBItem* PBItem::default_instance_ = NULL;

PBItem* PBItem::New() const {
  return new PBItem;
}

void PBItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    arraryindex_ = 0;
    tempid_ = 0;
    num_ = 0;
    status_ = 0;
    endtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ArraryIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arraryindex_)));
          set_has_arraryindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TempID;
        break;
      }

      // required int32 TempID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TempID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tempid_)));
          set_has_tempid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Num;
        break;
      }

      // required int32 Num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Status;
        break;
      }

      // required int32 Status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_EndTime;
        break;
      }

      // required int32 EndTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ArraryIndex = 1;
  if (has_arraryindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->arraryindex(), output);
  }

  // required int32 TempID = 2;
  if (has_tempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tempid(), output);
  }

  // required int32 Num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // required int32 Status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }

  // required int32 EndTime = 5;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ArraryIndex = 1;
  if (has_arraryindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->arraryindex(), target);
  }

  // required int32 TempID = 2;
  if (has_tempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tempid(), target);
  }

  // required int32 Num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // required int32 Status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->status(), target);
  }

  // required int32 EndTime = 5;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ArraryIndex = 1;
    if (has_arraryindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arraryindex());
    }

    // required int32 TempID = 2;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tempid());
    }

    // required int32 Num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // required int32 Status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // required int32 EndTime = 5;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItem::MergeFrom(const PBItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_arraryindex()) {
      set_arraryindex(from.arraryindex());
    }
    if (from.has_tempid()) {
      set_tempid(from.tempid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItem::CopyFrom(const PBItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void PBItem::Swap(PBItem* other) {
  if (other != this) {
    std::swap(arraryindex_, other->arraryindex_);
    std::swap(tempid_, other->tempid_);
    std::swap(num_, other->num_);
    std::swap(status_, other->status_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBItem_descriptor_;
  metadata.reflection = PBItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBItemList::kItemsFieldNumber;
#endif  // !_MSC_VER

PBItemList::PBItemList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemList::InitAsDefaultInstance() {
}

PBItemList::PBItemList(const PBItemList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemList::~PBItemList() {
  SharedDtor();
}

void PBItemList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBItemList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBItemList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemList_descriptor_;
}

const PBItemList& PBItemList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_resourcemessage_2eproto();
  return *default_instance_;
}

PBItemList* PBItemList::default_instance_ = NULL;

PBItemList* PBItemList::New() const {
  return new PBItemList;
}

void PBItemList::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBItem Items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBItem Items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBItem Items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemList::ByteSize() const {
  int total_size = 0;

  // repeated .PBItem Items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBItemList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemList::MergeFrom(const PBItemList& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemList::CopyFrom(const PBItemList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBItemList::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void PBItemList::Swap(PBItemList* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBItemList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBItemList_descriptor_;
  metadata.reflection = PBItemList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBUpdateResource::kTypeFieldNumber;
const int PBUpdateResource::kNumFieldNumber;
#endif  // !_MSC_VER

PBUpdateResource::PBUpdateResource()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBUpdateResource::InitAsDefaultInstance() {
}

PBUpdateResource::PBUpdateResource(const PBUpdateResource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBUpdateResource::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  num_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBUpdateResource::~PBUpdateResource() {
  SharedDtor();
}

void PBUpdateResource::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBUpdateResource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBUpdateResource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBUpdateResource_descriptor_;
}

const PBUpdateResource& PBUpdateResource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_resourcemessage_2eproto();
  return *default_instance_;
}

PBUpdateResource* PBUpdateResource::default_instance_ = NULL;

PBUpdateResource* PBUpdateResource::New() const {
  return new PBUpdateResource;
}

void PBUpdateResource::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    num_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBUpdateResource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .EResourceType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EResourceType_IsValid(value)) {
            set_type(static_cast< ::EResourceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int64 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBUpdateResource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .EResourceType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int64 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBUpdateResource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .EResourceType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int64 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBUpdateResource::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .EResourceType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int64 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBUpdateResource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBUpdateResource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBUpdateResource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBUpdateResource::MergeFrom(const PBUpdateResource& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBUpdateResource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBUpdateResource::CopyFrom(const PBUpdateResource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBUpdateResource::IsInitialized() const {

  return true;
}

void PBUpdateResource::Swap(PBUpdateResource* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBUpdateResource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBUpdateResource_descriptor_;
  metadata.reflection = PBUpdateResource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBLuckey28EndGame::kRoleidFieldNumber;
const int PBLuckey28EndGame::kResultFieldNumber;
const int PBLuckey28EndGame::kAddgoldFieldNumber;
const int PBLuckey28EndGame::kTotalgoldFieldNumber;
const int PBLuckey28EndGame::kBalllistFieldNumber;
#endif  // !_MSC_VER

PBLuckey28EndGame::PBLuckey28EndGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBLuckey28EndGame::InitAsDefaultInstance() {
}

PBLuckey28EndGame::PBLuckey28EndGame(const PBLuckey28EndGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBLuckey28EndGame::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_LONGLONG(0);
  result_ = 0;
  addgold_ = GOOGLE_LONGLONG(0);
  totalgold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBLuckey28EndGame::~PBLuckey28EndGame() {
  SharedDtor();
}

void PBLuckey28EndGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBLuckey28EndGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBLuckey28EndGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBLuckey28EndGame_descriptor_;
}

const PBLuckey28EndGame& PBLuckey28EndGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_resourcemessage_2eproto();
  return *default_instance_;
}

PBLuckey28EndGame* PBLuckey28EndGame::default_instance_ = NULL;

PBLuckey28EndGame* PBLuckey28EndGame::New() const {
  return new PBLuckey28EndGame;
}

void PBLuckey28EndGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_LONGLONG(0);
    result_ = 0;
    addgold_ = GOOGLE_LONGLONG(0);
    totalgold_ = GOOGLE_LONGLONG(0);
  }
  balllist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBLuckey28EndGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .EGameResult result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EGameResult_IsValid(value)) {
            set_result(static_cast< ::EGameResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_addgold;
        break;
      }

      // required int64 addgold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addgold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &addgold_)));
          set_has_addgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_totalgold;
        break;
      }

      // required int64 totalgold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalgold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalgold_)));
          set_has_totalgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_balllist;
        break;
      }

      // repeated int32 balllist = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_balllist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_balllist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_balllist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_balllist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBLuckey28EndGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleid(), output);
  }

  // required .EGameResult result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // required int64 addgold = 3;
  if (has_addgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->addgold(), output);
  }

  // required int64 totalgold = 4;
  if (has_totalgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->totalgold(), output);
  }

  // repeated int32 balllist = 5;
  for (int i = 0; i < this->balllist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->balllist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBLuckey28EndGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleid(), target);
  }

  // required .EGameResult result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // required int64 addgold = 3;
  if (has_addgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->addgold(), target);
  }

  // required int64 totalgold = 4;
  if (has_totalgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->totalgold(), target);
  }

  // repeated int32 balllist = 5;
  for (int i = 0; i < this->balllist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->balllist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBLuckey28EndGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleid());
    }

    // required .EGameResult result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // required int64 addgold = 3;
    if (has_addgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->addgold());
    }

    // required int64 totalgold = 4;
    if (has_totalgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totalgold());
    }

  }
  // repeated int32 balllist = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->balllist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->balllist(i));
    }
    total_size += 1 * this->balllist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBLuckey28EndGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBLuckey28EndGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBLuckey28EndGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBLuckey28EndGame::MergeFrom(const PBLuckey28EndGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  balllist_.MergeFrom(from.balllist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_addgold()) {
      set_addgold(from.addgold());
    }
    if (from.has_totalgold()) {
      set_totalgold(from.totalgold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBLuckey28EndGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLuckey28EndGame::CopyFrom(const PBLuckey28EndGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBLuckey28EndGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PBLuckey28EndGame::Swap(PBLuckey28EndGame* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(result_, other->result_);
    std::swap(addgold_, other->addgold_);
    std::swap(totalgold_, other->totalgold_);
    balllist_.Swap(&other->balllist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBLuckey28EndGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBLuckey28EndGame_descriptor_;
  metadata.reflection = PBLuckey28EndGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBLucky28RoleInfo::kRoleidFieldNumber;
const int PBLucky28RoleInfo::kBalllistFieldNumber;
const int PBLucky28RoleInfo::kBetgoldFieldNumber;
const int PBLucky28RoleInfo::kRemaingoldFieldNumber;
#endif  // !_MSC_VER

PBLucky28RoleInfo::PBLucky28RoleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBLucky28RoleInfo::InitAsDefaultInstance() {
}

PBLucky28RoleInfo::PBLucky28RoleInfo(const PBLucky28RoleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBLucky28RoleInfo::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_LONGLONG(0);
  betgold_ = GOOGLE_LONGLONG(0);
  remaingold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBLucky28RoleInfo::~PBLucky28RoleInfo() {
  SharedDtor();
}

void PBLucky28RoleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBLucky28RoleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBLucky28RoleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBLucky28RoleInfo_descriptor_;
}

const PBLucky28RoleInfo& PBLucky28RoleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_resourcemessage_2eproto();
  return *default_instance_;
}

PBLucky28RoleInfo* PBLucky28RoleInfo::default_instance_ = NULL;

PBLucky28RoleInfo* PBLucky28RoleInfo::New() const {
  return new PBLucky28RoleInfo;
}

void PBLucky28RoleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_LONGLONG(0);
    betgold_ = GOOGLE_LONGLONG(0);
    remaingold_ = GOOGLE_LONGLONG(0);
  }
  balllist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBLucky28RoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_balllist;
        break;
      }

      // repeated int32 balllist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_balllist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_balllist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_balllist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_balllist;
        if (input->ExpectTag(24)) goto parse_betgold;
        break;
      }

      // required int64 betgold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_betgold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &betgold_)));
          set_has_betgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_remaingold;
        break;
      }

      // required int64 remaingold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remaingold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &remaingold_)));
          set_has_remaingold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBLucky28RoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleid(), output);
  }

  // repeated int32 balllist = 2;
  for (int i = 0; i < this->balllist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->balllist(i), output);
  }

  // required int64 betgold = 3;
  if (has_betgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->betgold(), output);
  }

  // required int64 remaingold = 4;
  if (has_remaingold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->remaingold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBLucky28RoleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleid(), target);
  }

  // repeated int32 balllist = 2;
  for (int i = 0; i < this->balllist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->balllist(i), target);
  }

  // required int64 betgold = 3;
  if (has_betgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->betgold(), target);
  }

  // required int64 remaingold = 4;
  if (has_remaingold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->remaingold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBLucky28RoleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleid());
    }

    // required int64 betgold = 3;
    if (has_betgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->betgold());
    }

    // required int64 remaingold = 4;
    if (has_remaingold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->remaingold());
    }

  }
  // repeated int32 balllist = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->balllist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->balllist(i));
    }
    total_size += 1 * this->balllist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBLucky28RoleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBLucky28RoleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBLucky28RoleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBLucky28RoleInfo::MergeFrom(const PBLucky28RoleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  balllist_.MergeFrom(from.balllist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_betgold()) {
      set_betgold(from.betgold());
    }
    if (from.has_remaingold()) {
      set_remaingold(from.remaingold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBLucky28RoleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLucky28RoleInfo::CopyFrom(const PBLucky28RoleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBLucky28RoleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  return true;
}

void PBLucky28RoleInfo::Swap(PBLucky28RoleInfo* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    balllist_.Swap(&other->balllist_);
    std::swap(betgold_, other->betgold_);
    std::swap(remaingold_, other->remaingold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBLucky28RoleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBLucky28RoleInfo_descriptor_;
  metadata.reflection = PBLucky28RoleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBLucky28RoundInfo::kLeftballlistFieldNumber;
const int PBLucky28RoundInfo::kRoleinfosFieldNumber;
#endif  // !_MSC_VER

PBLucky28RoundInfo::PBLucky28RoundInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBLucky28RoundInfo::InitAsDefaultInstance() {
}

PBLucky28RoundInfo::PBLucky28RoundInfo(const PBLucky28RoundInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBLucky28RoundInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBLucky28RoundInfo::~PBLucky28RoundInfo() {
  SharedDtor();
}

void PBLucky28RoundInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBLucky28RoundInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBLucky28RoundInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBLucky28RoundInfo_descriptor_;
}

const PBLucky28RoundInfo& PBLucky28RoundInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_resourcemessage_2eproto();
  return *default_instance_;
}

PBLucky28RoundInfo* PBLucky28RoundInfo::default_instance_ = NULL;

PBLucky28RoundInfo* PBLucky28RoundInfo::New() const {
  return new PBLucky28RoundInfo;
}

void PBLucky28RoundInfo::Clear() {
  leftballlist_.Clear();
  roleinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBLucky28RoundInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 leftballlist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftballlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_leftballlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_leftballlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_leftballlist;
        if (input->ExpectTag(18)) goto parse_roleinfos;
        break;
      }

      // repeated .PBLucky28RoleInfo roleinfos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roleinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roleinfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBLucky28RoundInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 leftballlist = 1;
  for (int i = 0; i < this->leftballlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->leftballlist(i), output);
  }

  // repeated .PBLucky28RoleInfo roleinfos = 2;
  for (int i = 0; i < this->roleinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->roleinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBLucky28RoundInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 leftballlist = 1;
  for (int i = 0; i < this->leftballlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->leftballlist(i), target);
  }

  // repeated .PBLucky28RoleInfo roleinfos = 2;
  for (int i = 0; i < this->roleinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->roleinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBLucky28RoundInfo::ByteSize() const {
  int total_size = 0;

  // repeated int32 leftballlist = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->leftballlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->leftballlist(i));
    }
    total_size += 1 * this->leftballlist_size() + data_size;
  }

  // repeated .PBLucky28RoleInfo roleinfos = 2;
  total_size += 1 * this->roleinfos_size();
  for (int i = 0; i < this->roleinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roleinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBLucky28RoundInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBLucky28RoundInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBLucky28RoundInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBLucky28RoundInfo::MergeFrom(const PBLucky28RoundInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  leftballlist_.MergeFrom(from.leftballlist_);
  roleinfos_.MergeFrom(from.roleinfos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBLucky28RoundInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLucky28RoundInfo::CopyFrom(const PBLucky28RoundInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBLucky28RoundInfo::IsInitialized() const {

  for (int i = 0; i < roleinfos_size(); i++) {
    if (!this->roleinfos(i).IsInitialized()) return false;
  }
  return true;
}

void PBLucky28RoundInfo::Swap(PBLucky28RoundInfo* other) {
  if (other != this) {
    leftballlist_.Swap(&other->leftballlist_);
    roleinfos_.Swap(&other->roleinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBLucky28RoundInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBLucky28RoundInfo_descriptor_;
  metadata.reflection = PBLucky28RoundInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBLucky28BallList::kLeftballlistFieldNumber;
#endif  // !_MSC_VER

PBLucky28BallList::PBLucky28BallList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBLucky28BallList::InitAsDefaultInstance() {
}

PBLucky28BallList::PBLucky28BallList(const PBLucky28BallList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBLucky28BallList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBLucky28BallList::~PBLucky28BallList() {
  SharedDtor();
}

void PBLucky28BallList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBLucky28BallList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBLucky28BallList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBLucky28BallList_descriptor_;
}

const PBLucky28BallList& PBLucky28BallList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_resourcemessage_2eproto();
  return *default_instance_;
}

PBLucky28BallList* PBLucky28BallList::default_instance_ = NULL;

PBLucky28BallList* PBLucky28BallList::New() const {
  return new PBLucky28BallList;
}

void PBLucky28BallList::Clear() {
  leftballlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBLucky28BallList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 leftballlist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftballlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_leftballlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_leftballlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_leftballlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBLucky28BallList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 leftballlist = 1;
  for (int i = 0; i < this->leftballlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->leftballlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBLucky28BallList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 leftballlist = 1;
  for (int i = 0; i < this->leftballlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->leftballlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBLucky28BallList::ByteSize() const {
  int total_size = 0;

  // repeated int32 leftballlist = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->leftballlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->leftballlist(i));
    }
    total_size += 1 * this->leftballlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBLucky28BallList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBLucky28BallList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBLucky28BallList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBLucky28BallList::MergeFrom(const PBLucky28BallList& from) {
  GOOGLE_CHECK_NE(&from, this);
  leftballlist_.MergeFrom(from.leftballlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBLucky28BallList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLucky28BallList::CopyFrom(const PBLucky28BallList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBLucky28BallList::IsInitialized() const {

  return true;
}

void PBLucky28BallList::Swap(PBLucky28BallList* other) {
  if (other != this) {
    leftballlist_.Swap(&other->leftballlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBLucky28BallList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBLucky28BallList_descriptor_;
  metadata.reflection = PBLucky28BallList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGagaleType1SingleInfo::kNumFieldNumber;
const int PBGagaleType1SingleInfo::kGoldFieldNumber;
const int PBGagaleType1SingleInfo::kDisplayFieldNumber;
const int PBGagaleType1SingleInfo::kIsbigFieldNumber;
#endif  // !_MSC_VER

PBGagaleType1SingleInfo::PBGagaleType1SingleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGagaleType1SingleInfo::InitAsDefaultInstance() {
}

PBGagaleType1SingleInfo::PBGagaleType1SingleInfo(const PBGagaleType1SingleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGagaleType1SingleInfo::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  gold_ = 0;
  display_ = 0;
  isbig_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGagaleType1SingleInfo::~PBGagaleType1SingleInfo() {
  SharedDtor();
}

void PBGagaleType1SingleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBGagaleType1SingleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGagaleType1SingleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGagaleType1SingleInfo_descriptor_;
}

const PBGagaleType1SingleInfo& PBGagaleType1SingleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_resourcemessage_2eproto();
  return *default_instance_;
}

PBGagaleType1SingleInfo* PBGagaleType1SingleInfo::default_instance_ = NULL;

PBGagaleType1SingleInfo* PBGagaleType1SingleInfo::New() const {
  return new PBGagaleType1SingleInfo;
}

void PBGagaleType1SingleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
    gold_ = 0;
    display_ = 0;
    isbig_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGagaleType1SingleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }

      // required int32 gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_display;
        break;
      }

      // required .eGagaleDisplay display = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_display:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::eGagaleDisplay_IsValid(value)) {
            set_display(static_cast< ::eGagaleDisplay >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isbig;
        break;
      }

      // required int32 isbig = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isbig:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isbig_)));
          set_has_isbig();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGagaleType1SingleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // required int32 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gold(), output);
  }

  // required .eGagaleDisplay display = 3;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->display(), output);
  }

  // required int32 isbig = 4;
  if (has_isbig()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->isbig(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGagaleType1SingleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // required int32 gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gold(), target);
  }

  // required .eGagaleDisplay display = 3;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->display(), target);
  }

  // required int32 isbig = 4;
  if (has_isbig()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->isbig(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGagaleType1SingleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // required int32 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // required .eGagaleDisplay display = 3;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->display());
    }

    // required int32 isbig = 4;
    if (has_isbig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isbig());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGagaleType1SingleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGagaleType1SingleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGagaleType1SingleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGagaleType1SingleInfo::MergeFrom(const PBGagaleType1SingleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_display()) {
      set_display(from.display());
    }
    if (from.has_isbig()) {
      set_isbig(from.isbig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGagaleType1SingleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGagaleType1SingleInfo::CopyFrom(const PBGagaleType1SingleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGagaleType1SingleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PBGagaleType1SingleInfo::Swap(PBGagaleType1SingleInfo* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(gold_, other->gold_);
    std::swap(display_, other->display_);
    std::swap(isbig_, other->isbig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGagaleType1SingleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGagaleType1SingleInfo_descriptor_;
  metadata.reflection = PBGagaleType1SingleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGagaleType2SingleInfo::kNumFieldNumber;
const int PBGagaleType2SingleInfo::kGoldFieldNumber;
const int PBGagaleType2SingleInfo::kDisplayFieldNumber;
const int PBGagaleType2SingleInfo::kIsbigFieldNumber;
#endif  // !_MSC_VER

PBGagaleType2SingleInfo::PBGagaleType2SingleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGagaleType2SingleInfo::InitAsDefaultInstance() {
}

PBGagaleType2SingleInfo::PBGagaleType2SingleInfo(const PBGagaleType2SingleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGagaleType2SingleInfo::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  gold_ = 0;
  display_ = 0;
  isbig_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGagaleType2SingleInfo::~PBGagaleType2SingleInfo() {
  SharedDtor();
}

void PBGagaleType2SingleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBGagaleType2SingleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGagaleType2SingleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGagaleType2SingleInfo_descriptor_;
}

const PBGagaleType2SingleInfo& PBGagaleType2SingleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_resourcemessage_2eproto();
  return *default_instance_;
}

PBGagaleType2SingleInfo* PBGagaleType2SingleInfo::default_instance_ = NULL;

PBGagaleType2SingleInfo* PBGagaleType2SingleInfo::New() const {
  return new PBGagaleType2SingleInfo;
}

void PBGagaleType2SingleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
    gold_ = 0;
    display_ = 0;
    isbig_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGagaleType2SingleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }

      // required int32 gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_display;
        break;
      }

      // required .eGagaleDisplay display = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_display:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::eGagaleDisplay_IsValid(value)) {
            set_display(static_cast< ::eGagaleDisplay >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isbig;
        break;
      }

      // required int32 isbig = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isbig:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isbig_)));
          set_has_isbig();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGagaleType2SingleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // required int32 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gold(), output);
  }

  // required .eGagaleDisplay display = 3;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->display(), output);
  }

  // required int32 isbig = 4;
  if (has_isbig()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->isbig(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGagaleType2SingleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // required int32 gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gold(), target);
  }

  // required .eGagaleDisplay display = 3;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->display(), target);
  }

  // required int32 isbig = 4;
  if (has_isbig()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->isbig(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGagaleType2SingleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // required int32 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // required .eGagaleDisplay display = 3;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->display());
    }

    // required int32 isbig = 4;
    if (has_isbig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isbig());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGagaleType2SingleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGagaleType2SingleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGagaleType2SingleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGagaleType2SingleInfo::MergeFrom(const PBGagaleType2SingleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_display()) {
      set_display(from.display());
    }
    if (from.has_isbig()) {
      set_isbig(from.isbig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGagaleType2SingleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGagaleType2SingleInfo::CopyFrom(const PBGagaleType2SingleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGagaleType2SingleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PBGagaleType2SingleInfo::Swap(PBGagaleType2SingleInfo* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(gold_, other->gold_);
    std::swap(display_, other->display_);
    std::swap(isbig_, other->isbig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGagaleType2SingleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGagaleType2SingleInfo_descriptor_;
  metadata.reflection = PBGagaleType2SingleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGagaleType3SingleInfo::kNumFieldNumber;
const int PBGagaleType3SingleInfo::kRewardtypeFieldNumber;
const int PBGagaleType3SingleInfo::kRewardnumFieldNumber;
const int PBGagaleType3SingleInfo::kDisplayFieldNumber;
const int PBGagaleType3SingleInfo::kStateFieldNumber;
const int PBGagaleType3SingleInfo::kIsbigFieldNumber;
#endif  // !_MSC_VER

PBGagaleType3SingleInfo::PBGagaleType3SingleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGagaleType3SingleInfo::InitAsDefaultInstance() {
}

PBGagaleType3SingleInfo::PBGagaleType3SingleInfo(const PBGagaleType3SingleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGagaleType3SingleInfo::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  rewardtype_ = 0;
  rewardnum_ = 0;
  display_ = 0;
  state_ = 0;
  isbig_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGagaleType3SingleInfo::~PBGagaleType3SingleInfo() {
  SharedDtor();
}

void PBGagaleType3SingleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBGagaleType3SingleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGagaleType3SingleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGagaleType3SingleInfo_descriptor_;
}

const PBGagaleType3SingleInfo& PBGagaleType3SingleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_resourcemessage_2eproto();
  return *default_instance_;
}

PBGagaleType3SingleInfo* PBGagaleType3SingleInfo::default_instance_ = NULL;

PBGagaleType3SingleInfo* PBGagaleType3SingleInfo::New() const {
  return new PBGagaleType3SingleInfo;
}

void PBGagaleType3SingleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
    rewardtype_ = 0;
    rewardnum_ = 0;
    display_ = 0;
    state_ = 0;
    isbig_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGagaleType3SingleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rewardtype;
        break;
      }

      // required .EResourceType rewardtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EResourceType_IsValid(value)) {
            set_rewardtype(static_cast< ::EResourceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rewardnum;
        break;
      }

      // required int32 rewardnum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardnum_)));
          set_has_rewardnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_display;
        break;
      }

      // required .eGagaleDisplay display = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_display:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::eGagaleDisplay_IsValid(value)) {
            set_display(static_cast< ::eGagaleDisplay >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }

      // required int32 state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isbig;
        break;
      }

      // required int32 isbig = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isbig:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isbig_)));
          set_has_isbig();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGagaleType3SingleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // required .EResourceType rewardtype = 2;
  if (has_rewardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->rewardtype(), output);
  }

  // required int32 rewardnum = 3;
  if (has_rewardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rewardnum(), output);
  }

  // required .eGagaleDisplay display = 4;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->display(), output);
  }

  // required int32 state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->state(), output);
  }

  // required int32 isbig = 6;
  if (has_isbig()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->isbig(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGagaleType3SingleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // required .EResourceType rewardtype = 2;
  if (has_rewardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->rewardtype(), target);
  }

  // required int32 rewardnum = 3;
  if (has_rewardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rewardnum(), target);
  }

  // required .eGagaleDisplay display = 4;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->display(), target);
  }

  // required int32 state = 5;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->state(), target);
  }

  // required int32 isbig = 6;
  if (has_isbig()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->isbig(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGagaleType3SingleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // required .EResourceType rewardtype = 2;
    if (has_rewardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rewardtype());
    }

    // required int32 rewardnum = 3;
    if (has_rewardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardnum());
    }

    // required .eGagaleDisplay display = 4;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->display());
    }

    // required int32 state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // required int32 isbig = 6;
    if (has_isbig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isbig());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGagaleType3SingleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGagaleType3SingleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGagaleType3SingleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGagaleType3SingleInfo::MergeFrom(const PBGagaleType3SingleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_rewardtype()) {
      set_rewardtype(from.rewardtype());
    }
    if (from.has_rewardnum()) {
      set_rewardnum(from.rewardnum());
    }
    if (from.has_display()) {
      set_display(from.display());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_isbig()) {
      set_isbig(from.isbig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGagaleType3SingleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGagaleType3SingleInfo::CopyFrom(const PBGagaleType3SingleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGagaleType3SingleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void PBGagaleType3SingleInfo::Swap(PBGagaleType3SingleInfo* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(rewardtype_, other->rewardtype_);
    std::swap(rewardnum_, other->rewardnum_);
    std::swap(display_, other->display_);
    std::swap(state_, other->state_);
    std::swap(isbig_, other->isbig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGagaleType3SingleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGagaleType3SingleInfo_descriptor_;
  metadata.reflection = PBGagaleType3SingleInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
