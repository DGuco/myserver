// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMessageHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPingRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgPingRequest_Msg_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enMessageFE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  CMessageHead_descriptor_ = file->message_type(0);
  static const int CMessageHead_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageHead, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageHead, dstfe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageHead, dstid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageHead, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageHead, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageHead, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageHead, entityid_),
  };
  CMessageHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageHead_descriptor_,
      CMessageHead::default_instance_,
      CMessageHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageHead));
  CMessage_descriptor_ = file->message_type(1);
  static const int CMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessage, msghead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessage, msgpara_),
  };
  CMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessage_descriptor_,
      CMessage::default_instance_,
      CMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessage));
  CMsgPingRequest_descriptor_ = file->message_type(2);
  static const int CMsgPingRequest_offsets_[1] = {
  };
  CMsgPingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPingRequest_descriptor_,
      CMsgPingRequest::default_instance_,
      CMsgPingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPingRequest));
  CMsgPingRequest_Msg_descriptor_ = CMsgPingRequest_descriptor_->enum_type(0);
  enMessageFE_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageHead_descriptor_, &CMessageHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessage_descriptor_, &CMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPingRequest_descriptor_, &CMsgPingRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete CMessageHead::default_instance_;
  delete CMessageHead_reflection_;
  delete CMessage::default_instance_;
  delete CMessage_reflection_;
  delete CMsgPingRequest::default_instance_;
  delete CMsgPingRequest_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\"\215\001\n\014CMessageHead\022\024\n\tMess"
    "ageID\030\001 \002(\005:\0010\022\r\n\005DstFE\030\002 \001(\005\022\r\n\005DstID\030\003"
    " \001(\005\022\021\n\tTimeStamp\030\004 \001(\003\022\016\n\006RoomID\030\005 \001(\005\022"
    "\021\n\006RoleID\030\006 \001(\003:\0010\022\023\n\010EntityID\030\007 \001(\005:\0010\""
    ">\n\010CMessage\022\036\n\007MsgHead\030\001 \002(\0132\r.CMessageH"
    "ead\022\022\n\007MsgPara\030\002 \001(\006:\0010\"&\n\017CMsgPingReque"
    "st\"\023\n\003Msg\022\014\n\005MsgID\020\377\377\377\007*\221\002\n\013enMessageFE\022"
    "\014\n\010FE_TIMER\020\000\022\r\n\tFE_CLIENT\020\001\022\021\n\rFE_GAMES"
    "ERVER\020\002\022\022\n\016FE_LOGINSERVER\020\003\022\017\n\013FE_DBSERV"
    "ER\020\004\022\022\n\016FE_PROXYSERVER\020\005\022\022\n\016FE_WORLDSERV"
    "ER\020\006\022\020\n\014FE_WEBSERVER\020\007\022\024\n\020FE_OFFLINESERV"
    "ER\020\010\022\022\n\016FE_CHECKSERVER\020\t\022\021\n\rFE_HALLSERVE"
    "R\020\n\022\021\n\rFE_GATESERVER\020\013\022\020\n\014FE_TCPSERVER\020\014"
    "\022\021\n\rFE_ROOMSERVER\020\rB\002H\001", 543);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  CMessageHead::default_instance_ = new CMessageHead();
  CMessage::default_instance_ = new CMessage();
  CMsgPingRequest::default_instance_ = new CMsgPingRequest();
  CMessageHead::default_instance_->InitAsDefaultInstance();
  CMessage::default_instance_->InitAsDefaultInstance();
  CMsgPingRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;
const ::google::protobuf::EnumDescriptor* enMessageFE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enMessageFE_descriptor_;
}
bool enMessageFE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CMessageHead::kMessageIDFieldNumber;
const int CMessageHead::kDstFEFieldNumber;
const int CMessageHead::kDstIDFieldNumber;
const int CMessageHead::kTimeStampFieldNumber;
const int CMessageHead::kRoomIDFieldNumber;
const int CMessageHead::kRoleIDFieldNumber;
const int CMessageHead::kEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageHead::CMessageHead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageHead::InitAsDefaultInstance() {
}

CMessageHead::CMessageHead(const CMessageHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageHead::SharedCtor() {
  _cached_size_ = 0;
  messageid_ = 0;
  dstfe_ = 0;
  dstid_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  roomid_ = 0;
  roleid_ = GOOGLE_LONGLONG(0);
  entityid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageHead::~CMessageHead() {
  SharedDtor();
}

void CMessageHead::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMessageHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMessageHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageHead_descriptor_;
}

const CMessageHead& CMessageHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

CMessageHead* CMessageHead::default_instance_ = NULL;

CMessageHead* CMessageHead::New() const {
  return new CMessageHead;
}

void CMessageHead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    messageid_ = 0;
    dstfe_ = 0;
    dstid_ = 0;
    timestamp_ = GOOGLE_LONGLONG(0);
    roomid_ = 0;
    roleid_ = GOOGLE_LONGLONG(0);
    entityid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 MessageID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messageid_)));
          set_has_messageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DstFE;
        break;
      }

      // optional int32 DstFE = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DstFE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dstfe_)));
          set_has_dstfe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DstID;
        break;
      }

      // optional int32 DstID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DstID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dstid_)));
          set_has_dstid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_TimeStamp;
        break;
      }

      // optional int64 TimeStamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeStamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_RoomID;
        break;
      }

      // optional int32 RoomID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoomID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_RoleID;
        break;
      }

      // optional int64 RoleID = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_EntityID;
        break;
      }

      // optional int32 EntityID = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EntityID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entityid_)));
          set_has_entityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 MessageID = 1 [default = 0];
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->messageid(), output);
  }

  // optional int32 DstFE = 2;
  if (has_dstfe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dstfe(), output);
  }

  // optional int32 DstID = 3;
  if (has_dstid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dstid(), output);
  }

  // optional int64 TimeStamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timestamp(), output);
  }

  // optional int32 RoomID = 5;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->roomid(), output);
  }

  // optional int64 RoleID = 6 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->roleid(), output);
  }

  // optional int32 EntityID = 7 [default = 0];
  if (has_entityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->entityid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 MessageID = 1 [default = 0];
  if (has_messageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->messageid(), target);
  }

  // optional int32 DstFE = 2;
  if (has_dstfe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dstfe(), target);
  }

  // optional int32 DstID = 3;
  if (has_dstid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dstid(), target);
  }

  // optional int64 TimeStamp = 4;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp(), target);
  }

  // optional int32 RoomID = 5;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->roomid(), target);
  }

  // optional int64 RoleID = 6 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->roleid(), target);
  }

  // optional int32 EntityID = 7 [default = 0];
  if (has_entityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->entityid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 MessageID = 1 [default = 0];
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messageid());
    }

    // optional int32 DstFE = 2;
    if (has_dstfe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dstfe());
    }

    // optional int32 DstID = 3;
    if (has_dstid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dstid());
    }

    // optional int64 TimeStamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional int32 RoomID = 5;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional int64 RoleID = 6 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleid());
    }

    // optional int32 EntityID = 7 [default = 0];
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entityid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMessageHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageHead::MergeFrom(const CMessageHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_dstfe()) {
      set_dstfe(from.dstfe());
    }
    if (from.has_dstid()) {
      set_dstid(from.dstid());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_entityid()) {
      set_entityid(from.entityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageHead::CopyFrom(const CMessageHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMessageHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMessageHead::Swap(CMessageHead* other) {
  if (other != this) {
    std::swap(messageid_, other->messageid_);
    std::swap(dstfe_, other->dstfe_);
    std::swap(dstid_, other->dstid_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(roomid_, other->roomid_);
    std::swap(roleid_, other->roleid_);
    std::swap(entityid_, other->entityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMessageHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMessageHead_descriptor_;
  metadata.reflection = CMessageHead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMessage::kMsgHeadFieldNumber;
const int CMessage::kMsgParaFieldNumber;
#endif  // !_MSC_VER

CMessage::CMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessage::InitAsDefaultInstance() {
  msghead_ = const_cast< ::CMessageHead*>(&::CMessageHead::default_instance());
}

CMessage::CMessage(const CMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessage::SharedCtor() {
  _cached_size_ = 0;
  msghead_ = NULL;
  msgpara_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessage::~CMessage() {
  SharedDtor();
}

void CMessage::SharedDtor() {
  if (this != default_instance_) {
    delete msghead_;
  }
}

void CMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessage_descriptor_;
}

const CMessage& CMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

CMessage* CMessage::default_instance_ = NULL;

CMessage* CMessage::New() const {
  return new CMessage;
}

void CMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::CMessageHead::Clear();
    }
    msgpara_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CMessageHead MsgHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_MsgPara;
        break;
      }

      // optional fixed64 MsgPara = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MsgPara:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &msgpara_)));
          set_has_msgpara();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .CMessageHead MsgHead = 1;
  if (has_msghead()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msghead(), output);
  }

  // optional fixed64 MsgPara = 2 [default = 0];
  if (has_msgpara()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->msgpara(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .CMessageHead MsgHead = 1;
  if (has_msghead()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msghead(), target);
  }

  // optional fixed64 MsgPara = 2 [default = 0];
  if (has_msgpara()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->msgpara(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CMessageHead MsgHead = 1;
    if (has_msghead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msghead());
    }

    // optional fixed64 MsgPara = 2 [default = 0];
    if (has_msgpara()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessage::MergeFrom(const CMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::CMessageHead::MergeFrom(from.msghead());
    }
    if (from.has_msgpara()) {
      set_msgpara(from.msgpara());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessage::CopyFrom(const CMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_msghead()) {
    if (!this->msghead().IsInitialized()) return false;
  }
  return true;
}

void CMessage::Swap(CMessage* other) {
  if (other != this) {
    std::swap(msghead_, other->msghead_);
    std::swap(msgpara_, other->msgpara_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMessage_descriptor_;
  metadata.reflection = CMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgPingRequest_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPingRequest_Msg_descriptor_;
}
bool CMsgPingRequest_Msg_IsValid(int value) {
  switch(value) {
    case 16777215:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgPingRequest_Msg CMsgPingRequest::MsgID;
const CMsgPingRequest_Msg CMsgPingRequest::Msg_MIN;
const CMsgPingRequest_Msg CMsgPingRequest::Msg_MAX;
const int CMsgPingRequest::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgPingRequest::CMsgPingRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgPingRequest::InitAsDefaultInstance() {
}

CMsgPingRequest::CMsgPingRequest(const CMsgPingRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPingRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPingRequest::~CMsgPingRequest() {
  SharedDtor();
}

void CMsgPingRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPingRequest_descriptor_;
}

const CMsgPingRequest& CMsgPingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

CMsgPingRequest* CMsgPingRequest::default_instance_ = NULL;

CMsgPingRequest* CMsgPingRequest::New() const {
  return new CMsgPingRequest;
}

void CMsgPingRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgPingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgPingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgPingRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPingRequest::MergeFrom(const CMsgPingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPingRequest::CopyFrom(const CMsgPingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPingRequest::IsInitialized() const {

  return true;
}

void CMsgPingRequest::Swap(CMsgPingRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPingRequest_descriptor_;
  metadata.reflection = CMsgPingRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
