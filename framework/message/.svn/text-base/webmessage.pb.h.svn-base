// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webmessage.proto

#ifndef PROTOBUF_webmessage_2eproto__INCLUDED
#define PROTOBUF_webmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_webmessage_2eproto();
void protobuf_AssignDesc_webmessage_2eproto();
void protobuf_ShutdownFile_webmessage_2eproto();

class CMsgWeb2GameRequest;
class CMsgGame2WebResponse;
class CMsgGame2WebRequest;
class CMsgWeb2GameResponse;

enum CMsgWeb2GameRequest_Msg {
  CMsgWeb2GameRequest_Msg_MsgID = 196609
};
bool CMsgWeb2GameRequest_Msg_IsValid(int value);
const CMsgWeb2GameRequest_Msg CMsgWeb2GameRequest_Msg_Msg_MIN = CMsgWeb2GameRequest_Msg_MsgID;
const CMsgWeb2GameRequest_Msg CMsgWeb2GameRequest_Msg_Msg_MAX = CMsgWeb2GameRequest_Msg_MsgID;
const int CMsgWeb2GameRequest_Msg_Msg_ARRAYSIZE = CMsgWeb2GameRequest_Msg_Msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgWeb2GameRequest_Msg_descriptor();
inline const ::std::string& CMsgWeb2GameRequest_Msg_Name(CMsgWeb2GameRequest_Msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgWeb2GameRequest_Msg_descriptor(), value);
}
inline bool CMsgWeb2GameRequest_Msg_Parse(
    const ::std::string& name, CMsgWeb2GameRequest_Msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgWeb2GameRequest_Msg>(
    CMsgWeb2GameRequest_Msg_descriptor(), name, value);
}
enum CMsgGame2WebResponse_Msg {
  CMsgGame2WebResponse_Msg_MsgID = 196610
};
bool CMsgGame2WebResponse_Msg_IsValid(int value);
const CMsgGame2WebResponse_Msg CMsgGame2WebResponse_Msg_Msg_MIN = CMsgGame2WebResponse_Msg_MsgID;
const CMsgGame2WebResponse_Msg CMsgGame2WebResponse_Msg_Msg_MAX = CMsgGame2WebResponse_Msg_MsgID;
const int CMsgGame2WebResponse_Msg_Msg_ARRAYSIZE = CMsgGame2WebResponse_Msg_Msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgGame2WebResponse_Msg_descriptor();
inline const ::std::string& CMsgGame2WebResponse_Msg_Name(CMsgGame2WebResponse_Msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgGame2WebResponse_Msg_descriptor(), value);
}
inline bool CMsgGame2WebResponse_Msg_Parse(
    const ::std::string& name, CMsgGame2WebResponse_Msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgGame2WebResponse_Msg>(
    CMsgGame2WebResponse_Msg_descriptor(), name, value);
}
enum CMsgGame2WebRequest_Msg {
  CMsgGame2WebRequest_Msg_MsgID = 196611
};
bool CMsgGame2WebRequest_Msg_IsValid(int value);
const CMsgGame2WebRequest_Msg CMsgGame2WebRequest_Msg_Msg_MIN = CMsgGame2WebRequest_Msg_MsgID;
const CMsgGame2WebRequest_Msg CMsgGame2WebRequest_Msg_Msg_MAX = CMsgGame2WebRequest_Msg_MsgID;
const int CMsgGame2WebRequest_Msg_Msg_ARRAYSIZE = CMsgGame2WebRequest_Msg_Msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgGame2WebRequest_Msg_descriptor();
inline const ::std::string& CMsgGame2WebRequest_Msg_Name(CMsgGame2WebRequest_Msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgGame2WebRequest_Msg_descriptor(), value);
}
inline bool CMsgGame2WebRequest_Msg_Parse(
    const ::std::string& name, CMsgGame2WebRequest_Msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgGame2WebRequest_Msg>(
    CMsgGame2WebRequest_Msg_descriptor(), name, value);
}
enum CMsgWeb2GameResponse_Msg {
  CMsgWeb2GameResponse_Msg_MsgID = 196612
};
bool CMsgWeb2GameResponse_Msg_IsValid(int value);
const CMsgWeb2GameResponse_Msg CMsgWeb2GameResponse_Msg_Msg_MIN = CMsgWeb2GameResponse_Msg_MsgID;
const CMsgWeb2GameResponse_Msg CMsgWeb2GameResponse_Msg_Msg_MAX = CMsgWeb2GameResponse_Msg_MsgID;
const int CMsgWeb2GameResponse_Msg_Msg_ARRAYSIZE = CMsgWeb2GameResponse_Msg_Msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgWeb2GameResponse_Msg_descriptor();
inline const ::std::string& CMsgWeb2GameResponse_Msg_Name(CMsgWeb2GameResponse_Msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgWeb2GameResponse_Msg_descriptor(), value);
}
inline bool CMsgWeb2GameResponse_Msg_Parse(
    const ::std::string& name, CMsgWeb2GameResponse_Msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgWeb2GameResponse_Msg>(
    CMsgWeb2GameResponse_Msg_descriptor(), name, value);
}
enum REQUEST_TYPE {
  RT_JSON = 0,
  RT_URL = 1
};
bool REQUEST_TYPE_IsValid(int value);
const REQUEST_TYPE REQUEST_TYPE_MIN = RT_JSON;
const REQUEST_TYPE REQUEST_TYPE_MAX = RT_URL;
const int REQUEST_TYPE_ARRAYSIZE = REQUEST_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* REQUEST_TYPE_descriptor();
inline const ::std::string& REQUEST_TYPE_Name(REQUEST_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    REQUEST_TYPE_descriptor(), value);
}
inline bool REQUEST_TYPE_Parse(
    const ::std::string& name, REQUEST_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<REQUEST_TYPE>(
    REQUEST_TYPE_descriptor(), name, value);
}
// ===================================================================

class CMsgWeb2GameRequest : public ::google::protobuf::Message {
 public:
  CMsgWeb2GameRequest();
  virtual ~CMsgWeb2GameRequest();

  CMsgWeb2GameRequest(const CMsgWeb2GameRequest& from);

  inline CMsgWeb2GameRequest& operator=(const CMsgWeb2GameRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgWeb2GameRequest& default_instance();

  void Swap(CMsgWeb2GameRequest* other);

  // implements Message ----------------------------------------------

  CMsgWeb2GameRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgWeb2GameRequest& from);
  void MergeFrom(const CMsgWeb2GameRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgWeb2GameRequest_Msg Msg;
  static const Msg MsgID = CMsgWeb2GameRequest_Msg_MsgID;
  static inline bool Msg_IsValid(int value) {
    return CMsgWeb2GameRequest_Msg_IsValid(value);
  }
  static const Msg Msg_MIN =
    CMsgWeb2GameRequest_Msg_Msg_MIN;
  static const Msg Msg_MAX =
    CMsgWeb2GameRequest_Msg_Msg_MAX;
  static const int Msg_ARRAYSIZE =
    CMsgWeb2GameRequest_Msg_Msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Msg_descriptor() {
    return CMsgWeb2GameRequest_Msg_descriptor();
  }
  static inline const ::std::string& Msg_Name(Msg value) {
    return CMsgWeb2GameRequest_Msg_Name(value);
  }
  static inline bool Msg_Parse(const ::std::string& name,
      Msg* value) {
    return CMsgWeb2GameRequest_Msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .REQUEST_TYPE RequestType = 1;
  inline bool has_requesttype() const;
  inline void clear_requesttype();
  static const int kRequestTypeFieldNumber = 1;
  inline ::REQUEST_TYPE requesttype() const;
  inline void set_requesttype(::REQUEST_TYPE value);

  // optional uint64 SessionID = 2;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionIDFieldNumber = 2;
  inline ::google::protobuf::uint64 sessionid() const;
  inline void set_sessionid(::google::protobuf::uint64 value);

  // optional bytes Data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:CMsgWeb2GameRequest)
 private:
  inline void set_has_requesttype();
  inline void clear_has_requesttype();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 sessionid_;
  ::std::string* data_;
  int requesttype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_webmessage_2eproto();
  friend void protobuf_AssignDesc_webmessage_2eproto();
  friend void protobuf_ShutdownFile_webmessage_2eproto();

  void InitAsDefaultInstance();
  static CMsgWeb2GameRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGame2WebResponse : public ::google::protobuf::Message {
 public:
  CMsgGame2WebResponse();
  virtual ~CMsgGame2WebResponse();

  CMsgGame2WebResponse(const CMsgGame2WebResponse& from);

  inline CMsgGame2WebResponse& operator=(const CMsgGame2WebResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGame2WebResponse& default_instance();

  void Swap(CMsgGame2WebResponse* other);

  // implements Message ----------------------------------------------

  CMsgGame2WebResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGame2WebResponse& from);
  void MergeFrom(const CMsgGame2WebResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgGame2WebResponse_Msg Msg;
  static const Msg MsgID = CMsgGame2WebResponse_Msg_MsgID;
  static inline bool Msg_IsValid(int value) {
    return CMsgGame2WebResponse_Msg_IsValid(value);
  }
  static const Msg Msg_MIN =
    CMsgGame2WebResponse_Msg_Msg_MIN;
  static const Msg Msg_MAX =
    CMsgGame2WebResponse_Msg_Msg_MAX;
  static const int Msg_ARRAYSIZE =
    CMsgGame2WebResponse_Msg_Msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Msg_descriptor() {
    return CMsgGame2WebResponse_Msg_descriptor();
  }
  static inline const ::std::string& Msg_Name(Msg value) {
    return CMsgGame2WebResponse_Msg_Name(value);
  }
  static inline bool Msg_Parse(const ::std::string& name,
      Msg* value) {
    return CMsgGame2WebResponse_Msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint64 SessionID = 1;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  inline ::google::protobuf::uint64 sessionid() const;
  inline void set_sessionid(::google::protobuf::uint64 value);

  // optional bytes Data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:CMsgGame2WebResponse)
 private:
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 sessionid_;
  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_webmessage_2eproto();
  friend void protobuf_AssignDesc_webmessage_2eproto();
  friend void protobuf_ShutdownFile_webmessage_2eproto();

  void InitAsDefaultInstance();
  static CMsgGame2WebResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGame2WebRequest : public ::google::protobuf::Message {
 public:
  CMsgGame2WebRequest();
  virtual ~CMsgGame2WebRequest();

  CMsgGame2WebRequest(const CMsgGame2WebRequest& from);

  inline CMsgGame2WebRequest& operator=(const CMsgGame2WebRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGame2WebRequest& default_instance();

  void Swap(CMsgGame2WebRequest* other);

  // implements Message ----------------------------------------------

  CMsgGame2WebRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGame2WebRequest& from);
  void MergeFrom(const CMsgGame2WebRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgGame2WebRequest_Msg Msg;
  static const Msg MsgID = CMsgGame2WebRequest_Msg_MsgID;
  static inline bool Msg_IsValid(int value) {
    return CMsgGame2WebRequest_Msg_IsValid(value);
  }
  static const Msg Msg_MIN =
    CMsgGame2WebRequest_Msg_Msg_MIN;
  static const Msg Msg_MAX =
    CMsgGame2WebRequest_Msg_Msg_MAX;
  static const int Msg_ARRAYSIZE =
    CMsgGame2WebRequest_Msg_Msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Msg_descriptor() {
    return CMsgGame2WebRequest_Msg_descriptor();
  }
  static inline const ::std::string& Msg_Name(Msg value) {
    return CMsgGame2WebRequest_Msg_Name(value);
  }
  static inline bool Msg_Parse(const ::std::string& name,
      Msg* value) {
    return CMsgGame2WebRequest_Msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 SessionID = 1;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  inline ::google::protobuf::uint32 sessionid() const;
  inline void set_sessionid(::google::protobuf::uint32 value);

  // optional uint64 TimeStamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimeStampFieldNumber = 2;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);

  // required string Url = 3;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 3;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // optional bytes Data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:CMsgGame2WebRequest)
 private:
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 timestamp_;
  ::std::string* url_;
  ::std::string* data_;
  ::google::protobuf::uint32 sessionid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_webmessage_2eproto();
  friend void protobuf_AssignDesc_webmessage_2eproto();
  friend void protobuf_ShutdownFile_webmessage_2eproto();

  void InitAsDefaultInstance();
  static CMsgGame2WebRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMsgWeb2GameResponse : public ::google::protobuf::Message {
 public:
  CMsgWeb2GameResponse();
  virtual ~CMsgWeb2GameResponse();

  CMsgWeb2GameResponse(const CMsgWeb2GameResponse& from);

  inline CMsgWeb2GameResponse& operator=(const CMsgWeb2GameResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgWeb2GameResponse& default_instance();

  void Swap(CMsgWeb2GameResponse* other);

  // implements Message ----------------------------------------------

  CMsgWeb2GameResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgWeb2GameResponse& from);
  void MergeFrom(const CMsgWeb2GameResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgWeb2GameResponse_Msg Msg;
  static const Msg MsgID = CMsgWeb2GameResponse_Msg_MsgID;
  static inline bool Msg_IsValid(int value) {
    return CMsgWeb2GameResponse_Msg_IsValid(value);
  }
  static const Msg Msg_MIN =
    CMsgWeb2GameResponse_Msg_Msg_MIN;
  static const Msg Msg_MAX =
    CMsgWeb2GameResponse_Msg_Msg_MAX;
  static const int Msg_ARRAYSIZE =
    CMsgWeb2GameResponse_Msg_Msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Msg_descriptor() {
    return CMsgWeb2GameResponse_Msg_descriptor();
  }
  static inline const ::std::string& Msg_Name(Msg value) {
    return CMsgWeb2GameResponse_Msg_Name(value);
  }
  static inline bool Msg_Parse(const ::std::string& name,
      Msg* value) {
    return CMsgWeb2GameResponse_Msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 Result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional uint32 SessionID = 2;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionIDFieldNumber = 2;
  inline ::google::protobuf::uint32 sessionid() const;
  inline void set_sessionid(::google::protobuf::uint32 value);

  // optional uint64 TimeStamp = 3;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimeStampFieldNumber = 3;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);

  // optional bytes Data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:CMsgWeb2GameResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::uint32 sessionid_;
  ::google::protobuf::uint64 timestamp_;
  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_webmessage_2eproto();
  friend void protobuf_AssignDesc_webmessage_2eproto();
  friend void protobuf_ShutdownFile_webmessage_2eproto();

  void InitAsDefaultInstance();
  static CMsgWeb2GameResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// CMsgWeb2GameRequest

// optional .REQUEST_TYPE RequestType = 1;
inline bool CMsgWeb2GameRequest::has_requesttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgWeb2GameRequest::set_has_requesttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgWeb2GameRequest::clear_has_requesttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgWeb2GameRequest::clear_requesttype() {
  requesttype_ = 0;
  clear_has_requesttype();
}
inline ::REQUEST_TYPE CMsgWeb2GameRequest::requesttype() const {
  return static_cast< ::REQUEST_TYPE >(requesttype_);
}
inline void CMsgWeb2GameRequest::set_requesttype(::REQUEST_TYPE value) {
  assert(::REQUEST_TYPE_IsValid(value));
  set_has_requesttype();
  requesttype_ = value;
}

// optional uint64 SessionID = 2;
inline bool CMsgWeb2GameRequest::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgWeb2GameRequest::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgWeb2GameRequest::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgWeb2GameRequest::clear_sessionid() {
  sessionid_ = GOOGLE_ULONGLONG(0);
  clear_has_sessionid();
}
inline ::google::protobuf::uint64 CMsgWeb2GameRequest::sessionid() const {
  return sessionid_;
}
inline void CMsgWeb2GameRequest::set_sessionid(::google::protobuf::uint64 value) {
  set_has_sessionid();
  sessionid_ = value;
}

// optional bytes Data = 3;
inline bool CMsgWeb2GameRequest::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgWeb2GameRequest::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgWeb2GameRequest::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgWeb2GameRequest::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& CMsgWeb2GameRequest::data() const {
  return *data_;
}
inline void CMsgWeb2GameRequest::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void CMsgWeb2GameRequest::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void CMsgWeb2GameRequest::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgWeb2GameRequest::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* CMsgWeb2GameRequest::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgWeb2GameRequest::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgGame2WebResponse

// optional uint64 SessionID = 1;
inline bool CMsgGame2WebResponse::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGame2WebResponse::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGame2WebResponse::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGame2WebResponse::clear_sessionid() {
  sessionid_ = GOOGLE_ULONGLONG(0);
  clear_has_sessionid();
}
inline ::google::protobuf::uint64 CMsgGame2WebResponse::sessionid() const {
  return sessionid_;
}
inline void CMsgGame2WebResponse::set_sessionid(::google::protobuf::uint64 value) {
  set_has_sessionid();
  sessionid_ = value;
}

// optional bytes Data = 2;
inline bool CMsgGame2WebResponse::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGame2WebResponse::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGame2WebResponse::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGame2WebResponse::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& CMsgGame2WebResponse::data() const {
  return *data_;
}
inline void CMsgGame2WebResponse::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void CMsgGame2WebResponse::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void CMsgGame2WebResponse::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGame2WebResponse::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* CMsgGame2WebResponse::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgGame2WebResponse::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgGame2WebRequest

// optional uint32 SessionID = 1;
inline bool CMsgGame2WebRequest::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGame2WebRequest::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGame2WebRequest::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGame2WebRequest::clear_sessionid() {
  sessionid_ = 0u;
  clear_has_sessionid();
}
inline ::google::protobuf::uint32 CMsgGame2WebRequest::sessionid() const {
  return sessionid_;
}
inline void CMsgGame2WebRequest::set_sessionid(::google::protobuf::uint32 value) {
  set_has_sessionid();
  sessionid_ = value;
}

// optional uint64 TimeStamp = 2;
inline bool CMsgGame2WebRequest::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGame2WebRequest::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGame2WebRequest::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGame2WebRequest::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 CMsgGame2WebRequest::timestamp() const {
  return timestamp_;
}
inline void CMsgGame2WebRequest::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// required string Url = 3;
inline bool CMsgGame2WebRequest::has_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGame2WebRequest::set_has_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGame2WebRequest::clear_has_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGame2WebRequest::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& CMsgGame2WebRequest::url() const {
  return *url_;
}
inline void CMsgGame2WebRequest::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CMsgGame2WebRequest::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CMsgGame2WebRequest::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGame2WebRequest::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* CMsgGame2WebRequest::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgGame2WebRequest::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes Data = 4;
inline bool CMsgGame2WebRequest::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGame2WebRequest::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGame2WebRequest::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGame2WebRequest::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& CMsgGame2WebRequest::data() const {
  return *data_;
}
inline void CMsgGame2WebRequest::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void CMsgGame2WebRequest::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void CMsgGame2WebRequest::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGame2WebRequest::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* CMsgGame2WebRequest::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgGame2WebRequest::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgWeb2GameResponse

// required int32 Result = 1;
inline bool CMsgWeb2GameResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgWeb2GameResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgWeb2GameResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgWeb2GameResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 CMsgWeb2GameResponse::result() const {
  return result_;
}
inline void CMsgWeb2GameResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional uint32 SessionID = 2;
inline bool CMsgWeb2GameResponse::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgWeb2GameResponse::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgWeb2GameResponse::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgWeb2GameResponse::clear_sessionid() {
  sessionid_ = 0u;
  clear_has_sessionid();
}
inline ::google::protobuf::uint32 CMsgWeb2GameResponse::sessionid() const {
  return sessionid_;
}
inline void CMsgWeb2GameResponse::set_sessionid(::google::protobuf::uint32 value) {
  set_has_sessionid();
  sessionid_ = value;
}

// optional uint64 TimeStamp = 3;
inline bool CMsgWeb2GameResponse::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgWeb2GameResponse::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgWeb2GameResponse::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgWeb2GameResponse::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 CMsgWeb2GameResponse::timestamp() const {
  return timestamp_;
}
inline void CMsgWeb2GameResponse::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional bytes Data = 4;
inline bool CMsgWeb2GameResponse::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgWeb2GameResponse::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgWeb2GameResponse::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgWeb2GameResponse::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& CMsgWeb2GameResponse::data() const {
  return *data_;
}
inline void CMsgWeb2GameResponse::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void CMsgWeb2GameResponse::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void CMsgWeb2GameResponse::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgWeb2GameResponse::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* CMsgWeb2GameResponse::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgWeb2GameResponse::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgWeb2GameRequest_Msg>() {
  return ::CMsgWeb2GameRequest_Msg_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgGame2WebResponse_Msg>() {
  return ::CMsgGame2WebResponse_Msg_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgGame2WebRequest_Msg>() {
  return ::CMsgGame2WebRequest_Msg_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgWeb2GameResponse_Msg>() {
  return ::CMsgWeb2GameResponse_Msg_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::REQUEST_TYPE>() {
  return ::REQUEST_TYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_webmessage_2eproto__INCLUDED
