// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friend.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "friend.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace slg {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* FriendDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendApplyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendApplyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendApplyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendApplyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendReplyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendReplyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendReplyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendReplyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendDeleteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendDeleteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendDeleteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendDeleteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendListPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendListPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendRemovePush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendRemovePush_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendRecommendDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendRecommendDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendRecommendPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendRecommendPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendApplyListPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendApplyListPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendApplyingPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendApplyingPush_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FriendCommandId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FriendReplyResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FriendPushId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FriendRecommendReason_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_friend_2eproto() {
  protobuf_AddDesc_friend_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "friend.proto");
  GOOGLE_CHECK(file != NULL);
  FriendDTO_descriptor_ = file->message_type(0);
  static const int FriendDTO_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDTO, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDTO, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDTO, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDTO, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDTO, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDTO, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDTO, servername_),
  };
  FriendDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendDTO_descriptor_,
      FriendDTO::default_instance_,
      FriendDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendDTO));
  FriendApplyRequest_descriptor_ = file->message_type(1);
  static const int FriendApplyRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendApplyRequest, playerid_),
  };
  FriendApplyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendApplyRequest_descriptor_,
      FriendApplyRequest::default_instance_,
      FriendApplyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendApplyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendApplyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendApplyRequest));
  FriendApplyResponse_descriptor_ = file->message_type(2);
  static const int FriendApplyResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendApplyResponse, playerid_),
  };
  FriendApplyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendApplyResponse_descriptor_,
      FriendApplyResponse::default_instance_,
      FriendApplyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendApplyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendApplyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendApplyResponse));
  FriendReplyRequest_descriptor_ = file->message_type(3);
  static const int FriendReplyRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendReplyRequest, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendReplyRequest, result_),
  };
  FriendReplyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendReplyRequest_descriptor_,
      FriendReplyRequest::default_instance_,
      FriendReplyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendReplyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendReplyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendReplyRequest));
  FriendReplyResponse_descriptor_ = file->message_type(4);
  static const int FriendReplyResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendReplyResponse, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendReplyResponse, result_),
  };
  FriendReplyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendReplyResponse_descriptor_,
      FriendReplyResponse::default_instance_,
      FriendReplyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendReplyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendReplyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendReplyResponse));
  FriendDeleteRequest_descriptor_ = file->message_type(5);
  static const int FriendDeleteRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDeleteRequest, playerid_),
  };
  FriendDeleteRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendDeleteRequest_descriptor_,
      FriendDeleteRequest::default_instance_,
      FriendDeleteRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDeleteRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDeleteRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendDeleteRequest));
  FriendDeleteResponse_descriptor_ = file->message_type(6);
  static const int FriendDeleteResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDeleteResponse, playerid_),
  };
  FriendDeleteResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendDeleteResponse_descriptor_,
      FriendDeleteResponse::default_instance_,
      FriendDeleteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDeleteResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDeleteResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendDeleteResponse));
  FriendListPush_descriptor_ = file->message_type(7);
  static const int FriendListPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendListPush, friends_),
  };
  FriendListPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendListPush_descriptor_,
      FriendListPush::default_instance_,
      FriendListPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendListPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendListPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendListPush));
  FriendRemovePush_descriptor_ = file->message_type(8);
  static const int FriendRemovePush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRemovePush, playerid_),
  };
  FriendRemovePush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendRemovePush_descriptor_,
      FriendRemovePush::default_instance_,
      FriendRemovePush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRemovePush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRemovePush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendRemovePush));
  FriendRecommendDTO_descriptor_ = file->message_type(9);
  static const int FriendRecommendDTO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRecommendDTO, friend__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRecommendDTO, reason_),
  };
  FriendRecommendDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendRecommendDTO_descriptor_,
      FriendRecommendDTO::default_instance_,
      FriendRecommendDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRecommendDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRecommendDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendRecommendDTO));
  FriendRecommendPush_descriptor_ = file->message_type(10);
  static const int FriendRecommendPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRecommendPush, recommends_),
  };
  FriendRecommendPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendRecommendPush_descriptor_,
      FriendRecommendPush::default_instance_,
      FriendRecommendPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRecommendPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRecommendPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendRecommendPush));
  FriendApplyListPush_descriptor_ = file->message_type(11);
  static const int FriendApplyListPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendApplyListPush, friends_),
  };
  FriendApplyListPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendApplyListPush_descriptor_,
      FriendApplyListPush::default_instance_,
      FriendApplyListPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendApplyListPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendApplyListPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendApplyListPush));
  FriendApplyingPush_descriptor_ = file->message_type(12);
  static const int FriendApplyingPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendApplyingPush, playerids_),
  };
  FriendApplyingPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendApplyingPush_descriptor_,
      FriendApplyingPush::default_instance_,
      FriendApplyingPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendApplyingPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendApplyingPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendApplyingPush));
  FriendCommandId_descriptor_ = file->enum_type(0);
  FriendReplyResult_descriptor_ = file->enum_type(1);
  FriendPushId_descriptor_ = file->enum_type(2);
  FriendRecommendReason_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_friend_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendDTO_descriptor_, &FriendDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendApplyRequest_descriptor_, &FriendApplyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendApplyResponse_descriptor_, &FriendApplyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendReplyRequest_descriptor_, &FriendReplyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendReplyResponse_descriptor_, &FriendReplyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendDeleteRequest_descriptor_, &FriendDeleteRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendDeleteResponse_descriptor_, &FriendDeleteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendListPush_descriptor_, &FriendListPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendRemovePush_descriptor_, &FriendRemovePush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendRecommendDTO_descriptor_, &FriendRecommendDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendRecommendPush_descriptor_, &FriendRecommendPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendApplyListPush_descriptor_, &FriendApplyListPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendApplyingPush_descriptor_, &FriendApplyingPush::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_friend_2eproto() {
  delete FriendDTO::default_instance_;
  delete FriendDTO_reflection_;
  delete FriendApplyRequest::default_instance_;
  delete FriendApplyRequest_reflection_;
  delete FriendApplyResponse::default_instance_;
  delete FriendApplyResponse_reflection_;
  delete FriendReplyRequest::default_instance_;
  delete FriendReplyRequest_reflection_;
  delete FriendReplyResponse::default_instance_;
  delete FriendReplyResponse_reflection_;
  delete FriendDeleteRequest::default_instance_;
  delete FriendDeleteRequest_reflection_;
  delete FriendDeleteResponse::default_instance_;
  delete FriendDeleteResponse_reflection_;
  delete FriendListPush::default_instance_;
  delete FriendListPush_reflection_;
  delete FriendRemovePush::default_instance_;
  delete FriendRemovePush_reflection_;
  delete FriendRecommendDTO::default_instance_;
  delete FriendRecommendDTO_reflection_;
  delete FriendRecommendPush::default_instance_;
  delete FriendRecommendPush_reflection_;
  delete FriendApplyListPush::default_instance_;
  delete FriendApplyListPush_reflection_;
  delete FriendApplyingPush::default_instance_;
  delete FriendApplyingPush_reflection_;
}

void protobuf_AddDesc_friend_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::slg::protocol::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014friend.proto\022\014slg.protocol\032\014common.pro"
    "to\"\251\001\n\tFriendDTO\022\020\n\010playerId\030\001 \002(\003\022\014\n\004na"
    "me\030\002 \002(\t\022\014\n\004icon\030\003 \002(\t\022\r\n\005level\030\004 \002(\005\022!\n"
    "\003vip\030\005 \002(\0132\024.slg.protocol.VipDTO\022(\n\010plat"
    "form\030\006 \002(\0162\026.slg.protocol.Platform\022\022\n\nse"
    "rverName\030\007 \001(\t\"&\n\022FriendApplyRequest\022\020\n\010"
    "playerId\030\001 \002(\003\"\'\n\023FriendApplyResponse\022\020\n"
    "\010playerId\030\001 \002(\003\"W\n\022FriendReplyRequest\022\020\n"
    "\010playerId\030\001 \002(\003\022/\n\006result\030\002 \002(\0162\037.slg.pr"
    "otocol.FriendReplyResult\"X\n\023FriendReplyR"
    "esponse\022\020\n\010playerId\030\001 \002(\003\022/\n\006result\030\002 \002("
    "\0162\037.slg.protocol.FriendReplyResult\"\'\n\023Fr"
    "iendDeleteRequest\022\020\n\010playerId\030\001 \002(\003\"(\n\024F"
    "riendDeleteResponse\022\020\n\010playerId\030\001 \002(\003\":\n"
    "\016FriendListPush\022(\n\007friends\030\001 \003(\0132\027.slg.p"
    "rotocol.FriendDTO\"$\n\020FriendRemovePush\022\020\n"
    "\010playerId\030\001 \002(\003\"r\n\022FriendRecommendDTO\022\'\n"
    "\006friend\030\001 \002(\0132\027.slg.protocol.FriendDTO\0223"
    "\n\006reason\030\002 \002(\0162#.slg.protocol.FriendReco"
    "mmendReason\"K\n\023FriendRecommendPush\0224\n\nre"
    "commends\030\001 \003(\0132 .slg.protocol.FriendReco"
    "mmendDTO\"\?\n\023FriendApplyListPush\022(\n\007frien"
    "ds\030\001 \003(\0132\027.slg.protocol.FriendDTO\"\'\n\022Fri"
    "endApplyingPush\022\021\n\tplayerIds\030\001 \003(\003*K\n\017Fr"
    "iendCommandId\022\021\n\014FRIEND_APPLY\020\321\017\022\021\n\014FRIE"
    "ND_REPLY\020\322\017\022\022\n\rFRIEND_DELETE\020\323\017*+\n\021Frien"
    "dReplyResult\022\n\n\006ACCEPT\020\001\022\n\n\006REJECT\020\002*\241\001\n"
    "\014FriendPushId\022\026\n\020FRIEND_LIST_PUSH\020\241\226\003\022\030\n"
    "\022FRIEND_REMOVE_PUSH\020\242\226\003\022 \n\032FRIEND_RECOMM"
    "END_LIST_PUSH\020\243\226\003\022\034\n\026FRIEND_APPLY_LIST_P"
    "USH\020\244\226\003\022\037\n\031FRIEND_APPLYING_LIST_PUSH\020\245\226\003"
    "*w\n\025FriendRecommendReason\022\013\n\007DEFAULT\020\001\022\014"
    "\n\010ALLIANCE\020\002\022\010\n\004FOAF\020\003\022\t\n\005ENEMY\020\004\022\013\n\007NEA"
    "R_BY\020\005\022\016\n\nSAME_LEVEL\020\006\022\021\n\rSAME_LANGUAGE\020"
    "\007B+\n\034com.bonusstudio.slg.protocolB\013Frien"
    "dProto", 1406);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "friend.proto", &protobuf_RegisterTypes);
  FriendDTO::default_instance_ = new FriendDTO();
  FriendApplyRequest::default_instance_ = new FriendApplyRequest();
  FriendApplyResponse::default_instance_ = new FriendApplyResponse();
  FriendReplyRequest::default_instance_ = new FriendReplyRequest();
  FriendReplyResponse::default_instance_ = new FriendReplyResponse();
  FriendDeleteRequest::default_instance_ = new FriendDeleteRequest();
  FriendDeleteResponse::default_instance_ = new FriendDeleteResponse();
  FriendListPush::default_instance_ = new FriendListPush();
  FriendRemovePush::default_instance_ = new FriendRemovePush();
  FriendRecommendDTO::default_instance_ = new FriendRecommendDTO();
  FriendRecommendPush::default_instance_ = new FriendRecommendPush();
  FriendApplyListPush::default_instance_ = new FriendApplyListPush();
  FriendApplyingPush::default_instance_ = new FriendApplyingPush();
  FriendDTO::default_instance_->InitAsDefaultInstance();
  FriendApplyRequest::default_instance_->InitAsDefaultInstance();
  FriendApplyResponse::default_instance_->InitAsDefaultInstance();
  FriendReplyRequest::default_instance_->InitAsDefaultInstance();
  FriendReplyResponse::default_instance_->InitAsDefaultInstance();
  FriendDeleteRequest::default_instance_->InitAsDefaultInstance();
  FriendDeleteResponse::default_instance_->InitAsDefaultInstance();
  FriendListPush::default_instance_->InitAsDefaultInstance();
  FriendRemovePush::default_instance_->InitAsDefaultInstance();
  FriendRecommendDTO::default_instance_->InitAsDefaultInstance();
  FriendRecommendPush::default_instance_->InitAsDefaultInstance();
  FriendApplyListPush::default_instance_->InitAsDefaultInstance();
  FriendApplyingPush::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_friend_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_friend_2eproto {
  StaticDescriptorInitializer_friend_2eproto() {
    protobuf_AddDesc_friend_2eproto();
  }
} static_descriptor_initializer_friend_2eproto_;
const ::google::protobuf::EnumDescriptor* FriendCommandId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendCommandId_descriptor_;
}
bool FriendCommandId_IsValid(int value) {
  switch(value) {
    case 2001:
    case 2002:
    case 2003:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FriendReplyResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendReplyResult_descriptor_;
}
bool FriendReplyResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FriendPushId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendPushId_descriptor_;
}
bool FriendPushId_IsValid(int value) {
  switch(value) {
    case 52001:
    case 52002:
    case 52003:
    case 52004:
    case 52005:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FriendRecommendReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendRecommendReason_descriptor_;
}
bool FriendRecommendReason_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int FriendDTO::kPlayerIdFieldNumber;
const int FriendDTO::kNameFieldNumber;
const int FriendDTO::kIconFieldNumber;
const int FriendDTO::kLevelFieldNumber;
const int FriendDTO::kVipFieldNumber;
const int FriendDTO::kPlatformFieldNumber;
const int FriendDTO::kServerNameFieldNumber;
#endif  // !_MSC_VER

FriendDTO::FriendDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendDTO::InitAsDefaultInstance() {
  vip_ = const_cast< ::slg::protocol::VipDTO*>(&::slg::protocol::VipDTO::default_instance());
}

FriendDTO::FriendDTO(const FriendDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendDTO::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  vip_ = NULL;
  platform_ = 1;
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendDTO::~FriendDTO() {
  SharedDtor();
}

void FriendDTO::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (this != default_instance_) {
    delete vip_;
  }
}

void FriendDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendDTO_descriptor_;
}

const FriendDTO& FriendDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

FriendDTO* FriendDTO::default_instance_ = NULL;

FriendDTO* FriendDTO::New() const {
  return new FriendDTO;
}

void FriendDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    level_ = 0;
    if (has_vip()) {
      if (vip_ != NULL) vip_->::slg::protocol::VipDTO::Clear();
    }
    platform_ = 1;
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::kEmptyString) {
        servername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_icon;
        break;
      }

      // required string icon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // required int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_vip;
        break;
      }

      // required .slg.protocol.VipDTO vip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_platform;
        break;
      }

      // required .slg.protocol.Platform platform = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::slg::protocol::Platform_IsValid(value)) {
            set_platform(static_cast< ::slg::protocol::Platform >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_serverName;
        break;
      }

      // optional string serverName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required string icon = 3;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->icon(), output);
  }

  // required int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // required .slg.protocol.VipDTO vip = 5;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->vip(), output);
  }

  // required .slg.protocol.Platform platform = 6;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->platform(), output);
  }

  // optional string serverName = 7;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->servername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required string icon = 3;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->icon(), target);
  }

  // required int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // required .slg.protocol.VipDTO vip = 5;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->vip(), target);
  }

  // required .slg.protocol.Platform platform = 6;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->platform(), target);
  }

  // optional string serverName = 7;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->servername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string icon = 3;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // required int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required .slg.protocol.VipDTO vip = 5;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vip());
    }

    // required .slg.protocol.Platform platform = 6;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->platform());
    }

    // optional string serverName = 7;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendDTO::MergeFrom(const FriendDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_vip()) {
      mutable_vip()->::slg::protocol::VipDTO::MergeFrom(from.vip());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_servername()) {
      set_servername(from.servername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendDTO::CopyFrom(const FriendDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_vip()) {
    if (!this->vip().IsInitialized()) return false;
  }
  return true;
}

void FriendDTO::Swap(FriendDTO* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(name_, other->name_);
    std::swap(icon_, other->icon_);
    std::swap(level_, other->level_);
    std::swap(vip_, other->vip_);
    std::swap(platform_, other->platform_);
    std::swap(servername_, other->servername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendDTO_descriptor_;
  metadata.reflection = FriendDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendApplyRequest::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

FriendApplyRequest::FriendApplyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendApplyRequest::InitAsDefaultInstance() {
}

FriendApplyRequest::FriendApplyRequest(const FriendApplyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendApplyRequest::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendApplyRequest::~FriendApplyRequest() {
  SharedDtor();
}

void FriendApplyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendApplyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendApplyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendApplyRequest_descriptor_;
}

const FriendApplyRequest& FriendApplyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

FriendApplyRequest* FriendApplyRequest::default_instance_ = NULL;

FriendApplyRequest* FriendApplyRequest::New() const {
  return new FriendApplyRequest;
}

void FriendApplyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendApplyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendApplyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendApplyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendApplyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendApplyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendApplyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendApplyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendApplyRequest::MergeFrom(const FriendApplyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendApplyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendApplyRequest::CopyFrom(const FriendApplyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendApplyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FriendApplyRequest::Swap(FriendApplyRequest* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendApplyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendApplyRequest_descriptor_;
  metadata.reflection = FriendApplyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendApplyResponse::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

FriendApplyResponse::FriendApplyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendApplyResponse::InitAsDefaultInstance() {
}

FriendApplyResponse::FriendApplyResponse(const FriendApplyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendApplyResponse::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendApplyResponse::~FriendApplyResponse() {
  SharedDtor();
}

void FriendApplyResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendApplyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendApplyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendApplyResponse_descriptor_;
}

const FriendApplyResponse& FriendApplyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

FriendApplyResponse* FriendApplyResponse::default_instance_ = NULL;

FriendApplyResponse* FriendApplyResponse::New() const {
  return new FriendApplyResponse;
}

void FriendApplyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendApplyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendApplyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendApplyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendApplyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendApplyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendApplyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendApplyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendApplyResponse::MergeFrom(const FriendApplyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendApplyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendApplyResponse::CopyFrom(const FriendApplyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendApplyResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FriendApplyResponse::Swap(FriendApplyResponse* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendApplyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendApplyResponse_descriptor_;
  metadata.reflection = FriendApplyResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendReplyRequest::kPlayerIdFieldNumber;
const int FriendReplyRequest::kResultFieldNumber;
#endif  // !_MSC_VER

FriendReplyRequest::FriendReplyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendReplyRequest::InitAsDefaultInstance() {
}

FriendReplyRequest::FriendReplyRequest(const FriendReplyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendReplyRequest::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendReplyRequest::~FriendReplyRequest() {
  SharedDtor();
}

void FriendReplyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendReplyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendReplyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendReplyRequest_descriptor_;
}

const FriendReplyRequest& FriendReplyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

FriendReplyRequest* FriendReplyRequest::default_instance_ = NULL;

FriendReplyRequest* FriendReplyRequest::New() const {
  return new FriendReplyRequest;
}

void FriendReplyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendReplyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .slg.protocol.FriendReplyResult result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::slg::protocol::FriendReplyResult_IsValid(value)) {
            set_result(static_cast< ::slg::protocol::FriendReplyResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendReplyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // required .slg.protocol.FriendReplyResult result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendReplyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // required .slg.protocol.FriendReplyResult result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendReplyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // required .slg.protocol.FriendReplyResult result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendReplyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendReplyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendReplyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendReplyRequest::MergeFrom(const FriendReplyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendReplyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendReplyRequest::CopyFrom(const FriendReplyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendReplyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FriendReplyRequest::Swap(FriendReplyRequest* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendReplyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendReplyRequest_descriptor_;
  metadata.reflection = FriendReplyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendReplyResponse::kPlayerIdFieldNumber;
const int FriendReplyResponse::kResultFieldNumber;
#endif  // !_MSC_VER

FriendReplyResponse::FriendReplyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendReplyResponse::InitAsDefaultInstance() {
}

FriendReplyResponse::FriendReplyResponse(const FriendReplyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendReplyResponse::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendReplyResponse::~FriendReplyResponse() {
  SharedDtor();
}

void FriendReplyResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendReplyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendReplyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendReplyResponse_descriptor_;
}

const FriendReplyResponse& FriendReplyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

FriendReplyResponse* FriendReplyResponse::default_instance_ = NULL;

FriendReplyResponse* FriendReplyResponse::New() const {
  return new FriendReplyResponse;
}

void FriendReplyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendReplyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .slg.protocol.FriendReplyResult result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::slg::protocol::FriendReplyResult_IsValid(value)) {
            set_result(static_cast< ::slg::protocol::FriendReplyResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendReplyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // required .slg.protocol.FriendReplyResult result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendReplyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // required .slg.protocol.FriendReplyResult result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendReplyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // required .slg.protocol.FriendReplyResult result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendReplyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendReplyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendReplyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendReplyResponse::MergeFrom(const FriendReplyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendReplyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendReplyResponse::CopyFrom(const FriendReplyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendReplyResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FriendReplyResponse::Swap(FriendReplyResponse* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendReplyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendReplyResponse_descriptor_;
  metadata.reflection = FriendReplyResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendDeleteRequest::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

FriendDeleteRequest::FriendDeleteRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendDeleteRequest::InitAsDefaultInstance() {
}

FriendDeleteRequest::FriendDeleteRequest(const FriendDeleteRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendDeleteRequest::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendDeleteRequest::~FriendDeleteRequest() {
  SharedDtor();
}

void FriendDeleteRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendDeleteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendDeleteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendDeleteRequest_descriptor_;
}

const FriendDeleteRequest& FriendDeleteRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

FriendDeleteRequest* FriendDeleteRequest::default_instance_ = NULL;

FriendDeleteRequest* FriendDeleteRequest::New() const {
  return new FriendDeleteRequest;
}

void FriendDeleteRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendDeleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendDeleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendDeleteRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendDeleteRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendDeleteRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendDeleteRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendDeleteRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendDeleteRequest::MergeFrom(const FriendDeleteRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendDeleteRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendDeleteRequest::CopyFrom(const FriendDeleteRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendDeleteRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FriendDeleteRequest::Swap(FriendDeleteRequest* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendDeleteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendDeleteRequest_descriptor_;
  metadata.reflection = FriendDeleteRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendDeleteResponse::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

FriendDeleteResponse::FriendDeleteResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendDeleteResponse::InitAsDefaultInstance() {
}

FriendDeleteResponse::FriendDeleteResponse(const FriendDeleteResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendDeleteResponse::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendDeleteResponse::~FriendDeleteResponse() {
  SharedDtor();
}

void FriendDeleteResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendDeleteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendDeleteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendDeleteResponse_descriptor_;
}

const FriendDeleteResponse& FriendDeleteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

FriendDeleteResponse* FriendDeleteResponse::default_instance_ = NULL;

FriendDeleteResponse* FriendDeleteResponse::New() const {
  return new FriendDeleteResponse;
}

void FriendDeleteResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendDeleteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendDeleteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendDeleteResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendDeleteResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendDeleteResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendDeleteResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendDeleteResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendDeleteResponse::MergeFrom(const FriendDeleteResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendDeleteResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendDeleteResponse::CopyFrom(const FriendDeleteResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendDeleteResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FriendDeleteResponse::Swap(FriendDeleteResponse* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendDeleteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendDeleteResponse_descriptor_;
  metadata.reflection = FriendDeleteResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendListPush::kFriendsFieldNumber;
#endif  // !_MSC_VER

FriendListPush::FriendListPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendListPush::InitAsDefaultInstance() {
}

FriendListPush::FriendListPush(const FriendListPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendListPush::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendListPush::~FriendListPush() {
  SharedDtor();
}

void FriendListPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendListPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendListPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendListPush_descriptor_;
}

const FriendListPush& FriendListPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

FriendListPush* FriendListPush::default_instance_ = NULL;

FriendListPush* FriendListPush::New() const {
  return new FriendListPush;
}

void FriendListPush::Clear() {
  friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendListPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.FriendDTO friends = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_friends;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendListPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.FriendDTO friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friends(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendListPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.FriendDTO friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friends(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendListPush::ByteSize() const {
  int total_size = 0;

  // repeated .slg.protocol.FriendDTO friends = 1;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friends(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendListPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendListPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendListPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendListPush::MergeFrom(const FriendListPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendListPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendListPush::CopyFrom(const FriendListPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendListPush::IsInitialized() const {

  for (int i = 0; i < friends_size(); i++) {
    if (!this->friends(i).IsInitialized()) return false;
  }
  return true;
}

void FriendListPush::Swap(FriendListPush* other) {
  if (other != this) {
    friends_.Swap(&other->friends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendListPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendListPush_descriptor_;
  metadata.reflection = FriendListPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendRemovePush::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

FriendRemovePush::FriendRemovePush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendRemovePush::InitAsDefaultInstance() {
}

FriendRemovePush::FriendRemovePush(const FriendRemovePush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendRemovePush::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendRemovePush::~FriendRemovePush() {
  SharedDtor();
}

void FriendRemovePush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendRemovePush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendRemovePush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendRemovePush_descriptor_;
}

const FriendRemovePush& FriendRemovePush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

FriendRemovePush* FriendRemovePush::default_instance_ = NULL;

FriendRemovePush* FriendRemovePush::New() const {
  return new FriendRemovePush;
}

void FriendRemovePush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendRemovePush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendRemovePush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendRemovePush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendRemovePush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendRemovePush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendRemovePush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendRemovePush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendRemovePush::MergeFrom(const FriendRemovePush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendRemovePush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendRemovePush::CopyFrom(const FriendRemovePush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRemovePush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FriendRemovePush::Swap(FriendRemovePush* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendRemovePush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendRemovePush_descriptor_;
  metadata.reflection = FriendRemovePush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendRecommendDTO::kFriendFieldNumber;
const int FriendRecommendDTO::kReasonFieldNumber;
#endif  // !_MSC_VER

FriendRecommendDTO::FriendRecommendDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendRecommendDTO::InitAsDefaultInstance() {
  friend__ = const_cast< ::slg::protocol::FriendDTO*>(&::slg::protocol::FriendDTO::default_instance());
}

FriendRecommendDTO::FriendRecommendDTO(const FriendRecommendDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendRecommendDTO::SharedCtor() {
  _cached_size_ = 0;
  friend__ = NULL;
  reason_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendRecommendDTO::~FriendRecommendDTO() {
  SharedDtor();
}

void FriendRecommendDTO::SharedDtor() {
  if (this != default_instance_) {
    delete friend__;
  }
}

void FriendRecommendDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendRecommendDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendRecommendDTO_descriptor_;
}

const FriendRecommendDTO& FriendRecommendDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

FriendRecommendDTO* FriendRecommendDTO::default_instance_ = NULL;

FriendRecommendDTO* FriendRecommendDTO::New() const {
  return new FriendRecommendDTO;
}

void FriendRecommendDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_friend_()) {
      if (friend__ != NULL) friend__->::slg::protocol::FriendDTO::Clear();
    }
    reason_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendRecommendDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .slg.protocol.FriendDTO friend = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friend_()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reason;
        break;
      }

      // required .slg.protocol.FriendRecommendReason reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::slg::protocol::FriendRecommendReason_IsValid(value)) {
            set_reason(static_cast< ::slg::protocol::FriendRecommendReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendRecommendDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .slg.protocol.FriendDTO friend = 1;
  if (has_friend_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friend_(), output);
  }

  // required .slg.protocol.FriendRecommendReason reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendRecommendDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .slg.protocol.FriendDTO friend = 1;
  if (has_friend_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friend_(), target);
  }

  // required .slg.protocol.FriendRecommendReason reason = 2;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendRecommendDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .slg.protocol.FriendDTO friend = 1;
    if (has_friend_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friend_());
    }

    // required .slg.protocol.FriendRecommendReason reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendRecommendDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendRecommendDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendRecommendDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendRecommendDTO::MergeFrom(const FriendRecommendDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friend_()) {
      mutable_friend_()->::slg::protocol::FriendDTO::MergeFrom(from.friend_());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendRecommendDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendRecommendDTO::CopyFrom(const FriendRecommendDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRecommendDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_friend_()) {
    if (!this->friend_().IsInitialized()) return false;
  }
  return true;
}

void FriendRecommendDTO::Swap(FriendRecommendDTO* other) {
  if (other != this) {
    std::swap(friend__, other->friend__);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendRecommendDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendRecommendDTO_descriptor_;
  metadata.reflection = FriendRecommendDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendRecommendPush::kRecommendsFieldNumber;
#endif  // !_MSC_VER

FriendRecommendPush::FriendRecommendPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendRecommendPush::InitAsDefaultInstance() {
}

FriendRecommendPush::FriendRecommendPush(const FriendRecommendPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendRecommendPush::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendRecommendPush::~FriendRecommendPush() {
  SharedDtor();
}

void FriendRecommendPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendRecommendPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendRecommendPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendRecommendPush_descriptor_;
}

const FriendRecommendPush& FriendRecommendPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

FriendRecommendPush* FriendRecommendPush::default_instance_ = NULL;

FriendRecommendPush* FriendRecommendPush::New() const {
  return new FriendRecommendPush;
}

void FriendRecommendPush::Clear() {
  recommends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendRecommendPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.FriendRecommendDTO recommends = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recommends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recommends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_recommends;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendRecommendPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.FriendRecommendDTO recommends = 1;
  for (int i = 0; i < this->recommends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recommends(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendRecommendPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.FriendRecommendDTO recommends = 1;
  for (int i = 0; i < this->recommends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recommends(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendRecommendPush::ByteSize() const {
  int total_size = 0;

  // repeated .slg.protocol.FriendRecommendDTO recommends = 1;
  total_size += 1 * this->recommends_size();
  for (int i = 0; i < this->recommends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recommends(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendRecommendPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendRecommendPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendRecommendPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendRecommendPush::MergeFrom(const FriendRecommendPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  recommends_.MergeFrom(from.recommends_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendRecommendPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendRecommendPush::CopyFrom(const FriendRecommendPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRecommendPush::IsInitialized() const {

  for (int i = 0; i < recommends_size(); i++) {
    if (!this->recommends(i).IsInitialized()) return false;
  }
  return true;
}

void FriendRecommendPush::Swap(FriendRecommendPush* other) {
  if (other != this) {
    recommends_.Swap(&other->recommends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendRecommendPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendRecommendPush_descriptor_;
  metadata.reflection = FriendRecommendPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendApplyListPush::kFriendsFieldNumber;
#endif  // !_MSC_VER

FriendApplyListPush::FriendApplyListPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendApplyListPush::InitAsDefaultInstance() {
}

FriendApplyListPush::FriendApplyListPush(const FriendApplyListPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendApplyListPush::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendApplyListPush::~FriendApplyListPush() {
  SharedDtor();
}

void FriendApplyListPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendApplyListPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendApplyListPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendApplyListPush_descriptor_;
}

const FriendApplyListPush& FriendApplyListPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

FriendApplyListPush* FriendApplyListPush::default_instance_ = NULL;

FriendApplyListPush* FriendApplyListPush::New() const {
  return new FriendApplyListPush;
}

void FriendApplyListPush::Clear() {
  friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendApplyListPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.FriendDTO friends = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_friends;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendApplyListPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.FriendDTO friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friends(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendApplyListPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.FriendDTO friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friends(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendApplyListPush::ByteSize() const {
  int total_size = 0;

  // repeated .slg.protocol.FriendDTO friends = 1;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friends(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendApplyListPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendApplyListPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendApplyListPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendApplyListPush::MergeFrom(const FriendApplyListPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendApplyListPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendApplyListPush::CopyFrom(const FriendApplyListPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendApplyListPush::IsInitialized() const {

  for (int i = 0; i < friends_size(); i++) {
    if (!this->friends(i).IsInitialized()) return false;
  }
  return true;
}

void FriendApplyListPush::Swap(FriendApplyListPush* other) {
  if (other != this) {
    friends_.Swap(&other->friends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendApplyListPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendApplyListPush_descriptor_;
  metadata.reflection = FriendApplyListPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendApplyingPush::kPlayerIdsFieldNumber;
#endif  // !_MSC_VER

FriendApplyingPush::FriendApplyingPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendApplyingPush::InitAsDefaultInstance() {
}

FriendApplyingPush::FriendApplyingPush(const FriendApplyingPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendApplyingPush::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendApplyingPush::~FriendApplyingPush() {
  SharedDtor();
}

void FriendApplyingPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendApplyingPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendApplyingPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendApplyingPush_descriptor_;
}

const FriendApplyingPush& FriendApplyingPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

FriendApplyingPush* FriendApplyingPush::default_instance_ = NULL;

FriendApplyingPush* FriendApplyingPush::New() const {
  return new FriendApplyingPush;
}

void FriendApplyingPush::Clear() {
  playerids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendApplyingPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 playerIds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_playerids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_playerids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_playerIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendApplyingPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 playerIds = 1;
  for (int i = 0; i < this->playerids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->playerids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendApplyingPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 playerIds = 1;
  for (int i = 0; i < this->playerids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->playerids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendApplyingPush::ByteSize() const {
  int total_size = 0;

  // repeated int64 playerIds = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->playerids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->playerids(i));
    }
    total_size += 1 * this->playerids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendApplyingPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendApplyingPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendApplyingPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendApplyingPush::MergeFrom(const FriendApplyingPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerids_.MergeFrom(from.playerids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendApplyingPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendApplyingPush::CopyFrom(const FriendApplyingPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendApplyingPush::IsInitialized() const {

  return true;
}

void FriendApplyingPush::Swap(FriendApplyingPush* other) {
  if (other != this) {
    playerids_.Swap(&other->playerids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendApplyingPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendApplyingPush_descriptor_;
  metadata.reflection = FriendApplyingPush_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace slg

// @@protoc_insertion_point(global_scope)
