// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tcpmessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tcpmessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CSocketInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSocketInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CTcpHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CTcpHead_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EGateCmd_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_tcpmessage_2eproto() {
  protobuf_AddDesc_tcpmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tcpmessage.proto");
  GOOGLE_CHECK(file != NULL);
  CSocketInfo_descriptor_ = file->message_type(0);
  static const int CSocketInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSocketInfo, srcip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSocketInfo, srcport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSocketInfo, socketid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSocketInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSocketInfo, state_),
  };
  CSocketInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSocketInfo_descriptor_,
      CSocketInfo::default_instance_,
      CSocketInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSocketInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSocketInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSocketInfo));
  CTcpHead_descriptor_ = file->message_type(1);
  static const int CTcpHead_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTcpHead, srcfe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTcpHead, srcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTcpHead, dstfe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTcpHead, dstid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTcpHead, opflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTcpHead, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTcpHead, socketinfos_),
  };
  CTcpHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CTcpHead_descriptor_,
      CTcpHead::default_instance_,
      CTcpHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTcpHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTcpHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CTcpHead));
  EGateCmd_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tcpmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSocketInfo_descriptor_, &CSocketInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CTcpHead_descriptor_, &CTcpHead::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tcpmessage_2eproto() {
  delete CSocketInfo::default_instance_;
  delete CSocketInfo_reflection_;
  delete CTcpHead::default_instance_;
  delete CTcpHead_reflection_;
}

void protobuf_AddDesc_tcpmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020tcpmessage.proto\"b\n\013CSocketInfo\022\r\n\005Src"
    "IP\030\001 \001(\005\022\017\n\007SrcPort\030\002 \001(\005\022\020\n\010SocketID\030\003 "
    "\001(\005\022\022\n\nCreateTime\030\004 \001(\003\022\r\n\005State\030\005 \001(\005\"\241"
    "\001\n\010CTcpHead\022\r\n\005SrcFE\030\001 \001(\005\022\r\n\005SrcID\030\002 \001("
    "\005\022\r\n\005DstFE\030\003 \001(\005\022\r\n\005DstID\030\004 \001(\005\022#\n\006OpFla"
    "g\030\005 \001(\0162\t.EGateCmd:\010EGC_NULL\022\021\n\tTimeStam"
    "p\030\006 \001(\003\022!\n\013SocketInfos\030\007 \003(\0132\014.CSocketIn"
    "fo*;\n\010EGateCmd\022\014\n\010EGC_NULL\020\000\022\016\n\nEGC_REGI"
    "ST\020\001\022\021\n\rEGC_KEEPALIVE\020\002B\002H\001", 347);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tcpmessage.proto", &protobuf_RegisterTypes);
  CSocketInfo::default_instance_ = new CSocketInfo();
  CTcpHead::default_instance_ = new CTcpHead();
  CSocketInfo::default_instance_->InitAsDefaultInstance();
  CTcpHead::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tcpmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tcpmessage_2eproto {
  StaticDescriptorInitializer_tcpmessage_2eproto() {
    protobuf_AddDesc_tcpmessage_2eproto();
  }
} static_descriptor_initializer_tcpmessage_2eproto_;
const ::google::protobuf::EnumDescriptor* EGateCmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGateCmd_descriptor_;
}
bool EGateCmd_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CSocketInfo::kSrcIPFieldNumber;
const int CSocketInfo::kSrcPortFieldNumber;
const int CSocketInfo::kSocketIDFieldNumber;
const int CSocketInfo::kCreateTimeFieldNumber;
const int CSocketInfo::kStateFieldNumber;
#endif  // !_MSC_VER

CSocketInfo::CSocketInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSocketInfo::InitAsDefaultInstance() {
}

CSocketInfo::CSocketInfo(const CSocketInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSocketInfo::SharedCtor() {
  _cached_size_ = 0;
  srcip_ = 0;
  srcport_ = 0;
  socketid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSocketInfo::~CSocketInfo() {
  SharedDtor();
}

void CSocketInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSocketInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSocketInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSocketInfo_descriptor_;
}

const CSocketInfo& CSocketInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tcpmessage_2eproto();
  return *default_instance_;
}

CSocketInfo* CSocketInfo::default_instance_ = NULL;

CSocketInfo* CSocketInfo::New() const {
  return new CSocketInfo;
}

void CSocketInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srcip_ = 0;
    srcport_ = 0;
    socketid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSocketInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SrcIP = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srcip_)));
          set_has_srcip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SrcPort;
        break;
      }

      // optional int32 SrcPort = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SrcPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srcport_)));
          set_has_srcport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SocketID;
        break;
      }

      // optional int32 SocketID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SocketID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &socketid_)));
          set_has_socketid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_CreateTime;
        break;
      }

      // optional int64 CreateTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_State;
        break;
      }

      // optional int32 State = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_State:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSocketInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 SrcIP = 1;
  if (has_srcip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->srcip(), output);
  }

  // optional int32 SrcPort = 2;
  if (has_srcport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->srcport(), output);
  }

  // optional int32 SocketID = 3;
  if (has_socketid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->socketid(), output);
  }

  // optional int64 CreateTime = 4;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->createtime(), output);
  }

  // optional int32 State = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSocketInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 SrcIP = 1;
  if (has_srcip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->srcip(), target);
  }

  // optional int32 SrcPort = 2;
  if (has_srcport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->srcport(), target);
  }

  // optional int32 SocketID = 3;
  if (has_socketid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->socketid(), target);
  }

  // optional int64 CreateTime = 4;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->createtime(), target);
  }

  // optional int32 State = 5;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSocketInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SrcIP = 1;
    if (has_srcip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->srcip());
    }

    // optional int32 SrcPort = 2;
    if (has_srcport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->srcport());
    }

    // optional int32 SocketID = 3;
    if (has_socketid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->socketid());
    }

    // optional int64 CreateTime = 4;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // optional int32 State = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSocketInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSocketInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSocketInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSocketInfo::MergeFrom(const CSocketInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcip()) {
      set_srcip(from.srcip());
    }
    if (from.has_srcport()) {
      set_srcport(from.srcport());
    }
    if (from.has_socketid()) {
      set_socketid(from.socketid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSocketInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSocketInfo::CopyFrom(const CSocketInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSocketInfo::IsInitialized() const {

  return true;
}

void CSocketInfo::Swap(CSocketInfo* other) {
  if (other != this) {
    std::swap(srcip_, other->srcip_);
    std::swap(srcport_, other->srcport_);
    std::swap(socketid_, other->socketid_);
    std::swap(createtime_, other->createtime_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSocketInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSocketInfo_descriptor_;
  metadata.reflection = CSocketInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CTcpHead::kSrcFEFieldNumber;
const int CTcpHead::kSrcIDFieldNumber;
const int CTcpHead::kDstFEFieldNumber;
const int CTcpHead::kDstIDFieldNumber;
const int CTcpHead::kOpFlagFieldNumber;
const int CTcpHead::kTimeStampFieldNumber;
const int CTcpHead::kSocketInfosFieldNumber;
#endif  // !_MSC_VER

CTcpHead::CTcpHead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CTcpHead::InitAsDefaultInstance() {
}

CTcpHead::CTcpHead(const CTcpHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CTcpHead::SharedCtor() {
  _cached_size_ = 0;
  srcfe_ = 0;
  srcid_ = 0;
  dstfe_ = 0;
  dstid_ = 0;
  opflag_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CTcpHead::~CTcpHead() {
  SharedDtor();
}

void CTcpHead::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CTcpHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTcpHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CTcpHead_descriptor_;
}

const CTcpHead& CTcpHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tcpmessage_2eproto();
  return *default_instance_;
}

CTcpHead* CTcpHead::default_instance_ = NULL;

CTcpHead* CTcpHead::New() const {
  return new CTcpHead;
}

void CTcpHead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srcfe_ = 0;
    srcid_ = 0;
    dstfe_ = 0;
    dstid_ = 0;
    opflag_ = 0;
    timestamp_ = GOOGLE_LONGLONG(0);
  }
  socketinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CTcpHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SrcFE = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srcfe_)));
          set_has_srcfe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SrcID;
        break;
      }

      // optional int32 SrcID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SrcID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srcid_)));
          set_has_srcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DstFE;
        break;
      }

      // optional int32 DstFE = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DstFE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dstfe_)));
          set_has_dstfe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_DstID;
        break;
      }

      // optional int32 DstID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DstID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dstid_)));
          set_has_dstid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_OpFlag;
        break;
      }

      // optional .EGateCmd OpFlag = 5 [default = EGC_NULL];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OpFlag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EGateCmd_IsValid(value)) {
            set_opflag(static_cast< ::EGateCmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_TimeStamp;
        break;
      }

      // optional int64 TimeStamp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeStamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_SocketInfos;
        break;
      }

      // repeated .CSocketInfo SocketInfos = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SocketInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_socketinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_SocketInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CTcpHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 SrcFE = 1;
  if (has_srcfe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->srcfe(), output);
  }

  // optional int32 SrcID = 2;
  if (has_srcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->srcid(), output);
  }

  // optional int32 DstFE = 3;
  if (has_dstfe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dstfe(), output);
  }

  // optional int32 DstID = 4;
  if (has_dstid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dstid(), output);
  }

  // optional .EGateCmd OpFlag = 5 [default = EGC_NULL];
  if (has_opflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->opflag(), output);
  }

  // optional int64 TimeStamp = 6;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->timestamp(), output);
  }

  // repeated .CSocketInfo SocketInfos = 7;
  for (int i = 0; i < this->socketinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->socketinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CTcpHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 SrcFE = 1;
  if (has_srcfe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->srcfe(), target);
  }

  // optional int32 SrcID = 2;
  if (has_srcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->srcid(), target);
  }

  // optional int32 DstFE = 3;
  if (has_dstfe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dstfe(), target);
  }

  // optional int32 DstID = 4;
  if (has_dstid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dstid(), target);
  }

  // optional .EGateCmd OpFlag = 5 [default = EGC_NULL];
  if (has_opflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->opflag(), target);
  }

  // optional int64 TimeStamp = 6;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->timestamp(), target);
  }

  // repeated .CSocketInfo SocketInfos = 7;
  for (int i = 0; i < this->socketinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->socketinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CTcpHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SrcFE = 1;
    if (has_srcfe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->srcfe());
    }

    // optional int32 SrcID = 2;
    if (has_srcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->srcid());
    }

    // optional int32 DstFE = 3;
    if (has_dstfe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dstfe());
    }

    // optional int32 DstID = 4;
    if (has_dstid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dstid());
    }

    // optional .EGateCmd OpFlag = 5 [default = EGC_NULL];
    if (has_opflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->opflag());
    }

    // optional int64 TimeStamp = 6;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

  }
  // repeated .CSocketInfo SocketInfos = 7;
  total_size += 1 * this->socketinfos_size();
  for (int i = 0; i < this->socketinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->socketinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTcpHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CTcpHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CTcpHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CTcpHead::MergeFrom(const CTcpHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  socketinfos_.MergeFrom(from.socketinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcfe()) {
      set_srcfe(from.srcfe());
    }
    if (from.has_srcid()) {
      set_srcid(from.srcid());
    }
    if (from.has_dstfe()) {
      set_dstfe(from.dstfe());
    }
    if (from.has_dstid()) {
      set_dstid(from.dstid());
    }
    if (from.has_opflag()) {
      set_opflag(from.opflag());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CTcpHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTcpHead::CopyFrom(const CTcpHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTcpHead::IsInitialized() const {

  return true;
}

void CTcpHead::Swap(CTcpHead* other) {
  if (other != this) {
    std::swap(srcfe_, other->srcfe_);
    std::swap(srcid_, other->srcid_);
    std::swap(dstfe_, other->dstfe_);
    std::swap(dstid_, other->dstid_);
    std::swap(opflag_, other->opflag_);
    std::swap(timestamp_, other->timestamp_);
    socketinfos_.Swap(&other->socketinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CTcpHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CTcpHead_descriptor_;
  metadata.reflection = CTcpHead_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
