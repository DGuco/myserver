// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: item.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "item.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace slg {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* ItemsUseRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemsUseRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemsUseResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemsUseResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemChangePush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemChangePush_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ITEMCommandId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ItemPushId_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_item_2eproto() {
  protobuf_AddDesc_item_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "item.proto");
  GOOGLE_CHECK(file != NULL);
  ItemsUseRequest_descriptor_ = file->message_type(0);
  static const int ItemsUseRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemsUseRequest, item_),
  };
  ItemsUseRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemsUseRequest_descriptor_,
      ItemsUseRequest::default_instance_,
      ItemsUseRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemsUseRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemsUseRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemsUseRequest));
  ItemsUseResponse_descriptor_ = file->message_type(1);
  static const int ItemsUseResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemsUseResponse, item_),
  };
  ItemsUseResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemsUseResponse_descriptor_,
      ItemsUseResponse::default_instance_,
      ItemsUseResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemsUseResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemsUseResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemsUseResponse));
  ItemChangePush_descriptor_ = file->message_type(2);
  static const int ItemChangePush_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemChangePush, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemChangePush, islogin_),
  };
  ItemChangePush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemChangePush_descriptor_,
      ItemChangePush::default_instance_,
      ItemChangePush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemChangePush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemChangePush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemChangePush));
  ITEMCommandId_descriptor_ = file->enum_type(0);
  ItemPushId_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_item_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemsUseRequest_descriptor_, &ItemsUseRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemsUseResponse_descriptor_, &ItemsUseResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemChangePush_descriptor_, &ItemChangePush::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_item_2eproto() {
  delete ItemsUseRequest::default_instance_;
  delete ItemsUseRequest_reflection_;
  delete ItemsUseResponse::default_instance_;
  delete ItemsUseResponse_reflection_;
  delete ItemChangePush::default_instance_;
  delete ItemChangePush_reflection_;
}

void protobuf_AddDesc_item_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::slg::protocol::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nitem.proto\022\014slg.protocol\032\014common.proto"
    "\"6\n\017ItemsUseRequest\022#\n\004item\030\001 \002(\0132\025.slg."
    "protocol.ItemDTO\"7\n\020ItemsUseResponse\022#\n\004"
    "item\030\001 \002(\0132\025.slg.protocol.ItemDTO\"G\n\016Ite"
    "mChangePush\022$\n\005items\030\001 \003(\0132\025.slg.protoco"
    "l.ItemDTO\022\017\n\007isLogin\030\002 \002(\010*#\n\rITEMComman"
    "dId\022\022\n\rITEM_USE_ITEM\020\241\006*$\n\nItemPushId\022\026\n"
    "\020ITEM_CHANGE_PUSH\020\361\214\003B)\n\034com.bonusstudio"
    ".slg.protocolB\tItemProto", 344);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "item.proto", &protobuf_RegisterTypes);
  ItemsUseRequest::default_instance_ = new ItemsUseRequest();
  ItemsUseResponse::default_instance_ = new ItemsUseResponse();
  ItemChangePush::default_instance_ = new ItemChangePush();
  ItemsUseRequest::default_instance_->InitAsDefaultInstance();
  ItemsUseResponse::default_instance_->InitAsDefaultInstance();
  ItemChangePush::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_item_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_item_2eproto {
  StaticDescriptorInitializer_item_2eproto() {
    protobuf_AddDesc_item_2eproto();
  }
} static_descriptor_initializer_item_2eproto_;
const ::google::protobuf::EnumDescriptor* ITEMCommandId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ITEMCommandId_descriptor_;
}
bool ITEMCommandId_IsValid(int value) {
  switch(value) {
    case 801:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ItemPushId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemPushId_descriptor_;
}
bool ItemPushId_IsValid(int value) {
  switch(value) {
    case 50801:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ItemsUseRequest::kItemFieldNumber;
#endif  // !_MSC_VER

ItemsUseRequest::ItemsUseRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemsUseRequest::InitAsDefaultInstance() {
  item_ = const_cast< ::slg::protocol::ItemDTO*>(&::slg::protocol::ItemDTO::default_instance());
}

ItemsUseRequest::ItemsUseRequest(const ItemsUseRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemsUseRequest::SharedCtor() {
  _cached_size_ = 0;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemsUseRequest::~ItemsUseRequest() {
  SharedDtor();
}

void ItemsUseRequest::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void ItemsUseRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemsUseRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemsUseRequest_descriptor_;
}

const ItemsUseRequest& ItemsUseRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

ItemsUseRequest* ItemsUseRequest::default_instance_ = NULL;

ItemsUseRequest* ItemsUseRequest::New() const {
  return new ItemsUseRequest;
}

void ItemsUseRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_item()) {
      if (item_ != NULL) item_->::slg::protocol::ItemDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemsUseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .slg.protocol.ItemDTO item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemsUseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .slg.protocol.ItemDTO item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemsUseRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .slg.protocol.ItemDTO item = 1;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemsUseRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .slg.protocol.ItemDTO item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemsUseRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemsUseRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemsUseRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemsUseRequest::MergeFrom(const ItemsUseRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      mutable_item()->::slg::protocol::ItemDTO::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemsUseRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemsUseRequest::CopyFrom(const ItemsUseRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemsUseRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  return true;
}

void ItemsUseRequest::Swap(ItemsUseRequest* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemsUseRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemsUseRequest_descriptor_;
  metadata.reflection = ItemsUseRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemsUseResponse::kItemFieldNumber;
#endif  // !_MSC_VER

ItemsUseResponse::ItemsUseResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemsUseResponse::InitAsDefaultInstance() {
  item_ = const_cast< ::slg::protocol::ItemDTO*>(&::slg::protocol::ItemDTO::default_instance());
}

ItemsUseResponse::ItemsUseResponse(const ItemsUseResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemsUseResponse::SharedCtor() {
  _cached_size_ = 0;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemsUseResponse::~ItemsUseResponse() {
  SharedDtor();
}

void ItemsUseResponse::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void ItemsUseResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemsUseResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemsUseResponse_descriptor_;
}

const ItemsUseResponse& ItemsUseResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

ItemsUseResponse* ItemsUseResponse::default_instance_ = NULL;

ItemsUseResponse* ItemsUseResponse::New() const {
  return new ItemsUseResponse;
}

void ItemsUseResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_item()) {
      if (item_ != NULL) item_->::slg::protocol::ItemDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemsUseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .slg.protocol.ItemDTO item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemsUseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .slg.protocol.ItemDTO item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemsUseResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .slg.protocol.ItemDTO item = 1;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemsUseResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .slg.protocol.ItemDTO item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemsUseResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemsUseResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemsUseResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemsUseResponse::MergeFrom(const ItemsUseResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      mutable_item()->::slg::protocol::ItemDTO::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemsUseResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemsUseResponse::CopyFrom(const ItemsUseResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemsUseResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  return true;
}

void ItemsUseResponse::Swap(ItemsUseResponse* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemsUseResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemsUseResponse_descriptor_;
  metadata.reflection = ItemsUseResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemChangePush::kItemsFieldNumber;
const int ItemChangePush::kIsLoginFieldNumber;
#endif  // !_MSC_VER

ItemChangePush::ItemChangePush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemChangePush::InitAsDefaultInstance() {
}

ItemChangePush::ItemChangePush(const ItemChangePush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemChangePush::SharedCtor() {
  _cached_size_ = 0;
  islogin_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemChangePush::~ItemChangePush() {
  SharedDtor();
}

void ItemChangePush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemChangePush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemChangePush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemChangePush_descriptor_;
}

const ItemChangePush& ItemChangePush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

ItemChangePush* ItemChangePush::default_instance_ = NULL;

ItemChangePush* ItemChangePush::New() const {
  return new ItemChangePush;
}

void ItemChangePush::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    islogin_ = false;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemChangePush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.ItemDTO items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectTag(16)) goto parse_isLogin;
        break;
      }

      // required bool isLogin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isLogin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islogin_)));
          set_has_islogin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemChangePush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.ItemDTO items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  // required bool isLogin = 2;
  if (has_islogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->islogin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemChangePush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.ItemDTO items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  // required bool isLogin = 2;
  if (has_islogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->islogin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemChangePush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool isLogin = 2;
    if (has_islogin()) {
      total_size += 1 + 1;
    }

  }
  // repeated .slg.protocol.ItemDTO items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemChangePush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemChangePush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemChangePush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemChangePush::MergeFrom(const ItemChangePush& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_islogin()) {
      set_islogin(from.islogin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemChangePush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemChangePush::CopyFrom(const ItemChangePush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemChangePush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void ItemChangePush::Swap(ItemChangePush* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(islogin_, other->islogin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemChangePush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemChangePush_descriptor_;
  metadata.reflection = ItemChangePush_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace slg

// @@protoc_insertion_point(global_scope)
