// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: configure.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "configure.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PBProxy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBProxy_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGate_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDBConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDBConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBHallConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBHallConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRoomConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRoomConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBProxyConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBProxyConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTcpConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTcpConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGateConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGateConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBClientConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBClientConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* CConfigure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CConfigure_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_configure_2eproto() {
  protobuf_AddDesc_configure_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "configure.proto");
  GOOGLE_CHECK(file != NULL);
  PBProxy_descriptor_ = file->message_type(0);
  static const int PBProxy_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProxy, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProxy, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProxy, port_),
  };
  PBProxy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBProxy_descriptor_,
      PBProxy::default_instance_,
      PBProxy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProxy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProxy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBProxy));
  PBGate_descriptor_ = file->message_type(1);
  static const int PBGate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGate, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGate, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGate, port_),
  };
  PBGate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGate_descriptor_,
      PBGate::default_instance_,
      PBGate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGate));
  PBLog_descriptor_ = file->message_type(2);
  static const int PBLog_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog, identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog, directory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog, maxfilesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog, maxbackupindex_),
  };
  PBLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBLog_descriptor_,
      PBLog::default_instance_,
      PBLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBLog));
  PBDBConfig_descriptor_ = file->message_type(3);
  static const int PBDBConfig_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBConfig, selfip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBConfig, selfport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBConfig, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBConfig, proxyinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBConfig, mysqlinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBConfig, loglvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBConfig, rwtimeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBConfig, sleeptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBConfig, loop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBConfig, keepalive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBConfig, servertick_),
  };
  PBDBConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDBConfig_descriptor_,
      PBDBConfig::default_instance_,
      PBDBConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDBConfig));
  PBHallConfig_descriptor_ = file->message_type(4);
  static const int PBHallConfig_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHallConfig, proxytimeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHallConfig, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHallConfig, proxyinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHallConfig, loginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHallConfig, keepalive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHallConfig, servertick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHallConfig, sessiontimeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHallConfig, perffrequecny_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHallConfig, encrypt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHallConfig, autosave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHallConfig, logintimeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHallConfig, nocontraltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHallConfig, dbserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHallConfig, webserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHallConfig, urllogincheck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHallConfig, urlprintdot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHallConfig, urlmimessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHallConfig, sdkcheck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHallConfig, gateinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHallConfig, addgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHallConfig, adddiamond_),
  };
  PBHallConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBHallConfig_descriptor_,
      PBHallConfig::default_instance_,
      PBHallConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHallConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHallConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBHallConfig));
  PBRoomConfig_descriptor_ = file->message_type(5);
  static const int PBRoomConfig_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoomConfig, proxytimeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoomConfig, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoomConfig, proxyinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoomConfig, loginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoomConfig, keepalive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoomConfig, servertick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoomConfig, sessiontimeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoomConfig, perffrequecny_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoomConfig, encrypt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoomConfig, gateinfo_),
  };
  PBRoomConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRoomConfig_descriptor_,
      PBRoomConfig::default_instance_,
      PBRoomConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoomConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoomConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRoomConfig));
  PBProxyConfig_descriptor_ = file->message_type(6);
  static const int PBProxyConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProxyConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProxyConfig, port_),
  };
  PBProxyConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBProxyConfig_descriptor_,
      PBProxyConfig::default_instance_,
      PBProxyConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProxyConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProxyConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBProxyConfig));
  PBTcpConfig_descriptor_ = file->message_type(7);
  static const int PBTcpConfig_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTcpConfig, gateinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTcpConfig, loginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTcpConfig, listenport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTcpConfig, checktimegap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTcpConfig, sockettimeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTcpConfig, conntimeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTcpConfig, maxlogcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTcpConfig, tcpbuflen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTcpConfig, writestatgap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTcpConfig, tcpserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTcpConfig, gatetimeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTcpConfig, keepalive_),
  };
  PBTcpConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTcpConfig_descriptor_,
      PBTcpConfig::default_instance_,
      PBTcpConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTcpConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTcpConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTcpConfig));
  PBGateConfig_descriptor_ = file->message_type(8);
  static const int PBGateConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGateConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGateConfig, port_),
  };
  PBGateConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGateConfig_descriptor_,
      PBGateConfig::default_instance_,
      PBGateConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGateConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGateConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGateConfig));
  PBClientConfig_descriptor_ = file->message_type(9);
  static const int PBClientConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClientConfig, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClientConfig, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClientConfig, connnum_),
  };
  PBClientConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBClientConfig_descriptor_,
      PBClientConfig::default_instance_,
      PBClientConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClientConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClientConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBClientConfig));
  CConfigure_descriptor_ = file->message_type(10);
  static const int CConfigure_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CConfigure, dbconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CConfigure, hallconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CConfigure, proxyconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CConfigure, tcpconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CConfigure, gateconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CConfigure, clientconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CConfigure, roomconfig_),
  };
  CConfigure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CConfigure_descriptor_,
      CConfigure::default_instance_,
      CConfigure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CConfigure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CConfigure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CConfigure));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_configure_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBProxy_descriptor_, &PBProxy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGate_descriptor_, &PBGate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBLog_descriptor_, &PBLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDBConfig_descriptor_, &PBDBConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBHallConfig_descriptor_, &PBHallConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRoomConfig_descriptor_, &PBRoomConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBProxyConfig_descriptor_, &PBProxyConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTcpConfig_descriptor_, &PBTcpConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGateConfig_descriptor_, &PBGateConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBClientConfig_descriptor_, &PBClientConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CConfigure_descriptor_, &CConfigure::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_configure_2eproto() {
  delete PBProxy::default_instance_;
  delete PBProxy_reflection_;
  delete PBGate::default_instance_;
  delete PBGate_reflection_;
  delete PBLog::default_instance_;
  delete PBLog_reflection_;
  delete PBDBConfig::default_instance_;
  delete PBDBConfig_reflection_;
  delete PBHallConfig::default_instance_;
  delete PBHallConfig_reflection_;
  delete PBRoomConfig::default_instance_;
  delete PBRoomConfig_reflection_;
  delete PBProxyConfig::default_instance_;
  delete PBProxyConfig_reflection_;
  delete PBTcpConfig::default_instance_;
  delete PBTcpConfig_reflection_;
  delete PBGateConfig::default_instance_;
  delete PBGateConfig_reflection_;
  delete PBClientConfig::default_instance_;
  delete PBClientConfig_reflection_;
  delete CConfigure::default_instance_;
  delete CConfigure_reflection_;
}

void protobuf_AddDesc_configure_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017configure.proto\"/\n\007PBProxy\022\n\n\002id\030\001 \002(\r"
    "\022\n\n\002ip\030\002 \002(\t\022\014\n\004port\030\003 \002(\r\".\n\006PBGate\022\n\n\002"
    "id\030\001 \002(\r\022\n\n\002ip\030\002 \002(\t\022\014\n\004port\030\003 \002(\r\"m\n\005PB"
    "Log\022\022\n\nidentifier\030\001 \002(\t\022\021\n\tdirectory\030\002 \002"
    "(\t\022\020\n\010priority\030\003 \002(\r\022\023\n\013maxfilesize\030\004 \002("
    "\r\022\026\n\016maxbackupindex\030\005 \002(\r\"\333\001\n\nPBDBConfig"
    "\022\016\n\006selfip\030\001 \002(\t\022\020\n\010selfport\030\002 \002(\r\022\020\n\010se"
    "rverid\030\003 \002(\r\022\033\n\tproxyinfo\030\004 \003(\0132\010.PBProx"
    "y\022\021\n\tmysqlinfo\030\005 \002(\t\022\016\n\006loglvl\030\006 \002(\r\022\021\n\t"
    "rwtimeout\030\007 \002(\r\022\021\n\tsleeptime\030\010 \002(\r\022\014\n\004lo"
    "op\030\t \002(\r\022\021\n\tkeepalive\030\n \002(\003\022\022\n\nservertic"
    "k\030\013 \002(\003\"\317\003\n\014PBHallConfig\022\024\n\014proxytimeout"
    "\030\001 \002(\003\022\020\n\010serverid\030\002 \002(\005\022\033\n\tproxyinfo\030\003 "
    "\003(\0132\010.PBProxy\022\027\n\007loginfo\030\004 \003(\0132\006.PBLog\022\021"
    "\n\tkeepalive\030\005 \002(\003\022\022\n\nservertick\030\006 \002(\003\022\026\n"
    "\016sessiontimeout\030\007 \002(\003\022\025\n\rperffrequecny\030\010"
    " \002(\003\022\017\n\007encrypt\030\t \002(\010\022\020\n\010autosave\030\n \002(\003\022"
    "\024\n\014logintimeout\030\013 \002(\003\022\025\n\rnocontraltime\030\014"
    " \002(\003\022\022\n\ndbserverid\030\r \002(\005\022\023\n\013webserverid\030"
    "\016 \002(\005\022\025\n\rurllogincheck\030\017 \002(\t\022\023\n\013urlprint"
    "dot\030\020 \002(\t\022\024\n\014urlmimessage\030\021 \002(\t\022\020\n\010sdkch"
    "eck\030\022 \002(\010\022\031\n\010gateinfo\030\023 \002(\0132\007.PBGate\022\017\n\007"
    "addgold\030\024 \002(\005\022\022\n\nadddiamond\030\025 \002(\005\"\356\001\n\014PB"
    "RoomConfig\022\024\n\014proxytimeout\030\001 \002(\003\022\020\n\010serv"
    "erid\030\002 \002(\005\022\033\n\tproxyinfo\030\003 \003(\0132\010.PBProxy\022"
    "\027\n\007loginfo\030\004 \003(\0132\006.PBLog\022\021\n\tkeepalive\030\005 "
    "\002(\003\022\022\n\nservertick\030\006 \002(\003\022\026\n\016sessiontimeou"
    "t\030\007 \002(\003\022\025\n\rperffrequecny\030\010 \002(\003\022\017\n\007encryp"
    "t\030\t \002(\010\022\031\n\010gateinfo\030\n \002(\0132\007.PBGate\")\n\rPB"
    "ProxyConfig\022\n\n\002id\030\001 \002(\r\022\014\n\004port\030\002 \002(\005\"\222\002"
    "\n\013PBTcpConfig\022\031\n\010gateinfo\030\001 \002(\0132\007.PBGate"
    "\022\027\n\007loginfo\030\002 \003(\0132\006.PBLog\022\022\n\nlistenport\030"
    "\003 \002(\005\022\024\n\014checktimegap\030\004 \002(\005\022\025\n\rsockettim"
    "eout\030\005 \002(\005\022\023\n\013conntimeout\030\006 \002(\005\022\023\n\013maxlo"
    "gcount\030\007 \002(\005\022\021\n\ttcpbuflen\030\010 \002(\005\022\024\n\014write"
    "statgap\030\t \002(\005\022\023\n\013tcpserverid\030\n \002(\005\022\023\n\013ga"
    "tetimeout\030\013 \002(\003\022\021\n\tkeepalive\030\014 \002(\003\"(\n\014PB"
    "GateConfig\022\n\n\002id\030\001 \002(\r\022\014\n\004port\030\002 \002(\005\";\n\016"
    "PBClientConfig\022\n\n\002ip\030\001 \002(\t\022\014\n\004port\030\002 \002(\005"
    "\022\017\n\007connnum\030\003 \002(\005\"\201\002\n\nCConfigure\022\035\n\010dbco"
    "nfig\030\001 \001(\0132\013.PBDBConfig\022!\n\nhallconfig\030\002 "
    "\001(\0132\r.PBHallConfig\022#\n\013proxyconfig\030\003 \001(\0132"
    "\016.PBProxyConfig\022\037\n\ttcpconfig\030\004 \001(\0132\014.PBT"
    "cpConfig\022!\n\ngateconfig\030\005 \001(\0132\r.PBGateCon"
    "fig\022%\n\014clientconfig\030\006 \001(\0132\017.PBClientConf"
    "ig\022!\n\nroomconfig\030\007 \001(\0132\r.PBRoomConfigB\002H"
    "\001", 1841);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "configure.proto", &protobuf_RegisterTypes);
  PBProxy::default_instance_ = new PBProxy();
  PBGate::default_instance_ = new PBGate();
  PBLog::default_instance_ = new PBLog();
  PBDBConfig::default_instance_ = new PBDBConfig();
  PBHallConfig::default_instance_ = new PBHallConfig();
  PBRoomConfig::default_instance_ = new PBRoomConfig();
  PBProxyConfig::default_instance_ = new PBProxyConfig();
  PBTcpConfig::default_instance_ = new PBTcpConfig();
  PBGateConfig::default_instance_ = new PBGateConfig();
  PBClientConfig::default_instance_ = new PBClientConfig();
  CConfigure::default_instance_ = new CConfigure();
  PBProxy::default_instance_->InitAsDefaultInstance();
  PBGate::default_instance_->InitAsDefaultInstance();
  PBLog::default_instance_->InitAsDefaultInstance();
  PBDBConfig::default_instance_->InitAsDefaultInstance();
  PBHallConfig::default_instance_->InitAsDefaultInstance();
  PBRoomConfig::default_instance_->InitAsDefaultInstance();
  PBProxyConfig::default_instance_->InitAsDefaultInstance();
  PBTcpConfig::default_instance_->InitAsDefaultInstance();
  PBGateConfig::default_instance_->InitAsDefaultInstance();
  PBClientConfig::default_instance_->InitAsDefaultInstance();
  CConfigure::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_configure_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_configure_2eproto {
  StaticDescriptorInitializer_configure_2eproto() {
    protobuf_AddDesc_configure_2eproto();
  }
} static_descriptor_initializer_configure_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PBProxy::kIdFieldNumber;
const int PBProxy::kIpFieldNumber;
const int PBProxy::kPortFieldNumber;
#endif  // !_MSC_VER

PBProxy::PBProxy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBProxy::InitAsDefaultInstance() {
}

PBProxy::PBProxy(const PBProxy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBProxy::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBProxy::~PBProxy() {
  SharedDtor();
}

void PBProxy::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void PBProxy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBProxy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBProxy_descriptor_;
}

const PBProxy& PBProxy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_configure_2eproto();
  return *default_instance_;
}

PBProxy* PBProxy::default_instance_ = NULL;

PBProxy* PBProxy::New() const {
  return new PBProxy;
}

void PBProxy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBProxy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // required string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // required uint32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBProxy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // required uint32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBProxy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // required uint32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBProxy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required uint32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBProxy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBProxy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBProxy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBProxy::MergeFrom(const PBProxy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBProxy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBProxy::CopyFrom(const PBProxy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBProxy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PBProxy::Swap(PBProxy* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBProxy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBProxy_descriptor_;
  metadata.reflection = PBProxy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGate::kIdFieldNumber;
const int PBGate::kIpFieldNumber;
const int PBGate::kPortFieldNumber;
#endif  // !_MSC_VER

PBGate::PBGate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGate::InitAsDefaultInstance() {
}

PBGate::PBGate(const PBGate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGate::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGate::~PBGate() {
  SharedDtor();
}

void PBGate::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void PBGate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGate_descriptor_;
}

const PBGate& PBGate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_configure_2eproto();
  return *default_instance_;
}

PBGate* PBGate::default_instance_ = NULL;

PBGate* PBGate::New() const {
  return new PBGate;
}

void PBGate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // required string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // required uint32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // required uint32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // required uint32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required uint32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGate::MergeFrom(const PBGate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGate::CopyFrom(const PBGate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PBGate::Swap(PBGate* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGate_descriptor_;
  metadata.reflection = PBGate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBLog::kIdentifierFieldNumber;
const int PBLog::kDirectoryFieldNumber;
const int PBLog::kPriorityFieldNumber;
const int PBLog::kMaxfilesizeFieldNumber;
const int PBLog::kMaxbackupindexFieldNumber;
#endif  // !_MSC_VER

PBLog::PBLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBLog::InitAsDefaultInstance() {
}

PBLog::PBLog(const PBLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBLog::SharedCtor() {
  _cached_size_ = 0;
  identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  directory_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  priority_ = 0u;
  maxfilesize_ = 0u;
  maxbackupindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBLog::~PBLog() {
  SharedDtor();
}

void PBLog::SharedDtor() {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete identifier_;
  }
  if (directory_ != &::google::protobuf::internal::kEmptyString) {
    delete directory_;
  }
  if (this != default_instance_) {
  }
}

void PBLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBLog_descriptor_;
}

const PBLog& PBLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_configure_2eproto();
  return *default_instance_;
}

PBLog* PBLog::default_instance_ = NULL;

PBLog* PBLog::New() const {
  return new PBLog;
}

void PBLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_identifier()) {
      if (identifier_ != &::google::protobuf::internal::kEmptyString) {
        identifier_->clear();
      }
    }
    if (has_directory()) {
      if (directory_ != &::google::protobuf::internal::kEmptyString) {
        directory_->clear();
      }
    }
    priority_ = 0u;
    maxfilesize_ = 0u;
    maxbackupindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string identifier = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->identifier().data(), this->identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_directory;
        break;
      }

      // required string directory = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_directory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_directory()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->directory().data(), this->directory().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_priority;
        break;
      }

      // required uint32 priority = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_maxfilesize;
        break;
      }

      // required uint32 maxfilesize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxfilesize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxfilesize_)));
          set_has_maxfilesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_maxbackupindex;
        break;
      }

      // required uint32 maxbackupindex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxbackupindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxbackupindex_)));
          set_has_maxbackupindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string identifier = 1;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->identifier().data(), this->identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->identifier(), output);
  }

  // required string directory = 2;
  if (has_directory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->directory().data(), this->directory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->directory(), output);
  }

  // required uint32 priority = 3;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->priority(), output);
  }

  // required uint32 maxfilesize = 4;
  if (has_maxfilesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxfilesize(), output);
  }

  // required uint32 maxbackupindex = 5;
  if (has_maxbackupindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->maxbackupindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string identifier = 1;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->identifier().data(), this->identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->identifier(), target);
  }

  // required string directory = 2;
  if (has_directory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->directory().data(), this->directory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->directory(), target);
  }

  // required uint32 priority = 3;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->priority(), target);
  }

  // required uint32 maxfilesize = 4;
  if (has_maxfilesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->maxfilesize(), target);
  }

  // required uint32 maxbackupindex = 5;
  if (has_maxbackupindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->maxbackupindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string identifier = 1;
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->identifier());
    }

    // required string directory = 2;
    if (has_directory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->directory());
    }

    // required uint32 priority = 3;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->priority());
    }

    // required uint32 maxfilesize = 4;
    if (has_maxfilesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxfilesize());
    }

    // required uint32 maxbackupindex = 5;
    if (has_maxbackupindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxbackupindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBLog::MergeFrom(const PBLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_identifier()) {
      set_identifier(from.identifier());
    }
    if (from.has_directory()) {
      set_directory(from.directory());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_maxfilesize()) {
      set_maxfilesize(from.maxfilesize());
    }
    if (from.has_maxbackupindex()) {
      set_maxbackupindex(from.maxbackupindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLog::CopyFrom(const PBLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBLog::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void PBLog::Swap(PBLog* other) {
  if (other != this) {
    std::swap(identifier_, other->identifier_);
    std::swap(directory_, other->directory_);
    std::swap(priority_, other->priority_);
    std::swap(maxfilesize_, other->maxfilesize_);
    std::swap(maxbackupindex_, other->maxbackupindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBLog_descriptor_;
  metadata.reflection = PBLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBDBConfig::kSelfipFieldNumber;
const int PBDBConfig::kSelfportFieldNumber;
const int PBDBConfig::kServeridFieldNumber;
const int PBDBConfig::kProxyinfoFieldNumber;
const int PBDBConfig::kMysqlinfoFieldNumber;
const int PBDBConfig::kLoglvlFieldNumber;
const int PBDBConfig::kRwtimeoutFieldNumber;
const int PBDBConfig::kSleeptimeFieldNumber;
const int PBDBConfig::kLoopFieldNumber;
const int PBDBConfig::kKeepaliveFieldNumber;
const int PBDBConfig::kServertickFieldNumber;
#endif  // !_MSC_VER

PBDBConfig::PBDBConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBDBConfig::InitAsDefaultInstance() {
}

PBDBConfig::PBDBConfig(const PBDBConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBDBConfig::SharedCtor() {
  _cached_size_ = 0;
  selfip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  selfport_ = 0u;
  serverid_ = 0u;
  mysqlinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  loglvl_ = 0u;
  rwtimeout_ = 0u;
  sleeptime_ = 0u;
  loop_ = 0u;
  keepalive_ = GOOGLE_LONGLONG(0);
  servertick_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDBConfig::~PBDBConfig() {
  SharedDtor();
}

void PBDBConfig::SharedDtor() {
  if (selfip_ != &::google::protobuf::internal::kEmptyString) {
    delete selfip_;
  }
  if (mysqlinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete mysqlinfo_;
  }
  if (this != default_instance_) {
  }
}

void PBDBConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBDBConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDBConfig_descriptor_;
}

const PBDBConfig& PBDBConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_configure_2eproto();
  return *default_instance_;
}

PBDBConfig* PBDBConfig::default_instance_ = NULL;

PBDBConfig* PBDBConfig::New() const {
  return new PBDBConfig;
}

void PBDBConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_selfip()) {
      if (selfip_ != &::google::protobuf::internal::kEmptyString) {
        selfip_->clear();
      }
    }
    selfport_ = 0u;
    serverid_ = 0u;
    if (has_mysqlinfo()) {
      if (mysqlinfo_ != &::google::protobuf::internal::kEmptyString) {
        mysqlinfo_->clear();
      }
    }
    loglvl_ = 0u;
    rwtimeout_ = 0u;
    sleeptime_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    loop_ = 0u;
    keepalive_ = GOOGLE_LONGLONG(0);
    servertick_ = GOOGLE_LONGLONG(0);
  }
  proxyinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDBConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string selfip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_selfip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->selfip().data(), this->selfip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_selfport;
        break;
      }

      // required uint32 selfport = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selfport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selfport_)));
          set_has_selfport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_proxyinfo;
        break;
      }

      // repeated .PBProxy proxyinfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proxyinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_proxyinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_proxyinfo;
        if (input->ExpectTag(42)) goto parse_mysqlinfo;
        break;
      }

      // required string mysqlinfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mysqlinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mysqlinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mysqlinfo().data(), this->mysqlinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_loglvl;
        break;
      }

      // required uint32 loglvl = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loglvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loglvl_)));
          set_has_loglvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_rwtimeout;
        break;
      }

      // required uint32 rwtimeout = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rwtimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rwtimeout_)));
          set_has_rwtimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sleeptime;
        break;
      }

      // required uint32 sleeptime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sleeptime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sleeptime_)));
          set_has_sleeptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_loop;
        break;
      }

      // required uint32 loop = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loop_)));
          set_has_loop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_keepalive;
        break;
      }

      // required int64 keepalive = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keepalive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &keepalive_)));
          set_has_keepalive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_servertick;
        break;
      }

      // required int64 servertick = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_servertick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &servertick_)));
          set_has_servertick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBDBConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string selfip = 1;
  if (has_selfip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->selfip().data(), this->selfip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->selfip(), output);
  }

  // required uint32 selfport = 2;
  if (has_selfport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->selfport(), output);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serverid(), output);
  }

  // repeated .PBProxy proxyinfo = 4;
  for (int i = 0; i < this->proxyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->proxyinfo(i), output);
  }

  // required string mysqlinfo = 5;
  if (has_mysqlinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mysqlinfo().data(), this->mysqlinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->mysqlinfo(), output);
  }

  // required uint32 loglvl = 6;
  if (has_loglvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->loglvl(), output);
  }

  // required uint32 rwtimeout = 7;
  if (has_rwtimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rwtimeout(), output);
  }

  // required uint32 sleeptime = 8;
  if (has_sleeptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->sleeptime(), output);
  }

  // required uint32 loop = 9;
  if (has_loop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->loop(), output);
  }

  // required int64 keepalive = 10;
  if (has_keepalive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->keepalive(), output);
  }

  // required int64 servertick = 11;
  if (has_servertick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->servertick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBDBConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string selfip = 1;
  if (has_selfip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->selfip().data(), this->selfip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->selfip(), target);
  }

  // required uint32 selfport = 2;
  if (has_selfport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->selfport(), target);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serverid(), target);
  }

  // repeated .PBProxy proxyinfo = 4;
  for (int i = 0; i < this->proxyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->proxyinfo(i), target);
  }

  // required string mysqlinfo = 5;
  if (has_mysqlinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mysqlinfo().data(), this->mysqlinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->mysqlinfo(), target);
  }

  // required uint32 loglvl = 6;
  if (has_loglvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->loglvl(), target);
  }

  // required uint32 rwtimeout = 7;
  if (has_rwtimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rwtimeout(), target);
  }

  // required uint32 sleeptime = 8;
  if (has_sleeptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->sleeptime(), target);
  }

  // required uint32 loop = 9;
  if (has_loop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->loop(), target);
  }

  // required int64 keepalive = 10;
  if (has_keepalive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->keepalive(), target);
  }

  // required int64 servertick = 11;
  if (has_servertick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->servertick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBDBConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string selfip = 1;
    if (has_selfip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->selfip());
    }

    // required uint32 selfport = 2;
    if (has_selfport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selfport());
    }

    // required uint32 serverid = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // required string mysqlinfo = 5;
    if (has_mysqlinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mysqlinfo());
    }

    // required uint32 loglvl = 6;
    if (has_loglvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loglvl());
    }

    // required uint32 rwtimeout = 7;
    if (has_rwtimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rwtimeout());
    }

    // required uint32 sleeptime = 8;
    if (has_sleeptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sleeptime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 loop = 9;
    if (has_loop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loop());
    }

    // required int64 keepalive = 10;
    if (has_keepalive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->keepalive());
    }

    // required int64 servertick = 11;
    if (has_servertick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->servertick());
    }

  }
  // repeated .PBProxy proxyinfo = 4;
  total_size += 1 * this->proxyinfo_size();
  for (int i = 0; i < this->proxyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->proxyinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBDBConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDBConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDBConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDBConfig::MergeFrom(const PBDBConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  proxyinfo_.MergeFrom(from.proxyinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfip()) {
      set_selfip(from.selfip());
    }
    if (from.has_selfport()) {
      set_selfport(from.selfport());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_mysqlinfo()) {
      set_mysqlinfo(from.mysqlinfo());
    }
    if (from.has_loglvl()) {
      set_loglvl(from.loglvl());
    }
    if (from.has_rwtimeout()) {
      set_rwtimeout(from.rwtimeout());
    }
    if (from.has_sleeptime()) {
      set_sleeptime(from.sleeptime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_loop()) {
      set_loop(from.loop());
    }
    if (from.has_keepalive()) {
      set_keepalive(from.keepalive());
    }
    if (from.has_servertick()) {
      set_servertick(from.servertick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDBConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDBConfig::CopyFrom(const PBDBConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBDBConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007f7) != 0x000007f7) return false;

  for (int i = 0; i < proxyinfo_size(); i++) {
    if (!this->proxyinfo(i).IsInitialized()) return false;
  }
  return true;
}

void PBDBConfig::Swap(PBDBConfig* other) {
  if (other != this) {
    std::swap(selfip_, other->selfip_);
    std::swap(selfport_, other->selfport_);
    std::swap(serverid_, other->serverid_);
    proxyinfo_.Swap(&other->proxyinfo_);
    std::swap(mysqlinfo_, other->mysqlinfo_);
    std::swap(loglvl_, other->loglvl_);
    std::swap(rwtimeout_, other->rwtimeout_);
    std::swap(sleeptime_, other->sleeptime_);
    std::swap(loop_, other->loop_);
    std::swap(keepalive_, other->keepalive_);
    std::swap(servertick_, other->servertick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBDBConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBDBConfig_descriptor_;
  metadata.reflection = PBDBConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBHallConfig::kProxytimeoutFieldNumber;
const int PBHallConfig::kServeridFieldNumber;
const int PBHallConfig::kProxyinfoFieldNumber;
const int PBHallConfig::kLoginfoFieldNumber;
const int PBHallConfig::kKeepaliveFieldNumber;
const int PBHallConfig::kServertickFieldNumber;
const int PBHallConfig::kSessiontimeoutFieldNumber;
const int PBHallConfig::kPerffrequecnyFieldNumber;
const int PBHallConfig::kEncryptFieldNumber;
const int PBHallConfig::kAutosaveFieldNumber;
const int PBHallConfig::kLogintimeoutFieldNumber;
const int PBHallConfig::kNocontraltimeFieldNumber;
const int PBHallConfig::kDbserveridFieldNumber;
const int PBHallConfig::kWebserveridFieldNumber;
const int PBHallConfig::kUrllogincheckFieldNumber;
const int PBHallConfig::kUrlprintdotFieldNumber;
const int PBHallConfig::kUrlmimessageFieldNumber;
const int PBHallConfig::kSdkcheckFieldNumber;
const int PBHallConfig::kGateinfoFieldNumber;
const int PBHallConfig::kAddgoldFieldNumber;
const int PBHallConfig::kAdddiamondFieldNumber;
#endif  // !_MSC_VER

PBHallConfig::PBHallConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBHallConfig::InitAsDefaultInstance() {
  gateinfo_ = const_cast< ::PBGate*>(&::PBGate::default_instance());
}

PBHallConfig::PBHallConfig(const PBHallConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBHallConfig::SharedCtor() {
  _cached_size_ = 0;
  proxytimeout_ = GOOGLE_LONGLONG(0);
  serverid_ = 0;
  keepalive_ = GOOGLE_LONGLONG(0);
  servertick_ = GOOGLE_LONGLONG(0);
  sessiontimeout_ = GOOGLE_LONGLONG(0);
  perffrequecny_ = GOOGLE_LONGLONG(0);
  encrypt_ = false;
  autosave_ = GOOGLE_LONGLONG(0);
  logintimeout_ = GOOGLE_LONGLONG(0);
  nocontraltime_ = GOOGLE_LONGLONG(0);
  dbserverid_ = 0;
  webserverid_ = 0;
  urllogincheck_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  urlprintdot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  urlmimessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sdkcheck_ = false;
  gateinfo_ = NULL;
  addgold_ = 0;
  adddiamond_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBHallConfig::~PBHallConfig() {
  SharedDtor();
}

void PBHallConfig::SharedDtor() {
  if (urllogincheck_ != &::google::protobuf::internal::kEmptyString) {
    delete urllogincheck_;
  }
  if (urlprintdot_ != &::google::protobuf::internal::kEmptyString) {
    delete urlprintdot_;
  }
  if (urlmimessage_ != &::google::protobuf::internal::kEmptyString) {
    delete urlmimessage_;
  }
  if (this != default_instance_) {
    delete gateinfo_;
  }
}

void PBHallConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBHallConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBHallConfig_descriptor_;
}

const PBHallConfig& PBHallConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_configure_2eproto();
  return *default_instance_;
}

PBHallConfig* PBHallConfig::default_instance_ = NULL;

PBHallConfig* PBHallConfig::New() const {
  return new PBHallConfig;
}

void PBHallConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proxytimeout_ = GOOGLE_LONGLONG(0);
    serverid_ = 0;
    keepalive_ = GOOGLE_LONGLONG(0);
    servertick_ = GOOGLE_LONGLONG(0);
    sessiontimeout_ = GOOGLE_LONGLONG(0);
    perffrequecny_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    encrypt_ = false;
    autosave_ = GOOGLE_LONGLONG(0);
    logintimeout_ = GOOGLE_LONGLONG(0);
    nocontraltime_ = GOOGLE_LONGLONG(0);
    dbserverid_ = 0;
    webserverid_ = 0;
    if (has_urllogincheck()) {
      if (urllogincheck_ != &::google::protobuf::internal::kEmptyString) {
        urllogincheck_->clear();
      }
    }
    if (has_urlprintdot()) {
      if (urlprintdot_ != &::google::protobuf::internal::kEmptyString) {
        urlprintdot_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_urlmimessage()) {
      if (urlmimessage_ != &::google::protobuf::internal::kEmptyString) {
        urlmimessage_->clear();
      }
    }
    sdkcheck_ = false;
    if (has_gateinfo()) {
      if (gateinfo_ != NULL) gateinfo_->::PBGate::Clear();
    }
    addgold_ = 0;
    adddiamond_ = 0;
  }
  proxyinfo_.Clear();
  loginfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBHallConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 proxytimeout = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &proxytimeout_)));
          set_has_proxytimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverid;
        break;
      }

      // required int32 serverid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_proxyinfo;
        break;
      }

      // repeated .PBProxy proxyinfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proxyinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_proxyinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_proxyinfo;
        if (input->ExpectTag(34)) goto parse_loginfo;
        break;
      }

      // repeated .PBLog loginfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loginfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_loginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_loginfo;
        if (input->ExpectTag(40)) goto parse_keepalive;
        break;
      }

      // required int64 keepalive = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keepalive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &keepalive_)));
          set_has_keepalive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_servertick;
        break;
      }

      // required int64 servertick = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_servertick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &servertick_)));
          set_has_servertick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sessiontimeout;
        break;
      }

      // required int64 sessiontimeout = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sessiontimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sessiontimeout_)));
          set_has_sessiontimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_perffrequecny;
        break;
      }

      // required int64 perffrequecny = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_perffrequecny:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &perffrequecny_)));
          set_has_perffrequecny();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_encrypt;
        break;
      }

      // required bool encrypt = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_encrypt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_)));
          set_has_encrypt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_autosave;
        break;
      }

      // required int64 autosave = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autosave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &autosave_)));
          set_has_autosave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_logintimeout;
        break;
      }

      // required int64 logintimeout = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logintimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &logintimeout_)));
          set_has_logintimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_nocontraltime;
        break;
      }

      // required int64 nocontraltime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nocontraltime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nocontraltime_)));
          set_has_nocontraltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_dbserverid;
        break;
      }

      // required int32 dbserverid = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dbserverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dbserverid_)));
          set_has_dbserverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_webserverid;
        break;
      }

      // required int32 webserverid = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_webserverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &webserverid_)));
          set_has_webserverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_urllogincheck;
        break;
      }

      // required string urllogincheck = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_urllogincheck:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_urllogincheck()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->urllogincheck().data(), this->urllogincheck().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_urlprintdot;
        break;
      }

      // required string urlprintdot = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_urlprintdot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_urlprintdot()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->urlprintdot().data(), this->urlprintdot().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_urlmimessage;
        break;
      }

      // required string urlmimessage = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_urlmimessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_urlmimessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->urlmimessage().data(), this->urlmimessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_sdkcheck;
        break;
      }

      // required bool sdkcheck = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sdkcheck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sdkcheck_)));
          set_has_sdkcheck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_gateinfo;
        break;
      }

      // required .PBGate gateinfo = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gateinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gateinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_addgold;
        break;
      }

      // required int32 addgold = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addgold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addgold_)));
          set_has_addgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_adddiamond;
        break;
      }

      // required int32 adddiamond = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adddiamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adddiamond_)));
          set_has_adddiamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBHallConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 proxytimeout = 1;
  if (has_proxytimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->proxytimeout(), output);
  }

  // required int32 serverid = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->serverid(), output);
  }

  // repeated .PBProxy proxyinfo = 3;
  for (int i = 0; i < this->proxyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->proxyinfo(i), output);
  }

  // repeated .PBLog loginfo = 4;
  for (int i = 0; i < this->loginfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->loginfo(i), output);
  }

  // required int64 keepalive = 5;
  if (has_keepalive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->keepalive(), output);
  }

  // required int64 servertick = 6;
  if (has_servertick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->servertick(), output);
  }

  // required int64 sessiontimeout = 7;
  if (has_sessiontimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->sessiontimeout(), output);
  }

  // required int64 perffrequecny = 8;
  if (has_perffrequecny()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->perffrequecny(), output);
  }

  // required bool encrypt = 9;
  if (has_encrypt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->encrypt(), output);
  }

  // required int64 autosave = 10;
  if (has_autosave()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->autosave(), output);
  }

  // required int64 logintimeout = 11;
  if (has_logintimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->logintimeout(), output);
  }

  // required int64 nocontraltime = 12;
  if (has_nocontraltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->nocontraltime(), output);
  }

  // required int32 dbserverid = 13;
  if (has_dbserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->dbserverid(), output);
  }

  // required int32 webserverid = 14;
  if (has_webserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->webserverid(), output);
  }

  // required string urllogincheck = 15;
  if (has_urllogincheck()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->urllogincheck().data(), this->urllogincheck().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->urllogincheck(), output);
  }

  // required string urlprintdot = 16;
  if (has_urlprintdot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->urlprintdot().data(), this->urlprintdot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->urlprintdot(), output);
  }

  // required string urlmimessage = 17;
  if (has_urlmimessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->urlmimessage().data(), this->urlmimessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->urlmimessage(), output);
  }

  // required bool sdkcheck = 18;
  if (has_sdkcheck()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->sdkcheck(), output);
  }

  // required .PBGate gateinfo = 19;
  if (has_gateinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->gateinfo(), output);
  }

  // required int32 addgold = 20;
  if (has_addgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->addgold(), output);
  }

  // required int32 adddiamond = 21;
  if (has_adddiamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->adddiamond(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBHallConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 proxytimeout = 1;
  if (has_proxytimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->proxytimeout(), target);
  }

  // required int32 serverid = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->serverid(), target);
  }

  // repeated .PBProxy proxyinfo = 3;
  for (int i = 0; i < this->proxyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->proxyinfo(i), target);
  }

  // repeated .PBLog loginfo = 4;
  for (int i = 0; i < this->loginfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->loginfo(i), target);
  }

  // required int64 keepalive = 5;
  if (has_keepalive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->keepalive(), target);
  }

  // required int64 servertick = 6;
  if (has_servertick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->servertick(), target);
  }

  // required int64 sessiontimeout = 7;
  if (has_sessiontimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->sessiontimeout(), target);
  }

  // required int64 perffrequecny = 8;
  if (has_perffrequecny()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->perffrequecny(), target);
  }

  // required bool encrypt = 9;
  if (has_encrypt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->encrypt(), target);
  }

  // required int64 autosave = 10;
  if (has_autosave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->autosave(), target);
  }

  // required int64 logintimeout = 11;
  if (has_logintimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->logintimeout(), target);
  }

  // required int64 nocontraltime = 12;
  if (has_nocontraltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->nocontraltime(), target);
  }

  // required int32 dbserverid = 13;
  if (has_dbserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->dbserverid(), target);
  }

  // required int32 webserverid = 14;
  if (has_webserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->webserverid(), target);
  }

  // required string urllogincheck = 15;
  if (has_urllogincheck()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->urllogincheck().data(), this->urllogincheck().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->urllogincheck(), target);
  }

  // required string urlprintdot = 16;
  if (has_urlprintdot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->urlprintdot().data(), this->urlprintdot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->urlprintdot(), target);
  }

  // required string urlmimessage = 17;
  if (has_urlmimessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->urlmimessage().data(), this->urlmimessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->urlmimessage(), target);
  }

  // required bool sdkcheck = 18;
  if (has_sdkcheck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->sdkcheck(), target);
  }

  // required .PBGate gateinfo = 19;
  if (has_gateinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->gateinfo(), target);
  }

  // required int32 addgold = 20;
  if (has_addgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->addgold(), target);
  }

  // required int32 adddiamond = 21;
  if (has_adddiamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->adddiamond(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBHallConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 proxytimeout = 1;
    if (has_proxytimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->proxytimeout());
    }

    // required int32 serverid = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

    // required int64 keepalive = 5;
    if (has_keepalive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->keepalive());
    }

    // required int64 servertick = 6;
    if (has_servertick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->servertick());
    }

    // required int64 sessiontimeout = 7;
    if (has_sessiontimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sessiontimeout());
    }

    // required int64 perffrequecny = 8;
    if (has_perffrequecny()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->perffrequecny());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool encrypt = 9;
    if (has_encrypt()) {
      total_size += 1 + 1;
    }

    // required int64 autosave = 10;
    if (has_autosave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->autosave());
    }

    // required int64 logintimeout = 11;
    if (has_logintimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->logintimeout());
    }

    // required int64 nocontraltime = 12;
    if (has_nocontraltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nocontraltime());
    }

    // required int32 dbserverid = 13;
    if (has_dbserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dbserverid());
    }

    // required int32 webserverid = 14;
    if (has_webserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->webserverid());
    }

    // required string urllogincheck = 15;
    if (has_urllogincheck()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->urllogincheck());
    }

    // required string urlprintdot = 16;
    if (has_urlprintdot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->urlprintdot());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required string urlmimessage = 17;
    if (has_urlmimessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->urlmimessage());
    }

    // required bool sdkcheck = 18;
    if (has_sdkcheck()) {
      total_size += 2 + 1;
    }

    // required .PBGate gateinfo = 19;
    if (has_gateinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gateinfo());
    }

    // required int32 addgold = 20;
    if (has_addgold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addgold());
    }

    // required int32 adddiamond = 21;
    if (has_adddiamond()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adddiamond());
    }

  }
  // repeated .PBProxy proxyinfo = 3;
  total_size += 1 * this->proxyinfo_size();
  for (int i = 0; i < this->proxyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->proxyinfo(i));
  }

  // repeated .PBLog loginfo = 4;
  total_size += 1 * this->loginfo_size();
  for (int i = 0; i < this->loginfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->loginfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBHallConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBHallConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBHallConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBHallConfig::MergeFrom(const PBHallConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  proxyinfo_.MergeFrom(from.proxyinfo_);
  loginfo_.MergeFrom(from.loginfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proxytimeout()) {
      set_proxytimeout(from.proxytimeout());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_keepalive()) {
      set_keepalive(from.keepalive());
    }
    if (from.has_servertick()) {
      set_servertick(from.servertick());
    }
    if (from.has_sessiontimeout()) {
      set_sessiontimeout(from.sessiontimeout());
    }
    if (from.has_perffrequecny()) {
      set_perffrequecny(from.perffrequecny());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_encrypt()) {
      set_encrypt(from.encrypt());
    }
    if (from.has_autosave()) {
      set_autosave(from.autosave());
    }
    if (from.has_logintimeout()) {
      set_logintimeout(from.logintimeout());
    }
    if (from.has_nocontraltime()) {
      set_nocontraltime(from.nocontraltime());
    }
    if (from.has_dbserverid()) {
      set_dbserverid(from.dbserverid());
    }
    if (from.has_webserverid()) {
      set_webserverid(from.webserverid());
    }
    if (from.has_urllogincheck()) {
      set_urllogincheck(from.urllogincheck());
    }
    if (from.has_urlprintdot()) {
      set_urlprintdot(from.urlprintdot());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_urlmimessage()) {
      set_urlmimessage(from.urlmimessage());
    }
    if (from.has_sdkcheck()) {
      set_sdkcheck(from.sdkcheck());
    }
    if (from.has_gateinfo()) {
      mutable_gateinfo()->::PBGate::MergeFrom(from.gateinfo());
    }
    if (from.has_addgold()) {
      set_addgold(from.addgold());
    }
    if (from.has_adddiamond()) {
      set_adddiamond(from.adddiamond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBHallConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBHallConfig::CopyFrom(const PBHallConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBHallConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x001ffff3) != 0x001ffff3) return false;

  for (int i = 0; i < proxyinfo_size(); i++) {
    if (!this->proxyinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < loginfo_size(); i++) {
    if (!this->loginfo(i).IsInitialized()) return false;
  }
  if (has_gateinfo()) {
    if (!this->gateinfo().IsInitialized()) return false;
  }
  return true;
}

void PBHallConfig::Swap(PBHallConfig* other) {
  if (other != this) {
    std::swap(proxytimeout_, other->proxytimeout_);
    std::swap(serverid_, other->serverid_);
    proxyinfo_.Swap(&other->proxyinfo_);
    loginfo_.Swap(&other->loginfo_);
    std::swap(keepalive_, other->keepalive_);
    std::swap(servertick_, other->servertick_);
    std::swap(sessiontimeout_, other->sessiontimeout_);
    std::swap(perffrequecny_, other->perffrequecny_);
    std::swap(encrypt_, other->encrypt_);
    std::swap(autosave_, other->autosave_);
    std::swap(logintimeout_, other->logintimeout_);
    std::swap(nocontraltime_, other->nocontraltime_);
    std::swap(dbserverid_, other->dbserverid_);
    std::swap(webserverid_, other->webserverid_);
    std::swap(urllogincheck_, other->urllogincheck_);
    std::swap(urlprintdot_, other->urlprintdot_);
    std::swap(urlmimessage_, other->urlmimessage_);
    std::swap(sdkcheck_, other->sdkcheck_);
    std::swap(gateinfo_, other->gateinfo_);
    std::swap(addgold_, other->addgold_);
    std::swap(adddiamond_, other->adddiamond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBHallConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBHallConfig_descriptor_;
  metadata.reflection = PBHallConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBRoomConfig::kProxytimeoutFieldNumber;
const int PBRoomConfig::kServeridFieldNumber;
const int PBRoomConfig::kProxyinfoFieldNumber;
const int PBRoomConfig::kLoginfoFieldNumber;
const int PBRoomConfig::kKeepaliveFieldNumber;
const int PBRoomConfig::kServertickFieldNumber;
const int PBRoomConfig::kSessiontimeoutFieldNumber;
const int PBRoomConfig::kPerffrequecnyFieldNumber;
const int PBRoomConfig::kEncryptFieldNumber;
const int PBRoomConfig::kGateinfoFieldNumber;
#endif  // !_MSC_VER

PBRoomConfig::PBRoomConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRoomConfig::InitAsDefaultInstance() {
  gateinfo_ = const_cast< ::PBGate*>(&::PBGate::default_instance());
}

PBRoomConfig::PBRoomConfig(const PBRoomConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRoomConfig::SharedCtor() {
  _cached_size_ = 0;
  proxytimeout_ = GOOGLE_LONGLONG(0);
  serverid_ = 0;
  keepalive_ = GOOGLE_LONGLONG(0);
  servertick_ = GOOGLE_LONGLONG(0);
  sessiontimeout_ = GOOGLE_LONGLONG(0);
  perffrequecny_ = GOOGLE_LONGLONG(0);
  encrypt_ = false;
  gateinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRoomConfig::~PBRoomConfig() {
  SharedDtor();
}

void PBRoomConfig::SharedDtor() {
  if (this != default_instance_) {
    delete gateinfo_;
  }
}

void PBRoomConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBRoomConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRoomConfig_descriptor_;
}

const PBRoomConfig& PBRoomConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_configure_2eproto();
  return *default_instance_;
}

PBRoomConfig* PBRoomConfig::default_instance_ = NULL;

PBRoomConfig* PBRoomConfig::New() const {
  return new PBRoomConfig;
}

void PBRoomConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proxytimeout_ = GOOGLE_LONGLONG(0);
    serverid_ = 0;
    keepalive_ = GOOGLE_LONGLONG(0);
    servertick_ = GOOGLE_LONGLONG(0);
    sessiontimeout_ = GOOGLE_LONGLONG(0);
    perffrequecny_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    encrypt_ = false;
    if (has_gateinfo()) {
      if (gateinfo_ != NULL) gateinfo_->::PBGate::Clear();
    }
  }
  proxyinfo_.Clear();
  loginfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRoomConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 proxytimeout = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &proxytimeout_)));
          set_has_proxytimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverid;
        break;
      }

      // required int32 serverid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_proxyinfo;
        break;
      }

      // repeated .PBProxy proxyinfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proxyinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_proxyinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_proxyinfo;
        if (input->ExpectTag(34)) goto parse_loginfo;
        break;
      }

      // repeated .PBLog loginfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loginfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_loginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_loginfo;
        if (input->ExpectTag(40)) goto parse_keepalive;
        break;
      }

      // required int64 keepalive = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keepalive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &keepalive_)));
          set_has_keepalive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_servertick;
        break;
      }

      // required int64 servertick = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_servertick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &servertick_)));
          set_has_servertick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sessiontimeout;
        break;
      }

      // required int64 sessiontimeout = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sessiontimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sessiontimeout_)));
          set_has_sessiontimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_perffrequecny;
        break;
      }

      // required int64 perffrequecny = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_perffrequecny:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &perffrequecny_)));
          set_has_perffrequecny();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_encrypt;
        break;
      }

      // required bool encrypt = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_encrypt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_)));
          set_has_encrypt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_gateinfo;
        break;
      }

      // required .PBGate gateinfo = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gateinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gateinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRoomConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 proxytimeout = 1;
  if (has_proxytimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->proxytimeout(), output);
  }

  // required int32 serverid = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->serverid(), output);
  }

  // repeated .PBProxy proxyinfo = 3;
  for (int i = 0; i < this->proxyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->proxyinfo(i), output);
  }

  // repeated .PBLog loginfo = 4;
  for (int i = 0; i < this->loginfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->loginfo(i), output);
  }

  // required int64 keepalive = 5;
  if (has_keepalive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->keepalive(), output);
  }

  // required int64 servertick = 6;
  if (has_servertick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->servertick(), output);
  }

  // required int64 sessiontimeout = 7;
  if (has_sessiontimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->sessiontimeout(), output);
  }

  // required int64 perffrequecny = 8;
  if (has_perffrequecny()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->perffrequecny(), output);
  }

  // required bool encrypt = 9;
  if (has_encrypt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->encrypt(), output);
  }

  // required .PBGate gateinfo = 10;
  if (has_gateinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->gateinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRoomConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 proxytimeout = 1;
  if (has_proxytimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->proxytimeout(), target);
  }

  // required int32 serverid = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->serverid(), target);
  }

  // repeated .PBProxy proxyinfo = 3;
  for (int i = 0; i < this->proxyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->proxyinfo(i), target);
  }

  // repeated .PBLog loginfo = 4;
  for (int i = 0; i < this->loginfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->loginfo(i), target);
  }

  // required int64 keepalive = 5;
  if (has_keepalive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->keepalive(), target);
  }

  // required int64 servertick = 6;
  if (has_servertick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->servertick(), target);
  }

  // required int64 sessiontimeout = 7;
  if (has_sessiontimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->sessiontimeout(), target);
  }

  // required int64 perffrequecny = 8;
  if (has_perffrequecny()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->perffrequecny(), target);
  }

  // required bool encrypt = 9;
  if (has_encrypt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->encrypt(), target);
  }

  // required .PBGate gateinfo = 10;
  if (has_gateinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->gateinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRoomConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 proxytimeout = 1;
    if (has_proxytimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->proxytimeout());
    }

    // required int32 serverid = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

    // required int64 keepalive = 5;
    if (has_keepalive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->keepalive());
    }

    // required int64 servertick = 6;
    if (has_servertick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->servertick());
    }

    // required int64 sessiontimeout = 7;
    if (has_sessiontimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sessiontimeout());
    }

    // required int64 perffrequecny = 8;
    if (has_perffrequecny()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->perffrequecny());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool encrypt = 9;
    if (has_encrypt()) {
      total_size += 1 + 1;
    }

    // required .PBGate gateinfo = 10;
    if (has_gateinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gateinfo());
    }

  }
  // repeated .PBProxy proxyinfo = 3;
  total_size += 1 * this->proxyinfo_size();
  for (int i = 0; i < this->proxyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->proxyinfo(i));
  }

  // repeated .PBLog loginfo = 4;
  total_size += 1 * this->loginfo_size();
  for (int i = 0; i < this->loginfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->loginfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBRoomConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRoomConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRoomConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRoomConfig::MergeFrom(const PBRoomConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  proxyinfo_.MergeFrom(from.proxyinfo_);
  loginfo_.MergeFrom(from.loginfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proxytimeout()) {
      set_proxytimeout(from.proxytimeout());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_keepalive()) {
      set_keepalive(from.keepalive());
    }
    if (from.has_servertick()) {
      set_servertick(from.servertick());
    }
    if (from.has_sessiontimeout()) {
      set_sessiontimeout(from.sessiontimeout());
    }
    if (from.has_perffrequecny()) {
      set_perffrequecny(from.perffrequecny());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_encrypt()) {
      set_encrypt(from.encrypt());
    }
    if (from.has_gateinfo()) {
      mutable_gateinfo()->::PBGate::MergeFrom(from.gateinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRoomConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRoomConfig::CopyFrom(const PBRoomConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBRoomConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003f3) != 0x000003f3) return false;

  for (int i = 0; i < proxyinfo_size(); i++) {
    if (!this->proxyinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < loginfo_size(); i++) {
    if (!this->loginfo(i).IsInitialized()) return false;
  }
  if (has_gateinfo()) {
    if (!this->gateinfo().IsInitialized()) return false;
  }
  return true;
}

void PBRoomConfig::Swap(PBRoomConfig* other) {
  if (other != this) {
    std::swap(proxytimeout_, other->proxytimeout_);
    std::swap(serverid_, other->serverid_);
    proxyinfo_.Swap(&other->proxyinfo_);
    loginfo_.Swap(&other->loginfo_);
    std::swap(keepalive_, other->keepalive_);
    std::swap(servertick_, other->servertick_);
    std::swap(sessiontimeout_, other->sessiontimeout_);
    std::swap(perffrequecny_, other->perffrequecny_);
    std::swap(encrypt_, other->encrypt_);
    std::swap(gateinfo_, other->gateinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBRoomConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBRoomConfig_descriptor_;
  metadata.reflection = PBRoomConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBProxyConfig::kIdFieldNumber;
const int PBProxyConfig::kPortFieldNumber;
#endif  // !_MSC_VER

PBProxyConfig::PBProxyConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBProxyConfig::InitAsDefaultInstance() {
}

PBProxyConfig::PBProxyConfig(const PBProxyConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBProxyConfig::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBProxyConfig::~PBProxyConfig() {
  SharedDtor();
}

void PBProxyConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBProxyConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBProxyConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBProxyConfig_descriptor_;
}

const PBProxyConfig& PBProxyConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_configure_2eproto();
  return *default_instance_;
}

PBProxyConfig* PBProxyConfig::default_instance_ = NULL;

PBProxyConfig* PBProxyConfig::New() const {
  return new PBProxyConfig;
}

void PBProxyConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBProxyConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBProxyConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBProxyConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBProxyConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBProxyConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBProxyConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBProxyConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBProxyConfig::MergeFrom(const PBProxyConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBProxyConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBProxyConfig::CopyFrom(const PBProxyConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBProxyConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PBProxyConfig::Swap(PBProxyConfig* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBProxyConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBProxyConfig_descriptor_;
  metadata.reflection = PBProxyConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBTcpConfig::kGateinfoFieldNumber;
const int PBTcpConfig::kLoginfoFieldNumber;
const int PBTcpConfig::kListenportFieldNumber;
const int PBTcpConfig::kChecktimegapFieldNumber;
const int PBTcpConfig::kSockettimeoutFieldNumber;
const int PBTcpConfig::kConntimeoutFieldNumber;
const int PBTcpConfig::kMaxlogcountFieldNumber;
const int PBTcpConfig::kTcpbuflenFieldNumber;
const int PBTcpConfig::kWritestatgapFieldNumber;
const int PBTcpConfig::kTcpserveridFieldNumber;
const int PBTcpConfig::kGatetimeoutFieldNumber;
const int PBTcpConfig::kKeepaliveFieldNumber;
#endif  // !_MSC_VER

PBTcpConfig::PBTcpConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTcpConfig::InitAsDefaultInstance() {
  gateinfo_ = const_cast< ::PBGate*>(&::PBGate::default_instance());
}

PBTcpConfig::PBTcpConfig(const PBTcpConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTcpConfig::SharedCtor() {
  _cached_size_ = 0;
  gateinfo_ = NULL;
  listenport_ = 0;
  checktimegap_ = 0;
  sockettimeout_ = 0;
  conntimeout_ = 0;
  maxlogcount_ = 0;
  tcpbuflen_ = 0;
  writestatgap_ = 0;
  tcpserverid_ = 0;
  gatetimeout_ = GOOGLE_LONGLONG(0);
  keepalive_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTcpConfig::~PBTcpConfig() {
  SharedDtor();
}

void PBTcpConfig::SharedDtor() {
  if (this != default_instance_) {
    delete gateinfo_;
  }
}

void PBTcpConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBTcpConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTcpConfig_descriptor_;
}

const PBTcpConfig& PBTcpConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_configure_2eproto();
  return *default_instance_;
}

PBTcpConfig* PBTcpConfig::default_instance_ = NULL;

PBTcpConfig* PBTcpConfig::New() const {
  return new PBTcpConfig;
}

void PBTcpConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gateinfo()) {
      if (gateinfo_ != NULL) gateinfo_->::PBGate::Clear();
    }
    listenport_ = 0;
    checktimegap_ = 0;
    sockettimeout_ = 0;
    conntimeout_ = 0;
    maxlogcount_ = 0;
    tcpbuflen_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    writestatgap_ = 0;
    tcpserverid_ = 0;
    gatetimeout_ = GOOGLE_LONGLONG(0);
    keepalive_ = GOOGLE_LONGLONG(0);
  }
  loginfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTcpConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PBGate gateinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gateinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_loginfo;
        break;
      }

      // repeated .PBLog loginfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loginfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_loginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_loginfo;
        if (input->ExpectTag(24)) goto parse_listenport;
        break;
      }

      // required int32 listenport = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_listenport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &listenport_)));
          set_has_listenport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_checktimegap;
        break;
      }

      // required int32 checktimegap = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_checktimegap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checktimegap_)));
          set_has_checktimegap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sockettimeout;
        break;
      }

      // required int32 sockettimeout = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sockettimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sockettimeout_)));
          set_has_sockettimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_conntimeout;
        break;
      }

      // required int32 conntimeout = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_conntimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &conntimeout_)));
          set_has_conntimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_maxlogcount;
        break;
      }

      // required int32 maxlogcount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxlogcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxlogcount_)));
          set_has_maxlogcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_tcpbuflen;
        break;
      }

      // required int32 tcpbuflen = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tcpbuflen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tcpbuflen_)));
          set_has_tcpbuflen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_writestatgap;
        break;
      }

      // required int32 writestatgap = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_writestatgap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &writestatgap_)));
          set_has_writestatgap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_tcpserverid;
        break;
      }

      // required int32 tcpserverid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tcpserverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tcpserverid_)));
          set_has_tcpserverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_gatetimeout;
        break;
      }

      // required int64 gatetimeout = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gatetimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gatetimeout_)));
          set_has_gatetimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_keepalive;
        break;
      }

      // required int64 keepalive = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keepalive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &keepalive_)));
          set_has_keepalive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTcpConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PBGate gateinfo = 1;
  if (has_gateinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gateinfo(), output);
  }

  // repeated .PBLog loginfo = 2;
  for (int i = 0; i < this->loginfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->loginfo(i), output);
  }

  // required int32 listenport = 3;
  if (has_listenport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->listenport(), output);
  }

  // required int32 checktimegap = 4;
  if (has_checktimegap()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->checktimegap(), output);
  }

  // required int32 sockettimeout = 5;
  if (has_sockettimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sockettimeout(), output);
  }

  // required int32 conntimeout = 6;
  if (has_conntimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->conntimeout(), output);
  }

  // required int32 maxlogcount = 7;
  if (has_maxlogcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->maxlogcount(), output);
  }

  // required int32 tcpbuflen = 8;
  if (has_tcpbuflen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->tcpbuflen(), output);
  }

  // required int32 writestatgap = 9;
  if (has_writestatgap()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->writestatgap(), output);
  }

  // required int32 tcpserverid = 10;
  if (has_tcpserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->tcpserverid(), output);
  }

  // required int64 gatetimeout = 11;
  if (has_gatetimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->gatetimeout(), output);
  }

  // required int64 keepalive = 12;
  if (has_keepalive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->keepalive(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTcpConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PBGate gateinfo = 1;
  if (has_gateinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gateinfo(), target);
  }

  // repeated .PBLog loginfo = 2;
  for (int i = 0; i < this->loginfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->loginfo(i), target);
  }

  // required int32 listenport = 3;
  if (has_listenport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->listenport(), target);
  }

  // required int32 checktimegap = 4;
  if (has_checktimegap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->checktimegap(), target);
  }

  // required int32 sockettimeout = 5;
  if (has_sockettimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sockettimeout(), target);
  }

  // required int32 conntimeout = 6;
  if (has_conntimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->conntimeout(), target);
  }

  // required int32 maxlogcount = 7;
  if (has_maxlogcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->maxlogcount(), target);
  }

  // required int32 tcpbuflen = 8;
  if (has_tcpbuflen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->tcpbuflen(), target);
  }

  // required int32 writestatgap = 9;
  if (has_writestatgap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->writestatgap(), target);
  }

  // required int32 tcpserverid = 10;
  if (has_tcpserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->tcpserverid(), target);
  }

  // required int64 gatetimeout = 11;
  if (has_gatetimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->gatetimeout(), target);
  }

  // required int64 keepalive = 12;
  if (has_keepalive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->keepalive(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTcpConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PBGate gateinfo = 1;
    if (has_gateinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gateinfo());
    }

    // required int32 listenport = 3;
    if (has_listenport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->listenport());
    }

    // required int32 checktimegap = 4;
    if (has_checktimegap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checktimegap());
    }

    // required int32 sockettimeout = 5;
    if (has_sockettimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sockettimeout());
    }

    // required int32 conntimeout = 6;
    if (has_conntimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->conntimeout());
    }

    // required int32 maxlogcount = 7;
    if (has_maxlogcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxlogcount());
    }

    // required int32 tcpbuflen = 8;
    if (has_tcpbuflen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tcpbuflen());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 writestatgap = 9;
    if (has_writestatgap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->writestatgap());
    }

    // required int32 tcpserverid = 10;
    if (has_tcpserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tcpserverid());
    }

    // required int64 gatetimeout = 11;
    if (has_gatetimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gatetimeout());
    }

    // required int64 keepalive = 12;
    if (has_keepalive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->keepalive());
    }

  }
  // repeated .PBLog loginfo = 2;
  total_size += 1 * this->loginfo_size();
  for (int i = 0; i < this->loginfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->loginfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBTcpConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTcpConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTcpConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTcpConfig::MergeFrom(const PBTcpConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  loginfo_.MergeFrom(from.loginfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateinfo()) {
      mutable_gateinfo()->::PBGate::MergeFrom(from.gateinfo());
    }
    if (from.has_listenport()) {
      set_listenport(from.listenport());
    }
    if (from.has_checktimegap()) {
      set_checktimegap(from.checktimegap());
    }
    if (from.has_sockettimeout()) {
      set_sockettimeout(from.sockettimeout());
    }
    if (from.has_conntimeout()) {
      set_conntimeout(from.conntimeout());
    }
    if (from.has_maxlogcount()) {
      set_maxlogcount(from.maxlogcount());
    }
    if (from.has_tcpbuflen()) {
      set_tcpbuflen(from.tcpbuflen());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_writestatgap()) {
      set_writestatgap(from.writestatgap());
    }
    if (from.has_tcpserverid()) {
      set_tcpserverid(from.tcpserverid());
    }
    if (from.has_gatetimeout()) {
      set_gatetimeout(from.gatetimeout());
    }
    if (from.has_keepalive()) {
      set_keepalive(from.keepalive());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTcpConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTcpConfig::CopyFrom(const PBTcpConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTcpConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000ffd) != 0x00000ffd) return false;

  if (has_gateinfo()) {
    if (!this->gateinfo().IsInitialized()) return false;
  }
  for (int i = 0; i < loginfo_size(); i++) {
    if (!this->loginfo(i).IsInitialized()) return false;
  }
  return true;
}

void PBTcpConfig::Swap(PBTcpConfig* other) {
  if (other != this) {
    std::swap(gateinfo_, other->gateinfo_);
    loginfo_.Swap(&other->loginfo_);
    std::swap(listenport_, other->listenport_);
    std::swap(checktimegap_, other->checktimegap_);
    std::swap(sockettimeout_, other->sockettimeout_);
    std::swap(conntimeout_, other->conntimeout_);
    std::swap(maxlogcount_, other->maxlogcount_);
    std::swap(tcpbuflen_, other->tcpbuflen_);
    std::swap(writestatgap_, other->writestatgap_);
    std::swap(tcpserverid_, other->tcpserverid_);
    std::swap(gatetimeout_, other->gatetimeout_);
    std::swap(keepalive_, other->keepalive_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBTcpConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBTcpConfig_descriptor_;
  metadata.reflection = PBTcpConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGateConfig::kIdFieldNumber;
const int PBGateConfig::kPortFieldNumber;
#endif  // !_MSC_VER

PBGateConfig::PBGateConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGateConfig::InitAsDefaultInstance() {
}

PBGateConfig::PBGateConfig(const PBGateConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGateConfig::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGateConfig::~PBGateConfig() {
  SharedDtor();
}

void PBGateConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBGateConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGateConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGateConfig_descriptor_;
}

const PBGateConfig& PBGateConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_configure_2eproto();
  return *default_instance_;
}

PBGateConfig* PBGateConfig::default_instance_ = NULL;

PBGateConfig* PBGateConfig::New() const {
  return new PBGateConfig;
}

void PBGateConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGateConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGateConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGateConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGateConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGateConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGateConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGateConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGateConfig::MergeFrom(const PBGateConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGateConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGateConfig::CopyFrom(const PBGateConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGateConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PBGateConfig::Swap(PBGateConfig* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGateConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGateConfig_descriptor_;
  metadata.reflection = PBGateConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBClientConfig::kIpFieldNumber;
const int PBClientConfig::kPortFieldNumber;
const int PBClientConfig::kConnnumFieldNumber;
#endif  // !_MSC_VER

PBClientConfig::PBClientConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBClientConfig::InitAsDefaultInstance() {
}

PBClientConfig::PBClientConfig(const PBClientConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBClientConfig::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  connnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBClientConfig::~PBClientConfig() {
  SharedDtor();
}

void PBClientConfig::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void PBClientConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBClientConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBClientConfig_descriptor_;
}

const PBClientConfig& PBClientConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_configure_2eproto();
  return *default_instance_;
}

PBClientConfig* PBClientConfig::default_instance_ = NULL;

PBClientConfig* PBClientConfig::New() const {
  return new PBClientConfig;
}

void PBClientConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
    connnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBClientConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_connnum;
        break;
      }

      // required int32 connnum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connnum_)));
          set_has_connnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBClientConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }

  // required int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // required int32 connnum = 3;
  if (has_connnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->connnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBClientConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // required int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // required int32 connnum = 3;
  if (has_connnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->connnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBClientConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // required int32 connnum = 3;
    if (has_connnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->connnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBClientConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBClientConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBClientConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBClientConfig::MergeFrom(const PBClientConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_connnum()) {
      set_connnum(from.connnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBClientConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBClientConfig::CopyFrom(const PBClientConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBClientConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PBClientConfig::Swap(PBClientConfig* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(connnum_, other->connnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBClientConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBClientConfig_descriptor_;
  metadata.reflection = PBClientConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CConfigure::kDbconfigFieldNumber;
const int CConfigure::kHallconfigFieldNumber;
const int CConfigure::kProxyconfigFieldNumber;
const int CConfigure::kTcpconfigFieldNumber;
const int CConfigure::kGateconfigFieldNumber;
const int CConfigure::kClientconfigFieldNumber;
const int CConfigure::kRoomconfigFieldNumber;
#endif  // !_MSC_VER

CConfigure::CConfigure()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CConfigure::InitAsDefaultInstance() {
  dbconfig_ = const_cast< ::PBDBConfig*>(&::PBDBConfig::default_instance());
  hallconfig_ = const_cast< ::PBHallConfig*>(&::PBHallConfig::default_instance());
  proxyconfig_ = const_cast< ::PBProxyConfig*>(&::PBProxyConfig::default_instance());
  tcpconfig_ = const_cast< ::PBTcpConfig*>(&::PBTcpConfig::default_instance());
  gateconfig_ = const_cast< ::PBGateConfig*>(&::PBGateConfig::default_instance());
  clientconfig_ = const_cast< ::PBClientConfig*>(&::PBClientConfig::default_instance());
  roomconfig_ = const_cast< ::PBRoomConfig*>(&::PBRoomConfig::default_instance());
}

CConfigure::CConfigure(const CConfigure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CConfigure::SharedCtor() {
  _cached_size_ = 0;
  dbconfig_ = NULL;
  hallconfig_ = NULL;
  proxyconfig_ = NULL;
  tcpconfig_ = NULL;
  gateconfig_ = NULL;
  clientconfig_ = NULL;
  roomconfig_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CConfigure::~CConfigure() {
  SharedDtor();
}

void CConfigure::SharedDtor() {
  if (this != default_instance_) {
    delete dbconfig_;
    delete hallconfig_;
    delete proxyconfig_;
    delete tcpconfig_;
    delete gateconfig_;
    delete clientconfig_;
    delete roomconfig_;
  }
}

void CConfigure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CConfigure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CConfigure_descriptor_;
}

const CConfigure& CConfigure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_configure_2eproto();
  return *default_instance_;
}

CConfigure* CConfigure::default_instance_ = NULL;

CConfigure* CConfigure::New() const {
  return new CConfigure;
}

void CConfigure::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dbconfig()) {
      if (dbconfig_ != NULL) dbconfig_->::PBDBConfig::Clear();
    }
    if (has_hallconfig()) {
      if (hallconfig_ != NULL) hallconfig_->::PBHallConfig::Clear();
    }
    if (has_proxyconfig()) {
      if (proxyconfig_ != NULL) proxyconfig_->::PBProxyConfig::Clear();
    }
    if (has_tcpconfig()) {
      if (tcpconfig_ != NULL) tcpconfig_->::PBTcpConfig::Clear();
    }
    if (has_gateconfig()) {
      if (gateconfig_ != NULL) gateconfig_->::PBGateConfig::Clear();
    }
    if (has_clientconfig()) {
      if (clientconfig_ != NULL) clientconfig_->::PBClientConfig::Clear();
    }
    if (has_roomconfig()) {
      if (roomconfig_ != NULL) roomconfig_->::PBRoomConfig::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CConfigure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBDBConfig dbconfig = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dbconfig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hallconfig;
        break;
      }

      // optional .PBHallConfig hallconfig = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hallconfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hallconfig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_proxyconfig;
        break;
      }

      // optional .PBProxyConfig proxyconfig = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proxyconfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proxyconfig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tcpconfig;
        break;
      }

      // optional .PBTcpConfig tcpconfig = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tcpconfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tcpconfig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_gateconfig;
        break;
      }

      // optional .PBGateConfig gateconfig = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gateconfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gateconfig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_clientconfig;
        break;
      }

      // optional .PBClientConfig clientconfig = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clientconfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clientconfig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_roomconfig;
        break;
      }

      // optional .PBRoomConfig roomconfig = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomconfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roomconfig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CConfigure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBDBConfig dbconfig = 1;
  if (has_dbconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dbconfig(), output);
  }

  // optional .PBHallConfig hallconfig = 2;
  if (has_hallconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hallconfig(), output);
  }

  // optional .PBProxyConfig proxyconfig = 3;
  if (has_proxyconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->proxyconfig(), output);
  }

  // optional .PBTcpConfig tcpconfig = 4;
  if (has_tcpconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tcpconfig(), output);
  }

  // optional .PBGateConfig gateconfig = 5;
  if (has_gateconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->gateconfig(), output);
  }

  // optional .PBClientConfig clientconfig = 6;
  if (has_clientconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->clientconfig(), output);
  }

  // optional .PBRoomConfig roomconfig = 7;
  if (has_roomconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->roomconfig(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CConfigure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBDBConfig dbconfig = 1;
  if (has_dbconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dbconfig(), target);
  }

  // optional .PBHallConfig hallconfig = 2;
  if (has_hallconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hallconfig(), target);
  }

  // optional .PBProxyConfig proxyconfig = 3;
  if (has_proxyconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->proxyconfig(), target);
  }

  // optional .PBTcpConfig tcpconfig = 4;
  if (has_tcpconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tcpconfig(), target);
  }

  // optional .PBGateConfig gateconfig = 5;
  if (has_gateconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->gateconfig(), target);
  }

  // optional .PBClientConfig clientconfig = 6;
  if (has_clientconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->clientconfig(), target);
  }

  // optional .PBRoomConfig roomconfig = 7;
  if (has_roomconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->roomconfig(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CConfigure::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBDBConfig dbconfig = 1;
    if (has_dbconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dbconfig());
    }

    // optional .PBHallConfig hallconfig = 2;
    if (has_hallconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hallconfig());
    }

    // optional .PBProxyConfig proxyconfig = 3;
    if (has_proxyconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->proxyconfig());
    }

    // optional .PBTcpConfig tcpconfig = 4;
    if (has_tcpconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tcpconfig());
    }

    // optional .PBGateConfig gateconfig = 5;
    if (has_gateconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gateconfig());
    }

    // optional .PBClientConfig clientconfig = 6;
    if (has_clientconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clientconfig());
    }

    // optional .PBRoomConfig roomconfig = 7;
    if (has_roomconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roomconfig());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CConfigure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CConfigure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CConfigure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CConfigure::MergeFrom(const CConfigure& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dbconfig()) {
      mutable_dbconfig()->::PBDBConfig::MergeFrom(from.dbconfig());
    }
    if (from.has_hallconfig()) {
      mutable_hallconfig()->::PBHallConfig::MergeFrom(from.hallconfig());
    }
    if (from.has_proxyconfig()) {
      mutable_proxyconfig()->::PBProxyConfig::MergeFrom(from.proxyconfig());
    }
    if (from.has_tcpconfig()) {
      mutable_tcpconfig()->::PBTcpConfig::MergeFrom(from.tcpconfig());
    }
    if (from.has_gateconfig()) {
      mutable_gateconfig()->::PBGateConfig::MergeFrom(from.gateconfig());
    }
    if (from.has_clientconfig()) {
      mutable_clientconfig()->::PBClientConfig::MergeFrom(from.clientconfig());
    }
    if (from.has_roomconfig()) {
      mutable_roomconfig()->::PBRoomConfig::MergeFrom(from.roomconfig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CConfigure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CConfigure::CopyFrom(const CConfigure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CConfigure::IsInitialized() const {

  if (has_dbconfig()) {
    if (!this->dbconfig().IsInitialized()) return false;
  }
  if (has_hallconfig()) {
    if (!this->hallconfig().IsInitialized()) return false;
  }
  if (has_proxyconfig()) {
    if (!this->proxyconfig().IsInitialized()) return false;
  }
  if (has_tcpconfig()) {
    if (!this->tcpconfig().IsInitialized()) return false;
  }
  if (has_gateconfig()) {
    if (!this->gateconfig().IsInitialized()) return false;
  }
  if (has_clientconfig()) {
    if (!this->clientconfig().IsInitialized()) return false;
  }
  if (has_roomconfig()) {
    if (!this->roomconfig().IsInitialized()) return false;
  }
  return true;
}

void CConfigure::Swap(CConfigure* other) {
  if (other != this) {
    std::swap(dbconfig_, other->dbconfig_);
    std::swap(hallconfig_, other->hallconfig_);
    std::swap(proxyconfig_, other->proxyconfig_);
    std::swap(tcpconfig_, other->tcpconfig_);
    std::swap(gateconfig_, other->gateconfig_);
    std::swap(clientconfig_, other->clientconfig_);
    std::swap(roomconfig_, other->roomconfig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CConfigure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CConfigure_descriptor_;
  metadata.reflection = CConfigure_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
