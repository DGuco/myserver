// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tcpmessage.proto

#ifndef PROTOBUF_tcpmessage_2eproto__INCLUDED
#define PROTOBUF_tcpmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class CSocketInfo;
class CSocketInfoDefaultTypeInternal;
extern CSocketInfoDefaultTypeInternal _CSocketInfo_default_instance_;
class CTcpHead;
class CTcpHeadDefaultTypeInternal;
extern CTcpHeadDefaultTypeInternal _CTcpHead_default_instance_;

namespace protobuf_tcpmessage_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_tcpmessage_2eproto

enum EGateCmd {
  EGC_NULL = 0,
  EGC_REGIST = 1,
  EGC_KEEPALIVE = 2
};
bool EGateCmd_IsValid(int value);
const EGateCmd EGateCmd_MIN = EGC_NULL;
const EGateCmd EGateCmd_MAX = EGC_KEEPALIVE;
const int EGateCmd_ARRAYSIZE = EGateCmd_MAX + 1;

const ::google::protobuf::EnumDescriptor* EGateCmd_descriptor();
inline const ::std::string& EGateCmd_Name(EGateCmd value) {
  return ::google::protobuf::internal::NameOfEnum(
    EGateCmd_descriptor(), value);
}
inline bool EGateCmd_Parse(
    const ::std::string& name, EGateCmd* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EGateCmd>(
    EGateCmd_descriptor(), name, value);
}
// ===================================================================

class CSocketInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CSocketInfo) */ {
 public:
  CSocketInfo();
  virtual ~CSocketInfo();

  CSocketInfo(const CSocketInfo& from);

  inline CSocketInfo& operator=(const CSocketInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSocketInfo& default_instance();

  static inline const CSocketInfo* internal_default_instance() {
    return reinterpret_cast<const CSocketInfo*>(
               &_CSocketInfo_default_instance_);
  }

  void Swap(CSocketInfo* other);

  // implements Message ----------------------------------------------

  inline CSocketInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CSocketInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CSocketInfo& from);
  void MergeFrom(const CSocketInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CSocketInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 SrcIP = 1;
  bool has_srcip() const;
  void clear_srcip();
  static const int kSrcIPFieldNumber = 1;
  ::google::protobuf::int32 srcip() const;
  void set_srcip(::google::protobuf::int32 value);

  // optional int32 SrcPort = 2;
  bool has_srcport() const;
  void clear_srcport();
  static const int kSrcPortFieldNumber = 2;
  ::google::protobuf::int32 srcport() const;
  void set_srcport(::google::protobuf::int32 value);

  // optional int64 CreateTime = 4;
  bool has_createtime() const;
  void clear_createtime();
  static const int kCreateTimeFieldNumber = 4;
  ::google::protobuf::int64 createtime() const;
  void set_createtime(::google::protobuf::int64 value);

  // optional int32 SocketID = 3;
  bool has_socketid() const;
  void clear_socketid();
  static const int kSocketIDFieldNumber = 3;
  ::google::protobuf::int32 socketid() const;
  void set_socketid(::google::protobuf::int32 value);

  // optional int32 State = 5;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 5;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CSocketInfo)
 private:
  void set_has_srcip();
  void clear_has_srcip();
  void set_has_srcport();
  void clear_has_srcport();
  void set_has_socketid();
  void clear_has_socketid();
  void set_has_createtime();
  void clear_has_createtime();
  void set_has_state();
  void clear_has_state();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 srcip_;
  ::google::protobuf::int32 srcport_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int32 socketid_;
  ::google::protobuf::int32 state_;
  friend struct  protobuf_tcpmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CTcpHead : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CTcpHead) */ {
 public:
  CTcpHead();
  virtual ~CTcpHead();

  CTcpHead(const CTcpHead& from);

  inline CTcpHead& operator=(const CTcpHead& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CTcpHead& default_instance();

  static inline const CTcpHead* internal_default_instance() {
    return reinterpret_cast<const CTcpHead*>(
               &_CTcpHead_default_instance_);
  }

  void Swap(CTcpHead* other);

  // implements Message ----------------------------------------------

  inline CTcpHead* New() const PROTOBUF_FINAL { return New(NULL); }

  CTcpHead* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CTcpHead& from);
  void MergeFrom(const CTcpHead& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CTcpHead* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CSocketInfo SocketInfos = 7;
  int socketinfos_size() const;
  void clear_socketinfos();
  static const int kSocketInfosFieldNumber = 7;
  const ::CSocketInfo& socketinfos(int index) const;
  ::CSocketInfo* mutable_socketinfos(int index);
  ::CSocketInfo* add_socketinfos();
  ::google::protobuf::RepeatedPtrField< ::CSocketInfo >*
      mutable_socketinfos();
  const ::google::protobuf::RepeatedPtrField< ::CSocketInfo >&
      socketinfos() const;

  // optional int32 SrcFE = 1;
  bool has_srcfe() const;
  void clear_srcfe();
  static const int kSrcFEFieldNumber = 1;
  ::google::protobuf::int32 srcfe() const;
  void set_srcfe(::google::protobuf::int32 value);

  // optional int32 SrcID = 2;
  bool has_srcid() const;
  void clear_srcid();
  static const int kSrcIDFieldNumber = 2;
  ::google::protobuf::int32 srcid() const;
  void set_srcid(::google::protobuf::int32 value);

  // optional int32 DstFE = 3;
  bool has_dstfe() const;
  void clear_dstfe();
  static const int kDstFEFieldNumber = 3;
  ::google::protobuf::int32 dstfe() const;
  void set_dstfe(::google::protobuf::int32 value);

  // optional int32 DstID = 4;
  bool has_dstid() const;
  void clear_dstid();
  static const int kDstIDFieldNumber = 4;
  ::google::protobuf::int32 dstid() const;
  void set_dstid(::google::protobuf::int32 value);

  // optional int64 TimeStamp = 6;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimeStampFieldNumber = 6;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional .EGateCmd OpFlag = 5 [default = EGC_NULL];
  bool has_opflag() const;
  void clear_opflag();
  static const int kOpFlagFieldNumber = 5;
  ::EGateCmd opflag() const;
  void set_opflag(::EGateCmd value);

  // @@protoc_insertion_point(class_scope:CTcpHead)
 private:
  void set_has_srcfe();
  void clear_has_srcfe();
  void set_has_srcid();
  void clear_has_srcid();
  void set_has_dstfe();
  void clear_has_dstfe();
  void set_has_dstid();
  void clear_has_dstid();
  void set_has_opflag();
  void clear_has_opflag();
  void set_has_timestamp();
  void clear_has_timestamp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CSocketInfo > socketinfos_;
  ::google::protobuf::int32 srcfe_;
  ::google::protobuf::int32 srcid_;
  ::google::protobuf::int32 dstfe_;
  ::google::protobuf::int32 dstid_;
  ::google::protobuf::int64 timestamp_;
  int opflag_;
  friend struct  protobuf_tcpmessage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CSocketInfo

// optional int32 SrcIP = 1;
inline bool CSocketInfo::has_srcip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSocketInfo::set_has_srcip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSocketInfo::clear_has_srcip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSocketInfo::clear_srcip() {
  srcip_ = 0;
  clear_has_srcip();
}
inline ::google::protobuf::int32 CSocketInfo::srcip() const {
  // @@protoc_insertion_point(field_get:CSocketInfo.SrcIP)
  return srcip_;
}
inline void CSocketInfo::set_srcip(::google::protobuf::int32 value) {
  set_has_srcip();
  srcip_ = value;
  // @@protoc_insertion_point(field_set:CSocketInfo.SrcIP)
}

// optional int32 SrcPort = 2;
inline bool CSocketInfo::has_srcport() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSocketInfo::set_has_srcport() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSocketInfo::clear_has_srcport() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSocketInfo::clear_srcport() {
  srcport_ = 0;
  clear_has_srcport();
}
inline ::google::protobuf::int32 CSocketInfo::srcport() const {
  // @@protoc_insertion_point(field_get:CSocketInfo.SrcPort)
  return srcport_;
}
inline void CSocketInfo::set_srcport(::google::protobuf::int32 value) {
  set_has_srcport();
  srcport_ = value;
  // @@protoc_insertion_point(field_set:CSocketInfo.SrcPort)
}

// optional int32 SocketID = 3;
inline bool CSocketInfo::has_socketid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSocketInfo::set_has_socketid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSocketInfo::clear_has_socketid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSocketInfo::clear_socketid() {
  socketid_ = 0;
  clear_has_socketid();
}
inline ::google::protobuf::int32 CSocketInfo::socketid() const {
  // @@protoc_insertion_point(field_get:CSocketInfo.SocketID)
  return socketid_;
}
inline void CSocketInfo::set_socketid(::google::protobuf::int32 value) {
  set_has_socketid();
  socketid_ = value;
  // @@protoc_insertion_point(field_set:CSocketInfo.SocketID)
}

// optional int64 CreateTime = 4;
inline bool CSocketInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSocketInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSocketInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSocketInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 CSocketInfo::createtime() const {
  // @@protoc_insertion_point(field_get:CSocketInfo.CreateTime)
  return createtime_;
}
inline void CSocketInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:CSocketInfo.CreateTime)
}

// optional int32 State = 5;
inline bool CSocketInfo::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSocketInfo::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSocketInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSocketInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 CSocketInfo::state() const {
  // @@protoc_insertion_point(field_get:CSocketInfo.State)
  return state_;
}
inline void CSocketInfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:CSocketInfo.State)
}

// -------------------------------------------------------------------

// CTcpHead

// optional int32 SrcFE = 1;
inline bool CTcpHead::has_srcfe() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CTcpHead::set_has_srcfe() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CTcpHead::clear_has_srcfe() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CTcpHead::clear_srcfe() {
  srcfe_ = 0;
  clear_has_srcfe();
}
inline ::google::protobuf::int32 CTcpHead::srcfe() const {
  // @@protoc_insertion_point(field_get:CTcpHead.SrcFE)
  return srcfe_;
}
inline void CTcpHead::set_srcfe(::google::protobuf::int32 value) {
  set_has_srcfe();
  srcfe_ = value;
  // @@protoc_insertion_point(field_set:CTcpHead.SrcFE)
}

// optional int32 SrcID = 2;
inline bool CTcpHead::has_srcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CTcpHead::set_has_srcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CTcpHead::clear_has_srcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CTcpHead::clear_srcid() {
  srcid_ = 0;
  clear_has_srcid();
}
inline ::google::protobuf::int32 CTcpHead::srcid() const {
  // @@protoc_insertion_point(field_get:CTcpHead.SrcID)
  return srcid_;
}
inline void CTcpHead::set_srcid(::google::protobuf::int32 value) {
  set_has_srcid();
  srcid_ = value;
  // @@protoc_insertion_point(field_set:CTcpHead.SrcID)
}

// optional int32 DstFE = 3;
inline bool CTcpHead::has_dstfe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CTcpHead::set_has_dstfe() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CTcpHead::clear_has_dstfe() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CTcpHead::clear_dstfe() {
  dstfe_ = 0;
  clear_has_dstfe();
}
inline ::google::protobuf::int32 CTcpHead::dstfe() const {
  // @@protoc_insertion_point(field_get:CTcpHead.DstFE)
  return dstfe_;
}
inline void CTcpHead::set_dstfe(::google::protobuf::int32 value) {
  set_has_dstfe();
  dstfe_ = value;
  // @@protoc_insertion_point(field_set:CTcpHead.DstFE)
}

// optional int32 DstID = 4;
inline bool CTcpHead::has_dstid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CTcpHead::set_has_dstid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CTcpHead::clear_has_dstid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CTcpHead::clear_dstid() {
  dstid_ = 0;
  clear_has_dstid();
}
inline ::google::protobuf::int32 CTcpHead::dstid() const {
  // @@protoc_insertion_point(field_get:CTcpHead.DstID)
  return dstid_;
}
inline void CTcpHead::set_dstid(::google::protobuf::int32 value) {
  set_has_dstid();
  dstid_ = value;
  // @@protoc_insertion_point(field_set:CTcpHead.DstID)
}

// optional .EGateCmd OpFlag = 5 [default = EGC_NULL];
inline bool CTcpHead::has_opflag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CTcpHead::set_has_opflag() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CTcpHead::clear_has_opflag() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CTcpHead::clear_opflag() {
  opflag_ = 0;
  clear_has_opflag();
}
inline ::EGateCmd CTcpHead::opflag() const {
  // @@protoc_insertion_point(field_get:CTcpHead.OpFlag)
  return static_cast< ::EGateCmd >(opflag_);
}
inline void CTcpHead::set_opflag(::EGateCmd value) {
  assert(::EGateCmd_IsValid(value));
  set_has_opflag();
  opflag_ = value;
  // @@protoc_insertion_point(field_set:CTcpHead.OpFlag)
}

// optional int64 TimeStamp = 6;
inline bool CTcpHead::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CTcpHead::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CTcpHead::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CTcpHead::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 CTcpHead::timestamp() const {
  // @@protoc_insertion_point(field_get:CTcpHead.TimeStamp)
  return timestamp_;
}
inline void CTcpHead::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:CTcpHead.TimeStamp)
}

// repeated .CSocketInfo SocketInfos = 7;
inline int CTcpHead::socketinfos_size() const {
  return socketinfos_.size();
}
inline void CTcpHead::clear_socketinfos() {
  socketinfos_.Clear();
}
inline const ::CSocketInfo& CTcpHead::socketinfos(int index) const {
  // @@protoc_insertion_point(field_get:CTcpHead.SocketInfos)
  return socketinfos_.Get(index);
}
inline ::CSocketInfo* CTcpHead::mutable_socketinfos(int index) {
  // @@protoc_insertion_point(field_mutable:CTcpHead.SocketInfos)
  return socketinfos_.Mutable(index);
}
inline ::CSocketInfo* CTcpHead::add_socketinfos() {
  // @@protoc_insertion_point(field_add:CTcpHead.SocketInfos)
  return socketinfos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CSocketInfo >*
CTcpHead::mutable_socketinfos() {
  // @@protoc_insertion_point(field_mutable_list:CTcpHead.SocketInfos)
  return &socketinfos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CSocketInfo >&
CTcpHead::socketinfos() const {
  // @@protoc_insertion_point(field_list:CTcpHead.SocketInfos)
  return socketinfos_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::EGateCmd> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EGateCmd>() {
  return ::EGateCmd_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tcpmessage_2eproto__INCLUDED
