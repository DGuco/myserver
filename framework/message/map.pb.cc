// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "map.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace slg {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* MapGridDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapGridDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapPlayerProfileDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapPlayerProfileDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapResourceOccupierDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapResourceOccupierDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapPlayerGridDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapPlayerGridDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapResourceGridDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapResourceGridDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapMonsterGridDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapMonsterGridDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapObstacleGridDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapObstacleGridDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* FaroriteDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FaroriteDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapQueryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapQueryRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapPlayerMigrateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapPlayerMigrateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapPlayerMigrateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapPlayerMigrateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapGridSearchRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapGridSearchRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapGridSearchResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapGridSearchResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FaroriteListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FaroriteListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FaroriteListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FaroriteListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FaroriteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FaroriteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FavoriteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FavoriteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FaroriteRemoveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FaroriteRemoveRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FaroriteRemoveResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FaroriteRemoveResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapGridListPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapGridListPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapGridRemovePush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapGridRemovePush_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonsterProgress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonsterProgress_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapMonsterProgressPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapMonsterProgressPush_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MapGridType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MapCommandId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MapGridSearchType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MapPushId_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_map_2eproto() {
  protobuf_AddDesc_map_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "map.proto");
  GOOGLE_CHECK(file != NULL);
  MapGridDTO_descriptor_ = file->message_type(0);
  static const int MapGridDTO_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapGridDTO, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapGridDTO, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapGridDTO, detail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapGridDTO, objid_),
  };
  MapGridDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapGridDTO_descriptor_,
      MapGridDTO::default_instance_,
      MapGridDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapGridDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapGridDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapGridDTO));
  MapPlayerProfileDTO_descriptor_ = file->message_type(1);
  static const int MapPlayerProfileDTO_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPlayerProfileDTO, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPlayerProfileDTO, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPlayerProfileDTO, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPlayerProfileDTO, castlelevel_),
  };
  MapPlayerProfileDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapPlayerProfileDTO_descriptor_,
      MapPlayerProfileDTO::default_instance_,
      MapPlayerProfileDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPlayerProfileDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPlayerProfileDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapPlayerProfileDTO));
  MapResourceOccupierDTO_descriptor_ = file->message_type(2);
  static const int MapResourceOccupierDTO_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapResourceOccupierDTO, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapResourceOccupierDTO, soldiers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapResourceOccupierDTO, gathertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapResourceOccupierDTO, gathernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapResourceOccupierDTO, gatherrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapResourceOccupierDTO, addrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapResourceOccupierDTO, marchid_),
  };
  MapResourceOccupierDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapResourceOccupierDTO_descriptor_,
      MapResourceOccupierDTO::default_instance_,
      MapResourceOccupierDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapResourceOccupierDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapResourceOccupierDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapResourceOccupierDTO));
  MapPlayerGridDTO_descriptor_ = file->message_type(3);
  static const int MapPlayerGridDTO_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPlayerGridDTO, player_),
  };
  MapPlayerGridDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapPlayerGridDTO_descriptor_,
      MapPlayerGridDTO::default_instance_,
      MapPlayerGridDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPlayerGridDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPlayerGridDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapPlayerGridDTO));
  MapResourceGridDTO_descriptor_ = file->message_type(4);
  static const int MapResourceGridDTO_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapResourceGridDTO, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapResourceGridDTO, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapResourceGridDTO, remain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapResourceGridDTO, occupier_),
  };
  MapResourceGridDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapResourceGridDTO_descriptor_,
      MapResourceGridDTO::default_instance_,
      MapResourceGridDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapResourceGridDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapResourceGridDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapResourceGridDTO));
  MapMonsterGridDTO_descriptor_ = file->message_type(5);
  static const int MapMonsterGridDTO_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMonsterGridDTO, configid_),
  };
  MapMonsterGridDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapMonsterGridDTO_descriptor_,
      MapMonsterGridDTO::default_instance_,
      MapMonsterGridDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMonsterGridDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMonsterGridDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapMonsterGridDTO));
  MapObstacleGridDTO_descriptor_ = file->message_type(6);
  static const int MapObstacleGridDTO_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapObstacleGridDTO, configid_),
  };
  MapObstacleGridDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapObstacleGridDTO_descriptor_,
      MapObstacleGridDTO::default_instance_,
      MapObstacleGridDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapObstacleGridDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapObstacleGridDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapObstacleGridDTO));
  FaroriteDTO_descriptor_ = file->message_type(7);
  static const int FaroriteDTO_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaroriteDTO, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaroriteDTO, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaroriteDTO, subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaroriteDTO, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaroriteDTO, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaroriteDTO, playernme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaroriteDTO, resourcenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaroriteDTO, alliancename_),
  };
  FaroriteDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FaroriteDTO_descriptor_,
      FaroriteDTO::default_instance_,
      FaroriteDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaroriteDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaroriteDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FaroriteDTO));
  MapQueryRequest_descriptor_ = file->message_type(8);
  static const int MapQueryRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapQueryRequest, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapQueryRequest, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapQueryRequest, center_),
  };
  MapQueryRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapQueryRequest_descriptor_,
      MapQueryRequest::default_instance_,
      MapQueryRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapQueryRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapQueryRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapQueryRequest));
  MapPlayerMigrateRequest_descriptor_ = file->message_type(9);
  static const int MapPlayerMigrateRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPlayerMigrateRequest, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPlayerMigrateRequest, useitem_),
  };
  MapPlayerMigrateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapPlayerMigrateRequest_descriptor_,
      MapPlayerMigrateRequest::default_instance_,
      MapPlayerMigrateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPlayerMigrateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPlayerMigrateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapPlayerMigrateRequest));
  MapPlayerMigrateResponse_descriptor_ = file->message_type(10);
  static const int MapPlayerMigrateResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPlayerMigrateResponse, target_),
  };
  MapPlayerMigrateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapPlayerMigrateResponse_descriptor_,
      MapPlayerMigrateResponse::default_instance_,
      MapPlayerMigrateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPlayerMigrateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPlayerMigrateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapPlayerMigrateResponse));
  MapGridSearchRequest_descriptor_ = file->message_type(11);
  static const int MapGridSearchRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapGridSearchRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapGridSearchRequest, level_),
  };
  MapGridSearchRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapGridSearchRequest_descriptor_,
      MapGridSearchRequest::default_instance_,
      MapGridSearchRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapGridSearchRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapGridSearchRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapGridSearchRequest));
  MapGridSearchResponse_descriptor_ = file->message_type(12);
  static const int MapGridSearchResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapGridSearchResponse, position_),
  };
  MapGridSearchResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapGridSearchResponse_descriptor_,
      MapGridSearchResponse::default_instance_,
      MapGridSearchResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapGridSearchResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapGridSearchResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapGridSearchResponse));
  FaroriteListRequest_descriptor_ = file->message_type(13);
  static const int FaroriteListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaroriteListRequest, type_),
  };
  FaroriteListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FaroriteListRequest_descriptor_,
      FaroriteListRequest::default_instance_,
      FaroriteListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaroriteListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaroriteListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FaroriteListRequest));
  FaroriteListResponse_descriptor_ = file->message_type(14);
  static const int FaroriteListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaroriteListResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaroriteListResponse, favoritelist_),
  };
  FaroriteListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FaroriteListResponse_descriptor_,
      FaroriteListResponse::default_instance_,
      FaroriteListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaroriteListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaroriteListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FaroriteListResponse));
  FaroriteRequest_descriptor_ = file->message_type(15);
  static const int FaroriteRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaroriteRequest, position_),
  };
  FaroriteRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FaroriteRequest_descriptor_,
      FaroriteRequest::default_instance_,
      FaroriteRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaroriteRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaroriteRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FaroriteRequest));
  FavoriteResponse_descriptor_ = file->message_type(16);
  static const int FavoriteResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavoriteResponse, favorite_),
  };
  FavoriteResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FavoriteResponse_descriptor_,
      FavoriteResponse::default_instance_,
      FavoriteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavoriteResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavoriteResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FavoriteResponse));
  FaroriteRemoveRequest_descriptor_ = file->message_type(17);
  static const int FaroriteRemoveRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaroriteRemoveRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaroriteRemoveRequest, index_),
  };
  FaroriteRemoveRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FaroriteRemoveRequest_descriptor_,
      FaroriteRemoveRequest::default_instance_,
      FaroriteRemoveRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaroriteRemoveRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaroriteRemoveRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FaroriteRemoveRequest));
  FaroriteRemoveResponse_descriptor_ = file->message_type(18);
  static const int FaroriteRemoveResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaroriteRemoveResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaroriteRemoveResponse, index_),
  };
  FaroriteRemoveResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FaroriteRemoveResponse_descriptor_,
      FaroriteRemoveResponse::default_instance_,
      FaroriteRemoveResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaroriteRemoveResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaroriteRemoveResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FaroriteRemoveResponse));
  MapGridListPush_descriptor_ = file->message_type(19);
  static const int MapGridListPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapGridListPush, mapgrids_),
  };
  MapGridListPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapGridListPush_descriptor_,
      MapGridListPush::default_instance_,
      MapGridListPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapGridListPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapGridListPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapGridListPush));
  MapGridRemovePush_descriptor_ = file->message_type(20);
  static const int MapGridRemovePush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapGridRemovePush, position_),
  };
  MapGridRemovePush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapGridRemovePush_descriptor_,
      MapGridRemovePush::default_instance_,
      MapGridRemovePush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapGridRemovePush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapGridRemovePush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapGridRemovePush));
  MonsterProgress_descriptor_ = file->message_type(21);
  static const int MonsterProgress_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterProgress, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterProgress, monstertroopid_),
  };
  MonsterProgress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonsterProgress_descriptor_,
      MonsterProgress::default_instance_,
      MonsterProgress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterProgress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterProgress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonsterProgress));
  MapMonsterProgressPush_descriptor_ = file->message_type(22);
  static const int MapMonsterProgressPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMonsterProgressPush, progresses_),
  };
  MapMonsterProgressPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapMonsterProgressPush_descriptor_,
      MapMonsterProgressPush::default_instance_,
      MapMonsterProgressPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMonsterProgressPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMonsterProgressPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapMonsterProgressPush));
  MapGridType_descriptor_ = file->enum_type(0);
  MapCommandId_descriptor_ = file->enum_type(1);
  MapGridSearchType_descriptor_ = file->enum_type(2);
  MapPushId_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_map_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapGridDTO_descriptor_, &MapGridDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapPlayerProfileDTO_descriptor_, &MapPlayerProfileDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapResourceOccupierDTO_descriptor_, &MapResourceOccupierDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapPlayerGridDTO_descriptor_, &MapPlayerGridDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapResourceGridDTO_descriptor_, &MapResourceGridDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapMonsterGridDTO_descriptor_, &MapMonsterGridDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapObstacleGridDTO_descriptor_, &MapObstacleGridDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FaroriteDTO_descriptor_, &FaroriteDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapQueryRequest_descriptor_, &MapQueryRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapPlayerMigrateRequest_descriptor_, &MapPlayerMigrateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapPlayerMigrateResponse_descriptor_, &MapPlayerMigrateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapGridSearchRequest_descriptor_, &MapGridSearchRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapGridSearchResponse_descriptor_, &MapGridSearchResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FaroriteListRequest_descriptor_, &FaroriteListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FaroriteListResponse_descriptor_, &FaroriteListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FaroriteRequest_descriptor_, &FaroriteRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FavoriteResponse_descriptor_, &FavoriteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FaroriteRemoveRequest_descriptor_, &FaroriteRemoveRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FaroriteRemoveResponse_descriptor_, &FaroriteRemoveResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapGridListPush_descriptor_, &MapGridListPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapGridRemovePush_descriptor_, &MapGridRemovePush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonsterProgress_descriptor_, &MonsterProgress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapMonsterProgressPush_descriptor_, &MapMonsterProgressPush::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_map_2eproto() {
  delete MapGridDTO::default_instance_;
  delete MapGridDTO_reflection_;
  delete MapPlayerProfileDTO::default_instance_;
  delete MapPlayerProfileDTO_reflection_;
  delete MapResourceOccupierDTO::default_instance_;
  delete MapResourceOccupierDTO_reflection_;
  delete MapPlayerGridDTO::default_instance_;
  delete MapPlayerGridDTO_reflection_;
  delete MapResourceGridDTO::default_instance_;
  delete MapResourceGridDTO_reflection_;
  delete MapMonsterGridDTO::default_instance_;
  delete MapMonsterGridDTO_reflection_;
  delete MapObstacleGridDTO::default_instance_;
  delete MapObstacleGridDTO_reflection_;
  delete FaroriteDTO::default_instance_;
  delete FaroriteDTO_reflection_;
  delete MapQueryRequest::default_instance_;
  delete MapQueryRequest_reflection_;
  delete MapPlayerMigrateRequest::default_instance_;
  delete MapPlayerMigrateRequest_reflection_;
  delete MapPlayerMigrateResponse::default_instance_;
  delete MapPlayerMigrateResponse_reflection_;
  delete MapGridSearchRequest::default_instance_;
  delete MapGridSearchRequest_reflection_;
  delete MapGridSearchResponse::default_instance_;
  delete MapGridSearchResponse_reflection_;
  delete FaroriteListRequest::default_instance_;
  delete FaroriteListRequest_reflection_;
  delete FaroriteListResponse::default_instance_;
  delete FaroriteListResponse_reflection_;
  delete FaroriteRequest::default_instance_;
  delete FaroriteRequest_reflection_;
  delete FavoriteResponse::default_instance_;
  delete FavoriteResponse_reflection_;
  delete FaroriteRemoveRequest::default_instance_;
  delete FaroriteRemoveRequest_reflection_;
  delete FaroriteRemoveResponse::default_instance_;
  delete FaroriteRemoveResponse_reflection_;
  delete MapGridListPush::default_instance_;
  delete MapGridListPush_reflection_;
  delete MapGridRemovePush::default_instance_;
  delete MapGridRemovePush_reflection_;
  delete MonsterProgress::default_instance_;
  delete MonsterProgress_reflection_;
  delete MapMonsterProgressPush::default_instance_;
  delete MapMonsterProgressPush_reflection_;
}

void protobuf_AddDesc_map_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::slg::protocol::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tmap.proto\022\014slg.protocol\032\014common.proto\""
    "\201\001\n\nMapGridDTO\022+\n\010location\030\001 \002(\0132\031.slg.p"
    "rotocol.PositionDTO\022\'\n\004type\030\002 \002(\0162\031.slg."
    "protocol.MapGridType\022\016\n\006detail\030\003 \002(\014\022\r\n\005"
    "objId\030\004 \002(\003\"\\\n\023MapPlayerProfileDTO\022\020\n\010pl"
    "ayerId\030\001 \002(\003\022\020\n\010nickName\030\002 \002(\t\022\014\n\004icon\030\003"
    " \002(\t\022\023\n\013castleLevel\030\004 \002(\005\"\331\001\n\026MapResourc"
    "eOccupierDTO\0221\n\006player\030\001 \002(\0132!.slg.proto"
    "col.MapPlayerProfileDTO\022/\n\010soldiers\030\002 \003("
    "\0132\035.slg.protocol.LevelSoldierDTO\022\022\n\ngath"
    "erTime\030\004 \002(\005\022\021\n\tgatherNum\030\005 \002(\005\022\022\n\ngathe"
    "rRate\030\006 \002(\005\022\017\n\007addRate\030\007 \001(\005\022\017\n\007marchid\030"
    "\010 \001(\003\"E\n\020MapPlayerGridDTO\0221\n\006player\030\001 \002("
    "\0132!.slg.protocol.MapPlayerProfileDTO\"y\n\022"
    "MapResourceGridDTO\022\014\n\004type\030\001 \002(\005\022\r\n\005leve"
    "l\030\002 \002(\005\022\016\n\006remain\030\003 \002(\005\0226\n\010occupier\030\t \001("
    "\0132$.slg.protocol.MapResourceOccupierDTO\""
    "%\n\021MapMonsterGridDTO\022\020\n\010configId\030\001 \002(\005\"&"
    "\n\022MapObstacleGridDTO\022\020\n\010configId\030\001 \002(\005\"\317"
    "\001\n\013FaroriteDTO\022\'\n\004type\030\001 \002(\0162\031.slg.proto"
    "col.MapGridType\022+\n\010location\030\002 \002(\0132\031.slg."
    "protocol.PositionDTO\022\017\n\007subtype\030\003 \001(\005\022\r\n"
    "\005level\030\004 \001(\005\022\014\n\004icon\030\005 \001(\t\022\021\n\tplayernme\030"
    "\006 \001(\t\022\023\n\013resourceNum\030\007 \001(\005\022\024\n\014alliancena"
    "me\030\010 \001(\t\"\216\001\n\017MapQueryRequest\022(\n\005start\030\001 "
    "\002(\0132\031.slg.protocol.PositionDTO\022&\n\003end\030\002 "
    "\002(\0132\031.slg.protocol.PositionDTO\022)\n\006center"
    "\030\003 \002(\0132\031.slg.protocol.PositionDTO\"U\n\027Map"
    "PlayerMigrateRequest\022)\n\006target\030\001 \002(\0132\031.s"
    "lg.protocol.PositionDTO\022\017\n\007useItem\030\002 \002(\010"
    "\"E\n\030MapPlayerMigrateResponse\022)\n\006target\030\001"
    " \002(\0132\031.slg.protocol.PositionDTO\"T\n\024MapGr"
    "idSearchRequest\022-\n\004type\030\001 \002(\0162\037.slg.prot"
    "ocol.MapGridSearchType\022\r\n\005level\030\002 \002(\005\"D\n"
    "\025MapGridSearchResponse\022+\n\010position\030\001 \002(\013"
    "2\031.slg.protocol.PositionDTO\"#\n\023FaroriteL"
    "istRequest\022\014\n\004type\030\001 \002(\005\"U\n\024FaroriteList"
    "Response\022\014\n\004type\030\001 \002(\005\022/\n\014favoritelist\030\003"
    " \003(\0132\031.slg.protocol.FaroriteDTO\">\n\017Faror"
    "iteRequest\022+\n\010position\030\001 \002(\0132\031.slg.proto"
    "col.PositionDTO\"\?\n\020FavoriteResponse\022+\n\010f"
    "avorite\030\002 \002(\0132\031.slg.protocol.FaroriteDTO"
    "\"4\n\025FaroriteRemoveRequest\022\014\n\004type\030\001 \002(\005\022"
    "\r\n\005index\030\002 \002(\005\"5\n\026FaroriteRemoveResponse"
    "\022\014\n\004type\030\001 \002(\005\022\r\n\005index\030\002 \002(\005\"=\n\017MapGrid"
    "ListPush\022*\n\010mapGrids\030\001 \003(\0132\030.slg.protoco"
    "l.MapGridDTO\"@\n\021MapGridRemovePush\022+\n\010pos"
    "ition\030\001 \002(\0132\031.slg.protocol.PositionDTO\"7"
    "\n\017MonsterProgress\022\014\n\004type\030\001 \002(\005\022\026\n\016monst"
    "erTroopId\030\002 \002(\005\"K\n\026MapMonsterProgressPus"
    "h\0221\n\nprogresses\030\001 \003(\0132\035.slg.protocol.Mon"
    "sterProgress*\257\001\n\013MapGridType\022\032\n\026MAP_GRID"
    "_TYPE_RESOURCE\020\001\022\030\n\024MAP_GRID_TYPE_PLAYER"
    "\020\002\022\031\n\025MAP_GRID_TYPE_MONSTER\020\003\022\032\n\026MAP_GRI"
    "D_TYPE_ALLIANCE\020\004\022\032\n\026MAP_GRID_TYPE_OBSTA"
    "CLE\020\005\022\027\n\023MAP_GRID_TYPE_EMPTY\020\006*\265\001\n\014MapCo"
    "mmandId\022\016\n\tMAP_QUERY\020\275\005\022\r\n\010MAP_EXIT\020\276\005\022\016"
    "\n\tMAP_ENTER\020\277\005\022\027\n\022MAP_PLAYER_MIGRATE\020\300\005\022"
    "\024\n\017MAP_GRID_SEARCH\020\301\005\022\026\n\021MAP_FAVORITE_LI"
    "ST\020\302\005\022\025\n\020MAP_ADD_FAVORITE\020\303\005\022\030\n\023MAP_REMO"
    "VE_FAVORITE\020\304\005*\207\001\n\021MapGridSearchType\022\017\n\013"
    "MAP_MONSTER\020\001\022\021\n\rMAP_GOLD_GRID\020\002\022\021\n\rMAP_"
    "WOOD_GRID\020\003\022\022\n\016MAP_STONE_GRID\020\004\022\021\n\rMAP_I"
    "RON_GRID\020\005\022\024\n\020MAP_DIAMOND_GRID\020\006*d\n\tMapP"
    "ushId\022\030\n\022MAP_PUSH_GRID_LIST\020\215\214\003\022\032\n\024MAP_P"
    "USH_GRID_REMOVE\020\216\214\003\022!\n\033MAP_PUSH_MONSTER_"
    "PROGRESSES\020\217\214\003B(\n\034com.bonusstudio.slg.pr"
    "otocolB\010MapProto", 2696);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "map.proto", &protobuf_RegisterTypes);
  MapGridDTO::default_instance_ = new MapGridDTO();
  MapPlayerProfileDTO::default_instance_ = new MapPlayerProfileDTO();
  MapResourceOccupierDTO::default_instance_ = new MapResourceOccupierDTO();
  MapPlayerGridDTO::default_instance_ = new MapPlayerGridDTO();
  MapResourceGridDTO::default_instance_ = new MapResourceGridDTO();
  MapMonsterGridDTO::default_instance_ = new MapMonsterGridDTO();
  MapObstacleGridDTO::default_instance_ = new MapObstacleGridDTO();
  FaroriteDTO::default_instance_ = new FaroriteDTO();
  MapQueryRequest::default_instance_ = new MapQueryRequest();
  MapPlayerMigrateRequest::default_instance_ = new MapPlayerMigrateRequest();
  MapPlayerMigrateResponse::default_instance_ = new MapPlayerMigrateResponse();
  MapGridSearchRequest::default_instance_ = new MapGridSearchRequest();
  MapGridSearchResponse::default_instance_ = new MapGridSearchResponse();
  FaroriteListRequest::default_instance_ = new FaroriteListRequest();
  FaroriteListResponse::default_instance_ = new FaroriteListResponse();
  FaroriteRequest::default_instance_ = new FaroriteRequest();
  FavoriteResponse::default_instance_ = new FavoriteResponse();
  FaroriteRemoveRequest::default_instance_ = new FaroriteRemoveRequest();
  FaroriteRemoveResponse::default_instance_ = new FaroriteRemoveResponse();
  MapGridListPush::default_instance_ = new MapGridListPush();
  MapGridRemovePush::default_instance_ = new MapGridRemovePush();
  MonsterProgress::default_instance_ = new MonsterProgress();
  MapMonsterProgressPush::default_instance_ = new MapMonsterProgressPush();
  MapGridDTO::default_instance_->InitAsDefaultInstance();
  MapPlayerProfileDTO::default_instance_->InitAsDefaultInstance();
  MapResourceOccupierDTO::default_instance_->InitAsDefaultInstance();
  MapPlayerGridDTO::default_instance_->InitAsDefaultInstance();
  MapResourceGridDTO::default_instance_->InitAsDefaultInstance();
  MapMonsterGridDTO::default_instance_->InitAsDefaultInstance();
  MapObstacleGridDTO::default_instance_->InitAsDefaultInstance();
  FaroriteDTO::default_instance_->InitAsDefaultInstance();
  MapQueryRequest::default_instance_->InitAsDefaultInstance();
  MapPlayerMigrateRequest::default_instance_->InitAsDefaultInstance();
  MapPlayerMigrateResponse::default_instance_->InitAsDefaultInstance();
  MapGridSearchRequest::default_instance_->InitAsDefaultInstance();
  MapGridSearchResponse::default_instance_->InitAsDefaultInstance();
  FaroriteListRequest::default_instance_->InitAsDefaultInstance();
  FaroriteListResponse::default_instance_->InitAsDefaultInstance();
  FaroriteRequest::default_instance_->InitAsDefaultInstance();
  FavoriteResponse::default_instance_->InitAsDefaultInstance();
  FaroriteRemoveRequest::default_instance_->InitAsDefaultInstance();
  FaroriteRemoveResponse::default_instance_->InitAsDefaultInstance();
  MapGridListPush::default_instance_->InitAsDefaultInstance();
  MapGridRemovePush::default_instance_->InitAsDefaultInstance();
  MonsterProgress::default_instance_->InitAsDefaultInstance();
  MapMonsterProgressPush::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_map_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_map_2eproto {
  StaticDescriptorInitializer_map_2eproto() {
    protobuf_AddDesc_map_2eproto();
  }
} static_descriptor_initializer_map_2eproto_;
const ::google::protobuf::EnumDescriptor* MapGridType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapGridType_descriptor_;
}
bool MapGridType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MapCommandId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapCommandId_descriptor_;
}
bool MapCommandId_IsValid(int value) {
  switch(value) {
    case 701:
    case 702:
    case 703:
    case 704:
    case 705:
    case 706:
    case 707:
    case 708:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MapGridSearchType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapGridSearchType_descriptor_;
}
bool MapGridSearchType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MapPushId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapPushId_descriptor_;
}
bool MapPushId_IsValid(int value) {
  switch(value) {
    case 50701:
    case 50702:
    case 50703:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MapGridDTO::kLocationFieldNumber;
const int MapGridDTO::kTypeFieldNumber;
const int MapGridDTO::kDetailFieldNumber;
const int MapGridDTO::kObjIdFieldNumber;
#endif  // !_MSC_VER

MapGridDTO::MapGridDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapGridDTO::InitAsDefaultInstance() {
  location_ = const_cast< ::slg::protocol::PositionDTO*>(&::slg::protocol::PositionDTO::default_instance());
}

MapGridDTO::MapGridDTO(const MapGridDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapGridDTO::SharedCtor() {
  _cached_size_ = 0;
  location_ = NULL;
  type_ = 1;
  detail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  objid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapGridDTO::~MapGridDTO() {
  SharedDtor();
}

void MapGridDTO::SharedDtor() {
  if (detail_ != &::google::protobuf::internal::kEmptyString) {
    delete detail_;
  }
  if (this != default_instance_) {
    delete location_;
  }
}

void MapGridDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapGridDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapGridDTO_descriptor_;
}

const MapGridDTO& MapGridDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

MapGridDTO* MapGridDTO::default_instance_ = NULL;

MapGridDTO* MapGridDTO::New() const {
  return new MapGridDTO;
}

void MapGridDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_location()) {
      if (location_ != NULL) location_->::slg::protocol::PositionDTO::Clear();
    }
    type_ = 1;
    if (has_detail()) {
      if (detail_ != &::google::protobuf::internal::kEmptyString) {
        detail_->clear();
      }
    }
    objid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapGridDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .slg.protocol.PositionDTO location = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .slg.protocol.MapGridType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::slg::protocol::MapGridType_IsValid(value)) {
            set_type(static_cast< ::slg::protocol::MapGridType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_detail;
        break;
      }

      // required bytes detail = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_objId;
        break;
      }

      // required int64 objId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapGridDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .slg.protocol.PositionDTO location = 1;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->location(), output);
  }

  // required .slg.protocol.MapGridType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required bytes detail = 3;
  if (has_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->detail(), output);
  }

  // required int64 objId = 4;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->objid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapGridDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .slg.protocol.PositionDTO location = 1;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->location(), target);
  }

  // required .slg.protocol.MapGridType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required bytes detail = 3;
  if (has_detail()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->detail(), target);
  }

  // required int64 objId = 4;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->objid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapGridDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .slg.protocol.PositionDTO location = 1;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }

    // required .slg.protocol.MapGridType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required bytes detail = 3;
    if (has_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->detail());
    }

    // required int64 objId = 4;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapGridDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapGridDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapGridDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapGridDTO::MergeFrom(const MapGridDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_location()) {
      mutable_location()->::slg::protocol::PositionDTO::MergeFrom(from.location());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_detail()) {
      set_detail(from.detail());
    }
    if (from.has_objid()) {
      set_objid(from.objid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapGridDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapGridDTO::CopyFrom(const MapGridDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapGridDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_location()) {
    if (!this->location().IsInitialized()) return false;
  }
  return true;
}

void MapGridDTO::Swap(MapGridDTO* other) {
  if (other != this) {
    std::swap(location_, other->location_);
    std::swap(type_, other->type_);
    std::swap(detail_, other->detail_);
    std::swap(objid_, other->objid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapGridDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapGridDTO_descriptor_;
  metadata.reflection = MapGridDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapPlayerProfileDTO::kPlayerIdFieldNumber;
const int MapPlayerProfileDTO::kNickNameFieldNumber;
const int MapPlayerProfileDTO::kIconFieldNumber;
const int MapPlayerProfileDTO::kCastleLevelFieldNumber;
#endif  // !_MSC_VER

MapPlayerProfileDTO::MapPlayerProfileDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapPlayerProfileDTO::InitAsDefaultInstance() {
}

MapPlayerProfileDTO::MapPlayerProfileDTO(const MapPlayerProfileDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapPlayerProfileDTO::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  castlelevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapPlayerProfileDTO::~MapPlayerProfileDTO() {
  SharedDtor();
}

void MapPlayerProfileDTO::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (this != default_instance_) {
  }
}

void MapPlayerProfileDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapPlayerProfileDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapPlayerProfileDTO_descriptor_;
}

const MapPlayerProfileDTO& MapPlayerProfileDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

MapPlayerProfileDTO* MapPlayerProfileDTO::default_instance_ = NULL;

MapPlayerProfileDTO* MapPlayerProfileDTO::New() const {
  return new MapPlayerProfileDTO;
}

void MapPlayerProfileDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    castlelevel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapPlayerProfileDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickName;
        break;
      }

      // required string nickName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_icon;
        break;
      }

      // required string icon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_castleLevel;
        break;
      }

      // required int32 castleLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_castleLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &castlelevel_)));
          set_has_castlelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapPlayerProfileDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // required string nickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  // required string icon = 3;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->icon(), output);
  }

  // required int32 castleLevel = 4;
  if (has_castlelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->castlelevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapPlayerProfileDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // required string nickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // required string icon = 3;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->icon(), target);
  }

  // required int32 castleLevel = 4;
  if (has_castlelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->castlelevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapPlayerProfileDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // required string nickName = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // required string icon = 3;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // required int32 castleLevel = 4;
    if (has_castlelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->castlelevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapPlayerProfileDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapPlayerProfileDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapPlayerProfileDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapPlayerProfileDTO::MergeFrom(const MapPlayerProfileDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_castlelevel()) {
      set_castlelevel(from.castlelevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapPlayerProfileDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapPlayerProfileDTO::CopyFrom(const MapPlayerProfileDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapPlayerProfileDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MapPlayerProfileDTO::Swap(MapPlayerProfileDTO* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(nickname_, other->nickname_);
    std::swap(icon_, other->icon_);
    std::swap(castlelevel_, other->castlelevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapPlayerProfileDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapPlayerProfileDTO_descriptor_;
  metadata.reflection = MapPlayerProfileDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapResourceOccupierDTO::kPlayerFieldNumber;
const int MapResourceOccupierDTO::kSoldiersFieldNumber;
const int MapResourceOccupierDTO::kGatherTimeFieldNumber;
const int MapResourceOccupierDTO::kGatherNumFieldNumber;
const int MapResourceOccupierDTO::kGatherRateFieldNumber;
const int MapResourceOccupierDTO::kAddRateFieldNumber;
const int MapResourceOccupierDTO::kMarchidFieldNumber;
#endif  // !_MSC_VER

MapResourceOccupierDTO::MapResourceOccupierDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapResourceOccupierDTO::InitAsDefaultInstance() {
  player_ = const_cast< ::slg::protocol::MapPlayerProfileDTO*>(&::slg::protocol::MapPlayerProfileDTO::default_instance());
}

MapResourceOccupierDTO::MapResourceOccupierDTO(const MapResourceOccupierDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapResourceOccupierDTO::SharedCtor() {
  _cached_size_ = 0;
  player_ = NULL;
  gathertime_ = 0;
  gathernum_ = 0;
  gatherrate_ = 0;
  addrate_ = 0;
  marchid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapResourceOccupierDTO::~MapResourceOccupierDTO() {
  SharedDtor();
}

void MapResourceOccupierDTO::SharedDtor() {
  if (this != default_instance_) {
    delete player_;
  }
}

void MapResourceOccupierDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapResourceOccupierDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapResourceOccupierDTO_descriptor_;
}

const MapResourceOccupierDTO& MapResourceOccupierDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

MapResourceOccupierDTO* MapResourceOccupierDTO::default_instance_ = NULL;

MapResourceOccupierDTO* MapResourceOccupierDTO::New() const {
  return new MapResourceOccupierDTO;
}

void MapResourceOccupierDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player()) {
      if (player_ != NULL) player_->::slg::protocol::MapPlayerProfileDTO::Clear();
    }
    gathertime_ = 0;
    gathernum_ = 0;
    gatherrate_ = 0;
    addrate_ = 0;
    marchid_ = GOOGLE_LONGLONG(0);
  }
  soldiers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapResourceOccupierDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .slg.protocol.MapPlayerProfileDTO player = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_soldiers;
        break;
      }

      // repeated .slg.protocol.LevelSoldierDTO soldiers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soldiers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_soldiers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_soldiers;
        if (input->ExpectTag(32)) goto parse_gatherTime;
        break;
      }

      // required int32 gatherTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gatherTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gathertime_)));
          set_has_gathertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gatherNum;
        break;
      }

      // required int32 gatherNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gatherNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gathernum_)));
          set_has_gathernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gatherRate;
        break;
      }

      // required int32 gatherRate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gatherRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gatherrate_)));
          set_has_gatherrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_addRate;
        break;
      }

      // optional int32 addRate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addrate_)));
          set_has_addrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_marchid;
        break;
      }

      // optional int64 marchid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &marchid_)));
          set_has_marchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapResourceOccupierDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .slg.protocol.MapPlayerProfileDTO player = 1;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player(), output);
  }

  // repeated .slg.protocol.LevelSoldierDTO soldiers = 2;
  for (int i = 0; i < this->soldiers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->soldiers(i), output);
  }

  // required int32 gatherTime = 4;
  if (has_gathertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gathertime(), output);
  }

  // required int32 gatherNum = 5;
  if (has_gathernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gathernum(), output);
  }

  // required int32 gatherRate = 6;
  if (has_gatherrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gatherrate(), output);
  }

  // optional int32 addRate = 7;
  if (has_addrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->addrate(), output);
  }

  // optional int64 marchid = 8;
  if (has_marchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->marchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapResourceOccupierDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .slg.protocol.MapPlayerProfileDTO player = 1;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player(), target);
  }

  // repeated .slg.protocol.LevelSoldierDTO soldiers = 2;
  for (int i = 0; i < this->soldiers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->soldiers(i), target);
  }

  // required int32 gatherTime = 4;
  if (has_gathertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gathertime(), target);
  }

  // required int32 gatherNum = 5;
  if (has_gathernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gathernum(), target);
  }

  // required int32 gatherRate = 6;
  if (has_gatherrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gatherrate(), target);
  }

  // optional int32 addRate = 7;
  if (has_addrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->addrate(), target);
  }

  // optional int64 marchid = 8;
  if (has_marchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->marchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapResourceOccupierDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .slg.protocol.MapPlayerProfileDTO player = 1;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player());
    }

    // required int32 gatherTime = 4;
    if (has_gathertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gathertime());
    }

    // required int32 gatherNum = 5;
    if (has_gathernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gathernum());
    }

    // required int32 gatherRate = 6;
    if (has_gatherrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gatherrate());
    }

    // optional int32 addRate = 7;
    if (has_addrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addrate());
    }

    // optional int64 marchid = 8;
    if (has_marchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->marchid());
    }

  }
  // repeated .slg.protocol.LevelSoldierDTO soldiers = 2;
  total_size += 1 * this->soldiers_size();
  for (int i = 0; i < this->soldiers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->soldiers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapResourceOccupierDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapResourceOccupierDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapResourceOccupierDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapResourceOccupierDTO::MergeFrom(const MapResourceOccupierDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  soldiers_.MergeFrom(from.soldiers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player()) {
      mutable_player()->::slg::protocol::MapPlayerProfileDTO::MergeFrom(from.player());
    }
    if (from.has_gathertime()) {
      set_gathertime(from.gathertime());
    }
    if (from.has_gathernum()) {
      set_gathernum(from.gathernum());
    }
    if (from.has_gatherrate()) {
      set_gatherrate(from.gatherrate());
    }
    if (from.has_addrate()) {
      set_addrate(from.addrate());
    }
    if (from.has_marchid()) {
      set_marchid(from.marchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapResourceOccupierDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapResourceOccupierDTO::CopyFrom(const MapResourceOccupierDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapResourceOccupierDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  if (has_player()) {
    if (!this->player().IsInitialized()) return false;
  }
  for (int i = 0; i < soldiers_size(); i++) {
    if (!this->soldiers(i).IsInitialized()) return false;
  }
  return true;
}

void MapResourceOccupierDTO::Swap(MapResourceOccupierDTO* other) {
  if (other != this) {
    std::swap(player_, other->player_);
    soldiers_.Swap(&other->soldiers_);
    std::swap(gathertime_, other->gathertime_);
    std::swap(gathernum_, other->gathernum_);
    std::swap(gatherrate_, other->gatherrate_);
    std::swap(addrate_, other->addrate_);
    std::swap(marchid_, other->marchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapResourceOccupierDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapResourceOccupierDTO_descriptor_;
  metadata.reflection = MapResourceOccupierDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapPlayerGridDTO::kPlayerFieldNumber;
#endif  // !_MSC_VER

MapPlayerGridDTO::MapPlayerGridDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapPlayerGridDTO::InitAsDefaultInstance() {
  player_ = const_cast< ::slg::protocol::MapPlayerProfileDTO*>(&::slg::protocol::MapPlayerProfileDTO::default_instance());
}

MapPlayerGridDTO::MapPlayerGridDTO(const MapPlayerGridDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapPlayerGridDTO::SharedCtor() {
  _cached_size_ = 0;
  player_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapPlayerGridDTO::~MapPlayerGridDTO() {
  SharedDtor();
}

void MapPlayerGridDTO::SharedDtor() {
  if (this != default_instance_) {
    delete player_;
  }
}

void MapPlayerGridDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapPlayerGridDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapPlayerGridDTO_descriptor_;
}

const MapPlayerGridDTO& MapPlayerGridDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

MapPlayerGridDTO* MapPlayerGridDTO::default_instance_ = NULL;

MapPlayerGridDTO* MapPlayerGridDTO::New() const {
  return new MapPlayerGridDTO;
}

void MapPlayerGridDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player()) {
      if (player_ != NULL) player_->::slg::protocol::MapPlayerProfileDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapPlayerGridDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .slg.protocol.MapPlayerProfileDTO player = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapPlayerGridDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .slg.protocol.MapPlayerProfileDTO player = 1;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapPlayerGridDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .slg.protocol.MapPlayerProfileDTO player = 1;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapPlayerGridDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .slg.protocol.MapPlayerProfileDTO player = 1;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapPlayerGridDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapPlayerGridDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapPlayerGridDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapPlayerGridDTO::MergeFrom(const MapPlayerGridDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player()) {
      mutable_player()->::slg::protocol::MapPlayerProfileDTO::MergeFrom(from.player());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapPlayerGridDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapPlayerGridDTO::CopyFrom(const MapPlayerGridDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapPlayerGridDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_player()) {
    if (!this->player().IsInitialized()) return false;
  }
  return true;
}

void MapPlayerGridDTO::Swap(MapPlayerGridDTO* other) {
  if (other != this) {
    std::swap(player_, other->player_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapPlayerGridDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapPlayerGridDTO_descriptor_;
  metadata.reflection = MapPlayerGridDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapResourceGridDTO::kTypeFieldNumber;
const int MapResourceGridDTO::kLevelFieldNumber;
const int MapResourceGridDTO::kRemainFieldNumber;
const int MapResourceGridDTO::kOccupierFieldNumber;
#endif  // !_MSC_VER

MapResourceGridDTO::MapResourceGridDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapResourceGridDTO::InitAsDefaultInstance() {
  occupier_ = const_cast< ::slg::protocol::MapResourceOccupierDTO*>(&::slg::protocol::MapResourceOccupierDTO::default_instance());
}

MapResourceGridDTO::MapResourceGridDTO(const MapResourceGridDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapResourceGridDTO::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  level_ = 0;
  remain_ = 0;
  occupier_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapResourceGridDTO::~MapResourceGridDTO() {
  SharedDtor();
}

void MapResourceGridDTO::SharedDtor() {
  if (this != default_instance_) {
    delete occupier_;
  }
}

void MapResourceGridDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapResourceGridDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapResourceGridDTO_descriptor_;
}

const MapResourceGridDTO& MapResourceGridDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

MapResourceGridDTO* MapResourceGridDTO::default_instance_ = NULL;

MapResourceGridDTO* MapResourceGridDTO::New() const {
  return new MapResourceGridDTO;
}

void MapResourceGridDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    level_ = 0;
    remain_ = 0;
    if (has_occupier()) {
      if (occupier_ != NULL) occupier_->::slg::protocol::MapResourceOccupierDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapResourceGridDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_remain;
        break;
      }

      // required int32 remain = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_)));
          set_has_remain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_occupier;
        break;
      }

      // optional .slg.protocol.MapResourceOccupierDTO occupier = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_occupier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_occupier()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapResourceGridDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required int32 remain = 3;
  if (has_remain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->remain(), output);
  }

  // optional .slg.protocol.MapResourceOccupierDTO occupier = 9;
  if (has_occupier()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->occupier(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapResourceGridDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required int32 remain = 3;
  if (has_remain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->remain(), target);
  }

  // optional .slg.protocol.MapResourceOccupierDTO occupier = 9;
  if (has_occupier()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->occupier(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapResourceGridDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 remain = 3;
    if (has_remain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain());
    }

    // optional .slg.protocol.MapResourceOccupierDTO occupier = 9;
    if (has_occupier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->occupier());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapResourceGridDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapResourceGridDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapResourceGridDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapResourceGridDTO::MergeFrom(const MapResourceGridDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_remain()) {
      set_remain(from.remain());
    }
    if (from.has_occupier()) {
      mutable_occupier()->::slg::protocol::MapResourceOccupierDTO::MergeFrom(from.occupier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapResourceGridDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapResourceGridDTO::CopyFrom(const MapResourceGridDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapResourceGridDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_occupier()) {
    if (!this->occupier().IsInitialized()) return false;
  }
  return true;
}

void MapResourceGridDTO::Swap(MapResourceGridDTO* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(remain_, other->remain_);
    std::swap(occupier_, other->occupier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapResourceGridDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapResourceGridDTO_descriptor_;
  metadata.reflection = MapResourceGridDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapMonsterGridDTO::kConfigIdFieldNumber;
#endif  // !_MSC_VER

MapMonsterGridDTO::MapMonsterGridDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapMonsterGridDTO::InitAsDefaultInstance() {
}

MapMonsterGridDTO::MapMonsterGridDTO(const MapMonsterGridDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapMonsterGridDTO::SharedCtor() {
  _cached_size_ = 0;
  configid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapMonsterGridDTO::~MapMonsterGridDTO() {
  SharedDtor();
}

void MapMonsterGridDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapMonsterGridDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapMonsterGridDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapMonsterGridDTO_descriptor_;
}

const MapMonsterGridDTO& MapMonsterGridDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

MapMonsterGridDTO* MapMonsterGridDTO::default_instance_ = NULL;

MapMonsterGridDTO* MapMonsterGridDTO::New() const {
  return new MapMonsterGridDTO;
}

void MapMonsterGridDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    configid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapMonsterGridDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 configId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &configid_)));
          set_has_configid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapMonsterGridDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 configId = 1;
  if (has_configid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->configid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapMonsterGridDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 configId = 1;
  if (has_configid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->configid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapMonsterGridDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 configId = 1;
    if (has_configid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->configid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapMonsterGridDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapMonsterGridDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapMonsterGridDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapMonsterGridDTO::MergeFrom(const MapMonsterGridDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_configid()) {
      set_configid(from.configid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapMonsterGridDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapMonsterGridDTO::CopyFrom(const MapMonsterGridDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapMonsterGridDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MapMonsterGridDTO::Swap(MapMonsterGridDTO* other) {
  if (other != this) {
    std::swap(configid_, other->configid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapMonsterGridDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapMonsterGridDTO_descriptor_;
  metadata.reflection = MapMonsterGridDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapObstacleGridDTO::kConfigIdFieldNumber;
#endif  // !_MSC_VER

MapObstacleGridDTO::MapObstacleGridDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapObstacleGridDTO::InitAsDefaultInstance() {
}

MapObstacleGridDTO::MapObstacleGridDTO(const MapObstacleGridDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapObstacleGridDTO::SharedCtor() {
  _cached_size_ = 0;
  configid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapObstacleGridDTO::~MapObstacleGridDTO() {
  SharedDtor();
}

void MapObstacleGridDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapObstacleGridDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapObstacleGridDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapObstacleGridDTO_descriptor_;
}

const MapObstacleGridDTO& MapObstacleGridDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

MapObstacleGridDTO* MapObstacleGridDTO::default_instance_ = NULL;

MapObstacleGridDTO* MapObstacleGridDTO::New() const {
  return new MapObstacleGridDTO;
}

void MapObstacleGridDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    configid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapObstacleGridDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 configId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &configid_)));
          set_has_configid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapObstacleGridDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 configId = 1;
  if (has_configid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->configid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapObstacleGridDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 configId = 1;
  if (has_configid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->configid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapObstacleGridDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 configId = 1;
    if (has_configid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->configid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapObstacleGridDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapObstacleGridDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapObstacleGridDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapObstacleGridDTO::MergeFrom(const MapObstacleGridDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_configid()) {
      set_configid(from.configid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapObstacleGridDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapObstacleGridDTO::CopyFrom(const MapObstacleGridDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapObstacleGridDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MapObstacleGridDTO::Swap(MapObstacleGridDTO* other) {
  if (other != this) {
    std::swap(configid_, other->configid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapObstacleGridDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapObstacleGridDTO_descriptor_;
  metadata.reflection = MapObstacleGridDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FaroriteDTO::kTypeFieldNumber;
const int FaroriteDTO::kLocationFieldNumber;
const int FaroriteDTO::kSubtypeFieldNumber;
const int FaroriteDTO::kLevelFieldNumber;
const int FaroriteDTO::kIconFieldNumber;
const int FaroriteDTO::kPlayernmeFieldNumber;
const int FaroriteDTO::kResourceNumFieldNumber;
const int FaroriteDTO::kAlliancenameFieldNumber;
#endif  // !_MSC_VER

FaroriteDTO::FaroriteDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FaroriteDTO::InitAsDefaultInstance() {
  location_ = const_cast< ::slg::protocol::PositionDTO*>(&::slg::protocol::PositionDTO::default_instance());
}

FaroriteDTO::FaroriteDTO(const FaroriteDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FaroriteDTO::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  location_ = NULL;
  subtype_ = 0;
  level_ = 0;
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playernme_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resourcenum_ = 0;
  alliancename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FaroriteDTO::~FaroriteDTO() {
  SharedDtor();
}

void FaroriteDTO::SharedDtor() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (playernme_ != &::google::protobuf::internal::kEmptyString) {
    delete playernme_;
  }
  if (alliancename_ != &::google::protobuf::internal::kEmptyString) {
    delete alliancename_;
  }
  if (this != default_instance_) {
    delete location_;
  }
}

void FaroriteDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaroriteDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaroriteDTO_descriptor_;
}

const FaroriteDTO& FaroriteDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

FaroriteDTO* FaroriteDTO::default_instance_ = NULL;

FaroriteDTO* FaroriteDTO::New() const {
  return new FaroriteDTO;
}

void FaroriteDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_location()) {
      if (location_ != NULL) location_->::slg::protocol::PositionDTO::Clear();
    }
    subtype_ = 0;
    level_ = 0;
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    if (has_playernme()) {
      if (playernme_ != &::google::protobuf::internal::kEmptyString) {
        playernme_->clear();
      }
    }
    resourcenum_ = 0;
    if (has_alliancename()) {
      if (alliancename_ != &::google::protobuf::internal::kEmptyString) {
        alliancename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FaroriteDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .slg.protocol.MapGridType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::slg::protocol::MapGridType_IsValid(value)) {
            set_type(static_cast< ::slg::protocol::MapGridType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_location;
        break;
      }

      // required .slg.protocol.PositionDTO location = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_subtype;
        break;
      }

      // optional int32 subtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subtype_)));
          set_has_subtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_icon;
        break;
      }

      // optional string icon = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_playernme;
        break;
      }

      // optional string playernme = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playernme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playernme()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playernme().data(), this->playernme().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_resourceNum;
        break;
      }

      // optional int32 resourceNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resourceNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resourcenum_)));
          set_has_resourcenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_alliancename;
        break;
      }

      // optional string alliancename = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alliancename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alliancename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alliancename().data(), this->alliancename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FaroriteDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .slg.protocol.MapGridType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .slg.protocol.PositionDTO location = 2;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->location(), output);
  }

  // optional int32 subtype = 3;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->subtype(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional string icon = 5;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->icon(), output);
  }

  // optional string playernme = 6;
  if (has_playernme()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playernme().data(), this->playernme().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->playernme(), output);
  }

  // optional int32 resourceNum = 7;
  if (has_resourcenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->resourcenum(), output);
  }

  // optional string alliancename = 8;
  if (has_alliancename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alliancename().data(), this->alliancename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->alliancename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FaroriteDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .slg.protocol.MapGridType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .slg.protocol.PositionDTO location = 2;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->location(), target);
  }

  // optional int32 subtype = 3;
  if (has_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->subtype(), target);
  }

  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // optional string icon = 5;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->icon(), target);
  }

  // optional string playernme = 6;
  if (has_playernme()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playernme().data(), this->playernme().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->playernme(), target);
  }

  // optional int32 resourceNum = 7;
  if (has_resourcenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->resourcenum(), target);
  }

  // optional string alliancename = 8;
  if (has_alliancename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alliancename().data(), this->alliancename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->alliancename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FaroriteDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .slg.protocol.MapGridType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .slg.protocol.PositionDTO location = 2;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }

    // optional int32 subtype = 3;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subtype());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional string icon = 5;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // optional string playernme = 6;
    if (has_playernme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playernme());
    }

    // optional int32 resourceNum = 7;
    if (has_resourcenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resourcenum());
    }

    // optional string alliancename = 8;
    if (has_alliancename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alliancename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaroriteDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FaroriteDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FaroriteDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FaroriteDTO::MergeFrom(const FaroriteDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_location()) {
      mutable_location()->::slg::protocol::PositionDTO::MergeFrom(from.location());
    }
    if (from.has_subtype()) {
      set_subtype(from.subtype());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_playernme()) {
      set_playernme(from.playernme());
    }
    if (from.has_resourcenum()) {
      set_resourcenum(from.resourcenum());
    }
    if (from.has_alliancename()) {
      set_alliancename(from.alliancename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FaroriteDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaroriteDTO::CopyFrom(const FaroriteDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaroriteDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_location()) {
    if (!this->location().IsInitialized()) return false;
  }
  return true;
}

void FaroriteDTO::Swap(FaroriteDTO* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(location_, other->location_);
    std::swap(subtype_, other->subtype_);
    std::swap(level_, other->level_);
    std::swap(icon_, other->icon_);
    std::swap(playernme_, other->playernme_);
    std::swap(resourcenum_, other->resourcenum_);
    std::swap(alliancename_, other->alliancename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FaroriteDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FaroriteDTO_descriptor_;
  metadata.reflection = FaroriteDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapQueryRequest::kStartFieldNumber;
const int MapQueryRequest::kEndFieldNumber;
const int MapQueryRequest::kCenterFieldNumber;
#endif  // !_MSC_VER

MapQueryRequest::MapQueryRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapQueryRequest::InitAsDefaultInstance() {
  start_ = const_cast< ::slg::protocol::PositionDTO*>(&::slg::protocol::PositionDTO::default_instance());
  end_ = const_cast< ::slg::protocol::PositionDTO*>(&::slg::protocol::PositionDTO::default_instance());
  center_ = const_cast< ::slg::protocol::PositionDTO*>(&::slg::protocol::PositionDTO::default_instance());
}

MapQueryRequest::MapQueryRequest(const MapQueryRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapQueryRequest::SharedCtor() {
  _cached_size_ = 0;
  start_ = NULL;
  end_ = NULL;
  center_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapQueryRequest::~MapQueryRequest() {
  SharedDtor();
}

void MapQueryRequest::SharedDtor() {
  if (this != default_instance_) {
    delete start_;
    delete end_;
    delete center_;
  }
}

void MapQueryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapQueryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapQueryRequest_descriptor_;
}

const MapQueryRequest& MapQueryRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

MapQueryRequest* MapQueryRequest::default_instance_ = NULL;

MapQueryRequest* MapQueryRequest::New() const {
  return new MapQueryRequest;
}

void MapQueryRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_start()) {
      if (start_ != NULL) start_->::slg::protocol::PositionDTO::Clear();
    }
    if (has_end()) {
      if (end_ != NULL) end_->::slg::protocol::PositionDTO::Clear();
    }
    if (has_center()) {
      if (center_ != NULL) center_->::slg::protocol::PositionDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapQueryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .slg.protocol.PositionDTO start = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_end;
        break;
      }

      // required .slg.protocol.PositionDTO end = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_center;
        break;
      }

      // required .slg.protocol.PositionDTO center = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_center:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapQueryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .slg.protocol.PositionDTO start = 1;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->start(), output);
  }

  // required .slg.protocol.PositionDTO end = 2;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->end(), output);
  }

  // required .slg.protocol.PositionDTO center = 3;
  if (has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->center(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapQueryRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .slg.protocol.PositionDTO start = 1;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->start(), target);
  }

  // required .slg.protocol.PositionDTO end = 2;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->end(), target);
  }

  // required .slg.protocol.PositionDTO center = 3;
  if (has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->center(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapQueryRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .slg.protocol.PositionDTO start = 1;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start());
    }

    // required .slg.protocol.PositionDTO end = 2;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end());
    }

    // required .slg.protocol.PositionDTO center = 3;
    if (has_center()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->center());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapQueryRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapQueryRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapQueryRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapQueryRequest::MergeFrom(const MapQueryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start()) {
      mutable_start()->::slg::protocol::PositionDTO::MergeFrom(from.start());
    }
    if (from.has_end()) {
      mutable_end()->::slg::protocol::PositionDTO::MergeFrom(from.end());
    }
    if (from.has_center()) {
      mutable_center()->::slg::protocol::PositionDTO::MergeFrom(from.center());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapQueryRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapQueryRequest::CopyFrom(const MapQueryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapQueryRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_start()) {
    if (!this->start().IsInitialized()) return false;
  }
  if (has_end()) {
    if (!this->end().IsInitialized()) return false;
  }
  if (has_center()) {
    if (!this->center().IsInitialized()) return false;
  }
  return true;
}

void MapQueryRequest::Swap(MapQueryRequest* other) {
  if (other != this) {
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(center_, other->center_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapQueryRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapQueryRequest_descriptor_;
  metadata.reflection = MapQueryRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapPlayerMigrateRequest::kTargetFieldNumber;
const int MapPlayerMigrateRequest::kUseItemFieldNumber;
#endif  // !_MSC_VER

MapPlayerMigrateRequest::MapPlayerMigrateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapPlayerMigrateRequest::InitAsDefaultInstance() {
  target_ = const_cast< ::slg::protocol::PositionDTO*>(&::slg::protocol::PositionDTO::default_instance());
}

MapPlayerMigrateRequest::MapPlayerMigrateRequest(const MapPlayerMigrateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapPlayerMigrateRequest::SharedCtor() {
  _cached_size_ = 0;
  target_ = NULL;
  useitem_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapPlayerMigrateRequest::~MapPlayerMigrateRequest() {
  SharedDtor();
}

void MapPlayerMigrateRequest::SharedDtor() {
  if (this != default_instance_) {
    delete target_;
  }
}

void MapPlayerMigrateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapPlayerMigrateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapPlayerMigrateRequest_descriptor_;
}

const MapPlayerMigrateRequest& MapPlayerMigrateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

MapPlayerMigrateRequest* MapPlayerMigrateRequest::default_instance_ = NULL;

MapPlayerMigrateRequest* MapPlayerMigrateRequest::New() const {
  return new MapPlayerMigrateRequest;
}

void MapPlayerMigrateRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_target()) {
      if (target_ != NULL) target_->::slg::protocol::PositionDTO::Clear();
    }
    useitem_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapPlayerMigrateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .slg.protocol.PositionDTO target = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_useItem;
        break;
      }

      // required bool useItem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &useitem_)));
          set_has_useitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapPlayerMigrateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .slg.protocol.PositionDTO target = 1;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->target(), output);
  }

  // required bool useItem = 2;
  if (has_useitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->useitem(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapPlayerMigrateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .slg.protocol.PositionDTO target = 1;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->target(), target);
  }

  // required bool useItem = 2;
  if (has_useitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->useitem(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapPlayerMigrateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .slg.protocol.PositionDTO target = 1;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }

    // required bool useItem = 2;
    if (has_useitem()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapPlayerMigrateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapPlayerMigrateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapPlayerMigrateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapPlayerMigrateRequest::MergeFrom(const MapPlayerMigrateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target()) {
      mutable_target()->::slg::protocol::PositionDTO::MergeFrom(from.target());
    }
    if (from.has_useitem()) {
      set_useitem(from.useitem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapPlayerMigrateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapPlayerMigrateRequest::CopyFrom(const MapPlayerMigrateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapPlayerMigrateRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_target()) {
    if (!this->target().IsInitialized()) return false;
  }
  return true;
}

void MapPlayerMigrateRequest::Swap(MapPlayerMigrateRequest* other) {
  if (other != this) {
    std::swap(target_, other->target_);
    std::swap(useitem_, other->useitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapPlayerMigrateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapPlayerMigrateRequest_descriptor_;
  metadata.reflection = MapPlayerMigrateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapPlayerMigrateResponse::kTargetFieldNumber;
#endif  // !_MSC_VER

MapPlayerMigrateResponse::MapPlayerMigrateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapPlayerMigrateResponse::InitAsDefaultInstance() {
  target_ = const_cast< ::slg::protocol::PositionDTO*>(&::slg::protocol::PositionDTO::default_instance());
}

MapPlayerMigrateResponse::MapPlayerMigrateResponse(const MapPlayerMigrateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapPlayerMigrateResponse::SharedCtor() {
  _cached_size_ = 0;
  target_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapPlayerMigrateResponse::~MapPlayerMigrateResponse() {
  SharedDtor();
}

void MapPlayerMigrateResponse::SharedDtor() {
  if (this != default_instance_) {
    delete target_;
  }
}

void MapPlayerMigrateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapPlayerMigrateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapPlayerMigrateResponse_descriptor_;
}

const MapPlayerMigrateResponse& MapPlayerMigrateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

MapPlayerMigrateResponse* MapPlayerMigrateResponse::default_instance_ = NULL;

MapPlayerMigrateResponse* MapPlayerMigrateResponse::New() const {
  return new MapPlayerMigrateResponse;
}

void MapPlayerMigrateResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_target()) {
      if (target_ != NULL) target_->::slg::protocol::PositionDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapPlayerMigrateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .slg.protocol.PositionDTO target = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapPlayerMigrateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .slg.protocol.PositionDTO target = 1;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->target(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapPlayerMigrateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .slg.protocol.PositionDTO target = 1;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->target(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapPlayerMigrateResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .slg.protocol.PositionDTO target = 1;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapPlayerMigrateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapPlayerMigrateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapPlayerMigrateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapPlayerMigrateResponse::MergeFrom(const MapPlayerMigrateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target()) {
      mutable_target()->::slg::protocol::PositionDTO::MergeFrom(from.target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapPlayerMigrateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapPlayerMigrateResponse::CopyFrom(const MapPlayerMigrateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapPlayerMigrateResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_target()) {
    if (!this->target().IsInitialized()) return false;
  }
  return true;
}

void MapPlayerMigrateResponse::Swap(MapPlayerMigrateResponse* other) {
  if (other != this) {
    std::swap(target_, other->target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapPlayerMigrateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapPlayerMigrateResponse_descriptor_;
  metadata.reflection = MapPlayerMigrateResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapGridSearchRequest::kTypeFieldNumber;
const int MapGridSearchRequest::kLevelFieldNumber;
#endif  // !_MSC_VER

MapGridSearchRequest::MapGridSearchRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapGridSearchRequest::InitAsDefaultInstance() {
}

MapGridSearchRequest::MapGridSearchRequest(const MapGridSearchRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapGridSearchRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapGridSearchRequest::~MapGridSearchRequest() {
  SharedDtor();
}

void MapGridSearchRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapGridSearchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapGridSearchRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapGridSearchRequest_descriptor_;
}

const MapGridSearchRequest& MapGridSearchRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

MapGridSearchRequest* MapGridSearchRequest::default_instance_ = NULL;

MapGridSearchRequest* MapGridSearchRequest::New() const {
  return new MapGridSearchRequest;
}

void MapGridSearchRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapGridSearchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .slg.protocol.MapGridSearchType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::slg::protocol::MapGridSearchType_IsValid(value)) {
            set_type(static_cast< ::slg::protocol::MapGridSearchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapGridSearchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .slg.protocol.MapGridSearchType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapGridSearchRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .slg.protocol.MapGridSearchType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapGridSearchRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .slg.protocol.MapGridSearchType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapGridSearchRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapGridSearchRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapGridSearchRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapGridSearchRequest::MergeFrom(const MapGridSearchRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapGridSearchRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapGridSearchRequest::CopyFrom(const MapGridSearchRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapGridSearchRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MapGridSearchRequest::Swap(MapGridSearchRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapGridSearchRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapGridSearchRequest_descriptor_;
  metadata.reflection = MapGridSearchRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapGridSearchResponse::kPositionFieldNumber;
#endif  // !_MSC_VER

MapGridSearchResponse::MapGridSearchResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapGridSearchResponse::InitAsDefaultInstance() {
  position_ = const_cast< ::slg::protocol::PositionDTO*>(&::slg::protocol::PositionDTO::default_instance());
}

MapGridSearchResponse::MapGridSearchResponse(const MapGridSearchResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapGridSearchResponse::SharedCtor() {
  _cached_size_ = 0;
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapGridSearchResponse::~MapGridSearchResponse() {
  SharedDtor();
}

void MapGridSearchResponse::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void MapGridSearchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapGridSearchResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapGridSearchResponse_descriptor_;
}

const MapGridSearchResponse& MapGridSearchResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

MapGridSearchResponse* MapGridSearchResponse::default_instance_ = NULL;

MapGridSearchResponse* MapGridSearchResponse::New() const {
  return new MapGridSearchResponse;
}

void MapGridSearchResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_position()) {
      if (position_ != NULL) position_->::slg::protocol::PositionDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapGridSearchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .slg.protocol.PositionDTO position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapGridSearchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .slg.protocol.PositionDTO position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapGridSearchResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .slg.protocol.PositionDTO position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapGridSearchResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .slg.protocol.PositionDTO position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapGridSearchResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapGridSearchResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapGridSearchResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapGridSearchResponse::MergeFrom(const MapGridSearchResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      mutable_position()->::slg::protocol::PositionDTO::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapGridSearchResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapGridSearchResponse::CopyFrom(const MapGridSearchResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapGridSearchResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void MapGridSearchResponse::Swap(MapGridSearchResponse* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapGridSearchResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapGridSearchResponse_descriptor_;
  metadata.reflection = MapGridSearchResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FaroriteListRequest::kTypeFieldNumber;
#endif  // !_MSC_VER

FaroriteListRequest::FaroriteListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FaroriteListRequest::InitAsDefaultInstance() {
}

FaroriteListRequest::FaroriteListRequest(const FaroriteListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FaroriteListRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FaroriteListRequest::~FaroriteListRequest() {
  SharedDtor();
}

void FaroriteListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FaroriteListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaroriteListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaroriteListRequest_descriptor_;
}

const FaroriteListRequest& FaroriteListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

FaroriteListRequest* FaroriteListRequest::default_instance_ = NULL;

FaroriteListRequest* FaroriteListRequest::New() const {
  return new FaroriteListRequest;
}

void FaroriteListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FaroriteListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FaroriteListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FaroriteListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FaroriteListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaroriteListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FaroriteListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FaroriteListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FaroriteListRequest::MergeFrom(const FaroriteListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FaroriteListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaroriteListRequest::CopyFrom(const FaroriteListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaroriteListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FaroriteListRequest::Swap(FaroriteListRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FaroriteListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FaroriteListRequest_descriptor_;
  metadata.reflection = FaroriteListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FaroriteListResponse::kTypeFieldNumber;
const int FaroriteListResponse::kFavoritelistFieldNumber;
#endif  // !_MSC_VER

FaroriteListResponse::FaroriteListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FaroriteListResponse::InitAsDefaultInstance() {
}

FaroriteListResponse::FaroriteListResponse(const FaroriteListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FaroriteListResponse::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FaroriteListResponse::~FaroriteListResponse() {
  SharedDtor();
}

void FaroriteListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FaroriteListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaroriteListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaroriteListResponse_descriptor_;
}

const FaroriteListResponse& FaroriteListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

FaroriteListResponse* FaroriteListResponse::default_instance_ = NULL;

FaroriteListResponse* FaroriteListResponse::New() const {
  return new FaroriteListResponse;
}

void FaroriteListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  favoritelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FaroriteListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_favoritelist;
        break;
      }

      // repeated .slg.protocol.FaroriteDTO favoritelist = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_favoritelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_favoritelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_favoritelist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FaroriteListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated .slg.protocol.FaroriteDTO favoritelist = 3;
  for (int i = 0; i < this->favoritelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->favoritelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FaroriteListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated .slg.protocol.FaroriteDTO favoritelist = 3;
  for (int i = 0; i < this->favoritelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->favoritelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FaroriteListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .slg.protocol.FaroriteDTO favoritelist = 3;
  total_size += 1 * this->favoritelist_size();
  for (int i = 0; i < this->favoritelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->favoritelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaroriteListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FaroriteListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FaroriteListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FaroriteListResponse::MergeFrom(const FaroriteListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  favoritelist_.MergeFrom(from.favoritelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FaroriteListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaroriteListResponse::CopyFrom(const FaroriteListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaroriteListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < favoritelist_size(); i++) {
    if (!this->favoritelist(i).IsInitialized()) return false;
  }
  return true;
}

void FaroriteListResponse::Swap(FaroriteListResponse* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    favoritelist_.Swap(&other->favoritelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FaroriteListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FaroriteListResponse_descriptor_;
  metadata.reflection = FaroriteListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FaroriteRequest::kPositionFieldNumber;
#endif  // !_MSC_VER

FaroriteRequest::FaroriteRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FaroriteRequest::InitAsDefaultInstance() {
  position_ = const_cast< ::slg::protocol::PositionDTO*>(&::slg::protocol::PositionDTO::default_instance());
}

FaroriteRequest::FaroriteRequest(const FaroriteRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FaroriteRequest::SharedCtor() {
  _cached_size_ = 0;
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FaroriteRequest::~FaroriteRequest() {
  SharedDtor();
}

void FaroriteRequest::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void FaroriteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaroriteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaroriteRequest_descriptor_;
}

const FaroriteRequest& FaroriteRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

FaroriteRequest* FaroriteRequest::default_instance_ = NULL;

FaroriteRequest* FaroriteRequest::New() const {
  return new FaroriteRequest;
}

void FaroriteRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_position()) {
      if (position_ != NULL) position_->::slg::protocol::PositionDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FaroriteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .slg.protocol.PositionDTO position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FaroriteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .slg.protocol.PositionDTO position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FaroriteRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .slg.protocol.PositionDTO position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FaroriteRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .slg.protocol.PositionDTO position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaroriteRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FaroriteRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FaroriteRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FaroriteRequest::MergeFrom(const FaroriteRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      mutable_position()->::slg::protocol::PositionDTO::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FaroriteRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaroriteRequest::CopyFrom(const FaroriteRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaroriteRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void FaroriteRequest::Swap(FaroriteRequest* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FaroriteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FaroriteRequest_descriptor_;
  metadata.reflection = FaroriteRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FavoriteResponse::kFavoriteFieldNumber;
#endif  // !_MSC_VER

FavoriteResponse::FavoriteResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FavoriteResponse::InitAsDefaultInstance() {
  favorite_ = const_cast< ::slg::protocol::FaroriteDTO*>(&::slg::protocol::FaroriteDTO::default_instance());
}

FavoriteResponse::FavoriteResponse(const FavoriteResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FavoriteResponse::SharedCtor() {
  _cached_size_ = 0;
  favorite_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FavoriteResponse::~FavoriteResponse() {
  SharedDtor();
}

void FavoriteResponse::SharedDtor() {
  if (this != default_instance_) {
    delete favorite_;
  }
}

void FavoriteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FavoriteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FavoriteResponse_descriptor_;
}

const FavoriteResponse& FavoriteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

FavoriteResponse* FavoriteResponse::default_instance_ = NULL;

FavoriteResponse* FavoriteResponse::New() const {
  return new FavoriteResponse;
}

void FavoriteResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_favorite()) {
      if (favorite_ != NULL) favorite_->::slg::protocol::FaroriteDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FavoriteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .slg.protocol.FaroriteDTO favorite = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_favorite()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FavoriteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .slg.protocol.FaroriteDTO favorite = 2;
  if (has_favorite()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->favorite(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FavoriteResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .slg.protocol.FaroriteDTO favorite = 2;
  if (has_favorite()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->favorite(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FavoriteResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .slg.protocol.FaroriteDTO favorite = 2;
    if (has_favorite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->favorite());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FavoriteResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FavoriteResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FavoriteResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FavoriteResponse::MergeFrom(const FavoriteResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_favorite()) {
      mutable_favorite()->::slg::protocol::FaroriteDTO::MergeFrom(from.favorite());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FavoriteResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FavoriteResponse::CopyFrom(const FavoriteResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FavoriteResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_favorite()) {
    if (!this->favorite().IsInitialized()) return false;
  }
  return true;
}

void FavoriteResponse::Swap(FavoriteResponse* other) {
  if (other != this) {
    std::swap(favorite_, other->favorite_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FavoriteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FavoriteResponse_descriptor_;
  metadata.reflection = FavoriteResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FaroriteRemoveRequest::kTypeFieldNumber;
const int FaroriteRemoveRequest::kIndexFieldNumber;
#endif  // !_MSC_VER

FaroriteRemoveRequest::FaroriteRemoveRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FaroriteRemoveRequest::InitAsDefaultInstance() {
}

FaroriteRemoveRequest::FaroriteRemoveRequest(const FaroriteRemoveRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FaroriteRemoveRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FaroriteRemoveRequest::~FaroriteRemoveRequest() {
  SharedDtor();
}

void FaroriteRemoveRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FaroriteRemoveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaroriteRemoveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaroriteRemoveRequest_descriptor_;
}

const FaroriteRemoveRequest& FaroriteRemoveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

FaroriteRemoveRequest* FaroriteRemoveRequest::default_instance_ = NULL;

FaroriteRemoveRequest* FaroriteRemoveRequest::New() const {
  return new FaroriteRemoveRequest;
}

void FaroriteRemoveRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FaroriteRemoveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FaroriteRemoveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FaroriteRemoveRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FaroriteRemoveRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaroriteRemoveRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FaroriteRemoveRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FaroriteRemoveRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FaroriteRemoveRequest::MergeFrom(const FaroriteRemoveRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FaroriteRemoveRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaroriteRemoveRequest::CopyFrom(const FaroriteRemoveRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaroriteRemoveRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FaroriteRemoveRequest::Swap(FaroriteRemoveRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FaroriteRemoveRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FaroriteRemoveRequest_descriptor_;
  metadata.reflection = FaroriteRemoveRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FaroriteRemoveResponse::kTypeFieldNumber;
const int FaroriteRemoveResponse::kIndexFieldNumber;
#endif  // !_MSC_VER

FaroriteRemoveResponse::FaroriteRemoveResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FaroriteRemoveResponse::InitAsDefaultInstance() {
}

FaroriteRemoveResponse::FaroriteRemoveResponse(const FaroriteRemoveResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FaroriteRemoveResponse::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FaroriteRemoveResponse::~FaroriteRemoveResponse() {
  SharedDtor();
}

void FaroriteRemoveResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FaroriteRemoveResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaroriteRemoveResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaroriteRemoveResponse_descriptor_;
}

const FaroriteRemoveResponse& FaroriteRemoveResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

FaroriteRemoveResponse* FaroriteRemoveResponse::default_instance_ = NULL;

FaroriteRemoveResponse* FaroriteRemoveResponse::New() const {
  return new FaroriteRemoveResponse;
}

void FaroriteRemoveResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FaroriteRemoveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FaroriteRemoveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FaroriteRemoveResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FaroriteRemoveResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaroriteRemoveResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FaroriteRemoveResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FaroriteRemoveResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FaroriteRemoveResponse::MergeFrom(const FaroriteRemoveResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FaroriteRemoveResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaroriteRemoveResponse::CopyFrom(const FaroriteRemoveResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaroriteRemoveResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FaroriteRemoveResponse::Swap(FaroriteRemoveResponse* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FaroriteRemoveResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FaroriteRemoveResponse_descriptor_;
  metadata.reflection = FaroriteRemoveResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapGridListPush::kMapGridsFieldNumber;
#endif  // !_MSC_VER

MapGridListPush::MapGridListPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapGridListPush::InitAsDefaultInstance() {
}

MapGridListPush::MapGridListPush(const MapGridListPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapGridListPush::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapGridListPush::~MapGridListPush() {
  SharedDtor();
}

void MapGridListPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapGridListPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapGridListPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapGridListPush_descriptor_;
}

const MapGridListPush& MapGridListPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

MapGridListPush* MapGridListPush::default_instance_ = NULL;

MapGridListPush* MapGridListPush::New() const {
  return new MapGridListPush;
}

void MapGridListPush::Clear() {
  mapgrids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapGridListPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.MapGridDTO mapGrids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mapGrids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mapgrids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mapGrids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapGridListPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.MapGridDTO mapGrids = 1;
  for (int i = 0; i < this->mapgrids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mapgrids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapGridListPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.MapGridDTO mapGrids = 1;
  for (int i = 0; i < this->mapgrids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mapgrids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapGridListPush::ByteSize() const {
  int total_size = 0;

  // repeated .slg.protocol.MapGridDTO mapGrids = 1;
  total_size += 1 * this->mapgrids_size();
  for (int i = 0; i < this->mapgrids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mapgrids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapGridListPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapGridListPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapGridListPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapGridListPush::MergeFrom(const MapGridListPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  mapgrids_.MergeFrom(from.mapgrids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapGridListPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapGridListPush::CopyFrom(const MapGridListPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapGridListPush::IsInitialized() const {

  for (int i = 0; i < mapgrids_size(); i++) {
    if (!this->mapgrids(i).IsInitialized()) return false;
  }
  return true;
}

void MapGridListPush::Swap(MapGridListPush* other) {
  if (other != this) {
    mapgrids_.Swap(&other->mapgrids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapGridListPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapGridListPush_descriptor_;
  metadata.reflection = MapGridListPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapGridRemovePush::kPositionFieldNumber;
#endif  // !_MSC_VER

MapGridRemovePush::MapGridRemovePush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapGridRemovePush::InitAsDefaultInstance() {
  position_ = const_cast< ::slg::protocol::PositionDTO*>(&::slg::protocol::PositionDTO::default_instance());
}

MapGridRemovePush::MapGridRemovePush(const MapGridRemovePush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapGridRemovePush::SharedCtor() {
  _cached_size_ = 0;
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapGridRemovePush::~MapGridRemovePush() {
  SharedDtor();
}

void MapGridRemovePush::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void MapGridRemovePush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapGridRemovePush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapGridRemovePush_descriptor_;
}

const MapGridRemovePush& MapGridRemovePush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

MapGridRemovePush* MapGridRemovePush::default_instance_ = NULL;

MapGridRemovePush* MapGridRemovePush::New() const {
  return new MapGridRemovePush;
}

void MapGridRemovePush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_position()) {
      if (position_ != NULL) position_->::slg::protocol::PositionDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapGridRemovePush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .slg.protocol.PositionDTO position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapGridRemovePush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .slg.protocol.PositionDTO position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapGridRemovePush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .slg.protocol.PositionDTO position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapGridRemovePush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .slg.protocol.PositionDTO position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapGridRemovePush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapGridRemovePush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapGridRemovePush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapGridRemovePush::MergeFrom(const MapGridRemovePush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      mutable_position()->::slg::protocol::PositionDTO::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapGridRemovePush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapGridRemovePush::CopyFrom(const MapGridRemovePush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapGridRemovePush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void MapGridRemovePush::Swap(MapGridRemovePush* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapGridRemovePush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapGridRemovePush_descriptor_;
  metadata.reflection = MapGridRemovePush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonsterProgress::kTypeFieldNumber;
const int MonsterProgress::kMonsterTroopIdFieldNumber;
#endif  // !_MSC_VER

MonsterProgress::MonsterProgress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonsterProgress::InitAsDefaultInstance() {
}

MonsterProgress::MonsterProgress(const MonsterProgress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonsterProgress::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  monstertroopid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonsterProgress::~MonsterProgress() {
  SharedDtor();
}

void MonsterProgress::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MonsterProgress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonsterProgress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonsterProgress_descriptor_;
}

const MonsterProgress& MonsterProgress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

MonsterProgress* MonsterProgress::default_instance_ = NULL;

MonsterProgress* MonsterProgress::New() const {
  return new MonsterProgress;
}

void MonsterProgress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    monstertroopid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonsterProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_monsterTroopId;
        break;
      }

      // required int32 monsterTroopId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monsterTroopId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monstertroopid_)));
          set_has_monstertroopid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonsterProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 monsterTroopId = 2;
  if (has_monstertroopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->monstertroopid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonsterProgress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 monsterTroopId = 2;
  if (has_monstertroopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->monstertroopid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonsterProgress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 monsterTroopId = 2;
    if (has_monstertroopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monstertroopid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonsterProgress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonsterProgress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonsterProgress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonsterProgress::MergeFrom(const MonsterProgress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_monstertroopid()) {
      set_monstertroopid(from.monstertroopid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonsterProgress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonsterProgress::CopyFrom(const MonsterProgress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterProgress::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MonsterProgress::Swap(MonsterProgress* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(monstertroopid_, other->monstertroopid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonsterProgress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonsterProgress_descriptor_;
  metadata.reflection = MonsterProgress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapMonsterProgressPush::kProgressesFieldNumber;
#endif  // !_MSC_VER

MapMonsterProgressPush::MapMonsterProgressPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapMonsterProgressPush::InitAsDefaultInstance() {
}

MapMonsterProgressPush::MapMonsterProgressPush(const MapMonsterProgressPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapMonsterProgressPush::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapMonsterProgressPush::~MapMonsterProgressPush() {
  SharedDtor();
}

void MapMonsterProgressPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapMonsterProgressPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapMonsterProgressPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapMonsterProgressPush_descriptor_;
}

const MapMonsterProgressPush& MapMonsterProgressPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

MapMonsterProgressPush* MapMonsterProgressPush::default_instance_ = NULL;

MapMonsterProgressPush* MapMonsterProgressPush::New() const {
  return new MapMonsterProgressPush;
}

void MapMonsterProgressPush::Clear() {
  progresses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapMonsterProgressPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.MonsterProgress progresses = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_progresses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_progresses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_progresses;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapMonsterProgressPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.MonsterProgress progresses = 1;
  for (int i = 0; i < this->progresses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->progresses(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapMonsterProgressPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.MonsterProgress progresses = 1;
  for (int i = 0; i < this->progresses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->progresses(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapMonsterProgressPush::ByteSize() const {
  int total_size = 0;

  // repeated .slg.protocol.MonsterProgress progresses = 1;
  total_size += 1 * this->progresses_size();
  for (int i = 0; i < this->progresses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->progresses(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapMonsterProgressPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapMonsterProgressPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapMonsterProgressPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapMonsterProgressPush::MergeFrom(const MapMonsterProgressPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  progresses_.MergeFrom(from.progresses_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapMonsterProgressPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapMonsterProgressPush::CopyFrom(const MapMonsterProgressPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapMonsterProgressPush::IsInitialized() const {

  for (int i = 0; i < progresses_size(); i++) {
    if (!this->progresses(i).IsInitialized()) return false;
  }
  return true;
}

void MapMonsterProgressPush::Swap(MapMonsterProgressPush* other) {
  if (other != this) {
    progresses_.Swap(&other->progresses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapMonsterProgressPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapMonsterProgressPush_descriptor_;
  metadata.reflection = MapMonsterProgressPush_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace slg

// @@protoc_insertion_point(global_scope)
