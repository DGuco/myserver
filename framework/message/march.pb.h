// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: march.proto

#ifndef PROTOBUF_march_2eproto__INCLUDED
#define PROTOBUF_march_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace slg {
namespace protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_march_2eproto();
void protobuf_AssignDesc_march_2eproto();
void protobuf_ShutdownFile_march_2eproto();

class MarchAllianceDTO;
class MarchPlayerDTO;
class MarchAidDTO;
class MarchDetailDTO;
class MarchTimerDTO;
class MarchInfoDTO;
class MarchStartRequest;
class MarchStartResponse;
class MarchSpeedUpRequest;
class MarchSpeedUpResponse;
class MarchRecallRequest;
class MarchRecallResponse;
class MarchDismissRequest;
class MarchDismissResponse;
class MarchKickRequest;
class MarchKickResponse;
class MarchInfoPush;
class MarchRemovePush;
class MarchResultPush;
class MarchTimerPush;
class MilitaryDTO;
class MilitaryPush;
class MilitaryDeletePush;

enum MarchState {
  MARCH_STATE_WAIT = 0,
  MARCH_STATE_FORWARD = 1,
  MARCH_STATE_STANDBY = 2,
  MARCH_STATE_BACKWARD = 3
};
bool MarchState_IsValid(int value);
const MarchState MarchState_MIN = MARCH_STATE_WAIT;
const MarchState MarchState_MAX = MARCH_STATE_BACKWARD;
const int MarchState_ARRAYSIZE = MarchState_MAX + 1;

const ::google::protobuf::EnumDescriptor* MarchState_descriptor();
inline const ::std::string& MarchState_Name(MarchState value) {
  return ::google::protobuf::internal::NameOfEnum(
    MarchState_descriptor(), value);
}
inline bool MarchState_Parse(
    const ::std::string& name, MarchState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MarchState>(
    MarchState_descriptor(), name, value);
}
enum MarchType {
  MARCH_PVP = 1,
  MARCH_PVE = 2,
  MARCH_RESOURCE = 3,
  MARCH_EVP = 4,
  MARCH_SPY = 5,
  MARCH_MASS = 6,
  MARCH_JOIN = 7,
  MARCH_REINFORCE = 8,
  MARCH_MARKET = 9
};
bool MarchType_IsValid(int value);
const MarchType MarchType_MIN = MARCH_PVP;
const MarchType MarchType_MAX = MARCH_MARKET;
const int MarchType_ARRAYSIZE = MarchType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MarchType_descriptor();
inline const ::std::string& MarchType_Name(MarchType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MarchType_descriptor(), value);
}
inline bool MarchType_Parse(
    const ::std::string& name, MarchType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MarchType>(
    MarchType_descriptor(), name, value);
}
enum MarchCommandId {
  MARCH_START = 601,
  MARCH_SPEED_UP = 602,
  MARCH_RECALL = 603,
  MARCH_DISMISS = 604,
  MARCH_KICK = 605,
  MARCH_TRADE = 606
};
bool MarchCommandId_IsValid(int value);
const MarchCommandId MarchCommandId_MIN = MARCH_START;
const MarchCommandId MarchCommandId_MAX = MARCH_TRADE;
const int MarchCommandId_ARRAYSIZE = MarchCommandId_MAX + 1;

const ::google::protobuf::EnumDescriptor* MarchCommandId_descriptor();
inline const ::std::string& MarchCommandId_Name(MarchCommandId value) {
  return ::google::protobuf::internal::NameOfEnum(
    MarchCommandId_descriptor(), value);
}
inline bool MarchCommandId_Parse(
    const ::std::string& name, MarchCommandId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MarchCommandId>(
    MarchCommandId_descriptor(), name, value);
}
enum MarchPushId {
  MARCH_INFO_LIST_PUSH = 50601,
  MARCH_RESULT_PUSH = 50602,
  MARCH_TIMER_PUSH = 50603,
  MARCH_REMOVE_PUSH = 50607,
  MILITARY_LIST = 50610,
  MILITARY_DELETE = 50611
};
bool MarchPushId_IsValid(int value);
const MarchPushId MarchPushId_MIN = MARCH_INFO_LIST_PUSH;
const MarchPushId MarchPushId_MAX = MILITARY_DELETE;
const int MarchPushId_ARRAYSIZE = MarchPushId_MAX + 1;

const ::google::protobuf::EnumDescriptor* MarchPushId_descriptor();
inline const ::std::string& MarchPushId_Name(MarchPushId value) {
  return ::google::protobuf::internal::NameOfEnum(
    MarchPushId_descriptor(), value);
}
inline bool MarchPushId_Parse(
    const ::std::string& name, MarchPushId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MarchPushId>(
    MarchPushId_descriptor(), name, value);
}
// ===================================================================

class MarchAllianceDTO : public ::google::protobuf::Message {
 public:
  MarchAllianceDTO();
  virtual ~MarchAllianceDTO();

  MarchAllianceDTO(const MarchAllianceDTO& from);

  inline MarchAllianceDTO& operator=(const MarchAllianceDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarchAllianceDTO& default_instance();

  void Swap(MarchAllianceDTO* other);

  // implements Message ----------------------------------------------

  MarchAllianceDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarchAllianceDTO& from);
  void MergeFrom(const MarchAllianceDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string shortName = 2;
  inline bool has_shortname() const;
  inline void clear_shortname();
  static const int kShortNameFieldNumber = 2;
  inline const ::std::string& shortname() const;
  inline void set_shortname(const ::std::string& value);
  inline void set_shortname(const char* value);
  inline void set_shortname(const char* value, size_t size);
  inline ::std::string* mutable_shortname();
  inline ::std::string* release_shortname();
  inline void set_allocated_shortname(::std::string* shortname);

  // @@protoc_insertion_point(class_scope:slg.protocol.MarchAllianceDTO)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_shortname();
  inline void clear_has_shortname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* shortname_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_march_2eproto();
  friend void protobuf_AssignDesc_march_2eproto();
  friend void protobuf_ShutdownFile_march_2eproto();

  void InitAsDefaultInstance();
  static MarchAllianceDTO* default_instance_;
};
// -------------------------------------------------------------------

class MarchPlayerDTO : public ::google::protobuf::Message {
 public:
  MarchPlayerDTO();
  virtual ~MarchPlayerDTO();

  MarchPlayerDTO(const MarchPlayerDTO& from);

  inline MarchPlayerDTO& operator=(const MarchPlayerDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarchPlayerDTO& default_instance();

  void Swap(MarchPlayerDTO* other);

  // implements Message ----------------------------------------------

  MarchPlayerDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarchPlayerDTO& from);
  void MergeFrom(const MarchPlayerDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // optional string icon = 2;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 2;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .slg.protocol.LevelSoldierDTO soldiers = 4;
  inline int soldiers_size() const;
  inline void clear_soldiers();
  static const int kSoldiersFieldNumber = 4;
  inline const ::slg::protocol::LevelSoldierDTO& soldiers(int index) const;
  inline ::slg::protocol::LevelSoldierDTO* mutable_soldiers(int index);
  inline ::slg::protocol::LevelSoldierDTO* add_soldiers();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::LevelSoldierDTO >&
      soldiers() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::LevelSoldierDTO >*
      mutable_soldiers();

  // optional .slg.protocol.MarchAllianceDTO alliance = 5;
  inline bool has_alliance() const;
  inline void clear_alliance();
  static const int kAllianceFieldNumber = 5;
  inline const ::slg::protocol::MarchAllianceDTO& alliance() const;
  inline ::slg::protocol::MarchAllianceDTO* mutable_alliance();
  inline ::slg::protocol::MarchAllianceDTO* release_alliance();
  inline void set_allocated_alliance(::slg::protocol::MarchAllianceDTO* alliance);

  // @@protoc_insertion_point(class_scope:slg.protocol.MarchPlayerDTO)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_alliance();
  inline void clear_has_alliance();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 playerid_;
  ::std::string* icon_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::slg::protocol::LevelSoldierDTO > soldiers_;
  ::slg::protocol::MarchAllianceDTO* alliance_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_march_2eproto();
  friend void protobuf_AssignDesc_march_2eproto();
  friend void protobuf_ShutdownFile_march_2eproto();

  void InitAsDefaultInstance();
  static MarchPlayerDTO* default_instance_;
};
// -------------------------------------------------------------------

class MarchAidDTO : public ::google::protobuf::Message {
 public:
  MarchAidDTO();
  virtual ~MarchAidDTO();

  MarchAidDTO(const MarchAidDTO& from);

  inline MarchAidDTO& operator=(const MarchAidDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarchAidDTO& default_instance();

  void Swap(MarchAidDTO* other);

  // implements Message ----------------------------------------------

  MarchAidDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarchAidDTO& from);
  void MergeFrom(const MarchAidDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .slg.protocol.MarchPlayerDTO arrivedPlayers = 1;
  inline int arrivedplayers_size() const;
  inline void clear_arrivedplayers();
  static const int kArrivedPlayersFieldNumber = 1;
  inline const ::slg::protocol::MarchPlayerDTO& arrivedplayers(int index) const;
  inline ::slg::protocol::MarchPlayerDTO* mutable_arrivedplayers(int index);
  inline ::slg::protocol::MarchPlayerDTO* add_arrivedplayers();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::MarchPlayerDTO >&
      arrivedplayers() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::MarchPlayerDTO >*
      mutable_arrivedplayers();

  // repeated .slg.protocol.MarchPlayerDTO marchingPlayers = 2;
  inline int marchingplayers_size() const;
  inline void clear_marchingplayers();
  static const int kMarchingPlayersFieldNumber = 2;
  inline const ::slg::protocol::MarchPlayerDTO& marchingplayers(int index) const;
  inline ::slg::protocol::MarchPlayerDTO* mutable_marchingplayers(int index);
  inline ::slg::protocol::MarchPlayerDTO* add_marchingplayers();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::MarchPlayerDTO >&
      marchingplayers() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::MarchPlayerDTO >*
      mutable_marchingplayers();

  // required int32 troopLimit = 3;
  inline bool has_trooplimit() const;
  inline void clear_trooplimit();
  static const int kTroopLimitFieldNumber = 3;
  inline ::google::protobuf::int32 trooplimit() const;
  inline void set_trooplimit(::google::protobuf::int32 value);

  // required int32 armyLimit = 4;
  inline bool has_armylimit() const;
  inline void clear_armylimit();
  static const int kArmyLimitFieldNumber = 4;
  inline ::google::protobuf::int32 armylimit() const;
  inline void set_armylimit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.MarchAidDTO)
 private:
  inline void set_has_trooplimit();
  inline void clear_has_trooplimit();
  inline void set_has_armylimit();
  inline void clear_has_armylimit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::slg::protocol::MarchPlayerDTO > arrivedplayers_;
  ::google::protobuf::RepeatedPtrField< ::slg::protocol::MarchPlayerDTO > marchingplayers_;
  ::google::protobuf::int32 trooplimit_;
  ::google::protobuf::int32 armylimit_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_march_2eproto();
  friend void protobuf_AssignDesc_march_2eproto();
  friend void protobuf_ShutdownFile_march_2eproto();

  void InitAsDefaultInstance();
  static MarchAidDTO* default_instance_;
};
// -------------------------------------------------------------------

class MarchDetailDTO : public ::google::protobuf::Message {
 public:
  MarchDetailDTO();
  virtual ~MarchDetailDTO();

  MarchDetailDTO(const MarchDetailDTO& from);

  inline MarchDetailDTO& operator=(const MarchDetailDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarchDetailDTO& default_instance();

  void Swap(MarchDetailDTO* other);

  // implements Message ----------------------------------------------

  MarchDetailDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarchDetailDTO& from);
  void MergeFrom(const MarchDetailDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .slg.protocol.PositionDTO startPos = 1;
  inline bool has_startpos() const;
  inline void clear_startpos();
  static const int kStartPosFieldNumber = 1;
  inline const ::slg::protocol::PositionDTO& startpos() const;
  inline ::slg::protocol::PositionDTO* mutable_startpos();
  inline ::slg::protocol::PositionDTO* release_startpos();
  inline void set_allocated_startpos(::slg::protocol::PositionDTO* startpos);

  // required .slg.protocol.PositionDTO endPos = 2;
  inline bool has_endpos() const;
  inline void clear_endpos();
  static const int kEndPosFieldNumber = 2;
  inline const ::slg::protocol::PositionDTO& endpos() const;
  inline ::slg::protocol::PositionDTO* mutable_endpos();
  inline ::slg::protocol::PositionDTO* release_endpos();
  inline void set_allocated_endpos(::slg::protocol::PositionDTO* endpos);

  // required .slg.protocol.MarchPlayerDTO attacker = 3;
  inline bool has_attacker() const;
  inline void clear_attacker();
  static const int kAttackerFieldNumber = 3;
  inline const ::slg::protocol::MarchPlayerDTO& attacker() const;
  inline ::slg::protocol::MarchPlayerDTO* mutable_attacker();
  inline ::slg::protocol::MarchPlayerDTO* release_attacker();
  inline void set_allocated_attacker(::slg::protocol::MarchPlayerDTO* attacker);

  // required .slg.protocol.MarchPlayerDTO defender = 4;
  inline bool has_defender() const;
  inline void clear_defender();
  static const int kDefenderFieldNumber = 4;
  inline const ::slg::protocol::MarchPlayerDTO& defender() const;
  inline ::slg::protocol::MarchPlayerDTO* mutable_defender();
  inline ::slg::protocol::MarchPlayerDTO* release_defender();
  inline void set_allocated_defender(::slg::protocol::MarchPlayerDTO* defender);

  // optional .slg.protocol.MarchAidDTO attackerAid = 5;
  inline bool has_attackeraid() const;
  inline void clear_attackeraid();
  static const int kAttackerAidFieldNumber = 5;
  inline const ::slg::protocol::MarchAidDTO& attackeraid() const;
  inline ::slg::protocol::MarchAidDTO* mutable_attackeraid();
  inline ::slg::protocol::MarchAidDTO* release_attackeraid();
  inline void set_allocated_attackeraid(::slg::protocol::MarchAidDTO* attackeraid);

  // @@protoc_insertion_point(class_scope:slg.protocol.MarchDetailDTO)
 private:
  inline void set_has_startpos();
  inline void clear_has_startpos();
  inline void set_has_endpos();
  inline void clear_has_endpos();
  inline void set_has_attacker();
  inline void clear_has_attacker();
  inline void set_has_defender();
  inline void clear_has_defender();
  inline void set_has_attackeraid();
  inline void clear_has_attackeraid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::slg::protocol::PositionDTO* startpos_;
  ::slg::protocol::PositionDTO* endpos_;
  ::slg::protocol::MarchPlayerDTO* attacker_;
  ::slg::protocol::MarchPlayerDTO* defender_;
  ::slg::protocol::MarchAidDTO* attackeraid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_march_2eproto();
  friend void protobuf_AssignDesc_march_2eproto();
  friend void protobuf_ShutdownFile_march_2eproto();

  void InitAsDefaultInstance();
  static MarchDetailDTO* default_instance_;
};
// -------------------------------------------------------------------

class MarchTimerDTO : public ::google::protobuf::Message {
 public:
  MarchTimerDTO();
  virtual ~MarchTimerDTO();

  MarchTimerDTO(const MarchTimerDTO& from);

  inline MarchTimerDTO& operator=(const MarchTimerDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarchTimerDTO& default_instance();

  void Swap(MarchTimerDTO* other);

  // implements Message ----------------------------------------------

  MarchTimerDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarchTimerDTO& from);
  void MergeFrom(const MarchTimerDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 startTime = 1;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 1;
  inline ::google::protobuf::int32 starttime() const;
  inline void set_starttime(::google::protobuf::int32 value);

  // required int32 endTime = 2;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 2;
  inline ::google::protobuf::int32 endtime() const;
  inline void set_endtime(::google::protobuf::int32 value);

  // required int32 speedUpNum = 3;
  inline bool has_speedupnum() const;
  inline void clear_speedupnum();
  static const int kSpeedUpNumFieldNumber = 3;
  inline ::google::protobuf::int32 speedupnum() const;
  inline void set_speedupnum(::google::protobuf::int32 value);

  // required int32 originalTime = 4;
  inline bool has_originaltime() const;
  inline void clear_originaltime();
  static const int kOriginalTimeFieldNumber = 4;
  inline ::google::protobuf::int32 originaltime() const;
  inline void set_originaltime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.MarchTimerDTO)
 private:
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_speedupnum();
  inline void clear_has_speedupnum();
  inline void set_has_originaltime();
  inline void clear_has_originaltime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 starttime_;
  ::google::protobuf::int32 endtime_;
  ::google::protobuf::int32 speedupnum_;
  ::google::protobuf::int32 originaltime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_march_2eproto();
  friend void protobuf_AssignDesc_march_2eproto();
  friend void protobuf_ShutdownFile_march_2eproto();

  void InitAsDefaultInstance();
  static MarchTimerDTO* default_instance_;
};
// -------------------------------------------------------------------

class MarchInfoDTO : public ::google::protobuf::Message {
 public:
  MarchInfoDTO();
  virtual ~MarchInfoDTO();

  MarchInfoDTO(const MarchInfoDTO& from);

  inline MarchInfoDTO& operator=(const MarchInfoDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarchInfoDTO& default_instance();

  void Swap(MarchInfoDTO* other);

  // implements Message ----------------------------------------------

  MarchInfoDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarchInfoDTO& from);
  void MergeFrom(const MarchInfoDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 marchId = 1;
  inline bool has_marchid() const;
  inline void clear_marchid();
  static const int kMarchIdFieldNumber = 1;
  inline ::google::protobuf::int64 marchid() const;
  inline void set_marchid(::google::protobuf::int64 value);

  // required .slg.protocol.MarchType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::slg::protocol::MarchType type() const;
  inline void set_type(::slg::protocol::MarchType value);

  // required .slg.protocol.MarchDetailDTO detail = 3;
  inline bool has_detail() const;
  inline void clear_detail();
  static const int kDetailFieldNumber = 3;
  inline const ::slg::protocol::MarchDetailDTO& detail() const;
  inline ::slg::protocol::MarchDetailDTO* mutable_detail();
  inline ::slg::protocol::MarchDetailDTO* release_detail();
  inline void set_allocated_detail(::slg::protocol::MarchDetailDTO* detail);

  // required .slg.protocol.MarchTimerDTO timer = 4;
  inline bool has_timer() const;
  inline void clear_timer();
  static const int kTimerFieldNumber = 4;
  inline const ::slg::protocol::MarchTimerDTO& timer() const;
  inline ::slg::protocol::MarchTimerDTO* mutable_timer();
  inline ::slg::protocol::MarchTimerDTO* release_timer();
  inline void set_allocated_timer(::slg::protocol::MarchTimerDTO* timer);

  // required .slg.protocol.MarchState state = 5;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 5;
  inline ::slg::protocol::MarchState state() const;
  inline void set_state(::slg::protocol::MarchState value);

  // @@protoc_insertion_point(class_scope:slg.protocol.MarchInfoDTO)
 private:
  inline void set_has_marchid();
  inline void clear_has_marchid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_detail();
  inline void clear_has_detail();
  inline void set_has_timer();
  inline void clear_has_timer();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 marchid_;
  ::slg::protocol::MarchDetailDTO* detail_;
  int type_;
  int state_;
  ::slg::protocol::MarchTimerDTO* timer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_march_2eproto();
  friend void protobuf_AssignDesc_march_2eproto();
  friend void protobuf_ShutdownFile_march_2eproto();

  void InitAsDefaultInstance();
  static MarchInfoDTO* default_instance_;
};
// -------------------------------------------------------------------

class MarchStartRequest : public ::google::protobuf::Message {
 public:
  MarchStartRequest();
  virtual ~MarchStartRequest();

  MarchStartRequest(const MarchStartRequest& from);

  inline MarchStartRequest& operator=(const MarchStartRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarchStartRequest& default_instance();

  void Swap(MarchStartRequest* other);

  // implements Message ----------------------------------------------

  MarchStartRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarchStartRequest& from);
  void MergeFrom(const MarchStartRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .slg.protocol.PositionDTO position = 1;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 1;
  inline const ::slg::protocol::PositionDTO& position() const;
  inline ::slg::protocol::PositionDTO* mutable_position();
  inline ::slg::protocol::PositionDTO* release_position();
  inline void set_allocated_position(::slg::protocol::PositionDTO* position);

  // required int64 objId = 2;
  inline bool has_objid() const;
  inline void clear_objid();
  static const int kObjIdFieldNumber = 2;
  inline ::google::protobuf::int64 objid() const;
  inline void set_objid(::google::protobuf::int64 value);

  // repeated .slg.protocol.SoldierDTO soldiers = 3;
  inline int soldiers_size() const;
  inline void clear_soldiers();
  static const int kSoldiersFieldNumber = 3;
  inline const ::slg::protocol::SoldierDTO& soldiers(int index) const;
  inline ::slg::protocol::SoldierDTO* mutable_soldiers(int index);
  inline ::slg::protocol::SoldierDTO* add_soldiers();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::SoldierDTO >&
      soldiers() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::SoldierDTO >*
      mutable_soldiers();

  // required .slg.protocol.MarchType type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::slg::protocol::MarchType type() const;
  inline void set_type(::slg::protocol::MarchType value);

  // optional int32 massTime = 10;
  inline bool has_masstime() const;
  inline void clear_masstime();
  static const int kMassTimeFieldNumber = 10;
  inline ::google::protobuf::int32 masstime() const;
  inline void set_masstime(::google::protobuf::int32 value);

  // optional int64 joinId = 11;
  inline bool has_joinid() const;
  inline void clear_joinid();
  static const int kJoinIdFieldNumber = 11;
  inline ::google::protobuf::int64 joinid() const;
  inline void set_joinid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.MarchStartRequest)
 private:
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_objid();
  inline void clear_has_objid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_masstime();
  inline void clear_has_masstime();
  inline void set_has_joinid();
  inline void clear_has_joinid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::slg::protocol::PositionDTO* position_;
  ::google::protobuf::int64 objid_;
  ::google::protobuf::RepeatedPtrField< ::slg::protocol::SoldierDTO > soldiers_;
  int type_;
  ::google::protobuf::int32 masstime_;
  ::google::protobuf::int64 joinid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_march_2eproto();
  friend void protobuf_AssignDesc_march_2eproto();
  friend void protobuf_ShutdownFile_march_2eproto();

  void InitAsDefaultInstance();
  static MarchStartRequest* default_instance_;
};
// -------------------------------------------------------------------

class MarchStartResponse : public ::google::protobuf::Message {
 public:
  MarchStartResponse();
  virtual ~MarchStartResponse();

  MarchStartResponse(const MarchStartResponse& from);

  inline MarchStartResponse& operator=(const MarchStartResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarchStartResponse& default_instance();

  void Swap(MarchStartResponse* other);

  // implements Message ----------------------------------------------

  MarchStartResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarchStartResponse& from);
  void MergeFrom(const MarchStartResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 marchId = 1;
  inline bool has_marchid() const;
  inline void clear_marchid();
  static const int kMarchIdFieldNumber = 1;
  inline ::google::protobuf::int64 marchid() const;
  inline void set_marchid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.MarchStartResponse)
 private:
  inline void set_has_marchid();
  inline void clear_has_marchid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 marchid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_march_2eproto();
  friend void protobuf_AssignDesc_march_2eproto();
  friend void protobuf_ShutdownFile_march_2eproto();

  void InitAsDefaultInstance();
  static MarchStartResponse* default_instance_;
};
// -------------------------------------------------------------------

class MarchSpeedUpRequest : public ::google::protobuf::Message {
 public:
  MarchSpeedUpRequest();
  virtual ~MarchSpeedUpRequest();

  MarchSpeedUpRequest(const MarchSpeedUpRequest& from);

  inline MarchSpeedUpRequest& operator=(const MarchSpeedUpRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarchSpeedUpRequest& default_instance();

  void Swap(MarchSpeedUpRequest* other);

  // implements Message ----------------------------------------------

  MarchSpeedUpRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarchSpeedUpRequest& from);
  void MergeFrom(const MarchSpeedUpRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 marchId = 1;
  inline bool has_marchid() const;
  inline void clear_marchid();
  static const int kMarchIdFieldNumber = 1;
  inline ::google::protobuf::int64 marchid() const;
  inline void set_marchid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.MarchSpeedUpRequest)
 private:
  inline void set_has_marchid();
  inline void clear_has_marchid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 marchid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_march_2eproto();
  friend void protobuf_AssignDesc_march_2eproto();
  friend void protobuf_ShutdownFile_march_2eproto();

  void InitAsDefaultInstance();
  static MarchSpeedUpRequest* default_instance_;
};
// -------------------------------------------------------------------

class MarchSpeedUpResponse : public ::google::protobuf::Message {
 public:
  MarchSpeedUpResponse();
  virtual ~MarchSpeedUpResponse();

  MarchSpeedUpResponse(const MarchSpeedUpResponse& from);

  inline MarchSpeedUpResponse& operator=(const MarchSpeedUpResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarchSpeedUpResponse& default_instance();

  void Swap(MarchSpeedUpResponse* other);

  // implements Message ----------------------------------------------

  MarchSpeedUpResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarchSpeedUpResponse& from);
  void MergeFrom(const MarchSpeedUpResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 marchId = 1;
  inline bool has_marchid() const;
  inline void clear_marchid();
  static const int kMarchIdFieldNumber = 1;
  inline ::google::protobuf::int64 marchid() const;
  inline void set_marchid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.MarchSpeedUpResponse)
 private:
  inline void set_has_marchid();
  inline void clear_has_marchid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 marchid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_march_2eproto();
  friend void protobuf_AssignDesc_march_2eproto();
  friend void protobuf_ShutdownFile_march_2eproto();

  void InitAsDefaultInstance();
  static MarchSpeedUpResponse* default_instance_;
};
// -------------------------------------------------------------------

class MarchRecallRequest : public ::google::protobuf::Message {
 public:
  MarchRecallRequest();
  virtual ~MarchRecallRequest();

  MarchRecallRequest(const MarchRecallRequest& from);

  inline MarchRecallRequest& operator=(const MarchRecallRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarchRecallRequest& default_instance();

  void Swap(MarchRecallRequest* other);

  // implements Message ----------------------------------------------

  MarchRecallRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarchRecallRequest& from);
  void MergeFrom(const MarchRecallRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 marchId = 1;
  inline bool has_marchid() const;
  inline void clear_marchid();
  static const int kMarchIdFieldNumber = 1;
  inline ::google::protobuf::int64 marchid() const;
  inline void set_marchid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.MarchRecallRequest)
 private:
  inline void set_has_marchid();
  inline void clear_has_marchid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 marchid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_march_2eproto();
  friend void protobuf_AssignDesc_march_2eproto();
  friend void protobuf_ShutdownFile_march_2eproto();

  void InitAsDefaultInstance();
  static MarchRecallRequest* default_instance_;
};
// -------------------------------------------------------------------

class MarchRecallResponse : public ::google::protobuf::Message {
 public:
  MarchRecallResponse();
  virtual ~MarchRecallResponse();

  MarchRecallResponse(const MarchRecallResponse& from);

  inline MarchRecallResponse& operator=(const MarchRecallResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarchRecallResponse& default_instance();

  void Swap(MarchRecallResponse* other);

  // implements Message ----------------------------------------------

  MarchRecallResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarchRecallResponse& from);
  void MergeFrom(const MarchRecallResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 marchId = 1;
  inline bool has_marchid() const;
  inline void clear_marchid();
  static const int kMarchIdFieldNumber = 1;
  inline ::google::protobuf::int64 marchid() const;
  inline void set_marchid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.MarchRecallResponse)
 private:
  inline void set_has_marchid();
  inline void clear_has_marchid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 marchid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_march_2eproto();
  friend void protobuf_AssignDesc_march_2eproto();
  friend void protobuf_ShutdownFile_march_2eproto();

  void InitAsDefaultInstance();
  static MarchRecallResponse* default_instance_;
};
// -------------------------------------------------------------------

class MarchDismissRequest : public ::google::protobuf::Message {
 public:
  MarchDismissRequest();
  virtual ~MarchDismissRequest();

  MarchDismissRequest(const MarchDismissRequest& from);

  inline MarchDismissRequest& operator=(const MarchDismissRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarchDismissRequest& default_instance();

  void Swap(MarchDismissRequest* other);

  // implements Message ----------------------------------------------

  MarchDismissRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarchDismissRequest& from);
  void MergeFrom(const MarchDismissRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 marchId = 1;
  inline bool has_marchid() const;
  inline void clear_marchid();
  static const int kMarchIdFieldNumber = 1;
  inline ::google::protobuf::int64 marchid() const;
  inline void set_marchid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.MarchDismissRequest)
 private:
  inline void set_has_marchid();
  inline void clear_has_marchid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 marchid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_march_2eproto();
  friend void protobuf_AssignDesc_march_2eproto();
  friend void protobuf_ShutdownFile_march_2eproto();

  void InitAsDefaultInstance();
  static MarchDismissRequest* default_instance_;
};
// -------------------------------------------------------------------

class MarchDismissResponse : public ::google::protobuf::Message {
 public:
  MarchDismissResponse();
  virtual ~MarchDismissResponse();

  MarchDismissResponse(const MarchDismissResponse& from);

  inline MarchDismissResponse& operator=(const MarchDismissResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarchDismissResponse& default_instance();

  void Swap(MarchDismissResponse* other);

  // implements Message ----------------------------------------------

  MarchDismissResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarchDismissResponse& from);
  void MergeFrom(const MarchDismissResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 marchId = 1;
  inline bool has_marchid() const;
  inline void clear_marchid();
  static const int kMarchIdFieldNumber = 1;
  inline ::google::protobuf::int64 marchid() const;
  inline void set_marchid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.MarchDismissResponse)
 private:
  inline void set_has_marchid();
  inline void clear_has_marchid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 marchid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_march_2eproto();
  friend void protobuf_AssignDesc_march_2eproto();
  friend void protobuf_ShutdownFile_march_2eproto();

  void InitAsDefaultInstance();
  static MarchDismissResponse* default_instance_;
};
// -------------------------------------------------------------------

class MarchKickRequest : public ::google::protobuf::Message {
 public:
  MarchKickRequest();
  virtual ~MarchKickRequest();

  MarchKickRequest(const MarchKickRequest& from);

  inline MarchKickRequest& operator=(const MarchKickRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarchKickRequest& default_instance();

  void Swap(MarchKickRequest* other);

  // implements Message ----------------------------------------------

  MarchKickRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarchKickRequest& from);
  void MergeFrom(const MarchKickRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 marchId = 1;
  inline bool has_marchid() const;
  inline void clear_marchid();
  static const int kMarchIdFieldNumber = 1;
  inline ::google::protobuf::int64 marchid() const;
  inline void set_marchid(::google::protobuf::int64 value);

  // required int64 targetMarchId = 2;
  inline bool has_targetmarchid() const;
  inline void clear_targetmarchid();
  static const int kTargetMarchIdFieldNumber = 2;
  inline ::google::protobuf::int64 targetmarchid() const;
  inline void set_targetmarchid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.MarchKickRequest)
 private:
  inline void set_has_marchid();
  inline void clear_has_marchid();
  inline void set_has_targetmarchid();
  inline void clear_has_targetmarchid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 marchid_;
  ::google::protobuf::int64 targetmarchid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_march_2eproto();
  friend void protobuf_AssignDesc_march_2eproto();
  friend void protobuf_ShutdownFile_march_2eproto();

  void InitAsDefaultInstance();
  static MarchKickRequest* default_instance_;
};
// -------------------------------------------------------------------

class MarchKickResponse : public ::google::protobuf::Message {
 public:
  MarchKickResponse();
  virtual ~MarchKickResponse();

  MarchKickResponse(const MarchKickResponse& from);

  inline MarchKickResponse& operator=(const MarchKickResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarchKickResponse& default_instance();

  void Swap(MarchKickResponse* other);

  // implements Message ----------------------------------------------

  MarchKickResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarchKickResponse& from);
  void MergeFrom(const MarchKickResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 marchId = 1;
  inline bool has_marchid() const;
  inline void clear_marchid();
  static const int kMarchIdFieldNumber = 1;
  inline ::google::protobuf::int64 marchid() const;
  inline void set_marchid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.MarchKickResponse)
 private:
  inline void set_has_marchid();
  inline void clear_has_marchid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 marchid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_march_2eproto();
  friend void protobuf_AssignDesc_march_2eproto();
  friend void protobuf_ShutdownFile_march_2eproto();

  void InitAsDefaultInstance();
  static MarchKickResponse* default_instance_;
};
// -------------------------------------------------------------------

class MarchInfoPush : public ::google::protobuf::Message {
 public:
  MarchInfoPush();
  virtual ~MarchInfoPush();

  MarchInfoPush(const MarchInfoPush& from);

  inline MarchInfoPush& operator=(const MarchInfoPush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarchInfoPush& default_instance();

  void Swap(MarchInfoPush* other);

  // implements Message ----------------------------------------------

  MarchInfoPush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarchInfoPush& from);
  void MergeFrom(const MarchInfoPush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .slg.protocol.MarchInfoDTO infos = 1;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 1;
  inline const ::slg::protocol::MarchInfoDTO& infos(int index) const;
  inline ::slg::protocol::MarchInfoDTO* mutable_infos(int index);
  inline ::slg::protocol::MarchInfoDTO* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::MarchInfoDTO >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::MarchInfoDTO >*
      mutable_infos();

  // @@protoc_insertion_point(class_scope:slg.protocol.MarchInfoPush)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::slg::protocol::MarchInfoDTO > infos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_march_2eproto();
  friend void protobuf_AssignDesc_march_2eproto();
  friend void protobuf_ShutdownFile_march_2eproto();

  void InitAsDefaultInstance();
  static MarchInfoPush* default_instance_;
};
// -------------------------------------------------------------------

class MarchRemovePush : public ::google::protobuf::Message {
 public:
  MarchRemovePush();
  virtual ~MarchRemovePush();

  MarchRemovePush(const MarchRemovePush& from);

  inline MarchRemovePush& operator=(const MarchRemovePush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarchRemovePush& default_instance();

  void Swap(MarchRemovePush* other);

  // implements Message ----------------------------------------------

  MarchRemovePush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarchRemovePush& from);
  void MergeFrom(const MarchRemovePush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 marchId = 1;
  inline bool has_marchid() const;
  inline void clear_marchid();
  static const int kMarchIdFieldNumber = 1;
  inline ::google::protobuf::int64 marchid() const;
  inline void set_marchid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.MarchRemovePush)
 private:
  inline void set_has_marchid();
  inline void clear_has_marchid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 marchid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_march_2eproto();
  friend void protobuf_AssignDesc_march_2eproto();
  friend void protobuf_ShutdownFile_march_2eproto();

  void InitAsDefaultInstance();
  static MarchRemovePush* default_instance_;
};
// -------------------------------------------------------------------

class MarchResultPush : public ::google::protobuf::Message {
 public:
  MarchResultPush();
  virtual ~MarchResultPush();

  MarchResultPush(const MarchResultPush& from);

  inline MarchResultPush& operator=(const MarchResultPush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarchResultPush& default_instance();

  void Swap(MarchResultPush* other);

  // implements Message ----------------------------------------------

  MarchResultPush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarchResultPush& from);
  void MergeFrom(const MarchResultPush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 marchId = 1;
  inline bool has_marchid() const;
  inline void clear_marchid();
  static const int kMarchIdFieldNumber = 1;
  inline ::google::protobuf::int64 marchid() const;
  inline void set_marchid(::google::protobuf::int64 value);

  // required .slg.protocol.MarchType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::slg::protocol::MarchType type() const;
  inline void set_type(::slg::protocol::MarchType value);

  // required .slg.protocol.PositionDTO attacker = 3;
  inline bool has_attacker() const;
  inline void clear_attacker();
  static const int kAttackerFieldNumber = 3;
  inline const ::slg::protocol::PositionDTO& attacker() const;
  inline ::slg::protocol::PositionDTO* mutable_attacker();
  inline ::slg::protocol::PositionDTO* release_attacker();
  inline void set_allocated_attacker(::slg::protocol::PositionDTO* attacker);

  // required .slg.protocol.PositionDTO defencer = 4;
  inline bool has_defencer() const;
  inline void clear_defencer();
  static const int kDefencerFieldNumber = 4;
  inline const ::slg::protocol::PositionDTO& defencer() const;
  inline ::slg::protocol::PositionDTO* mutable_defencer();
  inline ::slg::protocol::PositionDTO* release_defencer();
  inline void set_allocated_defencer(::slg::protocol::PositionDTO* defencer);

  // repeated .slg.protocol.SoldierDTO soldiers = 5;
  inline int soldiers_size() const;
  inline void clear_soldiers();
  static const int kSoldiersFieldNumber = 5;
  inline const ::slg::protocol::SoldierDTO& soldiers(int index) const;
  inline ::slg::protocol::SoldierDTO* mutable_soldiers(int index);
  inline ::slg::protocol::SoldierDTO* add_soldiers();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::SoldierDTO >&
      soldiers() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::SoldierDTO >*
      mutable_soldiers();

  // required bool won = 6;
  inline bool has_won() const;
  inline void clear_won();
  static const int kWonFieldNumber = 6;
  inline bool won() const;
  inline void set_won(bool value);

  // @@protoc_insertion_point(class_scope:slg.protocol.MarchResultPush)
 private:
  inline void set_has_marchid();
  inline void clear_has_marchid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_attacker();
  inline void clear_has_attacker();
  inline void set_has_defencer();
  inline void clear_has_defencer();
  inline void set_has_won();
  inline void clear_has_won();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 marchid_;
  ::slg::protocol::PositionDTO* attacker_;
  ::slg::protocol::PositionDTO* defencer_;
  int type_;
  bool won_;
  ::google::protobuf::RepeatedPtrField< ::slg::protocol::SoldierDTO > soldiers_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_march_2eproto();
  friend void protobuf_AssignDesc_march_2eproto();
  friend void protobuf_ShutdownFile_march_2eproto();

  void InitAsDefaultInstance();
  static MarchResultPush* default_instance_;
};
// -------------------------------------------------------------------

class MarchTimerPush : public ::google::protobuf::Message {
 public:
  MarchTimerPush();
  virtual ~MarchTimerPush();

  MarchTimerPush(const MarchTimerPush& from);

  inline MarchTimerPush& operator=(const MarchTimerPush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarchTimerPush& default_instance();

  void Swap(MarchTimerPush* other);

  // implements Message ----------------------------------------------

  MarchTimerPush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarchTimerPush& from);
  void MergeFrom(const MarchTimerPush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 marchId = 1;
  inline bool has_marchid() const;
  inline void clear_marchid();
  static const int kMarchIdFieldNumber = 1;
  inline ::google::protobuf::int64 marchid() const;
  inline void set_marchid(::google::protobuf::int64 value);

  // required .slg.protocol.MarchTimerDTO timer = 2;
  inline bool has_timer() const;
  inline void clear_timer();
  static const int kTimerFieldNumber = 2;
  inline const ::slg::protocol::MarchTimerDTO& timer() const;
  inline ::slg::protocol::MarchTimerDTO* mutable_timer();
  inline ::slg::protocol::MarchTimerDTO* release_timer();
  inline void set_allocated_timer(::slg::protocol::MarchTimerDTO* timer);

  // @@protoc_insertion_point(class_scope:slg.protocol.MarchTimerPush)
 private:
  inline void set_has_marchid();
  inline void clear_has_marchid();
  inline void set_has_timer();
  inline void clear_has_timer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 marchid_;
  ::slg::protocol::MarchTimerDTO* timer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_march_2eproto();
  friend void protobuf_AssignDesc_march_2eproto();
  friend void protobuf_ShutdownFile_march_2eproto();

  void InitAsDefaultInstance();
  static MarchTimerPush* default_instance_;
};
// -------------------------------------------------------------------

class MilitaryDTO : public ::google::protobuf::Message {
 public:
  MilitaryDTO();
  virtual ~MilitaryDTO();

  MilitaryDTO(const MilitaryDTO& from);

  inline MilitaryDTO& operator=(const MilitaryDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MilitaryDTO& default_instance();

  void Swap(MilitaryDTO* other);

  // implements Message ----------------------------------------------

  MilitaryDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MilitaryDTO& from);
  void MergeFrom(const MilitaryDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .slg.protocol.MarchInfoDTO march = 1;
  inline bool has_march() const;
  inline void clear_march();
  static const int kMarchFieldNumber = 1;
  inline const ::slg::protocol::MarchInfoDTO& march() const;
  inline ::slg::protocol::MarchInfoDTO* mutable_march();
  inline ::slg::protocol::MarchInfoDTO* release_march();
  inline void set_allocated_march(::slg::protocol::MarchInfoDTO* march);

  // optional .slg.protocol.MarchAidDTO defenderAid = 2;
  inline bool has_defenderaid() const;
  inline void clear_defenderaid();
  static const int kDefenderAidFieldNumber = 2;
  inline const ::slg::protocol::MarchAidDTO& defenderaid() const;
  inline ::slg::protocol::MarchAidDTO* mutable_defenderaid();
  inline ::slg::protocol::MarchAidDTO* release_defenderaid();
  inline void set_allocated_defenderaid(::slg::protocol::MarchAidDTO* defenderaid);

  // @@protoc_insertion_point(class_scope:slg.protocol.MilitaryDTO)
 private:
  inline void set_has_march();
  inline void clear_has_march();
  inline void set_has_defenderaid();
  inline void clear_has_defenderaid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::slg::protocol::MarchInfoDTO* march_;
  ::slg::protocol::MarchAidDTO* defenderaid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_march_2eproto();
  friend void protobuf_AssignDesc_march_2eproto();
  friend void protobuf_ShutdownFile_march_2eproto();

  void InitAsDefaultInstance();
  static MilitaryDTO* default_instance_;
};
// -------------------------------------------------------------------

class MilitaryPush : public ::google::protobuf::Message {
 public:
  MilitaryPush();
  virtual ~MilitaryPush();

  MilitaryPush(const MilitaryPush& from);

  inline MilitaryPush& operator=(const MilitaryPush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MilitaryPush& default_instance();

  void Swap(MilitaryPush* other);

  // implements Message ----------------------------------------------

  MilitaryPush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MilitaryPush& from);
  void MergeFrom(const MilitaryPush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .slg.protocol.MilitaryDTO militaries = 1;
  inline int militaries_size() const;
  inline void clear_militaries();
  static const int kMilitariesFieldNumber = 1;
  inline const ::slg::protocol::MilitaryDTO& militaries(int index) const;
  inline ::slg::protocol::MilitaryDTO* mutable_militaries(int index);
  inline ::slg::protocol::MilitaryDTO* add_militaries();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::MilitaryDTO >&
      militaries() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::MilitaryDTO >*
      mutable_militaries();

  // @@protoc_insertion_point(class_scope:slg.protocol.MilitaryPush)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::slg::protocol::MilitaryDTO > militaries_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_march_2eproto();
  friend void protobuf_AssignDesc_march_2eproto();
  friend void protobuf_ShutdownFile_march_2eproto();

  void InitAsDefaultInstance();
  static MilitaryPush* default_instance_;
};
// -------------------------------------------------------------------

class MilitaryDeletePush : public ::google::protobuf::Message {
 public:
  MilitaryDeletePush();
  virtual ~MilitaryDeletePush();

  MilitaryDeletePush(const MilitaryDeletePush& from);

  inline MilitaryDeletePush& operator=(const MilitaryDeletePush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MilitaryDeletePush& default_instance();

  void Swap(MilitaryDeletePush* other);

  // implements Message ----------------------------------------------

  MilitaryDeletePush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MilitaryDeletePush& from);
  void MergeFrom(const MilitaryDeletePush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 marchId = 1;
  inline bool has_marchid() const;
  inline void clear_marchid();
  static const int kMarchIdFieldNumber = 1;
  inline ::google::protobuf::int64 marchid() const;
  inline void set_marchid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.MilitaryDeletePush)
 private:
  inline void set_has_marchid();
  inline void clear_has_marchid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 marchid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_march_2eproto();
  friend void protobuf_AssignDesc_march_2eproto();
  friend void protobuf_ShutdownFile_march_2eproto();

  void InitAsDefaultInstance();
  static MilitaryDeletePush* default_instance_;
};
// ===================================================================


// ===================================================================

// MarchAllianceDTO

// required int32 id = 1;
inline bool MarchAllianceDTO::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarchAllianceDTO::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarchAllianceDTO::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarchAllianceDTO::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 MarchAllianceDTO::id() const {
  return id_;
}
inline void MarchAllianceDTO::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string shortName = 2;
inline bool MarchAllianceDTO::has_shortname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarchAllianceDTO::set_has_shortname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarchAllianceDTO::clear_has_shortname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarchAllianceDTO::clear_shortname() {
  if (shortname_ != &::google::protobuf::internal::kEmptyString) {
    shortname_->clear();
  }
  clear_has_shortname();
}
inline const ::std::string& MarchAllianceDTO::shortname() const {
  return *shortname_;
}
inline void MarchAllianceDTO::set_shortname(const ::std::string& value) {
  set_has_shortname();
  if (shortname_ == &::google::protobuf::internal::kEmptyString) {
    shortname_ = new ::std::string;
  }
  shortname_->assign(value);
}
inline void MarchAllianceDTO::set_shortname(const char* value) {
  set_has_shortname();
  if (shortname_ == &::google::protobuf::internal::kEmptyString) {
    shortname_ = new ::std::string;
  }
  shortname_->assign(value);
}
inline void MarchAllianceDTO::set_shortname(const char* value, size_t size) {
  set_has_shortname();
  if (shortname_ == &::google::protobuf::internal::kEmptyString) {
    shortname_ = new ::std::string;
  }
  shortname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MarchAllianceDTO::mutable_shortname() {
  set_has_shortname();
  if (shortname_ == &::google::protobuf::internal::kEmptyString) {
    shortname_ = new ::std::string;
  }
  return shortname_;
}
inline ::std::string* MarchAllianceDTO::release_shortname() {
  clear_has_shortname();
  if (shortname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = shortname_;
    shortname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MarchAllianceDTO::set_allocated_shortname(::std::string* shortname) {
  if (shortname_ != &::google::protobuf::internal::kEmptyString) {
    delete shortname_;
  }
  if (shortname) {
    set_has_shortname();
    shortname_ = shortname;
  } else {
    clear_has_shortname();
    shortname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MarchPlayerDTO

// required int64 playerId = 1;
inline bool MarchPlayerDTO::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarchPlayerDTO::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarchPlayerDTO::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarchPlayerDTO::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 MarchPlayerDTO::playerid() const {
  return playerid_;
}
inline void MarchPlayerDTO::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional string icon = 2;
inline bool MarchPlayerDTO::has_icon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarchPlayerDTO::set_has_icon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarchPlayerDTO::clear_has_icon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarchPlayerDTO::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& MarchPlayerDTO::icon() const {
  return *icon_;
}
inline void MarchPlayerDTO::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void MarchPlayerDTO::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void MarchPlayerDTO::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MarchPlayerDTO::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* MarchPlayerDTO::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MarchPlayerDTO::set_allocated_icon(::std::string* icon) {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name = 3;
inline bool MarchPlayerDTO::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarchPlayerDTO::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarchPlayerDTO::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarchPlayerDTO::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MarchPlayerDTO::name() const {
  return *name_;
}
inline void MarchPlayerDTO::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MarchPlayerDTO::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MarchPlayerDTO::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MarchPlayerDTO::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MarchPlayerDTO::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MarchPlayerDTO::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .slg.protocol.LevelSoldierDTO soldiers = 4;
inline int MarchPlayerDTO::soldiers_size() const {
  return soldiers_.size();
}
inline void MarchPlayerDTO::clear_soldiers() {
  soldiers_.Clear();
}
inline const ::slg::protocol::LevelSoldierDTO& MarchPlayerDTO::soldiers(int index) const {
  return soldiers_.Get(index);
}
inline ::slg::protocol::LevelSoldierDTO* MarchPlayerDTO::mutable_soldiers(int index) {
  return soldiers_.Mutable(index);
}
inline ::slg::protocol::LevelSoldierDTO* MarchPlayerDTO::add_soldiers() {
  return soldiers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::LevelSoldierDTO >&
MarchPlayerDTO::soldiers() const {
  return soldiers_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::LevelSoldierDTO >*
MarchPlayerDTO::mutable_soldiers() {
  return &soldiers_;
}

// optional .slg.protocol.MarchAllianceDTO alliance = 5;
inline bool MarchPlayerDTO::has_alliance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MarchPlayerDTO::set_has_alliance() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MarchPlayerDTO::clear_has_alliance() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MarchPlayerDTO::clear_alliance() {
  if (alliance_ != NULL) alliance_->::slg::protocol::MarchAllianceDTO::Clear();
  clear_has_alliance();
}
inline const ::slg::protocol::MarchAllianceDTO& MarchPlayerDTO::alliance() const {
  return alliance_ != NULL ? *alliance_ : *default_instance_->alliance_;
}
inline ::slg::protocol::MarchAllianceDTO* MarchPlayerDTO::mutable_alliance() {
  set_has_alliance();
  if (alliance_ == NULL) alliance_ = new ::slg::protocol::MarchAllianceDTO;
  return alliance_;
}
inline ::slg::protocol::MarchAllianceDTO* MarchPlayerDTO::release_alliance() {
  clear_has_alliance();
  ::slg::protocol::MarchAllianceDTO* temp = alliance_;
  alliance_ = NULL;
  return temp;
}
inline void MarchPlayerDTO::set_allocated_alliance(::slg::protocol::MarchAllianceDTO* alliance) {
  delete alliance_;
  alliance_ = alliance;
  if (alliance) {
    set_has_alliance();
  } else {
    clear_has_alliance();
  }
}

// -------------------------------------------------------------------

// MarchAidDTO

// repeated .slg.protocol.MarchPlayerDTO arrivedPlayers = 1;
inline int MarchAidDTO::arrivedplayers_size() const {
  return arrivedplayers_.size();
}
inline void MarchAidDTO::clear_arrivedplayers() {
  arrivedplayers_.Clear();
}
inline const ::slg::protocol::MarchPlayerDTO& MarchAidDTO::arrivedplayers(int index) const {
  return arrivedplayers_.Get(index);
}
inline ::slg::protocol::MarchPlayerDTO* MarchAidDTO::mutable_arrivedplayers(int index) {
  return arrivedplayers_.Mutable(index);
}
inline ::slg::protocol::MarchPlayerDTO* MarchAidDTO::add_arrivedplayers() {
  return arrivedplayers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::MarchPlayerDTO >&
MarchAidDTO::arrivedplayers() const {
  return arrivedplayers_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::MarchPlayerDTO >*
MarchAidDTO::mutable_arrivedplayers() {
  return &arrivedplayers_;
}

// repeated .slg.protocol.MarchPlayerDTO marchingPlayers = 2;
inline int MarchAidDTO::marchingplayers_size() const {
  return marchingplayers_.size();
}
inline void MarchAidDTO::clear_marchingplayers() {
  marchingplayers_.Clear();
}
inline const ::slg::protocol::MarchPlayerDTO& MarchAidDTO::marchingplayers(int index) const {
  return marchingplayers_.Get(index);
}
inline ::slg::protocol::MarchPlayerDTO* MarchAidDTO::mutable_marchingplayers(int index) {
  return marchingplayers_.Mutable(index);
}
inline ::slg::protocol::MarchPlayerDTO* MarchAidDTO::add_marchingplayers() {
  return marchingplayers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::MarchPlayerDTO >&
MarchAidDTO::marchingplayers() const {
  return marchingplayers_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::MarchPlayerDTO >*
MarchAidDTO::mutable_marchingplayers() {
  return &marchingplayers_;
}

// required int32 troopLimit = 3;
inline bool MarchAidDTO::has_trooplimit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarchAidDTO::set_has_trooplimit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarchAidDTO::clear_has_trooplimit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarchAidDTO::clear_trooplimit() {
  trooplimit_ = 0;
  clear_has_trooplimit();
}
inline ::google::protobuf::int32 MarchAidDTO::trooplimit() const {
  return trooplimit_;
}
inline void MarchAidDTO::set_trooplimit(::google::protobuf::int32 value) {
  set_has_trooplimit();
  trooplimit_ = value;
}

// required int32 armyLimit = 4;
inline bool MarchAidDTO::has_armylimit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarchAidDTO::set_has_armylimit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MarchAidDTO::clear_has_armylimit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MarchAidDTO::clear_armylimit() {
  armylimit_ = 0;
  clear_has_armylimit();
}
inline ::google::protobuf::int32 MarchAidDTO::armylimit() const {
  return armylimit_;
}
inline void MarchAidDTO::set_armylimit(::google::protobuf::int32 value) {
  set_has_armylimit();
  armylimit_ = value;
}

// -------------------------------------------------------------------

// MarchDetailDTO

// required .slg.protocol.PositionDTO startPos = 1;
inline bool MarchDetailDTO::has_startpos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarchDetailDTO::set_has_startpos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarchDetailDTO::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarchDetailDTO::clear_startpos() {
  if (startpos_ != NULL) startpos_->::slg::protocol::PositionDTO::Clear();
  clear_has_startpos();
}
inline const ::slg::protocol::PositionDTO& MarchDetailDTO::startpos() const {
  return startpos_ != NULL ? *startpos_ : *default_instance_->startpos_;
}
inline ::slg::protocol::PositionDTO* MarchDetailDTO::mutable_startpos() {
  set_has_startpos();
  if (startpos_ == NULL) startpos_ = new ::slg::protocol::PositionDTO;
  return startpos_;
}
inline ::slg::protocol::PositionDTO* MarchDetailDTO::release_startpos() {
  clear_has_startpos();
  ::slg::protocol::PositionDTO* temp = startpos_;
  startpos_ = NULL;
  return temp;
}
inline void MarchDetailDTO::set_allocated_startpos(::slg::protocol::PositionDTO* startpos) {
  delete startpos_;
  startpos_ = startpos;
  if (startpos) {
    set_has_startpos();
  } else {
    clear_has_startpos();
  }
}

// required .slg.protocol.PositionDTO endPos = 2;
inline bool MarchDetailDTO::has_endpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarchDetailDTO::set_has_endpos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarchDetailDTO::clear_has_endpos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarchDetailDTO::clear_endpos() {
  if (endpos_ != NULL) endpos_->::slg::protocol::PositionDTO::Clear();
  clear_has_endpos();
}
inline const ::slg::protocol::PositionDTO& MarchDetailDTO::endpos() const {
  return endpos_ != NULL ? *endpos_ : *default_instance_->endpos_;
}
inline ::slg::protocol::PositionDTO* MarchDetailDTO::mutable_endpos() {
  set_has_endpos();
  if (endpos_ == NULL) endpos_ = new ::slg::protocol::PositionDTO;
  return endpos_;
}
inline ::slg::protocol::PositionDTO* MarchDetailDTO::release_endpos() {
  clear_has_endpos();
  ::slg::protocol::PositionDTO* temp = endpos_;
  endpos_ = NULL;
  return temp;
}
inline void MarchDetailDTO::set_allocated_endpos(::slg::protocol::PositionDTO* endpos) {
  delete endpos_;
  endpos_ = endpos;
  if (endpos) {
    set_has_endpos();
  } else {
    clear_has_endpos();
  }
}

// required .slg.protocol.MarchPlayerDTO attacker = 3;
inline bool MarchDetailDTO::has_attacker() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarchDetailDTO::set_has_attacker() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarchDetailDTO::clear_has_attacker() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarchDetailDTO::clear_attacker() {
  if (attacker_ != NULL) attacker_->::slg::protocol::MarchPlayerDTO::Clear();
  clear_has_attacker();
}
inline const ::slg::protocol::MarchPlayerDTO& MarchDetailDTO::attacker() const {
  return attacker_ != NULL ? *attacker_ : *default_instance_->attacker_;
}
inline ::slg::protocol::MarchPlayerDTO* MarchDetailDTO::mutable_attacker() {
  set_has_attacker();
  if (attacker_ == NULL) attacker_ = new ::slg::protocol::MarchPlayerDTO;
  return attacker_;
}
inline ::slg::protocol::MarchPlayerDTO* MarchDetailDTO::release_attacker() {
  clear_has_attacker();
  ::slg::protocol::MarchPlayerDTO* temp = attacker_;
  attacker_ = NULL;
  return temp;
}
inline void MarchDetailDTO::set_allocated_attacker(::slg::protocol::MarchPlayerDTO* attacker) {
  delete attacker_;
  attacker_ = attacker;
  if (attacker) {
    set_has_attacker();
  } else {
    clear_has_attacker();
  }
}

// required .slg.protocol.MarchPlayerDTO defender = 4;
inline bool MarchDetailDTO::has_defender() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarchDetailDTO::set_has_defender() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MarchDetailDTO::clear_has_defender() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MarchDetailDTO::clear_defender() {
  if (defender_ != NULL) defender_->::slg::protocol::MarchPlayerDTO::Clear();
  clear_has_defender();
}
inline const ::slg::protocol::MarchPlayerDTO& MarchDetailDTO::defender() const {
  return defender_ != NULL ? *defender_ : *default_instance_->defender_;
}
inline ::slg::protocol::MarchPlayerDTO* MarchDetailDTO::mutable_defender() {
  set_has_defender();
  if (defender_ == NULL) defender_ = new ::slg::protocol::MarchPlayerDTO;
  return defender_;
}
inline ::slg::protocol::MarchPlayerDTO* MarchDetailDTO::release_defender() {
  clear_has_defender();
  ::slg::protocol::MarchPlayerDTO* temp = defender_;
  defender_ = NULL;
  return temp;
}
inline void MarchDetailDTO::set_allocated_defender(::slg::protocol::MarchPlayerDTO* defender) {
  delete defender_;
  defender_ = defender;
  if (defender) {
    set_has_defender();
  } else {
    clear_has_defender();
  }
}

// optional .slg.protocol.MarchAidDTO attackerAid = 5;
inline bool MarchDetailDTO::has_attackeraid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MarchDetailDTO::set_has_attackeraid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MarchDetailDTO::clear_has_attackeraid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MarchDetailDTO::clear_attackeraid() {
  if (attackeraid_ != NULL) attackeraid_->::slg::protocol::MarchAidDTO::Clear();
  clear_has_attackeraid();
}
inline const ::slg::protocol::MarchAidDTO& MarchDetailDTO::attackeraid() const {
  return attackeraid_ != NULL ? *attackeraid_ : *default_instance_->attackeraid_;
}
inline ::slg::protocol::MarchAidDTO* MarchDetailDTO::mutable_attackeraid() {
  set_has_attackeraid();
  if (attackeraid_ == NULL) attackeraid_ = new ::slg::protocol::MarchAidDTO;
  return attackeraid_;
}
inline ::slg::protocol::MarchAidDTO* MarchDetailDTO::release_attackeraid() {
  clear_has_attackeraid();
  ::slg::protocol::MarchAidDTO* temp = attackeraid_;
  attackeraid_ = NULL;
  return temp;
}
inline void MarchDetailDTO::set_allocated_attackeraid(::slg::protocol::MarchAidDTO* attackeraid) {
  delete attackeraid_;
  attackeraid_ = attackeraid;
  if (attackeraid) {
    set_has_attackeraid();
  } else {
    clear_has_attackeraid();
  }
}

// -------------------------------------------------------------------

// MarchTimerDTO

// required int32 startTime = 1;
inline bool MarchTimerDTO::has_starttime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarchTimerDTO::set_has_starttime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarchTimerDTO::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarchTimerDTO::clear_starttime() {
  starttime_ = 0;
  clear_has_starttime();
}
inline ::google::protobuf::int32 MarchTimerDTO::starttime() const {
  return starttime_;
}
inline void MarchTimerDTO::set_starttime(::google::protobuf::int32 value) {
  set_has_starttime();
  starttime_ = value;
}

// required int32 endTime = 2;
inline bool MarchTimerDTO::has_endtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarchTimerDTO::set_has_endtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarchTimerDTO::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarchTimerDTO::clear_endtime() {
  endtime_ = 0;
  clear_has_endtime();
}
inline ::google::protobuf::int32 MarchTimerDTO::endtime() const {
  return endtime_;
}
inline void MarchTimerDTO::set_endtime(::google::protobuf::int32 value) {
  set_has_endtime();
  endtime_ = value;
}

// required int32 speedUpNum = 3;
inline bool MarchTimerDTO::has_speedupnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarchTimerDTO::set_has_speedupnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarchTimerDTO::clear_has_speedupnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarchTimerDTO::clear_speedupnum() {
  speedupnum_ = 0;
  clear_has_speedupnum();
}
inline ::google::protobuf::int32 MarchTimerDTO::speedupnum() const {
  return speedupnum_;
}
inline void MarchTimerDTO::set_speedupnum(::google::protobuf::int32 value) {
  set_has_speedupnum();
  speedupnum_ = value;
}

// required int32 originalTime = 4;
inline bool MarchTimerDTO::has_originaltime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarchTimerDTO::set_has_originaltime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MarchTimerDTO::clear_has_originaltime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MarchTimerDTO::clear_originaltime() {
  originaltime_ = 0;
  clear_has_originaltime();
}
inline ::google::protobuf::int32 MarchTimerDTO::originaltime() const {
  return originaltime_;
}
inline void MarchTimerDTO::set_originaltime(::google::protobuf::int32 value) {
  set_has_originaltime();
  originaltime_ = value;
}

// -------------------------------------------------------------------

// MarchInfoDTO

// required int64 marchId = 1;
inline bool MarchInfoDTO::has_marchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarchInfoDTO::set_has_marchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarchInfoDTO::clear_has_marchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarchInfoDTO::clear_marchid() {
  marchid_ = GOOGLE_LONGLONG(0);
  clear_has_marchid();
}
inline ::google::protobuf::int64 MarchInfoDTO::marchid() const {
  return marchid_;
}
inline void MarchInfoDTO::set_marchid(::google::protobuf::int64 value) {
  set_has_marchid();
  marchid_ = value;
}

// required .slg.protocol.MarchType type = 2;
inline bool MarchInfoDTO::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarchInfoDTO::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarchInfoDTO::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarchInfoDTO::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::slg::protocol::MarchType MarchInfoDTO::type() const {
  return static_cast< ::slg::protocol::MarchType >(type_);
}
inline void MarchInfoDTO::set_type(::slg::protocol::MarchType value) {
  assert(::slg::protocol::MarchType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .slg.protocol.MarchDetailDTO detail = 3;
inline bool MarchInfoDTO::has_detail() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarchInfoDTO::set_has_detail() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarchInfoDTO::clear_has_detail() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarchInfoDTO::clear_detail() {
  if (detail_ != NULL) detail_->::slg::protocol::MarchDetailDTO::Clear();
  clear_has_detail();
}
inline const ::slg::protocol::MarchDetailDTO& MarchInfoDTO::detail() const {
  return detail_ != NULL ? *detail_ : *default_instance_->detail_;
}
inline ::slg::protocol::MarchDetailDTO* MarchInfoDTO::mutable_detail() {
  set_has_detail();
  if (detail_ == NULL) detail_ = new ::slg::protocol::MarchDetailDTO;
  return detail_;
}
inline ::slg::protocol::MarchDetailDTO* MarchInfoDTO::release_detail() {
  clear_has_detail();
  ::slg::protocol::MarchDetailDTO* temp = detail_;
  detail_ = NULL;
  return temp;
}
inline void MarchInfoDTO::set_allocated_detail(::slg::protocol::MarchDetailDTO* detail) {
  delete detail_;
  detail_ = detail;
  if (detail) {
    set_has_detail();
  } else {
    clear_has_detail();
  }
}

// required .slg.protocol.MarchTimerDTO timer = 4;
inline bool MarchInfoDTO::has_timer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarchInfoDTO::set_has_timer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MarchInfoDTO::clear_has_timer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MarchInfoDTO::clear_timer() {
  if (timer_ != NULL) timer_->::slg::protocol::MarchTimerDTO::Clear();
  clear_has_timer();
}
inline const ::slg::protocol::MarchTimerDTO& MarchInfoDTO::timer() const {
  return timer_ != NULL ? *timer_ : *default_instance_->timer_;
}
inline ::slg::protocol::MarchTimerDTO* MarchInfoDTO::mutable_timer() {
  set_has_timer();
  if (timer_ == NULL) timer_ = new ::slg::protocol::MarchTimerDTO;
  return timer_;
}
inline ::slg::protocol::MarchTimerDTO* MarchInfoDTO::release_timer() {
  clear_has_timer();
  ::slg::protocol::MarchTimerDTO* temp = timer_;
  timer_ = NULL;
  return temp;
}
inline void MarchInfoDTO::set_allocated_timer(::slg::protocol::MarchTimerDTO* timer) {
  delete timer_;
  timer_ = timer;
  if (timer) {
    set_has_timer();
  } else {
    clear_has_timer();
  }
}

// required .slg.protocol.MarchState state = 5;
inline bool MarchInfoDTO::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MarchInfoDTO::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MarchInfoDTO::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MarchInfoDTO::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::slg::protocol::MarchState MarchInfoDTO::state() const {
  return static_cast< ::slg::protocol::MarchState >(state_);
}
inline void MarchInfoDTO::set_state(::slg::protocol::MarchState value) {
  assert(::slg::protocol::MarchState_IsValid(value));
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// MarchStartRequest

// required .slg.protocol.PositionDTO position = 1;
inline bool MarchStartRequest::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarchStartRequest::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarchStartRequest::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarchStartRequest::clear_position() {
  if (position_ != NULL) position_->::slg::protocol::PositionDTO::Clear();
  clear_has_position();
}
inline const ::slg::protocol::PositionDTO& MarchStartRequest::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::slg::protocol::PositionDTO* MarchStartRequest::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::slg::protocol::PositionDTO;
  return position_;
}
inline ::slg::protocol::PositionDTO* MarchStartRequest::release_position() {
  clear_has_position();
  ::slg::protocol::PositionDTO* temp = position_;
  position_ = NULL;
  return temp;
}
inline void MarchStartRequest::set_allocated_position(::slg::protocol::PositionDTO* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
}

// required int64 objId = 2;
inline bool MarchStartRequest::has_objid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarchStartRequest::set_has_objid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarchStartRequest::clear_has_objid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarchStartRequest::clear_objid() {
  objid_ = GOOGLE_LONGLONG(0);
  clear_has_objid();
}
inline ::google::protobuf::int64 MarchStartRequest::objid() const {
  return objid_;
}
inline void MarchStartRequest::set_objid(::google::protobuf::int64 value) {
  set_has_objid();
  objid_ = value;
}

// repeated .slg.protocol.SoldierDTO soldiers = 3;
inline int MarchStartRequest::soldiers_size() const {
  return soldiers_.size();
}
inline void MarchStartRequest::clear_soldiers() {
  soldiers_.Clear();
}
inline const ::slg::protocol::SoldierDTO& MarchStartRequest::soldiers(int index) const {
  return soldiers_.Get(index);
}
inline ::slg::protocol::SoldierDTO* MarchStartRequest::mutable_soldiers(int index) {
  return soldiers_.Mutable(index);
}
inline ::slg::protocol::SoldierDTO* MarchStartRequest::add_soldiers() {
  return soldiers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::SoldierDTO >&
MarchStartRequest::soldiers() const {
  return soldiers_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::SoldierDTO >*
MarchStartRequest::mutable_soldiers() {
  return &soldiers_;
}

// required .slg.protocol.MarchType type = 4;
inline bool MarchStartRequest::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarchStartRequest::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MarchStartRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MarchStartRequest::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::slg::protocol::MarchType MarchStartRequest::type() const {
  return static_cast< ::slg::protocol::MarchType >(type_);
}
inline void MarchStartRequest::set_type(::slg::protocol::MarchType value) {
  assert(::slg::protocol::MarchType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 massTime = 10;
inline bool MarchStartRequest::has_masstime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MarchStartRequest::set_has_masstime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MarchStartRequest::clear_has_masstime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MarchStartRequest::clear_masstime() {
  masstime_ = 0;
  clear_has_masstime();
}
inline ::google::protobuf::int32 MarchStartRequest::masstime() const {
  return masstime_;
}
inline void MarchStartRequest::set_masstime(::google::protobuf::int32 value) {
  set_has_masstime();
  masstime_ = value;
}

// optional int64 joinId = 11;
inline bool MarchStartRequest::has_joinid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MarchStartRequest::set_has_joinid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MarchStartRequest::clear_has_joinid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MarchStartRequest::clear_joinid() {
  joinid_ = GOOGLE_LONGLONG(0);
  clear_has_joinid();
}
inline ::google::protobuf::int64 MarchStartRequest::joinid() const {
  return joinid_;
}
inline void MarchStartRequest::set_joinid(::google::protobuf::int64 value) {
  set_has_joinid();
  joinid_ = value;
}

// -------------------------------------------------------------------

// MarchStartResponse

// required int64 marchId = 1;
inline bool MarchStartResponse::has_marchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarchStartResponse::set_has_marchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarchStartResponse::clear_has_marchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarchStartResponse::clear_marchid() {
  marchid_ = GOOGLE_LONGLONG(0);
  clear_has_marchid();
}
inline ::google::protobuf::int64 MarchStartResponse::marchid() const {
  return marchid_;
}
inline void MarchStartResponse::set_marchid(::google::protobuf::int64 value) {
  set_has_marchid();
  marchid_ = value;
}

// -------------------------------------------------------------------

// MarchSpeedUpRequest

// required int64 marchId = 1;
inline bool MarchSpeedUpRequest::has_marchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarchSpeedUpRequest::set_has_marchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarchSpeedUpRequest::clear_has_marchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarchSpeedUpRequest::clear_marchid() {
  marchid_ = GOOGLE_LONGLONG(0);
  clear_has_marchid();
}
inline ::google::protobuf::int64 MarchSpeedUpRequest::marchid() const {
  return marchid_;
}
inline void MarchSpeedUpRequest::set_marchid(::google::protobuf::int64 value) {
  set_has_marchid();
  marchid_ = value;
}

// -------------------------------------------------------------------

// MarchSpeedUpResponse

// required int64 marchId = 1;
inline bool MarchSpeedUpResponse::has_marchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarchSpeedUpResponse::set_has_marchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarchSpeedUpResponse::clear_has_marchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarchSpeedUpResponse::clear_marchid() {
  marchid_ = GOOGLE_LONGLONG(0);
  clear_has_marchid();
}
inline ::google::protobuf::int64 MarchSpeedUpResponse::marchid() const {
  return marchid_;
}
inline void MarchSpeedUpResponse::set_marchid(::google::protobuf::int64 value) {
  set_has_marchid();
  marchid_ = value;
}

// -------------------------------------------------------------------

// MarchRecallRequest

// required int64 marchId = 1;
inline bool MarchRecallRequest::has_marchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarchRecallRequest::set_has_marchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarchRecallRequest::clear_has_marchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarchRecallRequest::clear_marchid() {
  marchid_ = GOOGLE_LONGLONG(0);
  clear_has_marchid();
}
inline ::google::protobuf::int64 MarchRecallRequest::marchid() const {
  return marchid_;
}
inline void MarchRecallRequest::set_marchid(::google::protobuf::int64 value) {
  set_has_marchid();
  marchid_ = value;
}

// -------------------------------------------------------------------

// MarchRecallResponse

// required int64 marchId = 1;
inline bool MarchRecallResponse::has_marchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarchRecallResponse::set_has_marchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarchRecallResponse::clear_has_marchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarchRecallResponse::clear_marchid() {
  marchid_ = GOOGLE_LONGLONG(0);
  clear_has_marchid();
}
inline ::google::protobuf::int64 MarchRecallResponse::marchid() const {
  return marchid_;
}
inline void MarchRecallResponse::set_marchid(::google::protobuf::int64 value) {
  set_has_marchid();
  marchid_ = value;
}

// -------------------------------------------------------------------

// MarchDismissRequest

// required int64 marchId = 1;
inline bool MarchDismissRequest::has_marchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarchDismissRequest::set_has_marchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarchDismissRequest::clear_has_marchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarchDismissRequest::clear_marchid() {
  marchid_ = GOOGLE_LONGLONG(0);
  clear_has_marchid();
}
inline ::google::protobuf::int64 MarchDismissRequest::marchid() const {
  return marchid_;
}
inline void MarchDismissRequest::set_marchid(::google::protobuf::int64 value) {
  set_has_marchid();
  marchid_ = value;
}

// -------------------------------------------------------------------

// MarchDismissResponse

// required int64 marchId = 1;
inline bool MarchDismissResponse::has_marchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarchDismissResponse::set_has_marchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarchDismissResponse::clear_has_marchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarchDismissResponse::clear_marchid() {
  marchid_ = GOOGLE_LONGLONG(0);
  clear_has_marchid();
}
inline ::google::protobuf::int64 MarchDismissResponse::marchid() const {
  return marchid_;
}
inline void MarchDismissResponse::set_marchid(::google::protobuf::int64 value) {
  set_has_marchid();
  marchid_ = value;
}

// -------------------------------------------------------------------

// MarchKickRequest

// required int64 marchId = 1;
inline bool MarchKickRequest::has_marchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarchKickRequest::set_has_marchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarchKickRequest::clear_has_marchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarchKickRequest::clear_marchid() {
  marchid_ = GOOGLE_LONGLONG(0);
  clear_has_marchid();
}
inline ::google::protobuf::int64 MarchKickRequest::marchid() const {
  return marchid_;
}
inline void MarchKickRequest::set_marchid(::google::protobuf::int64 value) {
  set_has_marchid();
  marchid_ = value;
}

// required int64 targetMarchId = 2;
inline bool MarchKickRequest::has_targetmarchid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarchKickRequest::set_has_targetmarchid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarchKickRequest::clear_has_targetmarchid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarchKickRequest::clear_targetmarchid() {
  targetmarchid_ = GOOGLE_LONGLONG(0);
  clear_has_targetmarchid();
}
inline ::google::protobuf::int64 MarchKickRequest::targetmarchid() const {
  return targetmarchid_;
}
inline void MarchKickRequest::set_targetmarchid(::google::protobuf::int64 value) {
  set_has_targetmarchid();
  targetmarchid_ = value;
}

// -------------------------------------------------------------------

// MarchKickResponse

// required int64 marchId = 1;
inline bool MarchKickResponse::has_marchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarchKickResponse::set_has_marchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarchKickResponse::clear_has_marchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarchKickResponse::clear_marchid() {
  marchid_ = GOOGLE_LONGLONG(0);
  clear_has_marchid();
}
inline ::google::protobuf::int64 MarchKickResponse::marchid() const {
  return marchid_;
}
inline void MarchKickResponse::set_marchid(::google::protobuf::int64 value) {
  set_has_marchid();
  marchid_ = value;
}

// -------------------------------------------------------------------

// MarchInfoPush

// repeated .slg.protocol.MarchInfoDTO infos = 1;
inline int MarchInfoPush::infos_size() const {
  return infos_.size();
}
inline void MarchInfoPush::clear_infos() {
  infos_.Clear();
}
inline const ::slg::protocol::MarchInfoDTO& MarchInfoPush::infos(int index) const {
  return infos_.Get(index);
}
inline ::slg::protocol::MarchInfoDTO* MarchInfoPush::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::slg::protocol::MarchInfoDTO* MarchInfoPush::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::MarchInfoDTO >&
MarchInfoPush::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::MarchInfoDTO >*
MarchInfoPush::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// MarchRemovePush

// required int64 marchId = 1;
inline bool MarchRemovePush::has_marchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarchRemovePush::set_has_marchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarchRemovePush::clear_has_marchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarchRemovePush::clear_marchid() {
  marchid_ = GOOGLE_LONGLONG(0);
  clear_has_marchid();
}
inline ::google::protobuf::int64 MarchRemovePush::marchid() const {
  return marchid_;
}
inline void MarchRemovePush::set_marchid(::google::protobuf::int64 value) {
  set_has_marchid();
  marchid_ = value;
}

// -------------------------------------------------------------------

// MarchResultPush

// required int64 marchId = 1;
inline bool MarchResultPush::has_marchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarchResultPush::set_has_marchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarchResultPush::clear_has_marchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarchResultPush::clear_marchid() {
  marchid_ = GOOGLE_LONGLONG(0);
  clear_has_marchid();
}
inline ::google::protobuf::int64 MarchResultPush::marchid() const {
  return marchid_;
}
inline void MarchResultPush::set_marchid(::google::protobuf::int64 value) {
  set_has_marchid();
  marchid_ = value;
}

// required .slg.protocol.MarchType type = 2;
inline bool MarchResultPush::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarchResultPush::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarchResultPush::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarchResultPush::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::slg::protocol::MarchType MarchResultPush::type() const {
  return static_cast< ::slg::protocol::MarchType >(type_);
}
inline void MarchResultPush::set_type(::slg::protocol::MarchType value) {
  assert(::slg::protocol::MarchType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .slg.protocol.PositionDTO attacker = 3;
inline bool MarchResultPush::has_attacker() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarchResultPush::set_has_attacker() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarchResultPush::clear_has_attacker() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarchResultPush::clear_attacker() {
  if (attacker_ != NULL) attacker_->::slg::protocol::PositionDTO::Clear();
  clear_has_attacker();
}
inline const ::slg::protocol::PositionDTO& MarchResultPush::attacker() const {
  return attacker_ != NULL ? *attacker_ : *default_instance_->attacker_;
}
inline ::slg::protocol::PositionDTO* MarchResultPush::mutable_attacker() {
  set_has_attacker();
  if (attacker_ == NULL) attacker_ = new ::slg::protocol::PositionDTO;
  return attacker_;
}
inline ::slg::protocol::PositionDTO* MarchResultPush::release_attacker() {
  clear_has_attacker();
  ::slg::protocol::PositionDTO* temp = attacker_;
  attacker_ = NULL;
  return temp;
}
inline void MarchResultPush::set_allocated_attacker(::slg::protocol::PositionDTO* attacker) {
  delete attacker_;
  attacker_ = attacker;
  if (attacker) {
    set_has_attacker();
  } else {
    clear_has_attacker();
  }
}

// required .slg.protocol.PositionDTO defencer = 4;
inline bool MarchResultPush::has_defencer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarchResultPush::set_has_defencer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MarchResultPush::clear_has_defencer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MarchResultPush::clear_defencer() {
  if (defencer_ != NULL) defencer_->::slg::protocol::PositionDTO::Clear();
  clear_has_defencer();
}
inline const ::slg::protocol::PositionDTO& MarchResultPush::defencer() const {
  return defencer_ != NULL ? *defencer_ : *default_instance_->defencer_;
}
inline ::slg::protocol::PositionDTO* MarchResultPush::mutable_defencer() {
  set_has_defencer();
  if (defencer_ == NULL) defencer_ = new ::slg::protocol::PositionDTO;
  return defencer_;
}
inline ::slg::protocol::PositionDTO* MarchResultPush::release_defencer() {
  clear_has_defencer();
  ::slg::protocol::PositionDTO* temp = defencer_;
  defencer_ = NULL;
  return temp;
}
inline void MarchResultPush::set_allocated_defencer(::slg::protocol::PositionDTO* defencer) {
  delete defencer_;
  defencer_ = defencer;
  if (defencer) {
    set_has_defencer();
  } else {
    clear_has_defencer();
  }
}

// repeated .slg.protocol.SoldierDTO soldiers = 5;
inline int MarchResultPush::soldiers_size() const {
  return soldiers_.size();
}
inline void MarchResultPush::clear_soldiers() {
  soldiers_.Clear();
}
inline const ::slg::protocol::SoldierDTO& MarchResultPush::soldiers(int index) const {
  return soldiers_.Get(index);
}
inline ::slg::protocol::SoldierDTO* MarchResultPush::mutable_soldiers(int index) {
  return soldiers_.Mutable(index);
}
inline ::slg::protocol::SoldierDTO* MarchResultPush::add_soldiers() {
  return soldiers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::SoldierDTO >&
MarchResultPush::soldiers() const {
  return soldiers_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::SoldierDTO >*
MarchResultPush::mutable_soldiers() {
  return &soldiers_;
}

// required bool won = 6;
inline bool MarchResultPush::has_won() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MarchResultPush::set_has_won() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MarchResultPush::clear_has_won() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MarchResultPush::clear_won() {
  won_ = false;
  clear_has_won();
}
inline bool MarchResultPush::won() const {
  return won_;
}
inline void MarchResultPush::set_won(bool value) {
  set_has_won();
  won_ = value;
}

// -------------------------------------------------------------------

// MarchTimerPush

// required int64 marchId = 1;
inline bool MarchTimerPush::has_marchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarchTimerPush::set_has_marchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarchTimerPush::clear_has_marchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarchTimerPush::clear_marchid() {
  marchid_ = GOOGLE_LONGLONG(0);
  clear_has_marchid();
}
inline ::google::protobuf::int64 MarchTimerPush::marchid() const {
  return marchid_;
}
inline void MarchTimerPush::set_marchid(::google::protobuf::int64 value) {
  set_has_marchid();
  marchid_ = value;
}

// required .slg.protocol.MarchTimerDTO timer = 2;
inline bool MarchTimerPush::has_timer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarchTimerPush::set_has_timer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarchTimerPush::clear_has_timer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarchTimerPush::clear_timer() {
  if (timer_ != NULL) timer_->::slg::protocol::MarchTimerDTO::Clear();
  clear_has_timer();
}
inline const ::slg::protocol::MarchTimerDTO& MarchTimerPush::timer() const {
  return timer_ != NULL ? *timer_ : *default_instance_->timer_;
}
inline ::slg::protocol::MarchTimerDTO* MarchTimerPush::mutable_timer() {
  set_has_timer();
  if (timer_ == NULL) timer_ = new ::slg::protocol::MarchTimerDTO;
  return timer_;
}
inline ::slg::protocol::MarchTimerDTO* MarchTimerPush::release_timer() {
  clear_has_timer();
  ::slg::protocol::MarchTimerDTO* temp = timer_;
  timer_ = NULL;
  return temp;
}
inline void MarchTimerPush::set_allocated_timer(::slg::protocol::MarchTimerDTO* timer) {
  delete timer_;
  timer_ = timer;
  if (timer) {
    set_has_timer();
  } else {
    clear_has_timer();
  }
}

// -------------------------------------------------------------------

// MilitaryDTO

// required .slg.protocol.MarchInfoDTO march = 1;
inline bool MilitaryDTO::has_march() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MilitaryDTO::set_has_march() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MilitaryDTO::clear_has_march() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MilitaryDTO::clear_march() {
  if (march_ != NULL) march_->::slg::protocol::MarchInfoDTO::Clear();
  clear_has_march();
}
inline const ::slg::protocol::MarchInfoDTO& MilitaryDTO::march() const {
  return march_ != NULL ? *march_ : *default_instance_->march_;
}
inline ::slg::protocol::MarchInfoDTO* MilitaryDTO::mutable_march() {
  set_has_march();
  if (march_ == NULL) march_ = new ::slg::protocol::MarchInfoDTO;
  return march_;
}
inline ::slg::protocol::MarchInfoDTO* MilitaryDTO::release_march() {
  clear_has_march();
  ::slg::protocol::MarchInfoDTO* temp = march_;
  march_ = NULL;
  return temp;
}
inline void MilitaryDTO::set_allocated_march(::slg::protocol::MarchInfoDTO* march) {
  delete march_;
  march_ = march;
  if (march) {
    set_has_march();
  } else {
    clear_has_march();
  }
}

// optional .slg.protocol.MarchAidDTO defenderAid = 2;
inline bool MilitaryDTO::has_defenderaid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MilitaryDTO::set_has_defenderaid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MilitaryDTO::clear_has_defenderaid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MilitaryDTO::clear_defenderaid() {
  if (defenderaid_ != NULL) defenderaid_->::slg::protocol::MarchAidDTO::Clear();
  clear_has_defenderaid();
}
inline const ::slg::protocol::MarchAidDTO& MilitaryDTO::defenderaid() const {
  return defenderaid_ != NULL ? *defenderaid_ : *default_instance_->defenderaid_;
}
inline ::slg::protocol::MarchAidDTO* MilitaryDTO::mutable_defenderaid() {
  set_has_defenderaid();
  if (defenderaid_ == NULL) defenderaid_ = new ::slg::protocol::MarchAidDTO;
  return defenderaid_;
}
inline ::slg::protocol::MarchAidDTO* MilitaryDTO::release_defenderaid() {
  clear_has_defenderaid();
  ::slg::protocol::MarchAidDTO* temp = defenderaid_;
  defenderaid_ = NULL;
  return temp;
}
inline void MilitaryDTO::set_allocated_defenderaid(::slg::protocol::MarchAidDTO* defenderaid) {
  delete defenderaid_;
  defenderaid_ = defenderaid;
  if (defenderaid) {
    set_has_defenderaid();
  } else {
    clear_has_defenderaid();
  }
}

// -------------------------------------------------------------------

// MilitaryPush

// repeated .slg.protocol.MilitaryDTO militaries = 1;
inline int MilitaryPush::militaries_size() const {
  return militaries_.size();
}
inline void MilitaryPush::clear_militaries() {
  militaries_.Clear();
}
inline const ::slg::protocol::MilitaryDTO& MilitaryPush::militaries(int index) const {
  return militaries_.Get(index);
}
inline ::slg::protocol::MilitaryDTO* MilitaryPush::mutable_militaries(int index) {
  return militaries_.Mutable(index);
}
inline ::slg::protocol::MilitaryDTO* MilitaryPush::add_militaries() {
  return militaries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::MilitaryDTO >&
MilitaryPush::militaries() const {
  return militaries_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::MilitaryDTO >*
MilitaryPush::mutable_militaries() {
  return &militaries_;
}

// -------------------------------------------------------------------

// MilitaryDeletePush

// required int64 marchId = 1;
inline bool MilitaryDeletePush::has_marchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MilitaryDeletePush::set_has_marchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MilitaryDeletePush::clear_has_marchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MilitaryDeletePush::clear_marchid() {
  marchid_ = GOOGLE_LONGLONG(0);
  clear_has_marchid();
}
inline ::google::protobuf::int64 MilitaryDeletePush::marchid() const {
  return marchid_;
}
inline void MilitaryDeletePush::set_marchid(::google::protobuf::int64 value) {
  set_has_marchid();
  marchid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace slg

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::slg::protocol::MarchState>() {
  return ::slg::protocol::MarchState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::slg::protocol::MarchType>() {
  return ::slg::protocol::MarchType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::slg::protocol::MarchCommandId>() {
  return ::slg::protocol::MarchCommandId_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::slg::protocol::MarchPushId>() {
  return ::slg::protocol::MarchPushId_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_march_2eproto__INCLUDED
