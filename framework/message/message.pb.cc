// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class CMessageHeadDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMessageHead> {
} _CMessageHead_default_instance_;
class CMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMessage> {
} _CMessage_default_instance_;
class CMsgPingRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgPingRequest> {
} _CMsgPingRequest_default_instance_;
class CCSHeadDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCSHead> {
} _CCSHead_default_instance_;
class CMessageSetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMessageSet> {
} _CMessageSet_default_instance_;

namespace protobuf_message_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageHead, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageHead, messageid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageHead, dstfe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageHead, dstid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageHead, timestamp_),
  0,
  1,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessage, msghead_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessage, msgpara_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPingRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSHead, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSHead, dialogid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSHead, teamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSHead, entityid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSHead, timestamp_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSet, msgparas_),
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(CMessageHead)},
  { 12, 18, sizeof(CMessage)},
  { 20, 24, sizeof(CMsgPingRequest)},
  { 24, 32, sizeof(CCSHead)},
  { 36, 41, sizeof(CMessageSet)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMessageHead_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgPingRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCSHead_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMessageSet_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "message.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _CMessageHead_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CMessage_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CMsgPingRequest_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CCSHead_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CMessageSet_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CMessageHead_default_instance_.DefaultConstruct();
  _CMessage_default_instance_.DefaultConstruct();
  _CMsgPingRequest_default_instance_.DefaultConstruct();
  _CCSHead_default_instance_.DefaultConstruct();
  _CMessageSet_default_instance_.DefaultConstruct();
  _CMessage_default_instance_.get_mutable()->msghead_ = const_cast< ::CMessageHead*>(
      ::CMessageHead::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rmessage.proto\"U\n\014CMessageHead\022\024\n\tMessa"
      "geID\030\001 \002(\005:\0010\022\r\n\005DstFE\030\002 \001(\005\022\r\n\005DstID\030\003 "
      "\001(\005\022\021\n\tTimeStamp\030\004 \001(\003\">\n\010CMessage\022\036\n\007Ms"
      "gHead\030\001 \001(\0132\r.CMessageHead\022\022\n\007MsgPara\030\002 "
      "\001(\006:\0010\"&\n\017CMsgPingRequest\"\023\n\003Msg\022\014\n\005MsgI"
      "D\020\377\377\377\007\"V\n\007CCSHead\022\023\n\010DialogID\030\001 \001(\r:\0010\022\016"
      "\n\006TeamID\030\002 \001(\004\022\020\n\010EntityID\030\003 \001(\r\022\024\n\tTime"
      "Stamp\030\004 \001(\003:\0010\"\037\n\013CMessageSet\022\020\n\010MsgPara"
      "s\030\001 \003(\014*\221\002\n\013enMessageFE\022\014\n\010FE_TIMER\020\000\022\r\n"
      "\tFE_CLIENT\020\001\022\021\n\rFE_GAMESERVER\020\002\022\022\n\016FE_LO"
      "GINSERVER\020\003\022\017\n\013FE_DBSERVER\020\004\022\022\n\016FE_PROXY"
      "SERVER\020\005\022\022\n\016FE_WORLDSERVER\020\006\022\020\n\014FE_WEBSE"
      "RVER\020\007\022\024\n\020FE_OFFLINESERVER\020\010\022\022\n\016FE_CHECK"
      "SERVER\020\t\022\021\n\rFE_HALLSERVER\020\n\022\021\n\rFE_GATESE"
      "RVER\020\013\022\020\n\014FE_TCPSERVER\020\014\022\021\n\rFE_ROOMSERVE"
      "R\020\rB\002H\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 607);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_message_2eproto

const ::google::protobuf::EnumDescriptor* CMsgPingRequest_Msg_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[0];
}
bool CMsgPingRequest_Msg_IsValid(int value) {
  switch (value) {
    case 16777215:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgPingRequest_Msg CMsgPingRequest::MsgID;
const CMsgPingRequest_Msg CMsgPingRequest::Msg_MIN;
const CMsgPingRequest_Msg CMsgPingRequest::Msg_MAX;
const int CMsgPingRequest::Msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* enMessageFE_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[1];
}
bool enMessageFE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMessageHead::kMessageIDFieldNumber;
const int CMessageHead::kDstFEFieldNumber;
const int CMessageHead::kDstIDFieldNumber;
const int CMessageHead::kTimeStampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMessageHead::CMessageHead()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMessageHead)
}
CMessageHead::CMessageHead(const CMessageHead& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&messageid_, &from.messageid_,
    reinterpret_cast<char*>(&dstid_) -
    reinterpret_cast<char*>(&messageid_) + sizeof(dstid_));
  // @@protoc_insertion_point(copy_constructor:CMessageHead)
}

void CMessageHead::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&messageid_, 0, reinterpret_cast<char*>(&dstid_) -
    reinterpret_cast<char*>(&messageid_) + sizeof(dstid_));
}

CMessageHead::~CMessageHead() {
  // @@protoc_insertion_point(destructor:CMessageHead)
  SharedDtor();
}

void CMessageHead::SharedDtor() {
}

void CMessageHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMessageHead::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[0].descriptor;
}

const CMessageHead& CMessageHead::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMessageHead* CMessageHead::New(::google::protobuf::Arena* arena) const {
  CMessageHead* n = new CMessageHead;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMessageHead::Clear() {
// @@protoc_insertion_point(message_clear_start:CMessageHead)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&messageid_, 0, reinterpret_cast<char*>(&dstid_) -
      reinterpret_cast<char*>(&messageid_) + sizeof(dstid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMessageHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMessageHead)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 MessageID = 1 [default = 0];
      case 1: {
        if (tag == 8u) {
          set_has_messageid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messageid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 DstFE = 2;
      case 2: {
        if (tag == 16u) {
          set_has_dstfe();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dstfe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 DstID = 3;
      case 3: {
        if (tag == 24u) {
          set_has_dstid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dstid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 TimeStamp = 4;
      case 4: {
        if (tag == 32u) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMessageHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMessageHead)
  return false;
#undef DO_
}

void CMessageHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMessageHead)
  // required int32 MessageID = 1 [default = 0];
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->messageid(), output);
  }

  // optional int32 DstFE = 2;
  if (has_dstfe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dstfe(), output);
  }

  // optional int32 DstID = 3;
  if (has_dstid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dstid(), output);
  }

  // optional int64 TimeStamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMessageHead)
}

::google::protobuf::uint8* CMessageHead::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMessageHead)
  // required int32 MessageID = 1 [default = 0];
  if (has_messageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->messageid(), target);
  }

  // optional int32 DstFE = 2;
  if (has_dstfe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dstfe(), target);
  }

  // optional int32 DstID = 3;
  if (has_dstid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dstid(), target);
  }

  // optional int64 TimeStamp = 4;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMessageHead)
  return target;
}

size_t CMessageHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMessageHead)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int32 MessageID = 1 [default = 0];
  if (has_messageid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->messageid());
  }
  if (_has_bits_[0 / 32] & 14u) {
    // optional int32 DstFE = 2;
    if (has_dstfe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dstfe());
    }

    // optional int64 TimeStamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional int32 DstID = 3;
    if (has_dstid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dstid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMessageHead::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMessageHead)
  GOOGLE_DCHECK_NE(&from, this);
  const CMessageHead* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMessageHead>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMessageHead)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMessageHead)
    MergeFrom(*source);
  }
}

void CMessageHead::MergeFrom(const CMessageHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMessageHead)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_dstfe()) {
      set_dstfe(from.dstfe());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_dstid()) {
      set_dstid(from.dstid());
    }
  }
}

void CMessageHead::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMessageHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageHead::CopyFrom(const CMessageHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMessageHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMessageHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CMessageHead::Swap(CMessageHead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMessageHead::InternalSwap(CMessageHead* other) {
  std::swap(messageid_, other->messageid_);
  std::swap(dstfe_, other->dstfe_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(dstid_, other->dstid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMessageHead::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMessageHead

// required int32 MessageID = 1 [default = 0];
bool CMessageHead::has_messageid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMessageHead::set_has_messageid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMessageHead::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMessageHead::clear_messageid() {
  messageid_ = 0;
  clear_has_messageid();
}
::google::protobuf::int32 CMessageHead::messageid() const {
  // @@protoc_insertion_point(field_get:CMessageHead.MessageID)
  return messageid_;
}
void CMessageHead::set_messageid(::google::protobuf::int32 value) {
  set_has_messageid();
  messageid_ = value;
  // @@protoc_insertion_point(field_set:CMessageHead.MessageID)
}

// optional int32 DstFE = 2;
bool CMessageHead::has_dstfe() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMessageHead::set_has_dstfe() {
  _has_bits_[0] |= 0x00000002u;
}
void CMessageHead::clear_has_dstfe() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMessageHead::clear_dstfe() {
  dstfe_ = 0;
  clear_has_dstfe();
}
::google::protobuf::int32 CMessageHead::dstfe() const {
  // @@protoc_insertion_point(field_get:CMessageHead.DstFE)
  return dstfe_;
}
void CMessageHead::set_dstfe(::google::protobuf::int32 value) {
  set_has_dstfe();
  dstfe_ = value;
  // @@protoc_insertion_point(field_set:CMessageHead.DstFE)
}

// optional int32 DstID = 3;
bool CMessageHead::has_dstid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMessageHead::set_has_dstid() {
  _has_bits_[0] |= 0x00000008u;
}
void CMessageHead::clear_has_dstid() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMessageHead::clear_dstid() {
  dstid_ = 0;
  clear_has_dstid();
}
::google::protobuf::int32 CMessageHead::dstid() const {
  // @@protoc_insertion_point(field_get:CMessageHead.DstID)
  return dstid_;
}
void CMessageHead::set_dstid(::google::protobuf::int32 value) {
  set_has_dstid();
  dstid_ = value;
  // @@protoc_insertion_point(field_set:CMessageHead.DstID)
}

// optional int64 TimeStamp = 4;
bool CMessageHead::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMessageHead::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
void CMessageHead::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMessageHead::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 CMessageHead::timestamp() const {
  // @@protoc_insertion_point(field_get:CMessageHead.TimeStamp)
  return timestamp_;
}
void CMessageHead::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:CMessageHead.TimeStamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMessage::kMsgHeadFieldNumber;
const int CMessage::kMsgParaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMessage::CMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMessage)
}
CMessage::CMessage(const CMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msghead()) {
    msghead_ = new ::CMessageHead(*from.msghead_);
  } else {
    msghead_ = NULL;
  }
  msgpara_ = from.msgpara_;
  // @@protoc_insertion_point(copy_constructor:CMessage)
}

void CMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&msghead_, 0, reinterpret_cast<char*>(&msgpara_) -
    reinterpret_cast<char*>(&msghead_) + sizeof(msgpara_));
}

CMessage::~CMessage() {
  // @@protoc_insertion_point(destructor:CMessage)
  SharedDtor();
}

void CMessage::SharedDtor() {
  if (this != internal_default_instance()) {
    delete msghead_;
  }
}

void CMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMessage::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[1].descriptor;
}

const CMessage& CMessage::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMessage* CMessage::New(::google::protobuf::Arena* arena) const {
  CMessage* n = new CMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CMessage)
  if (has_msghead()) {
    GOOGLE_DCHECK(msghead_ != NULL);
    msghead_->::CMessageHead::Clear();
  }
  msgpara_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMessageHead MsgHead = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 MsgPara = 2 [default = 0];
      case 2: {
        if (tag == 17u) {
          set_has_msgpara();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &msgpara_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMessage)
  return false;
#undef DO_
}

void CMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMessage)
  // optional .CMessageHead MsgHead = 1;
  if (has_msghead()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msghead_, output);
  }

  // optional fixed64 MsgPara = 2 [default = 0];
  if (has_msgpara()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->msgpara(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMessage)
}

::google::protobuf::uint8* CMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMessage)
  // optional .CMessageHead MsgHead = 1;
  if (has_msghead()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->msghead_, false, target);
  }

  // optional fixed64 MsgPara = 2 [default = 0];
  if (has_msgpara()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->msgpara(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMessage)
  return target;
}

size_t CMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .CMessageHead MsgHead = 1;
    if (has_msghead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->msghead_);
    }

    // optional fixed64 MsgPara = 2 [default = 0];
    if (has_msgpara()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMessage)
    MergeFrom(*source);
  }
}

void CMessage::MergeFrom(const CMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_msghead()) {
      mutable_msghead()->::CMessageHead::MergeFrom(from.msghead());
    }
    if (from.has_msgpara()) {
      set_msgpara(from.msgpara());
    }
  }
}

void CMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessage::CopyFrom(const CMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMessage::IsInitialized() const {
  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  return true;
}

void CMessage::Swap(CMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMessage::InternalSwap(CMessage* other) {
  std::swap(msghead_, other->msghead_);
  std::swap(msgpara_, other->msgpara_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMessage::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMessage

// optional .CMessageHead MsgHead = 1;
bool CMessage::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMessage::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void CMessage::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMessage::clear_msghead() {
  if (msghead_ != NULL) msghead_->::CMessageHead::Clear();
  clear_has_msghead();
}
const ::CMessageHead& CMessage::msghead() const {
  // @@protoc_insertion_point(field_get:CMessage.MsgHead)
  return msghead_ != NULL ? *msghead_
                         : *::CMessageHead::internal_default_instance();
}
::CMessageHead* CMessage::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::CMessageHead;
  }
  // @@protoc_insertion_point(field_mutable:CMessage.MsgHead)
  return msghead_;
}
::CMessageHead* CMessage::release_msghead() {
  // @@protoc_insertion_point(field_release:CMessage.MsgHead)
  clear_has_msghead();
  ::CMessageHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void CMessage::set_allocated_msghead(::CMessageHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:CMessage.MsgHead)
}

// optional fixed64 MsgPara = 2 [default = 0];
bool CMessage::has_msgpara() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMessage::set_has_msgpara() {
  _has_bits_[0] |= 0x00000002u;
}
void CMessage::clear_has_msgpara() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMessage::clear_msgpara() {
  msgpara_ = GOOGLE_ULONGLONG(0);
  clear_has_msgpara();
}
::google::protobuf::uint64 CMessage::msgpara() const {
  // @@protoc_insertion_point(field_get:CMessage.MsgPara)
  return msgpara_;
}
void CMessage::set_msgpara(::google::protobuf::uint64 value) {
  set_has_msgpara();
  msgpara_ = value;
  // @@protoc_insertion_point(field_set:CMessage.MsgPara)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPingRequest::CMsgPingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPingRequest)
}
CMsgPingRequest::CMsgPingRequest(const CMsgPingRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgPingRequest)
}

void CMsgPingRequest::SharedCtor() {
  _cached_size_ = 0;
}

CMsgPingRequest::~CMsgPingRequest() {
  // @@protoc_insertion_point(destructor:CMsgPingRequest)
  SharedDtor();
}

void CMsgPingRequest::SharedDtor() {
}

void CMsgPingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPingRequest::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[2].descriptor;
}

const CMsgPingRequest& CMsgPingRequest::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgPingRequest* CMsgPingRequest::New(::google::protobuf::Arena* arena) const {
  CMsgPingRequest* n = new CMsgPingRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPingRequest)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPingRequest)
  return false;
#undef DO_
}

void CMsgPingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPingRequest)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPingRequest)
}

::google::protobuf::uint8* CMsgPingRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPingRequest)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPingRequest)
  return target;
}

size_t CMsgPingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPingRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPingRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPingRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPingRequest)
    MergeFrom(*source);
  }
}

void CMsgPingRequest::MergeFrom(const CMsgPingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void CMsgPingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPingRequest::CopyFrom(const CMsgPingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPingRequest::IsInitialized() const {
  return true;
}

void CMsgPingRequest::Swap(CMsgPingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPingRequest::InternalSwap(CMsgPingRequest* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPingRequest::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPingRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCSHead::kDialogIDFieldNumber;
const int CCSHead::kTeamIDFieldNumber;
const int CCSHead::kEntityIDFieldNumber;
const int CCSHead::kTimeStampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCSHead::CCSHead()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCSHead)
}
CCSHead::CCSHead(const CCSHead& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&teamid_, &from.teamid_,
    reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&teamid_) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:CCSHead)
}

void CCSHead::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&teamid_, 0, reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&teamid_) + sizeof(timestamp_));
}

CCSHead::~CCSHead() {
  // @@protoc_insertion_point(destructor:CCSHead)
  SharedDtor();
}

void CCSHead::SharedDtor() {
}

void CCSHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSHead::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[3].descriptor;
}

const CCSHead& CCSHead::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCSHead* CCSHead::New(::google::protobuf::Arena* arena) const {
  CCSHead* n = new CCSHead;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCSHead::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSHead)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&teamid_, 0, reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&teamid_) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCSHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCSHead)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 DialogID = 1 [default = 0];
      case 1: {
        if (tag == 8u) {
          set_has_dialogid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dialogid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 TeamID = 2;
      case 2: {
        if (tag == 16u) {
          set_has_teamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 EntityID = 3;
      case 3: {
        if (tag == 24u) {
          set_has_entityid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entityid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 TimeStamp = 4 [default = 0];
      case 4: {
        if (tag == 32u) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCSHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCSHead)
  return false;
#undef DO_
}

void CCSHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCSHead)
  // optional uint32 DialogID = 1 [default = 0];
  if (has_dialogid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dialogid(), output);
  }

  // optional uint64 TeamID = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->teamid(), output);
  }

  // optional uint32 EntityID = 3;
  if (has_entityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->entityid(), output);
  }

  // optional int64 TimeStamp = 4 [default = 0];
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCSHead)
}

::google::protobuf::uint8* CCSHead::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCSHead)
  // optional uint32 DialogID = 1 [default = 0];
  if (has_dialogid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dialogid(), target);
  }

  // optional uint64 TeamID = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->teamid(), target);
  }

  // optional uint32 EntityID = 3;
  if (has_entityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->entityid(), target);
  }

  // optional int64 TimeStamp = 4 [default = 0];
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSHead)
  return target;
}

size_t CCSHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSHead)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint64 TeamID = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint32 DialogID = 1 [default = 0];
    if (has_dialogid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dialogid());
    }

    // optional uint32 EntityID = 3;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entityid());
    }

    // optional int64 TimeStamp = 4 [default = 0];
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSHead::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCSHead)
  GOOGLE_DCHECK_NE(&from, this);
  const CCSHead* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCSHead>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCSHead)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCSHead)
    MergeFrom(*source);
  }
}

void CCSHead::MergeFrom(const CCSHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSHead)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_dialogid()) {
      set_dialogid(from.dialogid());
    }
    if (from.has_entityid()) {
      set_entityid(from.entityid());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
}

void CCSHead::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCSHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSHead::CopyFrom(const CCSHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSHead::IsInitialized() const {
  return true;
}

void CCSHead::Swap(CCSHead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCSHead::InternalSwap(CCSHead* other) {
  std::swap(teamid_, other->teamid_);
  std::swap(dialogid_, other->dialogid_);
  std::swap(entityid_, other->entityid_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCSHead::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCSHead

// optional uint32 DialogID = 1 [default = 0];
bool CCSHead::has_dialogid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CCSHead::set_has_dialogid() {
  _has_bits_[0] |= 0x00000002u;
}
void CCSHead::clear_has_dialogid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CCSHead::clear_dialogid() {
  dialogid_ = 0u;
  clear_has_dialogid();
}
::google::protobuf::uint32 CCSHead::dialogid() const {
  // @@protoc_insertion_point(field_get:CCSHead.DialogID)
  return dialogid_;
}
void CCSHead::set_dialogid(::google::protobuf::uint32 value) {
  set_has_dialogid();
  dialogid_ = value;
  // @@protoc_insertion_point(field_set:CCSHead.DialogID)
}

// optional uint64 TeamID = 2;
bool CCSHead::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCSHead::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CCSHead::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCSHead::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
::google::protobuf::uint64 CCSHead::teamid() const {
  // @@protoc_insertion_point(field_get:CCSHead.TeamID)
  return teamid_;
}
void CCSHead::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:CCSHead.TeamID)
}

// optional uint32 EntityID = 3;
bool CCSHead::has_entityid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CCSHead::set_has_entityid() {
  _has_bits_[0] |= 0x00000004u;
}
void CCSHead::clear_has_entityid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CCSHead::clear_entityid() {
  entityid_ = 0u;
  clear_has_entityid();
}
::google::protobuf::uint32 CCSHead::entityid() const {
  // @@protoc_insertion_point(field_get:CCSHead.EntityID)
  return entityid_;
}
void CCSHead::set_entityid(::google::protobuf::uint32 value) {
  set_has_entityid();
  entityid_ = value;
  // @@protoc_insertion_point(field_set:CCSHead.EntityID)
}

// optional int64 TimeStamp = 4 [default = 0];
bool CCSHead::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CCSHead::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void CCSHead::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void CCSHead::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 CCSHead::timestamp() const {
  // @@protoc_insertion_point(field_get:CCSHead.TimeStamp)
  return timestamp_;
}
void CCSHead::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:CCSHead.TimeStamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMessageSet::kMsgParasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMessageSet::CMessageSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMessageSet)
}
CMessageSet::CMessageSet(const CMessageSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      msgparas_(from.msgparas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMessageSet)
}

void CMessageSet::SharedCtor() {
  _cached_size_ = 0;
}

CMessageSet::~CMessageSet() {
  // @@protoc_insertion_point(destructor:CMessageSet)
  SharedDtor();
}

void CMessageSet::SharedDtor() {
}

void CMessageSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMessageSet::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[4].descriptor;
}

const CMessageSet& CMessageSet::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMessageSet* CMessageSet::New(::google::protobuf::Arena* arena) const {
  CMessageSet* n = new CMessageSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMessageSet::Clear() {
// @@protoc_insertion_point(message_clear_start:CMessageSet)
  msgparas_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMessageSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMessageSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes MsgParas = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_msgparas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMessageSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMessageSet)
  return false;
#undef DO_
}

void CMessageSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMessageSet)
  // repeated bytes MsgParas = 1;
  for (int i = 0; i < this->msgparas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->msgparas(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMessageSet)
}

::google::protobuf::uint8* CMessageSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMessageSet)
  // repeated bytes MsgParas = 1;
  for (int i = 0; i < this->msgparas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->msgparas(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMessageSet)
  return target;
}

size_t CMessageSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMessageSet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated bytes MsgParas = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->msgparas_size());
  for (int i = 0; i < this->msgparas_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->msgparas(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMessageSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMessageSet)
  GOOGLE_DCHECK_NE(&from, this);
  const CMessageSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMessageSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMessageSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMessageSet)
    MergeFrom(*source);
  }
}

void CMessageSet::MergeFrom(const CMessageSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMessageSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msgparas_.MergeFrom(from.msgparas_);
}

void CMessageSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMessageSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSet::CopyFrom(const CMessageSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMessageSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMessageSet::IsInitialized() const {
  return true;
}

void CMessageSet::Swap(CMessageSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMessageSet::InternalSwap(CMessageSet* other) {
  msgparas_.UnsafeArenaSwap(&other->msgparas_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMessageSet::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMessageSet

// repeated bytes MsgParas = 1;
int CMessageSet::msgparas_size() const {
  return msgparas_.size();
}
void CMessageSet::clear_msgparas() {
  msgparas_.Clear();
}
const ::std::string& CMessageSet::msgparas(int index) const {
  // @@protoc_insertion_point(field_get:CMessageSet.MsgParas)
  return msgparas_.Get(index);
}
::std::string* CMessageSet::mutable_msgparas(int index) {
  // @@protoc_insertion_point(field_mutable:CMessageSet.MsgParas)
  return msgparas_.Mutable(index);
}
void CMessageSet::set_msgparas(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CMessageSet.MsgParas)
  msgparas_.Mutable(index)->assign(value);
}
void CMessageSet::set_msgparas(int index, const char* value) {
  msgparas_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMessageSet.MsgParas)
}
void CMessageSet::set_msgparas(int index, const void* value, size_t size) {
  msgparas_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMessageSet.MsgParas)
}
::std::string* CMessageSet::add_msgparas() {
  // @@protoc_insertion_point(field_add_mutable:CMessageSet.MsgParas)
  return msgparas_.Add();
}
void CMessageSet::add_msgparas(const ::std::string& value) {
  msgparas_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMessageSet.MsgParas)
}
void CMessageSet::add_msgparas(const char* value) {
  msgparas_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMessageSet.MsgParas)
}
void CMessageSet::add_msgparas(const void* value, size_t size) {
  msgparas_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMessageSet.MsgParas)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CMessageSet::msgparas() const {
  // @@protoc_insertion_point(field_list:CMessageSet.MsgParas)
  return msgparas_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CMessageSet::mutable_msgparas() {
  // @@protoc_insertion_point(field_mutable_list:CMessageSet.MsgParas)
  return &msgparas_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
