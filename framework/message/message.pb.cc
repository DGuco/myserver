// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CSocketInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSocketInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2CHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2CHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2SHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2SHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* CClientMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CClientMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2PHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2PHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProxyMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProxyMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* P2SHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  P2SHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* CServerMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CServerMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPingRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgPingRequest_Msg_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enMessageFE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMessageCmd_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  CSocketInfo_descriptor_ = file->message_type(0);
  static const int CSocketInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSocketInfo, socketid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSocketInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSocketInfo, state_),
  };
  CSocketInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSocketInfo_descriptor_,
      CSocketInfo::default_instance_,
      CSocketInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSocketInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSocketInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSocketInfo));
  S2CHead_descriptor_ = file->message_type(1);
  static const int S2CHead_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CHead, socketinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CHead, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CHead, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CHead, protoversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CHead, isencry_),
  };
  S2CHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2CHead_descriptor_,
      S2CHead::default_instance_,
      S2CHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2CHead));
  CMessageSet_descriptor_ = file->message_type(2);
  static const int CMessageSet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSet, msghead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSet, msgparas_),
  };
  CMessageSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSet_descriptor_,
      CMessageSet::default_instance_,
      CMessageSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSet));
  C2SHead_descriptor_ = file->message_type(3);
  static const int C2SHead_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SHead, socketinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SHead, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SHead, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SHead, isencry_),
  };
  C2SHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2SHead_descriptor_,
      C2SHead::default_instance_,
      C2SHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2SHead));
  CClientMessage_descriptor_ = file->message_type(4);
  static const int CClientMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientMessage, msghead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientMessage, msgparas_),
  };
  CClientMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CClientMessage_descriptor_,
      CClientMessage::default_instance_,
      CClientMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CClientMessage));
  S2PHead_descriptor_ = file->message_type(5);
  static const int S2PHead_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2PHead, srcfe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2PHead, srcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2PHead, dstfe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2PHead, dstid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2PHead, opflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2PHead, timestamp_),
  };
  S2PHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2PHead_descriptor_,
      S2PHead::default_instance_,
      S2PHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2PHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2PHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2PHead));
  CProxyMessage_descriptor_ = file->message_type(6);
  static const int CProxyMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProxyMessage, msghead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProxyMessage, msgparas_),
  };
  CProxyMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CProxyMessage_descriptor_,
      CProxyMessage::default_instance_,
      CProxyMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProxyMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProxyMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CProxyMessage));
  P2SHead_descriptor_ = file->message_type(7);
  static const int P2SHead_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P2SHead, cmd_),
  };
  P2SHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      P2SHead_descriptor_,
      P2SHead::default_instance_,
      P2SHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P2SHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P2SHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(P2SHead));
  CServerMessage_descriptor_ = file->message_type(8);
  static const int CServerMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CServerMessage, msghead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CServerMessage, msgparas_),
  };
  CServerMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CServerMessage_descriptor_,
      CServerMessage::default_instance_,
      CServerMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CServerMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CServerMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CServerMessage));
  CMsgPingRequest_descriptor_ = file->message_type(9);
  static const int CMsgPingRequest_offsets_[1] = {
  };
  CMsgPingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPingRequest_descriptor_,
      CMsgPingRequest::default_instance_,
      CMsgPingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPingRequest));
  CMsgPingRequest_Msg_descriptor_ = CMsgPingRequest_descriptor_->enum_type(0);
  enMessageFE_descriptor_ = file->enum_type(0);
  EMessageCmd_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSocketInfo_descriptor_, &CSocketInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2CHead_descriptor_, &S2CHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSet_descriptor_, &CMessageSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2SHead_descriptor_, &C2SHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CClientMessage_descriptor_, &CClientMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2PHead_descriptor_, &S2PHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CProxyMessage_descriptor_, &CProxyMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    P2SHead_descriptor_, &P2SHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CServerMessage_descriptor_, &CServerMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPingRequest_descriptor_, &CMsgPingRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete CSocketInfo::default_instance_;
  delete CSocketInfo_reflection_;
  delete S2CHead::default_instance_;
  delete S2CHead_reflection_;
  delete CMessageSet::default_instance_;
  delete CMessageSet_reflection_;
  delete C2SHead::default_instance_;
  delete C2SHead_reflection_;
  delete CClientMessage::default_instance_;
  delete CClientMessage_reflection_;
  delete S2PHead::default_instance_;
  delete S2PHead_reflection_;
  delete CProxyMessage::default_instance_;
  delete CProxyMessage_reflection_;
  delete P2SHead::default_instance_;
  delete P2SHead_reflection_;
  delete CServerMessage::default_instance_;
  delete CServerMessage_reflection_;
  delete CMsgPingRequest::default_instance_;
  delete CMsgPingRequest_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\"B\n\013CSocketInfo\022\020\n\010Socket"
    "ID\030\001 \001(\005\022\022\n\nCreateTime\030\002 \001(\003\022\r\n\005State\030\003 "
    "\001(\005\"m\n\007S2CHead\022!\n\013SocketInfos\030\001 \003(\0132\014.CS"
    "ocketInfo\022\013\n\003Cmd\030\002 \002(\005\022\013\n\003Seq\030\003 \002(\005\022\024\n\014P"
    "rotoVersion\030\004 \002(\005\022\017\n\007isEncry\030\005 \002(\010\":\n\013CM"
    "essageSet\022\031\n\007MsgHead\030\001 \002(\0132\010.S2CHead\022\020\n\010"
    "MsgParas\030\002 \003(\014\"W\n\007C2SHead\022!\n\013SocketInfos"
    "\030\001 \002(\0132\014.CSocketInfo\022\013\n\003Cmd\030\002 \002(\005\022\013\n\003Seq"
    "\030\003 \002(\005\022\017\n\007isEncry\030\005 \002(\010\"=\n\016CClientMessag"
    "e\022\031\n\007MsgHead\030\001 \002(\0132\010.C2SHead\022\020\n\010MsgParas"
    "\030\004 \002(\014\"\201\001\n\007S2PHead\022\r\n\005SrcFE\030\001 \002(\r\022\r\n\005Src"
    "ID\030\002 \002(\r\022\r\n\005DstFE\030\003 \002(\r\022\r\n\005DstID\030\004 \002(\r\022\'"
    "\n\006OpFlag\030\005 \001(\0162\014.EMessageCmd:\tMESS_NULL\022"
    "\021\n\tTimeStamp\030\006 \002(\004\"<\n\rCProxyMessage\022\031\n\007M"
    "sgHead\030\001 \002(\0132\010.S2PHead\022\020\n\010MsgParas\030\002 \002(\014"
    "\"\026\n\007P2SHead\022\013\n\003Cmd\030\001 \002(\005\"=\n\016CServerMessa"
    "ge\022\031\n\007MsgHead\030\001 \002(\0132\010.P2SHead\022\020\n\010MsgPara"
    "s\030\002 \002(\014\"&\n\017CMsgPingRequest\"\023\n\003Msg\022\014\n\005Msg"
    "ID\020\377\377\377\007*\377\001\n\013enMessageFE\022\014\n\010FE_TIMER\020\000\022\r\n"
    "\tFE_CLIENT\020\001\022\021\n\rFE_GAMESERVER\020\002\022\022\n\016FE_LO"
    "GINSERVER\020\003\022\017\n\013FE_DBSERVER\020\004\022\022\n\016FE_PROXY"
    "SERVER\020\005\022\022\n\016FE_WORLDSERVER\020\006\022\020\n\014FE_WEBSE"
    "RVER\020\007\022\024\n\020FE_OFFLINESERVER\020\010\022\022\n\016FE_CHECK"
    "SERVER\020\t\022\021\n\rFE_HALLSERVER\020\n\022\021\n\rFE_GATESE"
    "RVER\020\013\022\021\n\rFE_ROOMSERVER\020\014*A\n\013EMessageCmd"
    "\022\r\n\tMESS_NULL\020\000\022\017\n\013MESS_REGIST\020\001\022\022\n\016MESS"
    "_KEEPALIVE\020\002B\002H\001", 1056);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  CSocketInfo::default_instance_ = new CSocketInfo();
  S2CHead::default_instance_ = new S2CHead();
  CMessageSet::default_instance_ = new CMessageSet();
  C2SHead::default_instance_ = new C2SHead();
  CClientMessage::default_instance_ = new CClientMessage();
  S2PHead::default_instance_ = new S2PHead();
  CProxyMessage::default_instance_ = new CProxyMessage();
  P2SHead::default_instance_ = new P2SHead();
  CServerMessage::default_instance_ = new CServerMessage();
  CMsgPingRequest::default_instance_ = new CMsgPingRequest();
  CSocketInfo::default_instance_->InitAsDefaultInstance();
  S2CHead::default_instance_->InitAsDefaultInstance();
  CMessageSet::default_instance_->InitAsDefaultInstance();
  C2SHead::default_instance_->InitAsDefaultInstance();
  CClientMessage::default_instance_->InitAsDefaultInstance();
  S2PHead::default_instance_->InitAsDefaultInstance();
  CProxyMessage::default_instance_->InitAsDefaultInstance();
  P2SHead::default_instance_->InitAsDefaultInstance();
  CServerMessage::default_instance_->InitAsDefaultInstance();
  CMsgPingRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;
const ::google::protobuf::EnumDescriptor* enMessageFE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enMessageFE_descriptor_;
}
bool enMessageFE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMessageCmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMessageCmd_descriptor_;
}
bool EMessageCmd_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CSocketInfo::kSocketIDFieldNumber;
const int CSocketInfo::kCreateTimeFieldNumber;
const int CSocketInfo::kStateFieldNumber;
#endif  // !_MSC_VER

CSocketInfo::CSocketInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSocketInfo::InitAsDefaultInstance() {
}

CSocketInfo::CSocketInfo(const CSocketInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSocketInfo::SharedCtor() {
  _cached_size_ = 0;
  socketid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSocketInfo::~CSocketInfo() {
  SharedDtor();
}

void CSocketInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSocketInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSocketInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSocketInfo_descriptor_;
}

const CSocketInfo& CSocketInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

CSocketInfo* CSocketInfo::default_instance_ = NULL;

CSocketInfo* CSocketInfo::New() const {
  return new CSocketInfo;
}

void CSocketInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    socketid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSocketInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SocketID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &socketid_)));
          set_has_socketid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CreateTime;
        break;
      }

      // optional int64 CreateTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_State;
        break;
      }

      // optional int32 State = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_State:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSocketInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 SocketID = 1;
  if (has_socketid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->socketid(), output);
  }

  // optional int64 CreateTime = 2;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->createtime(), output);
  }

  // optional int32 State = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSocketInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 SocketID = 1;
  if (has_socketid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->socketid(), target);
  }

  // optional int64 CreateTime = 2;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->createtime(), target);
  }

  // optional int32 State = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSocketInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SocketID = 1;
    if (has_socketid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->socketid());
    }

    // optional int64 CreateTime = 2;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // optional int32 State = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSocketInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSocketInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSocketInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSocketInfo::MergeFrom(const CSocketInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_socketid()) {
      set_socketid(from.socketid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSocketInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSocketInfo::CopyFrom(const CSocketInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSocketInfo::IsInitialized() const {

  return true;
}

void CSocketInfo::Swap(CSocketInfo* other) {
  if (other != this) {
    std::swap(socketid_, other->socketid_);
    std::swap(createtime_, other->createtime_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSocketInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSocketInfo_descriptor_;
  metadata.reflection = CSocketInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2CHead::kSocketInfosFieldNumber;
const int S2CHead::kCmdFieldNumber;
const int S2CHead::kSeqFieldNumber;
const int S2CHead::kProtoVersionFieldNumber;
const int S2CHead::kIsEncryFieldNumber;
#endif  // !_MSC_VER

S2CHead::S2CHead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2CHead::InitAsDefaultInstance() {
}

S2CHead::S2CHead(const S2CHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2CHead::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  seq_ = 0;
  protoversion_ = 0;
  isencry_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2CHead::~S2CHead() {
  SharedDtor();
}

void S2CHead::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2CHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2CHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2CHead_descriptor_;
}

const S2CHead& S2CHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

S2CHead* S2CHead::default_instance_ = NULL;

S2CHead* S2CHead::New() const {
  return new S2CHead;
}

void S2CHead::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    cmd_ = 0;
    seq_ = 0;
    protoversion_ = 0;
    isencry_ = false;
  }
  socketinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2CHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSocketInfo SocketInfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SocketInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_socketinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_SocketInfos;
        if (input->ExpectTag(16)) goto parse_Cmd;
        break;
      }

      // required int32 Cmd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Seq;
        break;
      }

      // required int32 Seq = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ProtoVersion;
        break;
      }

      // required int32 ProtoVersion = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ProtoVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protoversion_)));
          set_has_protoversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isEncry;
        break;
      }

      // required bool isEncry = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isEncry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isencry_)));
          set_has_isencry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2CHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSocketInfo SocketInfos = 1;
  for (int i = 0; i < this->socketinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->socketinfos(i), output);
  }

  // required int32 Cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cmd(), output);
  }

  // required int32 Seq = 3;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seq(), output);
  }

  // required int32 ProtoVersion = 4;
  if (has_protoversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->protoversion(), output);
  }

  // required bool isEncry = 5;
  if (has_isencry()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isencry(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2CHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSocketInfo SocketInfos = 1;
  for (int i = 0; i < this->socketinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->socketinfos(i), target);
  }

  // required int32 Cmd = 2;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cmd(), target);
  }

  // required int32 Seq = 3;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seq(), target);
  }

  // required int32 ProtoVersion = 4;
  if (has_protoversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->protoversion(), target);
  }

  // required bool isEncry = 5;
  if (has_isencry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isencry(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2CHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 Cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }

    // required int32 Seq = 3;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq());
    }

    // required int32 ProtoVersion = 4;
    if (has_protoversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protoversion());
    }

    // required bool isEncry = 5;
    if (has_isencry()) {
      total_size += 1 + 1;
    }

  }
  // repeated .CSocketInfo SocketInfos = 1;
  total_size += 1 * this->socketinfos_size();
  for (int i = 0; i < this->socketinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->socketinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2CHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2CHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2CHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2CHead::MergeFrom(const S2CHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  socketinfos_.MergeFrom(from.socketinfos_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_protoversion()) {
      set_protoversion(from.protoversion());
    }
    if (from.has_isencry()) {
      set_isencry(from.isencry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2CHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2CHead::CopyFrom(const S2CHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2CHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;

  return true;
}

void S2CHead::Swap(S2CHead* other) {
  if (other != this) {
    socketinfos_.Swap(&other->socketinfos_);
    std::swap(cmd_, other->cmd_);
    std::swap(seq_, other->seq_);
    std::swap(protoversion_, other->protoversion_);
    std::swap(isencry_, other->isencry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2CHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2CHead_descriptor_;
  metadata.reflection = S2CHead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMessageSet::kMsgHeadFieldNumber;
const int CMessageSet::kMsgParasFieldNumber;
#endif  // !_MSC_VER

CMessageSet::CMessageSet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSet::InitAsDefaultInstance() {
  msghead_ = const_cast< ::S2CHead*>(&::S2CHead::default_instance());
}

CMessageSet::CMessageSet(const CMessageSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSet::SharedCtor() {
  _cached_size_ = 0;
  msghead_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSet::~CMessageSet() {
  SharedDtor();
}

void CMessageSet::SharedDtor() {
  if (this != default_instance_) {
    delete msghead_;
  }
}

void CMessageSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMessageSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSet_descriptor_;
}

const CMessageSet& CMessageSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

CMessageSet* CMessageSet::default_instance_ = NULL;

CMessageSet* CMessageSet::New() const {
  return new CMessageSet;
}

void CMessageSet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::S2CHead::Clear();
    }
  }
  msgparas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .S2CHead MsgHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_MsgParas;
        break;
      }

      // repeated bytes MsgParas = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MsgParas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_msgparas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_MsgParas;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .S2CHead MsgHead = 1;
  if (has_msghead()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msghead(), output);
  }

  // repeated bytes MsgParas = 2;
  for (int i = 0; i < this->msgparas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->msgparas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .S2CHead MsgHead = 1;
  if (has_msghead()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msghead(), target);
  }

  // repeated bytes MsgParas = 2;
  for (int i = 0; i < this->msgparas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->msgparas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .S2CHead MsgHead = 1;
    if (has_msghead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msghead());
    }

  }
  // repeated bytes MsgParas = 2;
  total_size += 1 * this->msgparas_size();
  for (int i = 0; i < this->msgparas_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->msgparas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMessageSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSet::MergeFrom(const CMessageSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  msgparas_.MergeFrom(from.msgparas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::S2CHead::MergeFrom(from.msghead());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSet::CopyFrom(const CMessageSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMessageSet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_msghead()) {
    if (!this->msghead().IsInitialized()) return false;
  }
  return true;
}

void CMessageSet::Swap(CMessageSet* other) {
  if (other != this) {
    std::swap(msghead_, other->msghead_);
    msgparas_.Swap(&other->msgparas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMessageSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMessageSet_descriptor_;
  metadata.reflection = CMessageSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2SHead::kSocketInfosFieldNumber;
const int C2SHead::kCmdFieldNumber;
const int C2SHead::kSeqFieldNumber;
const int C2SHead::kIsEncryFieldNumber;
#endif  // !_MSC_VER

C2SHead::C2SHead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2SHead::InitAsDefaultInstance() {
  socketinfos_ = const_cast< ::CSocketInfo*>(&::CSocketInfo::default_instance());
}

C2SHead::C2SHead(const C2SHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2SHead::SharedCtor() {
  _cached_size_ = 0;
  socketinfos_ = NULL;
  cmd_ = 0;
  seq_ = 0;
  isencry_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2SHead::~C2SHead() {
  SharedDtor();
}

void C2SHead::SharedDtor() {
  if (this != default_instance_) {
    delete socketinfos_;
  }
}

void C2SHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2SHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2SHead_descriptor_;
}

const C2SHead& C2SHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

C2SHead* C2SHead::default_instance_ = NULL;

C2SHead* C2SHead::New() const {
  return new C2SHead;
}

void C2SHead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_socketinfos()) {
      if (socketinfos_ != NULL) socketinfos_->::CSocketInfo::Clear();
    }
    cmd_ = 0;
    seq_ = 0;
    isencry_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2SHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CSocketInfo SocketInfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_socketinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Cmd;
        break;
      }

      // required int32 Cmd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Seq;
        break;
      }

      // required int32 Seq = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isEncry;
        break;
      }

      // required bool isEncry = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isEncry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isencry_)));
          set_has_isencry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2SHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .CSocketInfo SocketInfos = 1;
  if (has_socketinfos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->socketinfos(), output);
  }

  // required int32 Cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cmd(), output);
  }

  // required int32 Seq = 3;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seq(), output);
  }

  // required bool isEncry = 5;
  if (has_isencry()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isencry(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2SHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .CSocketInfo SocketInfos = 1;
  if (has_socketinfos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->socketinfos(), target);
  }

  // required int32 Cmd = 2;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cmd(), target);
  }

  // required int32 Seq = 3;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seq(), target);
  }

  // required bool isEncry = 5;
  if (has_isencry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isencry(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2SHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CSocketInfo SocketInfos = 1;
    if (has_socketinfos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->socketinfos());
    }

    // required int32 Cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }

    // required int32 Seq = 3;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq());
    }

    // required bool isEncry = 5;
    if (has_isencry()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2SHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2SHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2SHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2SHead::MergeFrom(const C2SHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_socketinfos()) {
      mutable_socketinfos()->::CSocketInfo::MergeFrom(from.socketinfos());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_isencry()) {
      set_isencry(from.isencry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2SHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2SHead::CopyFrom(const C2SHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2SHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void C2SHead::Swap(C2SHead* other) {
  if (other != this) {
    std::swap(socketinfos_, other->socketinfos_);
    std::swap(cmd_, other->cmd_);
    std::swap(seq_, other->seq_);
    std::swap(isencry_, other->isencry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2SHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2SHead_descriptor_;
  metadata.reflection = C2SHead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CClientMessage::kMsgHeadFieldNumber;
const int CClientMessage::kMsgParasFieldNumber;
#endif  // !_MSC_VER

CClientMessage::CClientMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CClientMessage::InitAsDefaultInstance() {
  msghead_ = const_cast< ::C2SHead*>(&::C2SHead::default_instance());
}

CClientMessage::CClientMessage(const CClientMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CClientMessage::SharedCtor() {
  _cached_size_ = 0;
  msghead_ = NULL;
  msgparas_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CClientMessage::~CClientMessage() {
  SharedDtor();
}

void CClientMessage::SharedDtor() {
  if (msgparas_ != &::google::protobuf::internal::kEmptyString) {
    delete msgparas_;
  }
  if (this != default_instance_) {
    delete msghead_;
  }
}

void CClientMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CClientMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CClientMessage_descriptor_;
}

const CClientMessage& CClientMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

CClientMessage* CClientMessage::default_instance_ = NULL;

CClientMessage* CClientMessage::New() const {
  return new CClientMessage;
}

void CClientMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::C2SHead::Clear();
    }
    if (has_msgparas()) {
      if (msgparas_ != &::google::protobuf::internal::kEmptyString) {
        msgparas_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CClientMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .C2SHead MsgHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_MsgParas;
        break;
      }

      // required bytes MsgParas = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MsgParas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msgparas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CClientMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .C2SHead MsgHead = 1;
  if (has_msghead()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msghead(), output);
  }

  // required bytes MsgParas = 4;
  if (has_msgparas()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->msgparas(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CClientMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .C2SHead MsgHead = 1;
  if (has_msghead()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msghead(), target);
  }

  // required bytes MsgParas = 4;
  if (has_msgparas()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->msgparas(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CClientMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .C2SHead MsgHead = 1;
    if (has_msghead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msghead());
    }

    // required bytes MsgParas = 4;
    if (has_msgparas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msgparas());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CClientMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CClientMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CClientMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CClientMessage::MergeFrom(const CClientMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::C2SHead::MergeFrom(from.msghead());
    }
    if (from.has_msgparas()) {
      set_msgparas(from.msgparas());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CClientMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CClientMessage::CopyFrom(const CClientMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msghead()) {
    if (!this->msghead().IsInitialized()) return false;
  }
  return true;
}

void CClientMessage::Swap(CClientMessage* other) {
  if (other != this) {
    std::swap(msghead_, other->msghead_);
    std::swap(msgparas_, other->msgparas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CClientMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CClientMessage_descriptor_;
  metadata.reflection = CClientMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2PHead::kSrcFEFieldNumber;
const int S2PHead::kSrcIDFieldNumber;
const int S2PHead::kDstFEFieldNumber;
const int S2PHead::kDstIDFieldNumber;
const int S2PHead::kOpFlagFieldNumber;
const int S2PHead::kTimeStampFieldNumber;
#endif  // !_MSC_VER

S2PHead::S2PHead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2PHead::InitAsDefaultInstance() {
}

S2PHead::S2PHead(const S2PHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2PHead::SharedCtor() {
  _cached_size_ = 0;
  srcfe_ = 0u;
  srcid_ = 0u;
  dstfe_ = 0u;
  dstid_ = 0u;
  opflag_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2PHead::~S2PHead() {
  SharedDtor();
}

void S2PHead::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2PHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2PHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2PHead_descriptor_;
}

const S2PHead& S2PHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

S2PHead* S2PHead::default_instance_ = NULL;

S2PHead* S2PHead::New() const {
  return new S2PHead;
}

void S2PHead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srcfe_ = 0u;
    srcid_ = 0u;
    dstfe_ = 0u;
    dstid_ = 0u;
    opflag_ = 0;
    timestamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2PHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 SrcFE = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcfe_)));
          set_has_srcfe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SrcID;
        break;
      }

      // required uint32 SrcID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SrcID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcid_)));
          set_has_srcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DstFE;
        break;
      }

      // required uint32 DstFE = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DstFE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dstfe_)));
          set_has_dstfe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_DstID;
        break;
      }

      // required uint32 DstID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DstID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dstid_)));
          set_has_dstid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_OpFlag;
        break;
      }

      // optional .EMessageCmd OpFlag = 5 [default = MESS_NULL];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OpFlag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EMessageCmd_IsValid(value)) {
            set_opflag(static_cast< ::EMessageCmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_TimeStamp;
        break;
      }

      // required uint64 TimeStamp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeStamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2PHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 SrcFE = 1;
  if (has_srcfe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->srcfe(), output);
  }

  // required uint32 SrcID = 2;
  if (has_srcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->srcid(), output);
  }

  // required uint32 DstFE = 3;
  if (has_dstfe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dstfe(), output);
  }

  // required uint32 DstID = 4;
  if (has_dstid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dstid(), output);
  }

  // optional .EMessageCmd OpFlag = 5 [default = MESS_NULL];
  if (has_opflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->opflag(), output);
  }

  // required uint64 TimeStamp = 6;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2PHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 SrcFE = 1;
  if (has_srcfe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->srcfe(), target);
  }

  // required uint32 SrcID = 2;
  if (has_srcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->srcid(), target);
  }

  // required uint32 DstFE = 3;
  if (has_dstfe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dstfe(), target);
  }

  // required uint32 DstID = 4;
  if (has_dstid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dstid(), target);
  }

  // optional .EMessageCmd OpFlag = 5 [default = MESS_NULL];
  if (has_opflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->opflag(), target);
  }

  // required uint64 TimeStamp = 6;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2PHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 SrcFE = 1;
    if (has_srcfe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcfe());
    }

    // required uint32 SrcID = 2;
    if (has_srcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcid());
    }

    // required uint32 DstFE = 3;
    if (has_dstfe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dstfe());
    }

    // required uint32 DstID = 4;
    if (has_dstid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dstid());
    }

    // optional .EMessageCmd OpFlag = 5 [default = MESS_NULL];
    if (has_opflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->opflag());
    }

    // required uint64 TimeStamp = 6;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2PHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2PHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2PHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2PHead::MergeFrom(const S2PHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcfe()) {
      set_srcfe(from.srcfe());
    }
    if (from.has_srcid()) {
      set_srcid(from.srcid());
    }
    if (from.has_dstfe()) {
      set_dstfe(from.dstfe());
    }
    if (from.has_dstid()) {
      set_dstid(from.dstid());
    }
    if (from.has_opflag()) {
      set_opflag(from.opflag());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2PHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2PHead::CopyFrom(const S2PHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2PHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002f) != 0x0000002f) return false;

  return true;
}

void S2PHead::Swap(S2PHead* other) {
  if (other != this) {
    std::swap(srcfe_, other->srcfe_);
    std::swap(srcid_, other->srcid_);
    std::swap(dstfe_, other->dstfe_);
    std::swap(dstid_, other->dstid_);
    std::swap(opflag_, other->opflag_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2PHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2PHead_descriptor_;
  metadata.reflection = S2PHead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CProxyMessage::kMsgHeadFieldNumber;
const int CProxyMessage::kMsgParasFieldNumber;
#endif  // !_MSC_VER

CProxyMessage::CProxyMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CProxyMessage::InitAsDefaultInstance() {
  msghead_ = const_cast< ::S2PHead*>(&::S2PHead::default_instance());
}

CProxyMessage::CProxyMessage(const CProxyMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CProxyMessage::SharedCtor() {
  _cached_size_ = 0;
  msghead_ = NULL;
  msgparas_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProxyMessage::~CProxyMessage() {
  SharedDtor();
}

void CProxyMessage::SharedDtor() {
  if (msgparas_ != &::google::protobuf::internal::kEmptyString) {
    delete msgparas_;
  }
  if (this != default_instance_) {
    delete msghead_;
  }
}

void CProxyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProxyMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProxyMessage_descriptor_;
}

const CProxyMessage& CProxyMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

CProxyMessage* CProxyMessage::default_instance_ = NULL;

CProxyMessage* CProxyMessage::New() const {
  return new CProxyMessage;
}

void CProxyMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::S2PHead::Clear();
    }
    if (has_msgparas()) {
      if (msgparas_ != &::google::protobuf::internal::kEmptyString) {
        msgparas_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CProxyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .S2PHead MsgHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_MsgParas;
        break;
      }

      // required bytes MsgParas = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MsgParas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msgparas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CProxyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .S2PHead MsgHead = 1;
  if (has_msghead()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msghead(), output);
  }

  // required bytes MsgParas = 2;
  if (has_msgparas()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->msgparas(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CProxyMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .S2PHead MsgHead = 1;
  if (has_msghead()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msghead(), target);
  }

  // required bytes MsgParas = 2;
  if (has_msgparas()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->msgparas(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CProxyMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .S2PHead MsgHead = 1;
    if (has_msghead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msghead());
    }

    // required bytes MsgParas = 2;
    if (has_msgparas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msgparas());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProxyMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CProxyMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CProxyMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProxyMessage::MergeFrom(const CProxyMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::S2PHead::MergeFrom(from.msghead());
    }
    if (from.has_msgparas()) {
      set_msgparas(from.msgparas());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CProxyMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProxyMessage::CopyFrom(const CProxyMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProxyMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msghead()) {
    if (!this->msghead().IsInitialized()) return false;
  }
  return true;
}

void CProxyMessage::Swap(CProxyMessage* other) {
  if (other != this) {
    std::swap(msghead_, other->msghead_);
    std::swap(msgparas_, other->msgparas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CProxyMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProxyMessage_descriptor_;
  metadata.reflection = CProxyMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int P2SHead::kCmdFieldNumber;
#endif  // !_MSC_VER

P2SHead::P2SHead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void P2SHead::InitAsDefaultInstance() {
}

P2SHead::P2SHead(const P2SHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void P2SHead::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

P2SHead::~P2SHead() {
  SharedDtor();
}

void P2SHead::SharedDtor() {
  if (this != default_instance_) {
  }
}

void P2SHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* P2SHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return P2SHead_descriptor_;
}

const P2SHead& P2SHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

P2SHead* P2SHead::default_instance_ = NULL;

P2SHead* P2SHead::New() const {
  return new P2SHead;
}

void P2SHead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool P2SHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void P2SHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* P2SHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int P2SHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void P2SHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const P2SHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const P2SHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void P2SHead::MergeFrom(const P2SHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void P2SHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void P2SHead::CopyFrom(const P2SHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P2SHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void P2SHead::Swap(P2SHead* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata P2SHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = P2SHead_descriptor_;
  metadata.reflection = P2SHead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CServerMessage::kMsgHeadFieldNumber;
const int CServerMessage::kMsgParasFieldNumber;
#endif  // !_MSC_VER

CServerMessage::CServerMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CServerMessage::InitAsDefaultInstance() {
  msghead_ = const_cast< ::P2SHead*>(&::P2SHead::default_instance());
}

CServerMessage::CServerMessage(const CServerMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CServerMessage::SharedCtor() {
  _cached_size_ = 0;
  msghead_ = NULL;
  msgparas_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CServerMessage::~CServerMessage() {
  SharedDtor();
}

void CServerMessage::SharedDtor() {
  if (msgparas_ != &::google::protobuf::internal::kEmptyString) {
    delete msgparas_;
  }
  if (this != default_instance_) {
    delete msghead_;
  }
}

void CServerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CServerMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CServerMessage_descriptor_;
}

const CServerMessage& CServerMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

CServerMessage* CServerMessage::default_instance_ = NULL;

CServerMessage* CServerMessage::New() const {
  return new CServerMessage;
}

void CServerMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::P2SHead::Clear();
    }
    if (has_msgparas()) {
      if (msgparas_ != &::google::protobuf::internal::kEmptyString) {
        msgparas_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CServerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .P2SHead MsgHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_MsgParas;
        break;
      }

      // required bytes MsgParas = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MsgParas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msgparas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CServerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .P2SHead MsgHead = 1;
  if (has_msghead()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msghead(), output);
  }

  // required bytes MsgParas = 2;
  if (has_msgparas()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->msgparas(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CServerMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .P2SHead MsgHead = 1;
  if (has_msghead()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msghead(), target);
  }

  // required bytes MsgParas = 2;
  if (has_msgparas()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->msgparas(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CServerMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .P2SHead MsgHead = 1;
    if (has_msghead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msghead());
    }

    // required bytes MsgParas = 2;
    if (has_msgparas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msgparas());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CServerMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CServerMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CServerMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CServerMessage::MergeFrom(const CServerMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::P2SHead::MergeFrom(from.msghead());
    }
    if (from.has_msgparas()) {
      set_msgparas(from.msgparas());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CServerMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CServerMessage::CopyFrom(const CServerMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CServerMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msghead()) {
    if (!this->msghead().IsInitialized()) return false;
  }
  return true;
}

void CServerMessage::Swap(CServerMessage* other) {
  if (other != this) {
    std::swap(msghead_, other->msghead_);
    std::swap(msgparas_, other->msgparas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CServerMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CServerMessage_descriptor_;
  metadata.reflection = CServerMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgPingRequest_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPingRequest_Msg_descriptor_;
}
bool CMsgPingRequest_Msg_IsValid(int value) {
  switch(value) {
    case 16777215:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgPingRequest_Msg CMsgPingRequest::MsgID;
const CMsgPingRequest_Msg CMsgPingRequest::Msg_MIN;
const CMsgPingRequest_Msg CMsgPingRequest::Msg_MAX;
const int CMsgPingRequest::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgPingRequest::CMsgPingRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgPingRequest::InitAsDefaultInstance() {
}

CMsgPingRequest::CMsgPingRequest(const CMsgPingRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPingRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPingRequest::~CMsgPingRequest() {
  SharedDtor();
}

void CMsgPingRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPingRequest_descriptor_;
}

const CMsgPingRequest& CMsgPingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

CMsgPingRequest* CMsgPingRequest::default_instance_ = NULL;

CMsgPingRequest* CMsgPingRequest::New() const {
  return new CMsgPingRequest;
}

void CMsgPingRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgPingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgPingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgPingRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPingRequest::MergeFrom(const CMsgPingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPingRequest::CopyFrom(const CMsgPingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPingRequest::IsInitialized() const {

  return true;
}

void CMsgPingRequest::Swap(CMsgPingRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPingRequest_descriptor_;
  metadata.reflection = CMsgPingRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
