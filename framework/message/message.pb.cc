// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class CSocketInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSocketInfo>
      _instance;
} _CSocketInfo_default_instance_;
class CMesHeadDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMesHead>
      _instance;
} _CMesHead_default_instance_;
class CMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMessage>
      _instance;
} _CMessage_default_instance_;
class CProxyHeadDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CProxyHead>
      _instance;
} _CProxyHead_default_instance_;
class CProxyMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CProxyMessage>
      _instance;
} _CProxyMessage_default_instance_;
namespace protobuf_message_2eproto {
void InitDefaultsCSocketInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CSocketInfo_default_instance_;
    new (ptr) ::CSocketInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSocketInfo::InitAsDefaultInstance();
}

void InitDefaultsCSocketInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSocketInfoImpl);
}

void InitDefaultsCMesHeadImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultsCSocketInfo();
  {
    void* ptr = &::_CMesHead_default_instance_;
    new (ptr) ::CMesHead();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMesHead::InitAsDefaultInstance();
}

void InitDefaultsCMesHead() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMesHeadImpl);
}

void InitDefaultsCMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultsCMesHead();
  {
    void* ptr = &::_CMessage_default_instance_;
    new (ptr) ::CMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMessage::InitAsDefaultInstance();
}

void InitDefaultsCMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMessageImpl);
}

void InitDefaultsCProxyHeadImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultsCMesHead();
  {
    void* ptr = &::_CProxyHead_default_instance_;
    new (ptr) ::CProxyHead();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CProxyHead::InitAsDefaultInstance();
}

void InitDefaultsCProxyHead() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCProxyHeadImpl);
}

void InitDefaultsCProxyMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultsCProxyHead();
  {
    void* ptr = &::_CProxyMessage_default_instance_;
    new (ptr) ::CProxyMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CProxyMessage::InitAsDefaultInstance();
}

void InitDefaultsCProxyMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCProxyMessageImpl);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSocketInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSocketInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSocketInfo, socketid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSocketInfo, createtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSocketInfo, state_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMesHead, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMesHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMesHead, opflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMesHead, socketinfos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMesHead, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMesHead, serial_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMesHead, seq_),
  0,
  ~0u,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMessage, msghead_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMessage, msgpara_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CProxyHead, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CProxyHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CProxyHead, srcfe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CProxyHead, srcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CProxyHead, dstfe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CProxyHead, dstid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CProxyHead, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CProxyHead, opflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CProxyHead, messageid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CProxyHead, msghead_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CProxyMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CProxyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CProxyMessage, msghead_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CProxyMessage, msgpara_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::CSocketInfo)},
  { 11, 21, sizeof(::CMesHead)},
  { 26, 33, sizeof(::CMessage)},
  { 35, 48, sizeof(::CProxyHead)},
  { 56, 63, sizeof(::CProxyMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSocketInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMesHead_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CProxyHead_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CProxyMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "message.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rmessage.proto\"B\n\013CSocketInfo\022\020\n\010socket"
      "ID\030\001 \001(\005\022\022\n\ncreateTime\030\002 \001(\003\022\r\n\005state\030\003 "
      "\001(\005\"\201\001\n\010CMesHead\022(\n\006opFlag\030\001 \002(\0162\r.enMes"
      "sageCmd:\tMESS_NULL\022!\n\013socketInfos\030\002 \003(\0132"
      "\014.CSocketInfo\022\013\n\003cmd\030\003 \001(\005\022\016\n\006serial\030\004 \001"
      "(\005\022\013\n\003seq\030\005 \001(\005\":\n\010CMessage\022\032\n\007msgHead\030\001"
      " \002(\0132\t.CMesHead\022\022\n\007msgPara\030\002 \002(\006:\0010\"\264\001\n\n"
      "CProxyHead\022\r\n\005srcFE\030\001 \002(\r\022\r\n\005srcID\030\002 \002(\r"
      "\022\r\n\005dstFE\030\003 \002(\r\022\r\n\005dstID\030\004 \002(\r\022\021\n\ttimeSt"
      "amp\030\005 \002(\004\022(\n\006opFlag\030\006 \001(\0162\r.enMessageCmd"
      ":\tMESS_NULL\022\021\n\tmessageId\030\007 \001(\r\022\032\n\007msgHea"
      "d\030\010 \001(\0132\t.CMesHead\"A\n\rCProxyMessage\022\034\n\007m"
      "sgHead\030\001 \002(\0132\013.CProxyHead\022\022\n\007msgPara\030\002 \001"
      "(\006:\0010*\200\002\n\014enServerType\022\014\n\010FE_TIMER\020\000\022\r\n\t"
      "FE_CLIENT\020\001\022\021\n\rFE_GAMESERVER\020\002\022\022\n\016FE_LOG"
      "INSERVER\020\003\022\017\n\013FE_DBSERVER\020\004\022\022\n\016FE_PROXYS"
      "ERVER\020\005\022\022\n\016FE_WORLDSERVER\020\006\022\020\n\014FE_WEBSER"
      "VER\020\007\022\024\n\020FE_OFFLINESERVER\020\010\022\022\n\016FE_CHECKS"
      "ERVER\020\t\022\021\n\rFE_HALLSERVER\020\n\022\021\n\rFE_GATESER"
      "VER\020\013\022\021\n\rFE_ROOMSERVER\020\014*R\n\014enMessageCmd"
      "\022\r\n\tMESS_NULL\020\000\022\017\n\013MESS_REGIST\020\001\022\022\n\016MESS"
      "_KEEPALIVE\020\002\022\016\n\nMESS_LOGIC\020\003B\002H\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 872);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_message_2eproto
const ::google::protobuf::EnumDescriptor* enServerType_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[0];
}
bool enServerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* enMessageCmd_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[1];
}
bool enMessageCmd_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CSocketInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSocketInfo::kSocketIDFieldNumber;
const int CSocketInfo::kCreateTimeFieldNumber;
const int CSocketInfo::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSocketInfo::CSocketInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultsCSocketInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSocketInfo)
}
CSocketInfo::CSocketInfo(const CSocketInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&createtime_, &from.createtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&createtime_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:CSocketInfo)
}

void CSocketInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&createtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&createtime_)) + sizeof(state_));
}

CSocketInfo::~CSocketInfo() {
  // @@protoc_insertion_point(destructor:CSocketInfo)
  SharedDtor();
}

void CSocketInfo::SharedDtor() {
}

void CSocketInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSocketInfo::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSocketInfo& CSocketInfo::default_instance() {
  ::protobuf_message_2eproto::InitDefaultsCSocketInfo();
  return *internal_default_instance();
}

CSocketInfo* CSocketInfo::New(::google::protobuf::Arena* arena) const {
  CSocketInfo* n = new CSocketInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSocketInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CSocketInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&createtime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&createtime_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSocketInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSocketInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 socketID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_socketid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &socketid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 createTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_createtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSocketInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSocketInfo)
  return false;
#undef DO_
}

void CSocketInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSocketInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 socketID = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->socketid(), output);
  }

  // optional int64 createTime = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->createtime(), output);
  }

  // optional int32 state = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSocketInfo)
}

::google::protobuf::uint8* CSocketInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSocketInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 socketID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->socketid(), target);
  }

  // optional int64 createTime = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->createtime(), target);
  }

  // optional int32 state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSocketInfo)
  return target;
}

size_t CSocketInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSocketInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int64 createTime = 2;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // optional int32 socketID = 1;
    if (has_socketid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->socketid());
    }

    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSocketInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSocketInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSocketInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSocketInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSocketInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSocketInfo)
    MergeFrom(*source);
  }
}

void CSocketInfo::MergeFrom(const CSocketInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSocketInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      createtime_ = from.createtime_;
    }
    if (cached_has_bits & 0x00000002u) {
      socketid_ = from.socketid_;
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSocketInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSocketInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSocketInfo::CopyFrom(const CSocketInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSocketInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSocketInfo::IsInitialized() const {
  return true;
}

void CSocketInfo::Swap(CSocketInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSocketInfo::InternalSwap(CSocketInfo* other) {
  using std::swap;
  swap(createtime_, other->createtime_);
  swap(socketid_, other->socketid_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSocketInfo::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMesHead::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMesHead::kOpFlagFieldNumber;
const int CMesHead::kSocketInfosFieldNumber;
const int CMesHead::kCmdFieldNumber;
const int CMesHead::kSerialFieldNumber;
const int CMesHead::kSeqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMesHead::CMesHead()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultsCMesHead();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMesHead)
}
CMesHead::CMesHead(const CMesHead& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      socketinfos_(from.socketinfos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&opflag_, &from.opflag_,
    static_cast<size_t>(reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&opflag_)) + sizeof(seq_));
  // @@protoc_insertion_point(copy_constructor:CMesHead)
}

void CMesHead::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&opflag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_) -
      reinterpret_cast<char*>(&opflag_)) + sizeof(seq_));
}

CMesHead::~CMesHead() {
  // @@protoc_insertion_point(destructor:CMesHead)
  SharedDtor();
}

void CMesHead::SharedDtor() {
}

void CMesHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMesHead::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMesHead& CMesHead::default_instance() {
  ::protobuf_message_2eproto::InitDefaultsCMesHead();
  return *internal_default_instance();
}

CMesHead* CMesHead::New(::google::protobuf::Arena* arena) const {
  CMesHead* n = new CMesHead;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMesHead::Clear() {
// @@protoc_insertion_point(message_clear_start:CMesHead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  socketinfos_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&opflag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seq_) -
        reinterpret_cast<char*>(&opflag_)) + sizeof(seq_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMesHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMesHead)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .enMessageCmd opFlag = 1 [default = MESS_NULL];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enMessageCmd_IsValid(value)) {
            set_opflag(static_cast< ::enMessageCmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CSocketInfo socketInfos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_socketinfos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cmd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 serial = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_serial();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 seq = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_seq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMesHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMesHead)
  return false;
#undef DO_
}

void CMesHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMesHead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .enMessageCmd opFlag = 1 [default = MESS_NULL];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->opflag(), output);
  }

  // repeated .CSocketInfo socketInfos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->socketinfos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->socketinfos(static_cast<int>(i)), output);
  }

  // optional int32 cmd = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cmd(), output);
  }

  // optional int32 serial = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->serial(), output);
  }

  // optional int32 seq = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->seq(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMesHead)
}

::google::protobuf::uint8* CMesHead::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMesHead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .enMessageCmd opFlag = 1 [default = MESS_NULL];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->opflag(), target);
  }

  // repeated .CSocketInfo socketInfos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->socketinfos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->socketinfos(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 cmd = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cmd(), target);
  }

  // optional int32 serial = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->serial(), target);
  }

  // optional int32 seq = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->seq(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMesHead)
  return target;
}

size_t CMesHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMesHead)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .enMessageCmd opFlag = 1 [default = MESS_NULL];
  if (has_opflag()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->opflag());
  }
  // repeated .CSocketInfo socketInfos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->socketinfos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->socketinfos(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 14u) {
    // optional int32 cmd = 3;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }

    // optional int32 serial = 4;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serial());
    }

    // optional int32 seq = 5;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMesHead::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMesHead)
  GOOGLE_DCHECK_NE(&from, this);
  const CMesHead* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMesHead>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMesHead)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMesHead)
    MergeFrom(*source);
  }
}

void CMesHead::MergeFrom(const CMesHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMesHead)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  socketinfos_.MergeFrom(from.socketinfos_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      opflag_ = from.opflag_;
    }
    if (cached_has_bits & 0x00000002u) {
      cmd_ = from.cmd_;
    }
    if (cached_has_bits & 0x00000004u) {
      serial_ = from.serial_;
    }
    if (cached_has_bits & 0x00000008u) {
      seq_ = from.seq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMesHead::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMesHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMesHead::CopyFrom(const CMesHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMesHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMesHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CMesHead::Swap(CMesHead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMesHead::InternalSwap(CMesHead* other) {
  using std::swap;
  socketinfos_.InternalSwap(&other->socketinfos_);
  swap(opflag_, other->opflag_);
  swap(cmd_, other->cmd_);
  swap(serial_, other->serial_);
  swap(seq_, other->seq_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMesHead::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMessage::InitAsDefaultInstance() {
  ::_CMessage_default_instance_._instance.get_mutable()->msghead_ = const_cast< ::CMesHead*>(
      ::CMesHead::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMessage::kMsgHeadFieldNumber;
const int CMessage::kMsgParaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMessage::CMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultsCMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMessage)
}
CMessage::CMessage(const CMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msghead()) {
    msghead_ = new ::CMesHead(*from.msghead_);
  } else {
    msghead_ = NULL;
  }
  msgpara_ = from.msgpara_;
  // @@protoc_insertion_point(copy_constructor:CMessage)
}

void CMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&msghead_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msgpara_) -
      reinterpret_cast<char*>(&msghead_)) + sizeof(msgpara_));
}

CMessage::~CMessage() {
  // @@protoc_insertion_point(destructor:CMessage)
  SharedDtor();
}

void CMessage::SharedDtor() {
  if (this != internal_default_instance()) delete msghead_;
}

void CMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMessage::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMessage& CMessage::default_instance() {
  ::protobuf_message_2eproto::InitDefaultsCMessage();
  return *internal_default_instance();
}

CMessage* CMessage::New(::google::protobuf::Arena* arena) const {
  CMessage* n = new CMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(msghead_ != NULL);
    msghead_->Clear();
  }
  msgpara_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CMesHead msgHead = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required fixed64 msgPara = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_msgpara();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &msgpara_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMessage)
  return false;
#undef DO_
}

void CMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .CMesHead msgHead = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msghead_, output);
  }

  // required fixed64 msgPara = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->msgpara(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMessage)
}

::google::protobuf::uint8* CMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .CMesHead msgHead = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->msghead_, deterministic, target);
  }

  // required fixed64 msgPara = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->msgpara(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMessage)
  return target;
}

size_t CMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CMessage)
  size_t total_size = 0;

  if (has_msghead()) {
    // required .CMesHead msgHead = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->msghead_);
  }

  if (has_msgpara()) {
    // required fixed64 msgPara = 2 [default = 0];
    total_size += 1 + 8;
  }

  return total_size;
}
size_t CMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .CMesHead msgHead = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->msghead_);

    // required fixed64 msgPara = 2 [default = 0];
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMessage)
    MergeFrom(*source);
  }
}

void CMessage::MergeFrom(const CMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_msghead()->::CMesHead::MergeFrom(from.msghead());
    }
    if (cached_has_bits & 0x00000002u) {
      msgpara_ = from.msgpara_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessage::CopyFrom(const CMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  return true;
}

void CMessage::Swap(CMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMessage::InternalSwap(CMessage* other) {
  using std::swap;
  swap(msghead_, other->msghead_);
  swap(msgpara_, other->msgpara_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMessage::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CProxyHead::InitAsDefaultInstance() {
  ::_CProxyHead_default_instance_._instance.get_mutable()->msghead_ = const_cast< ::CMesHead*>(
      ::CMesHead::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CProxyHead::kSrcFEFieldNumber;
const int CProxyHead::kSrcIDFieldNumber;
const int CProxyHead::kDstFEFieldNumber;
const int CProxyHead::kDstIDFieldNumber;
const int CProxyHead::kTimeStampFieldNumber;
const int CProxyHead::kOpFlagFieldNumber;
const int CProxyHead::kMessageIdFieldNumber;
const int CProxyHead::kMsgHeadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CProxyHead::CProxyHead()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultsCProxyHead();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CProxyHead)
}
CProxyHead::CProxyHead(const CProxyHead& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msghead()) {
    msghead_ = new ::CMesHead(*from.msghead_);
  } else {
    msghead_ = NULL;
  }
  ::memcpy(&srcfe_, &from.srcfe_,
    static_cast<size_t>(reinterpret_cast<char*>(&messageid_) -
    reinterpret_cast<char*>(&srcfe_)) + sizeof(messageid_));
  // @@protoc_insertion_point(copy_constructor:CProxyHead)
}

void CProxyHead::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&msghead_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&messageid_) -
      reinterpret_cast<char*>(&msghead_)) + sizeof(messageid_));
}

CProxyHead::~CProxyHead() {
  // @@protoc_insertion_point(destructor:CProxyHead)
  SharedDtor();
}

void CProxyHead::SharedDtor() {
  if (this != internal_default_instance()) delete msghead_;
}

void CProxyHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProxyHead::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CProxyHead& CProxyHead::default_instance() {
  ::protobuf_message_2eproto::InitDefaultsCProxyHead();
  return *internal_default_instance();
}

CProxyHead* CProxyHead::New(::google::protobuf::Arena* arena) const {
  CProxyHead* n = new CProxyHead;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CProxyHead::Clear() {
// @@protoc_insertion_point(message_clear_start:CProxyHead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(msghead_ != NULL);
    msghead_->Clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&srcfe_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&messageid_) -
        reinterpret_cast<char*>(&srcfe_)) + sizeof(messageid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CProxyHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CProxyHead)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 srcFE = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_srcfe();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcfe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 srcID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_srcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 dstFE = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_dstfe();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dstfe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 dstID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_dstid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dstid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 timeStamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enMessageCmd opFlag = 6 [default = MESS_NULL];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enMessageCmd_IsValid(value)) {
            set_opflag(static_cast< ::enMessageCmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 messageId = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_messageid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &messageid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMesHead msgHead = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CProxyHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CProxyHead)
  return false;
#undef DO_
}

void CProxyHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CProxyHead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 srcFE = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->srcfe(), output);
  }

  // required uint32 srcID = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->srcid(), output);
  }

  // required uint32 dstFE = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dstfe(), output);
  }

  // required uint32 dstID = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dstid(), output);
  }

  // required uint64 timeStamp = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->timestamp(), output);
  }

  // optional .enMessageCmd opFlag = 6 [default = MESS_NULL];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->opflag(), output);
  }

  // optional uint32 messageId = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->messageid(), output);
  }

  // optional .CMesHead msgHead = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->msghead_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CProxyHead)
}

::google::protobuf::uint8* CProxyHead::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CProxyHead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 srcFE = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->srcfe(), target);
  }

  // required uint32 srcID = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->srcid(), target);
  }

  // required uint32 dstFE = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dstfe(), target);
  }

  // required uint32 dstID = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dstid(), target);
  }

  // required uint64 timeStamp = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->timestamp(), target);
  }

  // optional .enMessageCmd opFlag = 6 [default = MESS_NULL];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->opflag(), target);
  }

  // optional uint32 messageId = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->messageid(), target);
  }

  // optional .CMesHead msgHead = 8;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->msghead_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProxyHead)
  return target;
}

size_t CProxyHead::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CProxyHead)
  size_t total_size = 0;

  if (has_srcfe()) {
    // required uint32 srcFE = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->srcfe());
  }

  if (has_srcid()) {
    // required uint32 srcID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->srcid());
  }

  if (has_dstfe()) {
    // required uint32 dstFE = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dstfe());
  }

  if (has_dstid()) {
    // required uint32 dstID = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dstid());
  }

  if (has_timestamp()) {
    // required uint64 timeStamp = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  return total_size;
}
size_t CProxyHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CProxyHead)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003e) ^ 0x0000003e) == 0) {  // All required fields are present.
    // required uint32 srcFE = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->srcfe());

    // required uint32 srcID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->srcid());

    // required uint32 dstFE = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dstfe());

    // required uint32 dstID = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dstid());

    // required uint64 timeStamp = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .CMesHead msgHead = 8;
  if (has_msghead()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->msghead_);
  }

  if (_has_bits_[0 / 32] & 192u) {
    // optional .enMessageCmd opFlag = 6 [default = MESS_NULL];
    if (has_opflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->opflag());
    }

    // optional uint32 messageId = 7;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->messageid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProxyHead::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CProxyHead)
  GOOGLE_DCHECK_NE(&from, this);
  const CProxyHead* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CProxyHead>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CProxyHead)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CProxyHead)
    MergeFrom(*source);
  }
}

void CProxyHead::MergeFrom(const CProxyHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CProxyHead)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_msghead()->::CMesHead::MergeFrom(from.msghead());
    }
    if (cached_has_bits & 0x00000002u) {
      srcfe_ = from.srcfe_;
    }
    if (cached_has_bits & 0x00000004u) {
      srcid_ = from.srcid_;
    }
    if (cached_has_bits & 0x00000008u) {
      dstfe_ = from.dstfe_;
    }
    if (cached_has_bits & 0x00000010u) {
      dstid_ = from.dstid_;
    }
    if (cached_has_bits & 0x00000020u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      opflag_ = from.opflag_;
    }
    if (cached_has_bits & 0x00000080u) {
      messageid_ = from.messageid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CProxyHead::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CProxyHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProxyHead::CopyFrom(const CProxyHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CProxyHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProxyHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003e) != 0x0000003e) return false;
  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  return true;
}

void CProxyHead::Swap(CProxyHead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CProxyHead::InternalSwap(CProxyHead* other) {
  using std::swap;
  swap(msghead_, other->msghead_);
  swap(srcfe_, other->srcfe_);
  swap(srcid_, other->srcid_);
  swap(dstfe_, other->dstfe_);
  swap(dstid_, other->dstid_);
  swap(timestamp_, other->timestamp_);
  swap(opflag_, other->opflag_);
  swap(messageid_, other->messageid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CProxyHead::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CProxyMessage::InitAsDefaultInstance() {
  ::_CProxyMessage_default_instance_._instance.get_mutable()->msghead_ = const_cast< ::CProxyHead*>(
      ::CProxyHead::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CProxyMessage::kMsgHeadFieldNumber;
const int CProxyMessage::kMsgParaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CProxyMessage::CProxyMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultsCProxyMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CProxyMessage)
}
CProxyMessage::CProxyMessage(const CProxyMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msghead()) {
    msghead_ = new ::CProxyHead(*from.msghead_);
  } else {
    msghead_ = NULL;
  }
  msgpara_ = from.msgpara_;
  // @@protoc_insertion_point(copy_constructor:CProxyMessage)
}

void CProxyMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&msghead_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msgpara_) -
      reinterpret_cast<char*>(&msghead_)) + sizeof(msgpara_));
}

CProxyMessage::~CProxyMessage() {
  // @@protoc_insertion_point(destructor:CProxyMessage)
  SharedDtor();
}

void CProxyMessage::SharedDtor() {
  if (this != internal_default_instance()) delete msghead_;
}

void CProxyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProxyMessage::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CProxyMessage& CProxyMessage::default_instance() {
  ::protobuf_message_2eproto::InitDefaultsCProxyMessage();
  return *internal_default_instance();
}

CProxyMessage* CProxyMessage::New(::google::protobuf::Arena* arena) const {
  CProxyMessage* n = new CProxyMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CProxyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CProxyMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(msghead_ != NULL);
    msghead_->Clear();
  }
  msgpara_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CProxyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CProxyMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CProxyHead msgHead = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 msgPara = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_msgpara();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &msgpara_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CProxyMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CProxyMessage)
  return false;
#undef DO_
}

void CProxyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CProxyMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .CProxyHead msgHead = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msghead_, output);
  }

  // optional fixed64 msgPara = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->msgpara(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CProxyMessage)
}

::google::protobuf::uint8* CProxyMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CProxyMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .CProxyHead msgHead = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->msghead_, deterministic, target);
  }

  // optional fixed64 msgPara = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->msgpara(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProxyMessage)
  return target;
}

size_t CProxyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CProxyMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .CProxyHead msgHead = 1;
  if (has_msghead()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->msghead_);
  }
  // optional fixed64 msgPara = 2 [default = 0];
  if (has_msgpara()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProxyMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CProxyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CProxyMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CProxyMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CProxyMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CProxyMessage)
    MergeFrom(*source);
  }
}

void CProxyMessage::MergeFrom(const CProxyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CProxyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_msghead()->::CProxyHead::MergeFrom(from.msghead());
    }
    if (cached_has_bits & 0x00000002u) {
      msgpara_ = from.msgpara_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CProxyMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CProxyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProxyMessage::CopyFrom(const CProxyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CProxyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProxyMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  return true;
}

void CProxyMessage::Swap(CProxyMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CProxyMessage::InternalSwap(CProxyMessage* other) {
  using std::swap;
  swap(msghead_, other->msghead_);
  swap(msgpara_, other->msgpara_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CProxyMessage::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
