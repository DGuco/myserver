// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pray.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pray.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace slg {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* PrayDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrayDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* MakePrayRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MakePrayRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MakePrayResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MakePrayResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrayPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrayPush_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PrayCommandId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PrayPushId_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_pray_2eproto() {
  protobuf_AddDesc_pray_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pray.proto");
  GOOGLE_CHECK(file != NULL);
  PrayDTO_descriptor_ = file->message_type(0);
  static const int PrayDTO_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrayDTO, freetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrayDTO, itemtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrayDTO, cointimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrayDTO, woodtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrayDTO, stonetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrayDTO, steeltimes_),
  };
  PrayDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrayDTO_descriptor_,
      PrayDTO::default_instance_,
      PrayDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrayDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrayDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrayDTO));
  MakePrayRequest_descriptor_ = file->message_type(1);
  static const int MakePrayRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakePrayRequest, type_),
  };
  MakePrayRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MakePrayRequest_descriptor_,
      MakePrayRequest::default_instance_,
      MakePrayRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakePrayRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakePrayRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MakePrayRequest));
  MakePrayResponse_descriptor_ = file->message_type(2);
  static const int MakePrayResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakePrayResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakePrayResponse, buytimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakePrayResponse, resourcenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakePrayResponse, critvalue_),
  };
  MakePrayResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MakePrayResponse_descriptor_,
      MakePrayResponse::default_instance_,
      MakePrayResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakePrayResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakePrayResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MakePrayResponse));
  PrayPush_descriptor_ = file->message_type(3);
  static const int PrayPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrayPush, prayinfo_),
  };
  PrayPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrayPush_descriptor_,
      PrayPush::default_instance_,
      PrayPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrayPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrayPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrayPush));
  PrayCommandId_descriptor_ = file->enum_type(0);
  PrayPushId_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pray_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrayDTO_descriptor_, &PrayDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MakePrayRequest_descriptor_, &MakePrayRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MakePrayResponse_descriptor_, &MakePrayResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrayPush_descriptor_, &PrayPush::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pray_2eproto() {
  delete PrayDTO::default_instance_;
  delete PrayDTO_reflection_;
  delete MakePrayRequest::default_instance_;
  delete MakePrayRequest_reflection_;
  delete MakePrayResponse::default_instance_;
  delete MakePrayResponse_reflection_;
  delete PrayPush::default_instance_;
  delete PrayPush_reflection_;
}

void protobuf_AddDesc_pray_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\npray.proto\022\014slg.protocol\"}\n\007PrayDTO\022\021\n"
    "\tfreetimes\030\001 \001(\005\022\021\n\titemtimes\030\002 \001(\005\022\021\n\tc"
    "ointimes\030\003 \001(\005\022\021\n\twoodtimes\030\004 \001(\005\022\022\n\nsto"
    "netimes\030\005 \001(\005\022\022\n\nsteeltimes\030\006 \001(\005\"\037\n\017Mak"
    "ePrayRequest\022\014\n\004type\030\001 \002(\005\"Z\n\020MakePrayRe"
    "sponse\022\014\n\004type\030\001 \002(\005\022\020\n\010buyTimes\030\002 \002(\005\022\023"
    "\n\013resourceNum\030\003 \002(\005\022\021\n\tcritvalue\030\004 \002(\005\"3"
    "\n\010PrayPush\022\'\n\010prayInfo\030\001 \002(\0132\025.slg.proto"
    "col.PrayDTO*$\n\rPrayCommandId\022\023\n\016PRAY_MAK"
    "E_PRAY\020\315\010*\"\n\nPrayPushId\022\024\n\016PRAY_INFO_PUS"
    "H\020\235\217\003B)\n\034com.bonusstudio.slg.protocolB\tP"
    "rayProto", 448);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pray.proto", &protobuf_RegisterTypes);
  PrayDTO::default_instance_ = new PrayDTO();
  MakePrayRequest::default_instance_ = new MakePrayRequest();
  MakePrayResponse::default_instance_ = new MakePrayResponse();
  PrayPush::default_instance_ = new PrayPush();
  PrayDTO::default_instance_->InitAsDefaultInstance();
  MakePrayRequest::default_instance_->InitAsDefaultInstance();
  MakePrayResponse::default_instance_->InitAsDefaultInstance();
  PrayPush::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pray_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pray_2eproto {
  StaticDescriptorInitializer_pray_2eproto() {
    protobuf_AddDesc_pray_2eproto();
  }
} static_descriptor_initializer_pray_2eproto_;
const ::google::protobuf::EnumDescriptor* PrayCommandId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrayCommandId_descriptor_;
}
bool PrayCommandId_IsValid(int value) {
  switch(value) {
    case 1101:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PrayPushId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrayPushId_descriptor_;
}
bool PrayPushId_IsValid(int value) {
  switch(value) {
    case 51101:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PrayDTO::kFreetimesFieldNumber;
const int PrayDTO::kItemtimesFieldNumber;
const int PrayDTO::kCointimesFieldNumber;
const int PrayDTO::kWoodtimesFieldNumber;
const int PrayDTO::kStonetimesFieldNumber;
const int PrayDTO::kSteeltimesFieldNumber;
#endif  // !_MSC_VER

PrayDTO::PrayDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrayDTO::InitAsDefaultInstance() {
}

PrayDTO::PrayDTO(const PrayDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrayDTO::SharedCtor() {
  _cached_size_ = 0;
  freetimes_ = 0;
  itemtimes_ = 0;
  cointimes_ = 0;
  woodtimes_ = 0;
  stonetimes_ = 0;
  steeltimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrayDTO::~PrayDTO() {
  SharedDtor();
}

void PrayDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrayDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrayDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrayDTO_descriptor_;
}

const PrayDTO& PrayDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pray_2eproto();
  return *default_instance_;
}

PrayDTO* PrayDTO::default_instance_ = NULL;

PrayDTO* PrayDTO::New() const {
  return new PrayDTO;
}

void PrayDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    freetimes_ = 0;
    itemtimes_ = 0;
    cointimes_ = 0;
    woodtimes_ = 0;
    stonetimes_ = 0;
    steeltimes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrayDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 freetimes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freetimes_)));
          set_has_freetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemtimes;
        break;
      }

      // optional int32 itemtimes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemtimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemtimes_)));
          set_has_itemtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cointimes;
        break;
      }

      // optional int32 cointimes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cointimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cointimes_)));
          set_has_cointimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_woodtimes;
        break;
      }

      // optional int32 woodtimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_woodtimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &woodtimes_)));
          set_has_woodtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_stonetimes;
        break;
      }

      // optional int32 stonetimes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stonetimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stonetimes_)));
          set_has_stonetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_steeltimes;
        break;
      }

      // optional int32 steeltimes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_steeltimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &steeltimes_)));
          set_has_steeltimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrayDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 freetimes = 1;
  if (has_freetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->freetimes(), output);
  }

  // optional int32 itemtimes = 2;
  if (has_itemtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemtimes(), output);
  }

  // optional int32 cointimes = 3;
  if (has_cointimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cointimes(), output);
  }

  // optional int32 woodtimes = 4;
  if (has_woodtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->woodtimes(), output);
  }

  // optional int32 stonetimes = 5;
  if (has_stonetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->stonetimes(), output);
  }

  // optional int32 steeltimes = 6;
  if (has_steeltimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->steeltimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrayDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 freetimes = 1;
  if (has_freetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->freetimes(), target);
  }

  // optional int32 itemtimes = 2;
  if (has_itemtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemtimes(), target);
  }

  // optional int32 cointimes = 3;
  if (has_cointimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cointimes(), target);
  }

  // optional int32 woodtimes = 4;
  if (has_woodtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->woodtimes(), target);
  }

  // optional int32 stonetimes = 5;
  if (has_stonetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->stonetimes(), target);
  }

  // optional int32 steeltimes = 6;
  if (has_steeltimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->steeltimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrayDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 freetimes = 1;
    if (has_freetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freetimes());
    }

    // optional int32 itemtimes = 2;
    if (has_itemtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemtimes());
    }

    // optional int32 cointimes = 3;
    if (has_cointimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cointimes());
    }

    // optional int32 woodtimes = 4;
    if (has_woodtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->woodtimes());
    }

    // optional int32 stonetimes = 5;
    if (has_stonetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stonetimes());
    }

    // optional int32 steeltimes = 6;
    if (has_steeltimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->steeltimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrayDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrayDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrayDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrayDTO::MergeFrom(const PrayDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_freetimes()) {
      set_freetimes(from.freetimes());
    }
    if (from.has_itemtimes()) {
      set_itemtimes(from.itemtimes());
    }
    if (from.has_cointimes()) {
      set_cointimes(from.cointimes());
    }
    if (from.has_woodtimes()) {
      set_woodtimes(from.woodtimes());
    }
    if (from.has_stonetimes()) {
      set_stonetimes(from.stonetimes());
    }
    if (from.has_steeltimes()) {
      set_steeltimes(from.steeltimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrayDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrayDTO::CopyFrom(const PrayDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrayDTO::IsInitialized() const {

  return true;
}

void PrayDTO::Swap(PrayDTO* other) {
  if (other != this) {
    std::swap(freetimes_, other->freetimes_);
    std::swap(itemtimes_, other->itemtimes_);
    std::swap(cointimes_, other->cointimes_);
    std::swap(woodtimes_, other->woodtimes_);
    std::swap(stonetimes_, other->stonetimes_);
    std::swap(steeltimes_, other->steeltimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrayDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrayDTO_descriptor_;
  metadata.reflection = PrayDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MakePrayRequest::kTypeFieldNumber;
#endif  // !_MSC_VER

MakePrayRequest::MakePrayRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MakePrayRequest::InitAsDefaultInstance() {
}

MakePrayRequest::MakePrayRequest(const MakePrayRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MakePrayRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MakePrayRequest::~MakePrayRequest() {
  SharedDtor();
}

void MakePrayRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MakePrayRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MakePrayRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MakePrayRequest_descriptor_;
}

const MakePrayRequest& MakePrayRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pray_2eproto();
  return *default_instance_;
}

MakePrayRequest* MakePrayRequest::default_instance_ = NULL;

MakePrayRequest* MakePrayRequest::New() const {
  return new MakePrayRequest;
}

void MakePrayRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MakePrayRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MakePrayRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MakePrayRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MakePrayRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MakePrayRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MakePrayRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MakePrayRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MakePrayRequest::MergeFrom(const MakePrayRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MakePrayRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MakePrayRequest::CopyFrom(const MakePrayRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakePrayRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MakePrayRequest::Swap(MakePrayRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MakePrayRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MakePrayRequest_descriptor_;
  metadata.reflection = MakePrayRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MakePrayResponse::kTypeFieldNumber;
const int MakePrayResponse::kBuyTimesFieldNumber;
const int MakePrayResponse::kResourceNumFieldNumber;
const int MakePrayResponse::kCritvalueFieldNumber;
#endif  // !_MSC_VER

MakePrayResponse::MakePrayResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MakePrayResponse::InitAsDefaultInstance() {
}

MakePrayResponse::MakePrayResponse(const MakePrayResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MakePrayResponse::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  buytimes_ = 0;
  resourcenum_ = 0;
  critvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MakePrayResponse::~MakePrayResponse() {
  SharedDtor();
}

void MakePrayResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MakePrayResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MakePrayResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MakePrayResponse_descriptor_;
}

const MakePrayResponse& MakePrayResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pray_2eproto();
  return *default_instance_;
}

MakePrayResponse* MakePrayResponse::default_instance_ = NULL;

MakePrayResponse* MakePrayResponse::New() const {
  return new MakePrayResponse;
}

void MakePrayResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    buytimes_ = 0;
    resourcenum_ = 0;
    critvalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MakePrayResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buyTimes;
        break;
      }

      // required int32 buyTimes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buytimes_)));
          set_has_buytimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_resourceNum;
        break;
      }

      // required int32 resourceNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resourceNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resourcenum_)));
          set_has_resourcenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_critvalue;
        break;
      }

      // required int32 critvalue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &critvalue_)));
          set_has_critvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MakePrayResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 buyTimes = 2;
  if (has_buytimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buytimes(), output);
  }

  // required int32 resourceNum = 3;
  if (has_resourcenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->resourcenum(), output);
  }

  // required int32 critvalue = 4;
  if (has_critvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->critvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MakePrayResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 buyTimes = 2;
  if (has_buytimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buytimes(), target);
  }

  // required int32 resourceNum = 3;
  if (has_resourcenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->resourcenum(), target);
  }

  // required int32 critvalue = 4;
  if (has_critvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->critvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MakePrayResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 buyTimes = 2;
    if (has_buytimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buytimes());
    }

    // required int32 resourceNum = 3;
    if (has_resourcenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resourcenum());
    }

    // required int32 critvalue = 4;
    if (has_critvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->critvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MakePrayResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MakePrayResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MakePrayResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MakePrayResponse::MergeFrom(const MakePrayResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_buytimes()) {
      set_buytimes(from.buytimes());
    }
    if (from.has_resourcenum()) {
      set_resourcenum(from.resourcenum());
    }
    if (from.has_critvalue()) {
      set_critvalue(from.critvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MakePrayResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MakePrayResponse::CopyFrom(const MakePrayResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakePrayResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MakePrayResponse::Swap(MakePrayResponse* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(buytimes_, other->buytimes_);
    std::swap(resourcenum_, other->resourcenum_);
    std::swap(critvalue_, other->critvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MakePrayResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MakePrayResponse_descriptor_;
  metadata.reflection = MakePrayResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrayPush::kPrayInfoFieldNumber;
#endif  // !_MSC_VER

PrayPush::PrayPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrayPush::InitAsDefaultInstance() {
  prayinfo_ = const_cast< ::slg::protocol::PrayDTO*>(&::slg::protocol::PrayDTO::default_instance());
}

PrayPush::PrayPush(const PrayPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrayPush::SharedCtor() {
  _cached_size_ = 0;
  prayinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrayPush::~PrayPush() {
  SharedDtor();
}

void PrayPush::SharedDtor() {
  if (this != default_instance_) {
    delete prayinfo_;
  }
}

void PrayPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrayPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrayPush_descriptor_;
}

const PrayPush& PrayPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pray_2eproto();
  return *default_instance_;
}

PrayPush* PrayPush::default_instance_ = NULL;

PrayPush* PrayPush::New() const {
  return new PrayPush;
}

void PrayPush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_prayinfo()) {
      if (prayinfo_ != NULL) prayinfo_->::slg::protocol::PrayDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrayPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .slg.protocol.PrayDTO prayInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prayinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrayPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .slg.protocol.PrayDTO prayInfo = 1;
  if (has_prayinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->prayinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrayPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .slg.protocol.PrayDTO prayInfo = 1;
  if (has_prayinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->prayinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrayPush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .slg.protocol.PrayDTO prayInfo = 1;
    if (has_prayinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prayinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrayPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrayPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrayPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrayPush::MergeFrom(const PrayPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prayinfo()) {
      mutable_prayinfo()->::slg::protocol::PrayDTO::MergeFrom(from.prayinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrayPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrayPush::CopyFrom(const PrayPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrayPush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PrayPush::Swap(PrayPush* other) {
  if (other != this) {
    std::swap(prayinfo_, other->prayinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrayPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrayPush_descriptor_;
  metadata.reflection = PrayPush_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace slg

// @@protoc_insertion_point(global_scope)
