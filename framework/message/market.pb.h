// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: market.proto

#ifndef PROTOBUF_market_2eproto__INCLUDED
#define PROTOBUF_market_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace slg {
namespace protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_market_2eproto();
void protobuf_AssignDesc_market_2eproto();
void protobuf_ShutdownFile_market_2eproto();

class MarketPlayerDTO;
class TradeTargetDTO;
class TradeInfoDTO;
class PlayerMarketInfoRequest;
class PlayerMarketInfoResponse;
class AddMarketTargetRequest;
class AddMarketTargetResponse;
class TradeRequest;
class BuyMarketTraderRequest;
class BuyMarketTraderResponse;
class TradeInfoRequest;
class TradeInfoReponse;
class TradeTimePush;

enum MarketCommandId {
  MARKET_INFO_REQ = 2101,
  MARKET_ADD_TARGET = 2102,
  MARKET_TRADE_START = 2103,
  MARKET_BUY_TRADER = 2104,
  MARGET_TRADE_INFO = 2105
};
bool MarketCommandId_IsValid(int value);
const MarketCommandId MarketCommandId_MIN = MARKET_INFO_REQ;
const MarketCommandId MarketCommandId_MAX = MARGET_TRADE_INFO;
const int MarketCommandId_ARRAYSIZE = MarketCommandId_MAX + 1;

const ::google::protobuf::EnumDescriptor* MarketCommandId_descriptor();
inline const ::std::string& MarketCommandId_Name(MarketCommandId value) {
  return ::google::protobuf::internal::NameOfEnum(
    MarketCommandId_descriptor(), value);
}
inline bool MarketCommandId_Parse(
    const ::std::string& name, MarketCommandId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MarketCommandId>(
    MarketCommandId_descriptor(), name, value);
}
enum MarketPushId {
  MARKET_TRADE_TIME_PUSH = 52101
};
bool MarketPushId_IsValid(int value);
const MarketPushId MarketPushId_MIN = MARKET_TRADE_TIME_PUSH;
const MarketPushId MarketPushId_MAX = MARKET_TRADE_TIME_PUSH;
const int MarketPushId_ARRAYSIZE = MarketPushId_MAX + 1;

const ::google::protobuf::EnumDescriptor* MarketPushId_descriptor();
inline const ::std::string& MarketPushId_Name(MarketPushId value) {
  return ::google::protobuf::internal::NameOfEnum(
    MarketPushId_descriptor(), value);
}
inline bool MarketPushId_Parse(
    const ::std::string& name, MarketPushId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MarketPushId>(
    MarketPushId_descriptor(), name, value);
}
// ===================================================================

class MarketPlayerDTO : public ::google::protobuf::Message {
 public:
  MarketPlayerDTO();
  virtual ~MarketPlayerDTO();

  MarketPlayerDTO(const MarketPlayerDTO& from);

  inline MarketPlayerDTO& operator=(const MarketPlayerDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarketPlayerDTO& default_instance();

  void Swap(MarketPlayerDTO* other);

  // implements Message ----------------------------------------------

  MarketPlayerDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarketPlayerDTO& from);
  void MergeFrom(const MarketPlayerDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // required string icon = 2;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 2;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // required int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required string playerName = 4;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 4;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // required .slg.protocol.PositionDTO pos = 5;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 5;
  inline const ::slg::protocol::PositionDTO& pos() const;
  inline ::slg::protocol::PositionDTO* mutable_pos();
  inline ::slg::protocol::PositionDTO* release_pos();
  inline void set_allocated_pos(::slg::protocol::PositionDTO* pos);

  // required int32 traderId = 6;
  inline bool has_traderid() const;
  inline void clear_traderid();
  static const int kTraderIdFieldNumber = 6;
  inline ::google::protobuf::int32 traderid() const;
  inline void set_traderid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.MarketPlayerDTO)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_traderid();
  inline void clear_has_traderid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 playerid_;
  ::std::string* icon_;
  ::std::string* playername_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 traderid_;
  ::slg::protocol::PositionDTO* pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_market_2eproto();
  friend void protobuf_AssignDesc_market_2eproto();
  friend void protobuf_ShutdownFile_market_2eproto();

  void InitAsDefaultInstance();
  static MarketPlayerDTO* default_instance_;
};
// -------------------------------------------------------------------

class TradeTargetDTO : public ::google::protobuf::Message {
 public:
  TradeTargetDTO();
  virtual ~TradeTargetDTO();

  TradeTargetDTO(const TradeTargetDTO& from);

  inline TradeTargetDTO& operator=(const TradeTargetDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TradeTargetDTO& default_instance();

  void Swap(TradeTargetDTO* other);

  // implements Message ----------------------------------------------

  TradeTargetDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TradeTargetDTO& from);
  void MergeFrom(const TradeTargetDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 taregetId = 1;
  inline bool has_taregetid() const;
  inline void clear_taregetid();
  static const int kTaregetIdFieldNumber = 1;
  inline ::google::protobuf::int64 taregetid() const;
  inline void set_taregetid(::google::protobuf::int64 value);

  // required .slg.protocol.PositionDTO taregetPos = 2;
  inline bool has_taregetpos() const;
  inline void clear_taregetpos();
  static const int kTaregetPosFieldNumber = 2;
  inline const ::slg::protocol::PositionDTO& taregetpos() const;
  inline ::slg::protocol::PositionDTO* mutable_taregetpos();
  inline ::slg::protocol::PositionDTO* release_taregetpos();
  inline void set_allocated_taregetpos(::slg::protocol::PositionDTO* taregetpos);

  // @@protoc_insertion_point(class_scope:slg.protocol.TradeTargetDTO)
 private:
  inline void set_has_taregetid();
  inline void clear_has_taregetid();
  inline void set_has_taregetpos();
  inline void clear_has_taregetpos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 taregetid_;
  ::slg::protocol::PositionDTO* taregetpos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_market_2eproto();
  friend void protobuf_AssignDesc_market_2eproto();
  friend void protobuf_ShutdownFile_market_2eproto();

  void InitAsDefaultInstance();
  static TradeTargetDTO* default_instance_;
};
// -------------------------------------------------------------------

class TradeInfoDTO : public ::google::protobuf::Message {
 public:
  TradeInfoDTO();
  virtual ~TradeInfoDTO();

  TradeInfoDTO(const TradeInfoDTO& from);

  inline TradeInfoDTO& operator=(const TradeInfoDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TradeInfoDTO& default_instance();

  void Swap(TradeInfoDTO* other);

  // implements Message ----------------------------------------------

  TradeInfoDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TradeInfoDTO& from);
  void MergeFrom(const TradeInfoDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string targetName = 1;
  inline bool has_targetname() const;
  inline void clear_targetname();
  static const int kTargetNameFieldNumber = 1;
  inline const ::std::string& targetname() const;
  inline void set_targetname(const ::std::string& value);
  inline void set_targetname(const char* value);
  inline void set_targetname(const char* value, size_t size);
  inline ::std::string* mutable_targetname();
  inline ::std::string* release_targetname();
  inline void set_allocated_targetname(::std::string* targetname);

  // required int32 event = 2;
  inline bool has_event() const;
  inline void clear_event();
  static const int kEventFieldNumber = 2;
  inline ::google::protobuf::int32 event() const;
  inline void set_event(::google::protobuf::int32 value);

  // repeated .slg.protocol.PropertyDTO rewards = 3;
  inline int rewards_size() const;
  inline void clear_rewards();
  static const int kRewardsFieldNumber = 3;
  inline const ::slg::protocol::PropertyDTO& rewards(int index) const;
  inline ::slg::protocol::PropertyDTO* mutable_rewards(int index);
  inline ::slg::protocol::PropertyDTO* add_rewards();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::PropertyDTO >&
      rewards() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::PropertyDTO >*
      mutable_rewards();

  // @@protoc_insertion_point(class_scope:slg.protocol.TradeInfoDTO)
 private:
  inline void set_has_targetname();
  inline void clear_has_targetname();
  inline void set_has_event();
  inline void clear_has_event();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* targetname_;
  ::google::protobuf::RepeatedPtrField< ::slg::protocol::PropertyDTO > rewards_;
  ::google::protobuf::int32 event_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_market_2eproto();
  friend void protobuf_AssignDesc_market_2eproto();
  friend void protobuf_ShutdownFile_market_2eproto();

  void InitAsDefaultInstance();
  static TradeInfoDTO* default_instance_;
};
// -------------------------------------------------------------------

class PlayerMarketInfoRequest : public ::google::protobuf::Message {
 public:
  PlayerMarketInfoRequest();
  virtual ~PlayerMarketInfoRequest();

  PlayerMarketInfoRequest(const PlayerMarketInfoRequest& from);

  inline PlayerMarketInfoRequest& operator=(const PlayerMarketInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerMarketInfoRequest& default_instance();

  void Swap(PlayerMarketInfoRequest* other);

  // implements Message ----------------------------------------------

  PlayerMarketInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerMarketInfoRequest& from);
  void MergeFrom(const PlayerMarketInfoRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:slg.protocol.PlayerMarketInfoRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_market_2eproto();
  friend void protobuf_AssignDesc_market_2eproto();
  friend void protobuf_ShutdownFile_market_2eproto();

  void InitAsDefaultInstance();
  static PlayerMarketInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class PlayerMarketInfoResponse : public ::google::protobuf::Message {
 public:
  PlayerMarketInfoResponse();
  virtual ~PlayerMarketInfoResponse();

  PlayerMarketInfoResponse(const PlayerMarketInfoResponse& from);

  inline PlayerMarketInfoResponse& operator=(const PlayerMarketInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerMarketInfoResponse& default_instance();

  void Swap(PlayerMarketInfoResponse* other);

  // implements Message ----------------------------------------------

  PlayerMarketInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerMarketInfoResponse& from);
  void MergeFrom(const PlayerMarketInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 trader = 1;
  inline bool has_trader() const;
  inline void clear_trader();
  static const int kTraderFieldNumber = 1;
  inline ::google::protobuf::int32 trader() const;
  inline void set_trader(::google::protobuf::int32 value);

  // repeated int32 traderList = 2;
  inline int traderlist_size() const;
  inline void clear_traderlist();
  static const int kTraderListFieldNumber = 2;
  inline ::google::protobuf::int32 traderlist(int index) const;
  inline void set_traderlist(int index, ::google::protobuf::int32 value);
  inline void add_traderlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      traderlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_traderlist();

  // repeated .slg.protocol.MarketPlayerDTO playerList = 3;
  inline int playerlist_size() const;
  inline void clear_playerlist();
  static const int kPlayerListFieldNumber = 3;
  inline const ::slg::protocol::MarketPlayerDTO& playerlist(int index) const;
  inline ::slg::protocol::MarketPlayerDTO* mutable_playerlist(int index);
  inline ::slg::protocol::MarketPlayerDTO* add_playerlist();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::MarketPlayerDTO >&
      playerlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::MarketPlayerDTO >*
      mutable_playerlist();

  // repeated int64 selectList = 4;
  inline int selectlist_size() const;
  inline void clear_selectlist();
  static const int kSelectListFieldNumber = 4;
  inline ::google::protobuf::int64 selectlist(int index) const;
  inline void set_selectlist(int index, ::google::protobuf::int64 value);
  inline void add_selectlist(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      selectlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_selectlist();

  // @@protoc_insertion_point(class_scope:slg.protocol.PlayerMarketInfoResponse)
 private:
  inline void set_has_trader();
  inline void clear_has_trader();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > traderlist_;
  ::google::protobuf::RepeatedPtrField< ::slg::protocol::MarketPlayerDTO > playerlist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > selectlist_;
  ::google::protobuf::int32 trader_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_market_2eproto();
  friend void protobuf_AssignDesc_market_2eproto();
  friend void protobuf_ShutdownFile_market_2eproto();

  void InitAsDefaultInstance();
  static PlayerMarketInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class AddMarketTargetRequest : public ::google::protobuf::Message {
 public:
  AddMarketTargetRequest();
  virtual ~AddMarketTargetRequest();

  AddMarketTargetRequest(const AddMarketTargetRequest& from);

  inline AddMarketTargetRequest& operator=(const AddMarketTargetRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddMarketTargetRequest& default_instance();

  void Swap(AddMarketTargetRequest* other);

  // implements Message ----------------------------------------------

  AddMarketTargetRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddMarketTargetRequest& from);
  void MergeFrom(const AddMarketTargetRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 playerList = 1;
  inline int playerlist_size() const;
  inline void clear_playerlist();
  static const int kPlayerListFieldNumber = 1;
  inline ::google::protobuf::int64 playerlist(int index) const;
  inline void set_playerlist(int index, ::google::protobuf::int64 value);
  inline void add_playerlist(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      playerlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_playerlist();

  // @@protoc_insertion_point(class_scope:slg.protocol.AddMarketTargetRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > playerlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_market_2eproto();
  friend void protobuf_AssignDesc_market_2eproto();
  friend void protobuf_ShutdownFile_market_2eproto();

  void InitAsDefaultInstance();
  static AddMarketTargetRequest* default_instance_;
};
// -------------------------------------------------------------------

class AddMarketTargetResponse : public ::google::protobuf::Message {
 public:
  AddMarketTargetResponse();
  virtual ~AddMarketTargetResponse();

  AddMarketTargetResponse(const AddMarketTargetResponse& from);

  inline AddMarketTargetResponse& operator=(const AddMarketTargetResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddMarketTargetResponse& default_instance();

  void Swap(AddMarketTargetResponse* other);

  // implements Message ----------------------------------------------

  AddMarketTargetResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddMarketTargetResponse& from);
  void MergeFrom(const AddMarketTargetResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 playerList = 1;
  inline int playerlist_size() const;
  inline void clear_playerlist();
  static const int kPlayerListFieldNumber = 1;
  inline ::google::protobuf::int64 playerlist(int index) const;
  inline void set_playerlist(int index, ::google::protobuf::int64 value);
  inline void add_playerlist(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      playerlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_playerlist();

  // @@protoc_insertion_point(class_scope:slg.protocol.AddMarketTargetResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > playerlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_market_2eproto();
  friend void protobuf_AssignDesc_market_2eproto();
  friend void protobuf_ShutdownFile_market_2eproto();

  void InitAsDefaultInstance();
  static AddMarketTargetResponse* default_instance_;
};
// -------------------------------------------------------------------

class TradeRequest : public ::google::protobuf::Message {
 public:
  TradeRequest();
  virtual ~TradeRequest();

  TradeRequest(const TradeRequest& from);

  inline TradeRequest& operator=(const TradeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TradeRequest& default_instance();

  void Swap(TradeRequest* other);

  // implements Message ----------------------------------------------

  TradeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TradeRequest& from);
  void MergeFrom(const TradeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 traderId = 1;
  inline int traderid_size() const;
  inline void clear_traderid();
  static const int kTraderIdFieldNumber = 1;
  inline ::google::protobuf::int32 traderid(int index) const;
  inline void set_traderid(int index, ::google::protobuf::int32 value);
  inline void add_traderid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      traderid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_traderid();

  // repeated .slg.protocol.TradeTargetDTO targetList = 2;
  inline int targetlist_size() const;
  inline void clear_targetlist();
  static const int kTargetListFieldNumber = 2;
  inline const ::slg::protocol::TradeTargetDTO& targetlist(int index) const;
  inline ::slg::protocol::TradeTargetDTO* mutable_targetlist(int index);
  inline ::slg::protocol::TradeTargetDTO* add_targetlist();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::TradeTargetDTO >&
      targetlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::TradeTargetDTO >*
      mutable_targetlist();

  // @@protoc_insertion_point(class_scope:slg.protocol.TradeRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > traderid_;
  ::google::protobuf::RepeatedPtrField< ::slg::protocol::TradeTargetDTO > targetlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_market_2eproto();
  friend void protobuf_AssignDesc_market_2eproto();
  friend void protobuf_ShutdownFile_market_2eproto();

  void InitAsDefaultInstance();
  static TradeRequest* default_instance_;
};
// -------------------------------------------------------------------

class BuyMarketTraderRequest : public ::google::protobuf::Message {
 public:
  BuyMarketTraderRequest();
  virtual ~BuyMarketTraderRequest();

  BuyMarketTraderRequest(const BuyMarketTraderRequest& from);

  inline BuyMarketTraderRequest& operator=(const BuyMarketTraderRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuyMarketTraderRequest& default_instance();

  void Swap(BuyMarketTraderRequest* other);

  // implements Message ----------------------------------------------

  BuyMarketTraderRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuyMarketTraderRequest& from);
  void MergeFrom(const BuyMarketTraderRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 trader = 1;
  inline bool has_trader() const;
  inline void clear_trader();
  static const int kTraderFieldNumber = 1;
  inline ::google::protobuf::int32 trader() const;
  inline void set_trader(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.BuyMarketTraderRequest)
 private:
  inline void set_has_trader();
  inline void clear_has_trader();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 trader_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_market_2eproto();
  friend void protobuf_AssignDesc_market_2eproto();
  friend void protobuf_ShutdownFile_market_2eproto();

  void InitAsDefaultInstance();
  static BuyMarketTraderRequest* default_instance_;
};
// -------------------------------------------------------------------

class BuyMarketTraderResponse : public ::google::protobuf::Message {
 public:
  BuyMarketTraderResponse();
  virtual ~BuyMarketTraderResponse();

  BuyMarketTraderResponse(const BuyMarketTraderResponse& from);

  inline BuyMarketTraderResponse& operator=(const BuyMarketTraderResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuyMarketTraderResponse& default_instance();

  void Swap(BuyMarketTraderResponse* other);

  // implements Message ----------------------------------------------

  BuyMarketTraderResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuyMarketTraderResponse& from);
  void MergeFrom(const BuyMarketTraderResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 trader = 1;
  inline bool has_trader() const;
  inline void clear_trader();
  static const int kTraderFieldNumber = 1;
  inline ::google::protobuf::int32 trader() const;
  inline void set_trader(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.BuyMarketTraderResponse)
 private:
  inline void set_has_trader();
  inline void clear_has_trader();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 trader_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_market_2eproto();
  friend void protobuf_AssignDesc_market_2eproto();
  friend void protobuf_ShutdownFile_market_2eproto();

  void InitAsDefaultInstance();
  static BuyMarketTraderResponse* default_instance_;
};
// -------------------------------------------------------------------

class TradeInfoRequest : public ::google::protobuf::Message {
 public:
  TradeInfoRequest();
  virtual ~TradeInfoRequest();

  TradeInfoRequest(const TradeInfoRequest& from);

  inline TradeInfoRequest& operator=(const TradeInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TradeInfoRequest& default_instance();

  void Swap(TradeInfoRequest* other);

  // implements Message ----------------------------------------------

  TradeInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TradeInfoRequest& from);
  void MergeFrom(const TradeInfoRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.TradeInfoRequest)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_market_2eproto();
  friend void protobuf_AssignDesc_market_2eproto();
  friend void protobuf_ShutdownFile_market_2eproto();

  void InitAsDefaultInstance();
  static TradeInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class TradeInfoReponse : public ::google::protobuf::Message {
 public:
  TradeInfoReponse();
  virtual ~TradeInfoReponse();

  TradeInfoReponse(const TradeInfoReponse& from);

  inline TradeInfoReponse& operator=(const TradeInfoReponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TradeInfoReponse& default_instance();

  void Swap(TradeInfoReponse* other);

  // implements Message ----------------------------------------------

  TradeInfoReponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TradeInfoReponse& from);
  void MergeFrom(const TradeInfoReponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .slg.protocol.TradeInfoDTO tadeList = 1;
  inline int tadelist_size() const;
  inline void clear_tadelist();
  static const int kTadeListFieldNumber = 1;
  inline const ::slg::protocol::TradeInfoDTO& tadelist(int index) const;
  inline ::slg::protocol::TradeInfoDTO* mutable_tadelist(int index);
  inline ::slg::protocol::TradeInfoDTO* add_tadelist();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::TradeInfoDTO >&
      tadelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::TradeInfoDTO >*
      mutable_tadelist();

  // @@protoc_insertion_point(class_scope:slg.protocol.TradeInfoReponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::slg::protocol::TradeInfoDTO > tadelist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_market_2eproto();
  friend void protobuf_AssignDesc_market_2eproto();
  friend void protobuf_ShutdownFile_market_2eproto();

  void InitAsDefaultInstance();
  static TradeInfoReponse* default_instance_;
};
// -------------------------------------------------------------------

class TradeTimePush : public ::google::protobuf::Message {
 public:
  TradeTimePush();
  virtual ~TradeTimePush();

  TradeTimePush(const TradeTimePush& from);

  inline TradeTimePush& operator=(const TradeTimePush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TradeTimePush& default_instance();

  void Swap(TradeTimePush* other);

  // implements Message ----------------------------------------------

  TradeTimePush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TradeTimePush& from);
  void MergeFrom(const TradeTimePush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 totalTime = 1;
  inline bool has_totaltime() const;
  inline void clear_totaltime();
  static const int kTotalTimeFieldNumber = 1;
  inline ::google::protobuf::int32 totaltime() const;
  inline void set_totaltime(::google::protobuf::int32 value);

  // required int32 lastTime = 2;
  inline bool has_lasttime() const;
  inline void clear_lasttime();
  static const int kLastTimeFieldNumber = 2;
  inline ::google::protobuf::int32 lasttime() const;
  inline void set_lasttime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.TradeTimePush)
 private:
  inline void set_has_totaltime();
  inline void clear_has_totaltime();
  inline void set_has_lasttime();
  inline void clear_has_lasttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 totaltime_;
  ::google::protobuf::int32 lasttime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_market_2eproto();
  friend void protobuf_AssignDesc_market_2eproto();
  friend void protobuf_ShutdownFile_market_2eproto();

  void InitAsDefaultInstance();
  static TradeTimePush* default_instance_;
};
// ===================================================================


// ===================================================================

// MarketPlayerDTO

// required int64 playerId = 1;
inline bool MarketPlayerDTO::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarketPlayerDTO::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarketPlayerDTO::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarketPlayerDTO::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 MarketPlayerDTO::playerid() const {
  return playerid_;
}
inline void MarketPlayerDTO::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// required string icon = 2;
inline bool MarketPlayerDTO::has_icon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarketPlayerDTO::set_has_icon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarketPlayerDTO::clear_has_icon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarketPlayerDTO::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& MarketPlayerDTO::icon() const {
  return *icon_;
}
inline void MarketPlayerDTO::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void MarketPlayerDTO::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void MarketPlayerDTO::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MarketPlayerDTO::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* MarketPlayerDTO::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MarketPlayerDTO::set_allocated_icon(::std::string* icon) {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 level = 3;
inline bool MarketPlayerDTO::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarketPlayerDTO::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarketPlayerDTO::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarketPlayerDTO::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 MarketPlayerDTO::level() const {
  return level_;
}
inline void MarketPlayerDTO::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required string playerName = 4;
inline bool MarketPlayerDTO::has_playername() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarketPlayerDTO::set_has_playername() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MarketPlayerDTO::clear_has_playername() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MarketPlayerDTO::clear_playername() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& MarketPlayerDTO::playername() const {
  return *playername_;
}
inline void MarketPlayerDTO::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void MarketPlayerDTO::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void MarketPlayerDTO::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MarketPlayerDTO::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  return playername_;
}
inline ::std::string* MarketPlayerDTO::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MarketPlayerDTO::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .slg.protocol.PositionDTO pos = 5;
inline bool MarketPlayerDTO::has_pos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MarketPlayerDTO::set_has_pos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MarketPlayerDTO::clear_has_pos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MarketPlayerDTO::clear_pos() {
  if (pos_ != NULL) pos_->::slg::protocol::PositionDTO::Clear();
  clear_has_pos();
}
inline const ::slg::protocol::PositionDTO& MarketPlayerDTO::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::slg::protocol::PositionDTO* MarketPlayerDTO::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::slg::protocol::PositionDTO;
  return pos_;
}
inline ::slg::protocol::PositionDTO* MarketPlayerDTO::release_pos() {
  clear_has_pos();
  ::slg::protocol::PositionDTO* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void MarketPlayerDTO::set_allocated_pos(::slg::protocol::PositionDTO* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// required int32 traderId = 6;
inline bool MarketPlayerDTO::has_traderid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MarketPlayerDTO::set_has_traderid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MarketPlayerDTO::clear_has_traderid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MarketPlayerDTO::clear_traderid() {
  traderid_ = 0;
  clear_has_traderid();
}
inline ::google::protobuf::int32 MarketPlayerDTO::traderid() const {
  return traderid_;
}
inline void MarketPlayerDTO::set_traderid(::google::protobuf::int32 value) {
  set_has_traderid();
  traderid_ = value;
}

// -------------------------------------------------------------------

// TradeTargetDTO

// required int64 taregetId = 1;
inline bool TradeTargetDTO::has_taregetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TradeTargetDTO::set_has_taregetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TradeTargetDTO::clear_has_taregetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TradeTargetDTO::clear_taregetid() {
  taregetid_ = GOOGLE_LONGLONG(0);
  clear_has_taregetid();
}
inline ::google::protobuf::int64 TradeTargetDTO::taregetid() const {
  return taregetid_;
}
inline void TradeTargetDTO::set_taregetid(::google::protobuf::int64 value) {
  set_has_taregetid();
  taregetid_ = value;
}

// required .slg.protocol.PositionDTO taregetPos = 2;
inline bool TradeTargetDTO::has_taregetpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TradeTargetDTO::set_has_taregetpos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TradeTargetDTO::clear_has_taregetpos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TradeTargetDTO::clear_taregetpos() {
  if (taregetpos_ != NULL) taregetpos_->::slg::protocol::PositionDTO::Clear();
  clear_has_taregetpos();
}
inline const ::slg::protocol::PositionDTO& TradeTargetDTO::taregetpos() const {
  return taregetpos_ != NULL ? *taregetpos_ : *default_instance_->taregetpos_;
}
inline ::slg::protocol::PositionDTO* TradeTargetDTO::mutable_taregetpos() {
  set_has_taregetpos();
  if (taregetpos_ == NULL) taregetpos_ = new ::slg::protocol::PositionDTO;
  return taregetpos_;
}
inline ::slg::protocol::PositionDTO* TradeTargetDTO::release_taregetpos() {
  clear_has_taregetpos();
  ::slg::protocol::PositionDTO* temp = taregetpos_;
  taregetpos_ = NULL;
  return temp;
}
inline void TradeTargetDTO::set_allocated_taregetpos(::slg::protocol::PositionDTO* taregetpos) {
  delete taregetpos_;
  taregetpos_ = taregetpos;
  if (taregetpos) {
    set_has_taregetpos();
  } else {
    clear_has_taregetpos();
  }
}

// -------------------------------------------------------------------

// TradeInfoDTO

// required string targetName = 1;
inline bool TradeInfoDTO::has_targetname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TradeInfoDTO::set_has_targetname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TradeInfoDTO::clear_has_targetname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TradeInfoDTO::clear_targetname() {
  if (targetname_ != &::google::protobuf::internal::kEmptyString) {
    targetname_->clear();
  }
  clear_has_targetname();
}
inline const ::std::string& TradeInfoDTO::targetname() const {
  return *targetname_;
}
inline void TradeInfoDTO::set_targetname(const ::std::string& value) {
  set_has_targetname();
  if (targetname_ == &::google::protobuf::internal::kEmptyString) {
    targetname_ = new ::std::string;
  }
  targetname_->assign(value);
}
inline void TradeInfoDTO::set_targetname(const char* value) {
  set_has_targetname();
  if (targetname_ == &::google::protobuf::internal::kEmptyString) {
    targetname_ = new ::std::string;
  }
  targetname_->assign(value);
}
inline void TradeInfoDTO::set_targetname(const char* value, size_t size) {
  set_has_targetname();
  if (targetname_ == &::google::protobuf::internal::kEmptyString) {
    targetname_ = new ::std::string;
  }
  targetname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TradeInfoDTO::mutable_targetname() {
  set_has_targetname();
  if (targetname_ == &::google::protobuf::internal::kEmptyString) {
    targetname_ = new ::std::string;
  }
  return targetname_;
}
inline ::std::string* TradeInfoDTO::release_targetname() {
  clear_has_targetname();
  if (targetname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = targetname_;
    targetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TradeInfoDTO::set_allocated_targetname(::std::string* targetname) {
  if (targetname_ != &::google::protobuf::internal::kEmptyString) {
    delete targetname_;
  }
  if (targetname) {
    set_has_targetname();
    targetname_ = targetname;
  } else {
    clear_has_targetname();
    targetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 event = 2;
inline bool TradeInfoDTO::has_event() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TradeInfoDTO::set_has_event() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TradeInfoDTO::clear_has_event() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TradeInfoDTO::clear_event() {
  event_ = 0;
  clear_has_event();
}
inline ::google::protobuf::int32 TradeInfoDTO::event() const {
  return event_;
}
inline void TradeInfoDTO::set_event(::google::protobuf::int32 value) {
  set_has_event();
  event_ = value;
}

// repeated .slg.protocol.PropertyDTO rewards = 3;
inline int TradeInfoDTO::rewards_size() const {
  return rewards_.size();
}
inline void TradeInfoDTO::clear_rewards() {
  rewards_.Clear();
}
inline const ::slg::protocol::PropertyDTO& TradeInfoDTO::rewards(int index) const {
  return rewards_.Get(index);
}
inline ::slg::protocol::PropertyDTO* TradeInfoDTO::mutable_rewards(int index) {
  return rewards_.Mutable(index);
}
inline ::slg::protocol::PropertyDTO* TradeInfoDTO::add_rewards() {
  return rewards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::PropertyDTO >&
TradeInfoDTO::rewards() const {
  return rewards_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::PropertyDTO >*
TradeInfoDTO::mutable_rewards() {
  return &rewards_;
}

// -------------------------------------------------------------------

// PlayerMarketInfoRequest

// -------------------------------------------------------------------

// PlayerMarketInfoResponse

// required int32 trader = 1;
inline bool PlayerMarketInfoResponse::has_trader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerMarketInfoResponse::set_has_trader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerMarketInfoResponse::clear_has_trader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerMarketInfoResponse::clear_trader() {
  trader_ = 0;
  clear_has_trader();
}
inline ::google::protobuf::int32 PlayerMarketInfoResponse::trader() const {
  return trader_;
}
inline void PlayerMarketInfoResponse::set_trader(::google::protobuf::int32 value) {
  set_has_trader();
  trader_ = value;
}

// repeated int32 traderList = 2;
inline int PlayerMarketInfoResponse::traderlist_size() const {
  return traderlist_.size();
}
inline void PlayerMarketInfoResponse::clear_traderlist() {
  traderlist_.Clear();
}
inline ::google::protobuf::int32 PlayerMarketInfoResponse::traderlist(int index) const {
  return traderlist_.Get(index);
}
inline void PlayerMarketInfoResponse::set_traderlist(int index, ::google::protobuf::int32 value) {
  traderlist_.Set(index, value);
}
inline void PlayerMarketInfoResponse::add_traderlist(::google::protobuf::int32 value) {
  traderlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlayerMarketInfoResponse::traderlist() const {
  return traderlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlayerMarketInfoResponse::mutable_traderlist() {
  return &traderlist_;
}

// repeated .slg.protocol.MarketPlayerDTO playerList = 3;
inline int PlayerMarketInfoResponse::playerlist_size() const {
  return playerlist_.size();
}
inline void PlayerMarketInfoResponse::clear_playerlist() {
  playerlist_.Clear();
}
inline const ::slg::protocol::MarketPlayerDTO& PlayerMarketInfoResponse::playerlist(int index) const {
  return playerlist_.Get(index);
}
inline ::slg::protocol::MarketPlayerDTO* PlayerMarketInfoResponse::mutable_playerlist(int index) {
  return playerlist_.Mutable(index);
}
inline ::slg::protocol::MarketPlayerDTO* PlayerMarketInfoResponse::add_playerlist() {
  return playerlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::MarketPlayerDTO >&
PlayerMarketInfoResponse::playerlist() const {
  return playerlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::MarketPlayerDTO >*
PlayerMarketInfoResponse::mutable_playerlist() {
  return &playerlist_;
}

// repeated int64 selectList = 4;
inline int PlayerMarketInfoResponse::selectlist_size() const {
  return selectlist_.size();
}
inline void PlayerMarketInfoResponse::clear_selectlist() {
  selectlist_.Clear();
}
inline ::google::protobuf::int64 PlayerMarketInfoResponse::selectlist(int index) const {
  return selectlist_.Get(index);
}
inline void PlayerMarketInfoResponse::set_selectlist(int index, ::google::protobuf::int64 value) {
  selectlist_.Set(index, value);
}
inline void PlayerMarketInfoResponse::add_selectlist(::google::protobuf::int64 value) {
  selectlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
PlayerMarketInfoResponse::selectlist() const {
  return selectlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
PlayerMarketInfoResponse::mutable_selectlist() {
  return &selectlist_;
}

// -------------------------------------------------------------------

// AddMarketTargetRequest

// repeated int64 playerList = 1;
inline int AddMarketTargetRequest::playerlist_size() const {
  return playerlist_.size();
}
inline void AddMarketTargetRequest::clear_playerlist() {
  playerlist_.Clear();
}
inline ::google::protobuf::int64 AddMarketTargetRequest::playerlist(int index) const {
  return playerlist_.Get(index);
}
inline void AddMarketTargetRequest::set_playerlist(int index, ::google::protobuf::int64 value) {
  playerlist_.Set(index, value);
}
inline void AddMarketTargetRequest::add_playerlist(::google::protobuf::int64 value) {
  playerlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
AddMarketTargetRequest::playerlist() const {
  return playerlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
AddMarketTargetRequest::mutable_playerlist() {
  return &playerlist_;
}

// -------------------------------------------------------------------

// AddMarketTargetResponse

// repeated int64 playerList = 1;
inline int AddMarketTargetResponse::playerlist_size() const {
  return playerlist_.size();
}
inline void AddMarketTargetResponse::clear_playerlist() {
  playerlist_.Clear();
}
inline ::google::protobuf::int64 AddMarketTargetResponse::playerlist(int index) const {
  return playerlist_.Get(index);
}
inline void AddMarketTargetResponse::set_playerlist(int index, ::google::protobuf::int64 value) {
  playerlist_.Set(index, value);
}
inline void AddMarketTargetResponse::add_playerlist(::google::protobuf::int64 value) {
  playerlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
AddMarketTargetResponse::playerlist() const {
  return playerlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
AddMarketTargetResponse::mutable_playerlist() {
  return &playerlist_;
}

// -------------------------------------------------------------------

// TradeRequest

// repeated int32 traderId = 1;
inline int TradeRequest::traderid_size() const {
  return traderid_.size();
}
inline void TradeRequest::clear_traderid() {
  traderid_.Clear();
}
inline ::google::protobuf::int32 TradeRequest::traderid(int index) const {
  return traderid_.Get(index);
}
inline void TradeRequest::set_traderid(int index, ::google::protobuf::int32 value) {
  traderid_.Set(index, value);
}
inline void TradeRequest::add_traderid(::google::protobuf::int32 value) {
  traderid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TradeRequest::traderid() const {
  return traderid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TradeRequest::mutable_traderid() {
  return &traderid_;
}

// repeated .slg.protocol.TradeTargetDTO targetList = 2;
inline int TradeRequest::targetlist_size() const {
  return targetlist_.size();
}
inline void TradeRequest::clear_targetlist() {
  targetlist_.Clear();
}
inline const ::slg::protocol::TradeTargetDTO& TradeRequest::targetlist(int index) const {
  return targetlist_.Get(index);
}
inline ::slg::protocol::TradeTargetDTO* TradeRequest::mutable_targetlist(int index) {
  return targetlist_.Mutable(index);
}
inline ::slg::protocol::TradeTargetDTO* TradeRequest::add_targetlist() {
  return targetlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::TradeTargetDTO >&
TradeRequest::targetlist() const {
  return targetlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::TradeTargetDTO >*
TradeRequest::mutable_targetlist() {
  return &targetlist_;
}

// -------------------------------------------------------------------

// BuyMarketTraderRequest

// required int32 trader = 1;
inline bool BuyMarketTraderRequest::has_trader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuyMarketTraderRequest::set_has_trader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuyMarketTraderRequest::clear_has_trader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuyMarketTraderRequest::clear_trader() {
  trader_ = 0;
  clear_has_trader();
}
inline ::google::protobuf::int32 BuyMarketTraderRequest::trader() const {
  return trader_;
}
inline void BuyMarketTraderRequest::set_trader(::google::protobuf::int32 value) {
  set_has_trader();
  trader_ = value;
}

// -------------------------------------------------------------------

// BuyMarketTraderResponse

// required int32 trader = 1;
inline bool BuyMarketTraderResponse::has_trader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuyMarketTraderResponse::set_has_trader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuyMarketTraderResponse::clear_has_trader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuyMarketTraderResponse::clear_trader() {
  trader_ = 0;
  clear_has_trader();
}
inline ::google::protobuf::int32 BuyMarketTraderResponse::trader() const {
  return trader_;
}
inline void BuyMarketTraderResponse::set_trader(::google::protobuf::int32 value) {
  set_has_trader();
  trader_ = value;
}

// -------------------------------------------------------------------

// TradeInfoRequest

// required int64 uid = 1;
inline bool TradeInfoRequest::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TradeInfoRequest::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TradeInfoRequest::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TradeInfoRequest::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::int64 TradeInfoRequest::uid() const {
  return uid_;
}
inline void TradeInfoRequest::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
}

// -------------------------------------------------------------------

// TradeInfoReponse

// repeated .slg.protocol.TradeInfoDTO tadeList = 1;
inline int TradeInfoReponse::tadelist_size() const {
  return tadelist_.size();
}
inline void TradeInfoReponse::clear_tadelist() {
  tadelist_.Clear();
}
inline const ::slg::protocol::TradeInfoDTO& TradeInfoReponse::tadelist(int index) const {
  return tadelist_.Get(index);
}
inline ::slg::protocol::TradeInfoDTO* TradeInfoReponse::mutable_tadelist(int index) {
  return tadelist_.Mutable(index);
}
inline ::slg::protocol::TradeInfoDTO* TradeInfoReponse::add_tadelist() {
  return tadelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::TradeInfoDTO >&
TradeInfoReponse::tadelist() const {
  return tadelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::TradeInfoDTO >*
TradeInfoReponse::mutable_tadelist() {
  return &tadelist_;
}

// -------------------------------------------------------------------

// TradeTimePush

// required int32 totalTime = 1;
inline bool TradeTimePush::has_totaltime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TradeTimePush::set_has_totaltime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TradeTimePush::clear_has_totaltime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TradeTimePush::clear_totaltime() {
  totaltime_ = 0;
  clear_has_totaltime();
}
inline ::google::protobuf::int32 TradeTimePush::totaltime() const {
  return totaltime_;
}
inline void TradeTimePush::set_totaltime(::google::protobuf::int32 value) {
  set_has_totaltime();
  totaltime_ = value;
}

// required int32 lastTime = 2;
inline bool TradeTimePush::has_lasttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TradeTimePush::set_has_lasttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TradeTimePush::clear_has_lasttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TradeTimePush::clear_lasttime() {
  lasttime_ = 0;
  clear_has_lasttime();
}
inline ::google::protobuf::int32 TradeTimePush::lasttime() const {
  return lasttime_;
}
inline void TradeTimePush::set_lasttime(::google::protobuf::int32 value) {
  set_has_lasttime();
  lasttime_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace slg

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::slg::protocol::MarketCommandId>() {
  return ::slg::protocol::MarketCommandId_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::slg::protocol::MarketPushId>() {
  return ::slg::protocol::MarketPushId_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_market_2eproto__INCLUDED
