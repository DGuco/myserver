// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: report.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "report.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace slg {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* ReportArmyDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportArmyDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportPlayerDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportPlayerDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportResourceDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportResourceDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportPVPResourceDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportPVPResourceDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportResourcePillageDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportResourcePillageDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportPVPCityDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportPVPCityDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportRewardDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportRewardDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportPVEMonsterDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportPVEMonsterDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* TradeResultDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TradeResultDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportTradeDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportTradeDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArmyDeadDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArmyDeadDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportDeadDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportDeadDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportTargetDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportTargetDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportResultDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportResultDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportProfileDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportProfileDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportDetailRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportDetailRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportDetailResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportDetailResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportRewardTakeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportRewardTakeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportRewardTakeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportRewardTakeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportDeleteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportDeleteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportDeleteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportDeleteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportProfileListPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportProfileListPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportSpyPlayerDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportSpyPlayerDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportSpyResourceDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportSpyResourceDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportSpyWallDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportSpyWallDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportSpyArmyDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportSpyArmyDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportSpyAidDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportSpyAidDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportSpyTowerDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportSpyTowerDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportSpyCityDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportSpyCityDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportSpyResourceGridProfileDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportSpyResourceGridProfileDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportSpyResourceGridDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportSpyResourceGridDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportSpyDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportSpyDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportSpyProfileDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportSpyProfileDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportSpyProfileListPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportSpyProfileListPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportSpyDetailRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportSpyDetailRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportSpyDetailResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportSpyDetailResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportSpyReadRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportSpyReadRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportSpyDeleteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportSpyDeleteRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReportType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ReportCommandId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ReportPushId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ReportSpyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ReportSpyResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ReportSpyPushId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ReportSpyCommandId_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_report_2eproto() {
  protobuf_AddDesc_report_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "report.proto");
  GOOGLE_CHECK(file != NULL);
  ReportArmyDTO_descriptor_ = file->message_type(0);
  static const int ReportArmyDTO_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportArmyDTO, armytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportArmyDTO, armylevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportArmyDTO, dispatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportArmyDTO, death_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportArmyDTO, hurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportArmyDTO, revive_),
  };
  ReportArmyDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportArmyDTO_descriptor_,
      ReportArmyDTO::default_instance_,
      ReportArmyDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportArmyDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportArmyDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportArmyDTO));
  ReportPlayerDTO_descriptor_ = file->message_type(1);
  static const int ReportPlayerDTO_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportPlayerDTO, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportPlayerDTO, playerpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportPlayerDTO, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportPlayerDTO, battlepowerlose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportPlayerDTO, additions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportPlayerDTO, armies_),
  };
  ReportPlayerDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportPlayerDTO_descriptor_,
      ReportPlayerDTO::default_instance_,
      ReportPlayerDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportPlayerDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportPlayerDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportPlayerDTO));
  ReportResourceDTO_descriptor_ = file->message_type(2);
  static const int ReportResourceDTO_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportResourceDTO, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportResourceDTO, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportResourceDTO, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportResourceDTO, soldiers_),
  };
  ReportResourceDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportResourceDTO_descriptor_,
      ReportResourceDTO::default_instance_,
      ReportResourceDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportResourceDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportResourceDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportResourceDTO));
  ReportPVPResourceDTO_descriptor_ = file->message_type(3);
  static const int ReportPVPResourceDTO_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportPVPResourceDTO, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportPVPResourceDTO, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportPVPResourceDTO, attacker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportPVPResourceDTO, defender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportPVPResourceDTO, winnerid_),
  };
  ReportPVPResourceDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportPVPResourceDTO_descriptor_,
      ReportPVPResourceDTO::default_instance_,
      ReportPVPResourceDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportPVPResourceDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportPVPResourceDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportPVPResourceDTO));
  ReportResourcePillageDTO_descriptor_ = file->message_type(4);
  static const int ReportResourcePillageDTO_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportResourcePillageDTO, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportResourcePillageDTO, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportResourcePillageDTO, upperbound_),
  };
  ReportResourcePillageDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportResourcePillageDTO_descriptor_,
      ReportResourcePillageDTO::default_instance_,
      ReportResourcePillageDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportResourcePillageDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportResourcePillageDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportResourcePillageDTO));
  ReportPVPCityDTO_descriptor_ = file->message_type(5);
  static const int ReportPVPCityDTO_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportPVPCityDTO, attacker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportPVPCityDTO, defender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportPVPCityDTO, pillages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportPVPCityDTO, winnerid_),
  };
  ReportPVPCityDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportPVPCityDTO_descriptor_,
      ReportPVPCityDTO::default_instance_,
      ReportPVPCityDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportPVPCityDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportPVPCityDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportPVPCityDTO));
  ReportRewardDTO_descriptor_ = file->message_type(6);
  static const int ReportRewardDTO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRewardDTO, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRewardDTO, count_),
  };
  ReportRewardDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportRewardDTO_descriptor_,
      ReportRewardDTO::default_instance_,
      ReportRewardDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRewardDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRewardDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportRewardDTO));
  ReportPVEMonsterDTO_descriptor_ = file->message_type(7);
  static const int ReportPVEMonsterDTO_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportPVEMonsterDTO, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportPVEMonsterDTO, won_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportPVEMonsterDTO, firstkill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportPVEMonsterDTO, dispatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportPVEMonsterDTO, remain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportPVEMonsterDTO, rewards_),
  };
  ReportPVEMonsterDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportPVEMonsterDTO_descriptor_,
      ReportPVEMonsterDTO::default_instance_,
      ReportPVEMonsterDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportPVEMonsterDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportPVEMonsterDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportPVEMonsterDTO));
  TradeResultDTO_descriptor_ = file->message_type(8);
  static const int TradeResultDTO_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeResultDTO, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeResultDTO, rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeResultDTO, envet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeResultDTO, traderid_),
  };
  TradeResultDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TradeResultDTO_descriptor_,
      TradeResultDTO::default_instance_,
      TradeResultDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeResultDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeResultDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TradeResultDTO));
  ReportTradeDTO_descriptor_ = file->message_type(9);
  static const int ReportTradeDTO_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportTradeDTO, tradelist_),
  };
  ReportTradeDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportTradeDTO_descriptor_,
      ReportTradeDTO::default_instance_,
      ReportTradeDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportTradeDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportTradeDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportTradeDTO));
  ArmyDeadDTO_descriptor_ = file->message_type(10);
  static const int ArmyDeadDTO_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmyDeadDTO, armytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmyDeadDTO, armylevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmyDeadDTO, deadnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmyDeadDTO, lastnum_),
  };
  ArmyDeadDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArmyDeadDTO_descriptor_,
      ArmyDeadDTO::default_instance_,
      ArmyDeadDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmyDeadDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmyDeadDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArmyDeadDTO));
  ReportDeadDTO_descriptor_ = file->message_type(11);
  static const int ReportDeadDTO_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDeadDTO, deadlist_),
  };
  ReportDeadDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportDeadDTO_descriptor_,
      ReportDeadDTO::default_instance_,
      ReportDeadDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDeadDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDeadDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportDeadDTO));
  ReportDTO_descriptor_ = file->message_type(12);
  static const int ReportDTO_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDTO, reportid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDTO, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDTO, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDTO, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDTO, resourcepvp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDTO, citypvp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDTO, monster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDTO, trade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDTO, dead_),
  };
  ReportDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportDTO_descriptor_,
      ReportDTO::default_instance_,
      ReportDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportDTO));
  ReportTargetDTO_descriptor_ = file->message_type(13);
  static const int ReportTargetDTO_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportTargetDTO, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportTargetDTO, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportTargetDTO, value_),
  };
  ReportTargetDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportTargetDTO_descriptor_,
      ReportTargetDTO::default_instance_,
      ReportTargetDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportTargetDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportTargetDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportTargetDTO));
  ReportResultDTO_descriptor_ = file->message_type(14);
  static const int ReportResultDTO_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportResultDTO, attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportResultDTO, win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportResultDTO, first_),
  };
  ReportResultDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportResultDTO_descriptor_,
      ReportResultDTO::default_instance_,
      ReportResultDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportResultDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportResultDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportResultDTO));
  ReportProfileDTO_descriptor_ = file->message_type(15);
  static const int ReportProfileDTO_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportProfileDTO, reportid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportProfileDTO, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportProfileDTO, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportProfileDTO, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportProfileDTO, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportProfileDTO, read_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportProfileDTO, rewarddiamond_),
  };
  ReportProfileDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportProfileDTO_descriptor_,
      ReportProfileDTO::default_instance_,
      ReportProfileDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportProfileDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportProfileDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportProfileDTO));
  ReportDetailRequest_descriptor_ = file->message_type(16);
  static const int ReportDetailRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDetailRequest, reportid_),
  };
  ReportDetailRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportDetailRequest_descriptor_,
      ReportDetailRequest::default_instance_,
      ReportDetailRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDetailRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDetailRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportDetailRequest));
  ReportDetailResponse_descriptor_ = file->message_type(17);
  static const int ReportDetailResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDetailResponse, report_),
  };
  ReportDetailResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportDetailResponse_descriptor_,
      ReportDetailResponse::default_instance_,
      ReportDetailResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDetailResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDetailResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportDetailResponse));
  ReportRewardTakeRequest_descriptor_ = file->message_type(18);
  static const int ReportRewardTakeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRewardTakeRequest, reportid_),
  };
  ReportRewardTakeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportRewardTakeRequest_descriptor_,
      ReportRewardTakeRequest::default_instance_,
      ReportRewardTakeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRewardTakeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRewardTakeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportRewardTakeRequest));
  ReportRewardTakeResponse_descriptor_ = file->message_type(19);
  static const int ReportRewardTakeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRewardTakeResponse, reportid_),
  };
  ReportRewardTakeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportRewardTakeResponse_descriptor_,
      ReportRewardTakeResponse::default_instance_,
      ReportRewardTakeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRewardTakeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRewardTakeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportRewardTakeResponse));
  ReportDeleteRequest_descriptor_ = file->message_type(20);
  static const int ReportDeleteRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDeleteRequest, reportid_),
  };
  ReportDeleteRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportDeleteRequest_descriptor_,
      ReportDeleteRequest::default_instance_,
      ReportDeleteRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDeleteRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDeleteRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportDeleteRequest));
  ReportDeleteResponse_descriptor_ = file->message_type(21);
  static const int ReportDeleteResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDeleteResponse, reportid_),
  };
  ReportDeleteResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportDeleteResponse_descriptor_,
      ReportDeleteResponse::default_instance_,
      ReportDeleteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDeleteResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDeleteResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportDeleteResponse));
  ReportProfileListPush_descriptor_ = file->message_type(22);
  static const int ReportProfileListPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportProfileListPush, reportprofiles_),
  };
  ReportProfileListPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportProfileListPush_descriptor_,
      ReportProfileListPush::default_instance_,
      ReportProfileListPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportProfileListPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportProfileListPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportProfileListPush));
  ReportSpyPlayerDTO_descriptor_ = file->message_type(23);
  static const int ReportSpyPlayerDTO_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyPlayerDTO, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyPlayerDTO, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyPlayerDTO, allianceshortname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyPlayerDTO, position_),
  };
  ReportSpyPlayerDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportSpyPlayerDTO_descriptor_,
      ReportSpyPlayerDTO::default_instance_,
      ReportSpyPlayerDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyPlayerDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyPlayerDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportSpyPlayerDTO));
  ReportSpyResourceDTO_descriptor_ = file->message_type(24);
  static const int ReportSpyResourceDTO_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyResourceDTO, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyResourceDTO, remaining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyResourceDTO, canberobbed_),
  };
  ReportSpyResourceDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportSpyResourceDTO_descriptor_,
      ReportSpyResourceDTO::default_instance_,
      ReportSpyResourceDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyResourceDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyResourceDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportSpyResourceDTO));
  ReportSpyWallDTO_descriptor_ = file->message_type(25);
  static const int ReportSpyWallDTO_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyWallDTO, currentvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyWallDTO, totalvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyWallDTO, burnrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyWallDTO, burnremianingtime_),
  };
  ReportSpyWallDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportSpyWallDTO_descriptor_,
      ReportSpyWallDTO::default_instance_,
      ReportSpyWallDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyWallDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyWallDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportSpyWallDTO));
  ReportSpyArmyDTO_descriptor_ = file->message_type(26);
  static const int ReportSpyArmyDTO_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyArmyDTO, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyArmyDTO, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyArmyDTO, num_),
  };
  ReportSpyArmyDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportSpyArmyDTO_descriptor_,
      ReportSpyArmyDTO::default_instance_,
      ReportSpyArmyDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyArmyDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyArmyDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportSpyArmyDTO));
  ReportSpyAidDTO_descriptor_ = file->message_type(27);
  static const int ReportSpyAidDTO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyAidDTO, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyAidDTO, armies_),
  };
  ReportSpyAidDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportSpyAidDTO_descriptor_,
      ReportSpyAidDTO::default_instance_,
      ReportSpyAidDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyAidDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyAidDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportSpyAidDTO));
  ReportSpyTowerDTO_descriptor_ = file->message_type(28);
  static const int ReportSpyTowerDTO_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyTowerDTO, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyTowerDTO, atk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyTowerDTO, currentnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyTowerDTO, capacity_),
  };
  ReportSpyTowerDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportSpyTowerDTO_descriptor_,
      ReportSpyTowerDTO::default_instance_,
      ReportSpyTowerDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyTowerDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyTowerDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportSpyTowerDTO));
  ReportSpyCityDTO_descriptor_ = file->message_type(29);
  static const int ReportSpyCityDTO_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyCityDTO, protectedpercentage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyCityDTO, resources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyCityDTO, wall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyCityDTO, totalarmycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyCityDTO, armies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyCityDTO, towers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyCityDTO, aids_),
  };
  ReportSpyCityDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportSpyCityDTO_descriptor_,
      ReportSpyCityDTO::default_instance_,
      ReportSpyCityDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyCityDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyCityDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportSpyCityDTO));
  ReportSpyResourceGridProfileDTO_descriptor_ = file->message_type(30);
  static const int ReportSpyResourceGridProfileDTO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyResourceGridProfileDTO, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyResourceGridProfileDTO, level_),
  };
  ReportSpyResourceGridProfileDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportSpyResourceGridProfileDTO_descriptor_,
      ReportSpyResourceGridProfileDTO::default_instance_,
      ReportSpyResourceGridProfileDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyResourceGridProfileDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyResourceGridProfileDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportSpyResourceGridProfileDTO));
  ReportSpyResourceGridDTO_descriptor_ = file->message_type(31);
  static const int ReportSpyResourceGridDTO_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyResourceGridDTO, profile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyResourceGridDTO, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyResourceGridDTO, remaining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyResourceGridDTO, totalarmycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyResourceGridDTO, armies_),
  };
  ReportSpyResourceGridDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportSpyResourceGridDTO_descriptor_,
      ReportSpyResourceGridDTO::default_instance_,
      ReportSpyResourceGridDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyResourceGridDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyResourceGridDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportSpyResourceGridDTO));
  ReportSpyDTO_descriptor_ = file->message_type(32);
  static const int ReportSpyDTO_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyDTO, reportid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyDTO, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyDTO, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyDTO, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyDTO, resource_),
  };
  ReportSpyDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportSpyDTO_descriptor_,
      ReportSpyDTO::default_instance_,
      ReportSpyDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportSpyDTO));
  ReportSpyProfileDTO_descriptor_ = file->message_type(33);
  static const int ReportSpyProfileDTO_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyProfileDTO, reportid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyProfileDTO, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyProfileDTO, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyProfileDTO, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyProfileDTO, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyProfileDTO, read_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyProfileDTO, bespied_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyProfileDTO, resourceprofile_),
  };
  ReportSpyProfileDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportSpyProfileDTO_descriptor_,
      ReportSpyProfileDTO::default_instance_,
      ReportSpyProfileDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyProfileDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyProfileDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportSpyProfileDTO));
  ReportSpyProfileListPush_descriptor_ = file->message_type(34);
  static const int ReportSpyProfileListPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyProfileListPush, profiles_),
  };
  ReportSpyProfileListPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportSpyProfileListPush_descriptor_,
      ReportSpyProfileListPush::default_instance_,
      ReportSpyProfileListPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyProfileListPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyProfileListPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportSpyProfileListPush));
  ReportSpyDetailRequest_descriptor_ = file->message_type(35);
  static const int ReportSpyDetailRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyDetailRequest, reportid_),
  };
  ReportSpyDetailRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportSpyDetailRequest_descriptor_,
      ReportSpyDetailRequest::default_instance_,
      ReportSpyDetailRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyDetailRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyDetailRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportSpyDetailRequest));
  ReportSpyDetailResponse_descriptor_ = file->message_type(36);
  static const int ReportSpyDetailResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyDetailResponse, report_),
  };
  ReportSpyDetailResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportSpyDetailResponse_descriptor_,
      ReportSpyDetailResponse::default_instance_,
      ReportSpyDetailResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyDetailResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyDetailResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportSpyDetailResponse));
  ReportSpyReadRequest_descriptor_ = file->message_type(37);
  static const int ReportSpyReadRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyReadRequest, reportid_),
  };
  ReportSpyReadRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportSpyReadRequest_descriptor_,
      ReportSpyReadRequest::default_instance_,
      ReportSpyReadRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyReadRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyReadRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportSpyReadRequest));
  ReportSpyDeleteRequest_descriptor_ = file->message_type(38);
  static const int ReportSpyDeleteRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyDeleteRequest, reportid_),
  };
  ReportSpyDeleteRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportSpyDeleteRequest_descriptor_,
      ReportSpyDeleteRequest::default_instance_,
      ReportSpyDeleteRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyDeleteRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSpyDeleteRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportSpyDeleteRequest));
  ReportType_descriptor_ = file->enum_type(0);
  ReportCommandId_descriptor_ = file->enum_type(1);
  ReportPushId_descriptor_ = file->enum_type(2);
  ReportSpyType_descriptor_ = file->enum_type(3);
  ReportSpyResult_descriptor_ = file->enum_type(4);
  ReportSpyPushId_descriptor_ = file->enum_type(5);
  ReportSpyCommandId_descriptor_ = file->enum_type(6);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_report_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportArmyDTO_descriptor_, &ReportArmyDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportPlayerDTO_descriptor_, &ReportPlayerDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportResourceDTO_descriptor_, &ReportResourceDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportPVPResourceDTO_descriptor_, &ReportPVPResourceDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportResourcePillageDTO_descriptor_, &ReportResourcePillageDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportPVPCityDTO_descriptor_, &ReportPVPCityDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportRewardDTO_descriptor_, &ReportRewardDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportPVEMonsterDTO_descriptor_, &ReportPVEMonsterDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TradeResultDTO_descriptor_, &TradeResultDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportTradeDTO_descriptor_, &ReportTradeDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArmyDeadDTO_descriptor_, &ArmyDeadDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportDeadDTO_descriptor_, &ReportDeadDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportDTO_descriptor_, &ReportDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportTargetDTO_descriptor_, &ReportTargetDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportResultDTO_descriptor_, &ReportResultDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportProfileDTO_descriptor_, &ReportProfileDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportDetailRequest_descriptor_, &ReportDetailRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportDetailResponse_descriptor_, &ReportDetailResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportRewardTakeRequest_descriptor_, &ReportRewardTakeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportRewardTakeResponse_descriptor_, &ReportRewardTakeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportDeleteRequest_descriptor_, &ReportDeleteRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportDeleteResponse_descriptor_, &ReportDeleteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportProfileListPush_descriptor_, &ReportProfileListPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportSpyPlayerDTO_descriptor_, &ReportSpyPlayerDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportSpyResourceDTO_descriptor_, &ReportSpyResourceDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportSpyWallDTO_descriptor_, &ReportSpyWallDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportSpyArmyDTO_descriptor_, &ReportSpyArmyDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportSpyAidDTO_descriptor_, &ReportSpyAidDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportSpyTowerDTO_descriptor_, &ReportSpyTowerDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportSpyCityDTO_descriptor_, &ReportSpyCityDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportSpyResourceGridProfileDTO_descriptor_, &ReportSpyResourceGridProfileDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportSpyResourceGridDTO_descriptor_, &ReportSpyResourceGridDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportSpyDTO_descriptor_, &ReportSpyDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportSpyProfileDTO_descriptor_, &ReportSpyProfileDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportSpyProfileListPush_descriptor_, &ReportSpyProfileListPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportSpyDetailRequest_descriptor_, &ReportSpyDetailRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportSpyDetailResponse_descriptor_, &ReportSpyDetailResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportSpyReadRequest_descriptor_, &ReportSpyReadRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportSpyDeleteRequest_descriptor_, &ReportSpyDeleteRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_report_2eproto() {
  delete ReportArmyDTO::default_instance_;
  delete ReportArmyDTO_reflection_;
  delete ReportPlayerDTO::default_instance_;
  delete ReportPlayerDTO_reflection_;
  delete ReportResourceDTO::default_instance_;
  delete ReportResourceDTO_reflection_;
  delete ReportPVPResourceDTO::default_instance_;
  delete ReportPVPResourceDTO_reflection_;
  delete ReportResourcePillageDTO::default_instance_;
  delete ReportResourcePillageDTO_reflection_;
  delete ReportPVPCityDTO::default_instance_;
  delete ReportPVPCityDTO_reflection_;
  delete ReportRewardDTO::default_instance_;
  delete ReportRewardDTO_reflection_;
  delete ReportPVEMonsterDTO::default_instance_;
  delete ReportPVEMonsterDTO_reflection_;
  delete TradeResultDTO::default_instance_;
  delete TradeResultDTO_reflection_;
  delete ReportTradeDTO::default_instance_;
  delete ReportTradeDTO_reflection_;
  delete ArmyDeadDTO::default_instance_;
  delete ArmyDeadDTO_reflection_;
  delete ReportDeadDTO::default_instance_;
  delete ReportDeadDTO_reflection_;
  delete ReportDTO::default_instance_;
  delete ReportDTO_reflection_;
  delete ReportTargetDTO::default_instance_;
  delete ReportTargetDTO_reflection_;
  delete ReportResultDTO::default_instance_;
  delete ReportResultDTO_reflection_;
  delete ReportProfileDTO::default_instance_;
  delete ReportProfileDTO_reflection_;
  delete ReportDetailRequest::default_instance_;
  delete ReportDetailRequest_reflection_;
  delete ReportDetailResponse::default_instance_;
  delete ReportDetailResponse_reflection_;
  delete ReportRewardTakeRequest::default_instance_;
  delete ReportRewardTakeRequest_reflection_;
  delete ReportRewardTakeResponse::default_instance_;
  delete ReportRewardTakeResponse_reflection_;
  delete ReportDeleteRequest::default_instance_;
  delete ReportDeleteRequest_reflection_;
  delete ReportDeleteResponse::default_instance_;
  delete ReportDeleteResponse_reflection_;
  delete ReportProfileListPush::default_instance_;
  delete ReportProfileListPush_reflection_;
  delete ReportSpyPlayerDTO::default_instance_;
  delete ReportSpyPlayerDTO_reflection_;
  delete ReportSpyResourceDTO::default_instance_;
  delete ReportSpyResourceDTO_reflection_;
  delete ReportSpyWallDTO::default_instance_;
  delete ReportSpyWallDTO_reflection_;
  delete ReportSpyArmyDTO::default_instance_;
  delete ReportSpyArmyDTO_reflection_;
  delete ReportSpyAidDTO::default_instance_;
  delete ReportSpyAidDTO_reflection_;
  delete ReportSpyTowerDTO::default_instance_;
  delete ReportSpyTowerDTO_reflection_;
  delete ReportSpyCityDTO::default_instance_;
  delete ReportSpyCityDTO_reflection_;
  delete ReportSpyResourceGridProfileDTO::default_instance_;
  delete ReportSpyResourceGridProfileDTO_reflection_;
  delete ReportSpyResourceGridDTO::default_instance_;
  delete ReportSpyResourceGridDTO_reflection_;
  delete ReportSpyDTO::default_instance_;
  delete ReportSpyDTO_reflection_;
  delete ReportSpyProfileDTO::default_instance_;
  delete ReportSpyProfileDTO_reflection_;
  delete ReportSpyProfileListPush::default_instance_;
  delete ReportSpyProfileListPush_reflection_;
  delete ReportSpyDetailRequest::default_instance_;
  delete ReportSpyDetailRequest_reflection_;
  delete ReportSpyDetailResponse::default_instance_;
  delete ReportSpyDetailResponse_reflection_;
  delete ReportSpyReadRequest::default_instance_;
  delete ReportSpyReadRequest_reflection_;
  delete ReportSpyDeleteRequest::default_instance_;
  delete ReportSpyDeleteRequest_reflection_;
}

void protobuf_AddDesc_report_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::slg::protocol::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014report.proto\022\014slg.protocol\032\014common.pro"
    "to\"s\n\rReportArmyDTO\022\020\n\010armyType\030\001 \002(\005\022\021\n"
    "\tarmyLevel\030\002 \002(\005\022\020\n\010dispatch\030\003 \002(\005\022\r\n\005de"
    "ath\030\004 \002(\005\022\014\n\004hurt\030\005 \002(\005\022\016\n\006revive\030\006 \002(\005\""
    "\327\001\n\017ReportPlayerDTO\022\020\n\010playerId\030\001 \002(\003\022,\n"
    "\tplayerPos\030\002 \002(\0132\031.slg.protocol.Position"
    "DTO\022\020\n\010nickName\030\003 \002(\t\022\027\n\017battlePowerLose"
    "\030\004 \002(\005\022,\n\tadditions\030\005 \003(\0132\031.slg.protocol"
    ".PropertyDTO\022+\n\006armies\030\006 \003(\0132\033.slg.proto"
    "col.ReportArmyDTO\"O\n\021ReportResourceDTO\022\r"
    "\n\005level\030\001 \002(\005\022\014\n\004type\030\002 \002(\005\022\013\n\003num\030\003 \002(\005"
    "\022\020\n\010soldiers\030\004 \002(\005\"\247\001\n\024ReportPVPResource"
    "DTO\022\r\n\005level\030\001 \002(\005\022\014\n\004type\030\002 \002(\005\022/\n\010atta"
    "cker\030\003 \002(\0132\035.slg.protocol.ReportPlayerDT"
    "O\022/\n\010defender\030\004 \002(\0132\035.slg.protocol.Repor"
    "tPlayerDTO\022\020\n\010winnerId\030\005 \002(\003\"K\n\030ReportRe"
    "sourcePillageDTO\022\014\n\004type\030\001 \002(\005\022\r\n\005count\030"
    "\002 \002(\005\022\022\n\nupperBound\030\003 \002(\005\"\300\001\n\020ReportPVPC"
    "ityDTO\022/\n\010attacker\030\001 \002(\0132\035.slg.protocol."
    "ReportPlayerDTO\022/\n\010defender\030\002 \002(\0132\035.slg."
    "protocol.ReportPlayerDTO\0228\n\010pillages\030\003 \003"
    "(\0132&.slg.protocol.ReportResourcePillageD"
    "TO\022\020\n\010winnerId\030\004 \002(\003\",\n\017ReportRewardDTO\022"
    "\n\n\002id\030\001 \002(\005\022\r\n\005count\030\002 \002(\005\"\232\001\n\023ReportPVE"
    "MonsterDTO\022\021\n\tmonsterId\030\001 \002(\005\022\013\n\003won\030\002 \002"
    "(\010\022\021\n\tfirstKill\030\003 \002(\010\022\020\n\010dispatch\030\004 \002(\005\022"
    "\016\n\006remain\030\005 \002(\005\022.\n\007rewards\030\006 \003(\0132\035.slg.p"
    "rotocol.ReportRewardDTO\"q\n\016TradeResultDT"
    "O\022\022\n\nplayerName\030\001 \002(\t\022*\n\007rewards\030\002 \003(\0132\031"
    ".slg.protocol.PropertyDTO\022\r\n\005envet\030\003 \002(\005"
    "\022\020\n\010traderId\030\004 \002(\005\"A\n\016ReportTradeDTO\022/\n\t"
    "tradeList\030\001 \003(\0132\034.slg.protocol.TradeResu"
    "ltDTO\"T\n\013ArmyDeadDTO\022\020\n\010armyType\030\001 \002(\005\022\021"
    "\n\tarmyLevel\030\002 \002(\005\022\017\n\007deadNum\030\003 \002(\005\022\017\n\007la"
    "stNum\030\004 \002(\005\"<\n\rReportDeadDTO\022+\n\010deadList"
    "\030\001 \003(\0132\031.slg.protocol.ArmyDeadDTO\"\374\002\n\tRe"
    "portDTO\022\020\n\010reportId\030\001 \002(\003\022&\n\004type\030\002 \002(\0162"
    "\030.slg.protocol.ReportType\022\014\n\004time\030\003 \002(\005\022"
    "1\n\010resource\030\n \001(\0132\037.slg.protocol.ReportR"
    "esourceDTO\0227\n\013resourcePVP\030\013 \001(\0132\".slg.pr"
    "otocol.ReportPVPResourceDTO\022/\n\007cityPVP\030\014"
    " \001(\0132\036.slg.protocol.ReportPVPCityDTO\0222\n\007"
    "monster\030\r \001(\0132!.slg.protocol.ReportPVEMo"
    "nsterDTO\022+\n\005trade\030\016 \001(\0132\034.slg.protocol.R"
    "eportTradeDTO\022)\n\004dead\030\017 \001(\0132\033.slg.protoc"
    "ol.ReportDeadDTO\";\n\017ReportTargetDTO\022\n\n\002i"
    "d\030\001 \002(\003\022\r\n\005level\030\002 \002(\005\022\r\n\005value\030\003 \001(\005\"=\n"
    "\017ReportResultDTO\022\016\n\006attack\030\001 \002(\010\022\013\n\003win\030"
    "\002 \002(\010\022\r\n\005first\030\003 \001(\010\"\335\001\n\020ReportProfileDT"
    "O\022\020\n\010reportId\030\001 \002(\003\022&\n\004type\030\002 \002(\0162\030.slg."
    "protocol.ReportType\022-\n\006target\030\003 \002(\0132\035.sl"
    "g.protocol.ReportTargetDTO\022-\n\006result\030\004 \001"
    "(\0132\035.slg.protocol.ReportResultDTO\022\014\n\004tim"
    "e\030\005 \002(\005\022\014\n\004read\030\006 \002(\010\022\025\n\rrewardDiamond\030\007"
    " \001(\005\"\'\n\023ReportDetailRequest\022\020\n\010reportId\030"
    "\001 \002(\003\"\?\n\024ReportDetailResponse\022\'\n\006report\030"
    "\001 \001(\0132\027.slg.protocol.ReportDTO\"+\n\027Report"
    "RewardTakeRequest\022\020\n\010reportId\030\001 \002(\003\",\n\030R"
    "eportRewardTakeResponse\022\020\n\010reportId\030\001 \002("
    "\003\"\'\n\023ReportDeleteRequest\022\020\n\010reportId\030\001 \002"
    "(\003\"(\n\024ReportDeleteResponse\022\020\n\010reportId\030\001"
    " \002(\003\"O\n\025ReportProfileListPush\0226\n\016reportP"
    "rofiles\030\001 \003(\0132\036.slg.protocol.ReportProfi"
    "leDTO\"v\n\022ReportSpyPlayerDTO\022\n\n\002id\030\001 \002(\003\022"
    "\014\n\004name\030\002 \002(\t\022\031\n\021allianceShortName\030\003 \002(\t"
    "\022+\n\010position\030\004 \002(\0132\031.slg.protocol.Positi"
    "onDTO\"L\n\024ReportSpyResourceDTO\022\014\n\004type\030\001 "
    "\002(\005\022\021\n\tremaining\030\002 \002(\005\022\023\n\013canBeRobbed\030\003 "
    "\002(\005\"i\n\020ReportSpyWallDTO\022\024\n\014currentValue\030"
    "\001 \002(\005\022\022\n\ntotalValue\030\002 \002(\005\022\020\n\010burnRate\030\003 "
    "\001(\005\022\031\n\021burnRemianingTime\030\004 \001(\005\"<\n\020Report"
    "SpyArmyDTO\022\014\n\004type\030\001 \002(\005\022\r\n\005level\030\002 \002(\005\022"
    "\013\n\003num\030\003 \002(\005\"s\n\017ReportSpyAidDTO\0220\n\006playe"
    "r\030\001 \002(\0132 .slg.protocol.ReportSpyPlayerDT"
    "O\022.\n\006armies\030\002 \003(\0132\036.slg.protocol.ReportS"
    "pyArmyDTO\"U\n\021ReportSpyTowerDTO\022\r\n\005level\030"
    "\001 \002(\005\022\013\n\003atk\030\002 \001(\005\022\022\n\ncurrentNum\030\003 \002(\005\022\020"
    "\n\010capacity\030\004 \002(\005\"\272\002\n\020ReportSpyCityDTO\022\033\n"
    "\023protectedPercentage\030\001 \001(\005\0225\n\tresources\030"
    "\002 \003(\0132\".slg.protocol.ReportSpyResourceDT"
    "O\022,\n\004wall\030\003 \001(\0132\036.slg.protocol.ReportSpy"
    "WallDTO\022\026\n\016totalArmyCount\030\004 \001(\005\022.\n\006armie"
    "s\030\006 \003(\0132\036.slg.protocol.ReportSpyArmyDTO\022"
    "/\n\006towers\030\007 \003(\0132\037.slg.protocol.ReportSpy"
    "TowerDTO\022+\n\004aids\030\010 \003(\0132\035.slg.protocol.Re"
    "portSpyAidDTO\">\n\037ReportSpyResourceGridPr"
    "ofileDTO\022\014\n\004type\030\001 \002(\005\022\r\n\005level\030\002 \002(\005\"\342\001"
    "\n\030ReportSpyResourceGridDTO\022>\n\007profile\030\001 "
    "\002(\0132-.slg.protocol.ReportSpyResourceGrid"
    "ProfileDTO\022+\n\010position\030\002 \002(\0132\031.slg.proto"
    "col.PositionDTO\022\021\n\tremaining\030\003 \002(\005\022\026\n\016to"
    "talArmyCount\030\004 \001(\005\022.\n\006armies\030\005 \003(\0132\036.slg"
    ".protocol.ReportSpyArmyDTO\"\301\001\n\014ReportSpy"
    "DTO\022\020\n\010reportId\030\001 \002(\003\022)\n\004type\030\002 \002(\0162\033.sl"
    "g.protocol.ReportSpyType\022\014\n\004time\030\003 \002(\005\022,"
    "\n\004city\030\004 \001(\0132\036.slg.protocol.ReportSpyCit"
    "yDTO\0228\n\010resource\030\005 \001(\0132&.slg.protocol.Re"
    "portSpyResourceGridDTO\"\250\002\n\023ReportSpyProf"
    "ileDTO\022\020\n\010reportId\030\001 \002(\003\022)\n\004type\030\002 \002(\0162\033"
    ".slg.protocol.ReportSpyType\0220\n\006target\030\003 "
    "\002(\0132 .slg.protocol.ReportSpyPlayerDTO\022-\n"
    "\006result\030\004 \002(\0162\035.slg.protocol.ReportSpyRe"
    "sult\022\014\n\004time\030\005 \002(\005\022\014\n\004read\030\006 \002(\010\022\017\n\007beSp"
    "ied\030\007 \002(\010\022F\n\017resourceProfile\030\n \001(\0132-.slg"
    ".protocol.ReportSpyResourceGridProfileDT"
    "O\"O\n\030ReportSpyProfileListPush\0223\n\010profile"
    "s\030\001 \003(\0132!.slg.protocol.ReportSpyProfileD"
    "TO\"*\n\026ReportSpyDetailRequest\022\020\n\010reportId"
    "\030\001 \002(\003\"E\n\027ReportSpyDetailResponse\022*\n\006rep"
    "ort\030\001 \002(\0132\032.slg.protocol.ReportSpyDTO\"(\n"
    "\024ReportSpyReadRequest\022\020\n\010reportId\030\001 \002(\003\""
    "*\n\026ReportSpyDeleteRequest\022\020\n\010reportId\030\001 "
    "\002(\003*\232\001\n\nReportType\022\023\n\017REPORT_RESOURCE\020\001\022"
    "\027\n\023REPORT_PVP_RESOURCE\020\002\022\023\n\017REPORT_PVP_C"
    "ITY\020\003\022\026\n\022REPORT_PVE_MONSTER\020\004\022\027\n\023REPORT_"
    "MARKET_TRADE\020\005\022\030\n\024REPORT_HOSPITAL_DEAD\020\006"
    "*R\n\017ReportCommandId\022\027\n\022REPORT_REWARD_TAK"
    "E\020\246\r\022\022\n\rREPORT_DELETE\020\247\r\022\022\n\rREPORT_DETAI"
    "L\020\251\r*.\n\014ReportPushId\022\036\n\030REPORT_PROFILE_L"
    "IST_PUSH\020\365\223\003*=\n\rReportSpyType\022\023\n\017REPORT_"
    "SPY_CITY\020\001\022\027\n\023REPORT_SPY_RESOURCE\020\002*X\n\017R"
    "eportSpyResult\022\026\n\022REPORT_SPY_SUCCESS\020\001\022\023"
    "\n\017REPORT_SPY_ANTI\020\002\022\030\n\024REPORT_SPY_NOT_FO"
    "UND\020\003*5\n\017ReportSpyPushId\022\"\n\034REPORT_SPY_P"
    "ROFILE_LIST_PUSH\020\376\223\003*Z\n\022ReportSpyCommand"
    "Id\022\026\n\021REPORT_SPY_DETAIL\020\256\r\022\024\n\017REPORT_SPY"
    "_READ\020\257\r\022\026\n\021REPORT_SPY_DELETE\020\260\rB+\n\034com."
    "bonusstudio.slg.protocolB\013ReportProto", 5117);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "report.proto", &protobuf_RegisterTypes);
  ReportArmyDTO::default_instance_ = new ReportArmyDTO();
  ReportPlayerDTO::default_instance_ = new ReportPlayerDTO();
  ReportResourceDTO::default_instance_ = new ReportResourceDTO();
  ReportPVPResourceDTO::default_instance_ = new ReportPVPResourceDTO();
  ReportResourcePillageDTO::default_instance_ = new ReportResourcePillageDTO();
  ReportPVPCityDTO::default_instance_ = new ReportPVPCityDTO();
  ReportRewardDTO::default_instance_ = new ReportRewardDTO();
  ReportPVEMonsterDTO::default_instance_ = new ReportPVEMonsterDTO();
  TradeResultDTO::default_instance_ = new TradeResultDTO();
  ReportTradeDTO::default_instance_ = new ReportTradeDTO();
  ArmyDeadDTO::default_instance_ = new ArmyDeadDTO();
  ReportDeadDTO::default_instance_ = new ReportDeadDTO();
  ReportDTO::default_instance_ = new ReportDTO();
  ReportTargetDTO::default_instance_ = new ReportTargetDTO();
  ReportResultDTO::default_instance_ = new ReportResultDTO();
  ReportProfileDTO::default_instance_ = new ReportProfileDTO();
  ReportDetailRequest::default_instance_ = new ReportDetailRequest();
  ReportDetailResponse::default_instance_ = new ReportDetailResponse();
  ReportRewardTakeRequest::default_instance_ = new ReportRewardTakeRequest();
  ReportRewardTakeResponse::default_instance_ = new ReportRewardTakeResponse();
  ReportDeleteRequest::default_instance_ = new ReportDeleteRequest();
  ReportDeleteResponse::default_instance_ = new ReportDeleteResponse();
  ReportProfileListPush::default_instance_ = new ReportProfileListPush();
  ReportSpyPlayerDTO::default_instance_ = new ReportSpyPlayerDTO();
  ReportSpyResourceDTO::default_instance_ = new ReportSpyResourceDTO();
  ReportSpyWallDTO::default_instance_ = new ReportSpyWallDTO();
  ReportSpyArmyDTO::default_instance_ = new ReportSpyArmyDTO();
  ReportSpyAidDTO::default_instance_ = new ReportSpyAidDTO();
  ReportSpyTowerDTO::default_instance_ = new ReportSpyTowerDTO();
  ReportSpyCityDTO::default_instance_ = new ReportSpyCityDTO();
  ReportSpyResourceGridProfileDTO::default_instance_ = new ReportSpyResourceGridProfileDTO();
  ReportSpyResourceGridDTO::default_instance_ = new ReportSpyResourceGridDTO();
  ReportSpyDTO::default_instance_ = new ReportSpyDTO();
  ReportSpyProfileDTO::default_instance_ = new ReportSpyProfileDTO();
  ReportSpyProfileListPush::default_instance_ = new ReportSpyProfileListPush();
  ReportSpyDetailRequest::default_instance_ = new ReportSpyDetailRequest();
  ReportSpyDetailResponse::default_instance_ = new ReportSpyDetailResponse();
  ReportSpyReadRequest::default_instance_ = new ReportSpyReadRequest();
  ReportSpyDeleteRequest::default_instance_ = new ReportSpyDeleteRequest();
  ReportArmyDTO::default_instance_->InitAsDefaultInstance();
  ReportPlayerDTO::default_instance_->InitAsDefaultInstance();
  ReportResourceDTO::default_instance_->InitAsDefaultInstance();
  ReportPVPResourceDTO::default_instance_->InitAsDefaultInstance();
  ReportResourcePillageDTO::default_instance_->InitAsDefaultInstance();
  ReportPVPCityDTO::default_instance_->InitAsDefaultInstance();
  ReportRewardDTO::default_instance_->InitAsDefaultInstance();
  ReportPVEMonsterDTO::default_instance_->InitAsDefaultInstance();
  TradeResultDTO::default_instance_->InitAsDefaultInstance();
  ReportTradeDTO::default_instance_->InitAsDefaultInstance();
  ArmyDeadDTO::default_instance_->InitAsDefaultInstance();
  ReportDeadDTO::default_instance_->InitAsDefaultInstance();
  ReportDTO::default_instance_->InitAsDefaultInstance();
  ReportTargetDTO::default_instance_->InitAsDefaultInstance();
  ReportResultDTO::default_instance_->InitAsDefaultInstance();
  ReportProfileDTO::default_instance_->InitAsDefaultInstance();
  ReportDetailRequest::default_instance_->InitAsDefaultInstance();
  ReportDetailResponse::default_instance_->InitAsDefaultInstance();
  ReportRewardTakeRequest::default_instance_->InitAsDefaultInstance();
  ReportRewardTakeResponse::default_instance_->InitAsDefaultInstance();
  ReportDeleteRequest::default_instance_->InitAsDefaultInstance();
  ReportDeleteResponse::default_instance_->InitAsDefaultInstance();
  ReportProfileListPush::default_instance_->InitAsDefaultInstance();
  ReportSpyPlayerDTO::default_instance_->InitAsDefaultInstance();
  ReportSpyResourceDTO::default_instance_->InitAsDefaultInstance();
  ReportSpyWallDTO::default_instance_->InitAsDefaultInstance();
  ReportSpyArmyDTO::default_instance_->InitAsDefaultInstance();
  ReportSpyAidDTO::default_instance_->InitAsDefaultInstance();
  ReportSpyTowerDTO::default_instance_->InitAsDefaultInstance();
  ReportSpyCityDTO::default_instance_->InitAsDefaultInstance();
  ReportSpyResourceGridProfileDTO::default_instance_->InitAsDefaultInstance();
  ReportSpyResourceGridDTO::default_instance_->InitAsDefaultInstance();
  ReportSpyDTO::default_instance_->InitAsDefaultInstance();
  ReportSpyProfileDTO::default_instance_->InitAsDefaultInstance();
  ReportSpyProfileListPush::default_instance_->InitAsDefaultInstance();
  ReportSpyDetailRequest::default_instance_->InitAsDefaultInstance();
  ReportSpyDetailResponse::default_instance_->InitAsDefaultInstance();
  ReportSpyReadRequest::default_instance_->InitAsDefaultInstance();
  ReportSpyDeleteRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_report_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_report_2eproto {
  StaticDescriptorInitializer_report_2eproto() {
    protobuf_AddDesc_report_2eproto();
  }
} static_descriptor_initializer_report_2eproto_;
const ::google::protobuf::EnumDescriptor* ReportType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportType_descriptor_;
}
bool ReportType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReportCommandId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportCommandId_descriptor_;
}
bool ReportCommandId_IsValid(int value) {
  switch(value) {
    case 1702:
    case 1703:
    case 1705:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReportPushId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportPushId_descriptor_;
}
bool ReportPushId_IsValid(int value) {
  switch(value) {
    case 51701:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReportSpyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportSpyType_descriptor_;
}
bool ReportSpyType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReportSpyResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportSpyResult_descriptor_;
}
bool ReportSpyResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReportSpyPushId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportSpyPushId_descriptor_;
}
bool ReportSpyPushId_IsValid(int value) {
  switch(value) {
    case 51710:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReportSpyCommandId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportSpyCommandId_descriptor_;
}
bool ReportSpyCommandId_IsValid(int value) {
  switch(value) {
    case 1710:
    case 1711:
    case 1712:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ReportArmyDTO::kArmyTypeFieldNumber;
const int ReportArmyDTO::kArmyLevelFieldNumber;
const int ReportArmyDTO::kDispatchFieldNumber;
const int ReportArmyDTO::kDeathFieldNumber;
const int ReportArmyDTO::kHurtFieldNumber;
const int ReportArmyDTO::kReviveFieldNumber;
#endif  // !_MSC_VER

ReportArmyDTO::ReportArmyDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportArmyDTO::InitAsDefaultInstance() {
}

ReportArmyDTO::ReportArmyDTO(const ReportArmyDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportArmyDTO::SharedCtor() {
  _cached_size_ = 0;
  armytype_ = 0;
  armylevel_ = 0;
  dispatch_ = 0;
  death_ = 0;
  hurt_ = 0;
  revive_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportArmyDTO::~ReportArmyDTO() {
  SharedDtor();
}

void ReportArmyDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportArmyDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportArmyDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportArmyDTO_descriptor_;
}

const ReportArmyDTO& ReportArmyDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

ReportArmyDTO* ReportArmyDTO::default_instance_ = NULL;

ReportArmyDTO* ReportArmyDTO::New() const {
  return new ReportArmyDTO;
}

void ReportArmyDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    armytype_ = 0;
    armylevel_ = 0;
    dispatch_ = 0;
    death_ = 0;
    hurt_ = 0;
    revive_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportArmyDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 armyType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armytype_)));
          set_has_armytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_armyLevel;
        break;
      }

      // required int32 armyLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_armyLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armylevel_)));
          set_has_armylevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dispatch;
        break;
      }

      // required int32 dispatch = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dispatch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dispatch_)));
          set_has_dispatch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_death;
        break;
      }

      // required int32 death = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_death:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &death_)));
          set_has_death();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hurt;
        break;
      }

      // required int32 hurt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hurt_)));
          set_has_hurt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_revive;
        break;
      }

      // required int32 revive = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_revive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &revive_)));
          set_has_revive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportArmyDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 armyType = 1;
  if (has_armytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->armytype(), output);
  }

  // required int32 armyLevel = 2;
  if (has_armylevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->armylevel(), output);
  }

  // required int32 dispatch = 3;
  if (has_dispatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dispatch(), output);
  }

  // required int32 death = 4;
  if (has_death()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->death(), output);
  }

  // required int32 hurt = 5;
  if (has_hurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hurt(), output);
  }

  // required int32 revive = 6;
  if (has_revive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->revive(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportArmyDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 armyType = 1;
  if (has_armytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->armytype(), target);
  }

  // required int32 armyLevel = 2;
  if (has_armylevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->armylevel(), target);
  }

  // required int32 dispatch = 3;
  if (has_dispatch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dispatch(), target);
  }

  // required int32 death = 4;
  if (has_death()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->death(), target);
  }

  // required int32 hurt = 5;
  if (has_hurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hurt(), target);
  }

  // required int32 revive = 6;
  if (has_revive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->revive(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportArmyDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 armyType = 1;
    if (has_armytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armytype());
    }

    // required int32 armyLevel = 2;
    if (has_armylevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armylevel());
    }

    // required int32 dispatch = 3;
    if (has_dispatch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dispatch());
    }

    // required int32 death = 4;
    if (has_death()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->death());
    }

    // required int32 hurt = 5;
    if (has_hurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hurt());
    }

    // required int32 revive = 6;
    if (has_revive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->revive());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportArmyDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportArmyDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportArmyDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportArmyDTO::MergeFrom(const ReportArmyDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_armytype()) {
      set_armytype(from.armytype());
    }
    if (from.has_armylevel()) {
      set_armylevel(from.armylevel());
    }
    if (from.has_dispatch()) {
      set_dispatch(from.dispatch());
    }
    if (from.has_death()) {
      set_death(from.death());
    }
    if (from.has_hurt()) {
      set_hurt(from.hurt());
    }
    if (from.has_revive()) {
      set_revive(from.revive());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportArmyDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportArmyDTO::CopyFrom(const ReportArmyDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportArmyDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void ReportArmyDTO::Swap(ReportArmyDTO* other) {
  if (other != this) {
    std::swap(armytype_, other->armytype_);
    std::swap(armylevel_, other->armylevel_);
    std::swap(dispatch_, other->dispatch_);
    std::swap(death_, other->death_);
    std::swap(hurt_, other->hurt_);
    std::swap(revive_, other->revive_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportArmyDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportArmyDTO_descriptor_;
  metadata.reflection = ReportArmyDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportPlayerDTO::kPlayerIdFieldNumber;
const int ReportPlayerDTO::kPlayerPosFieldNumber;
const int ReportPlayerDTO::kNickNameFieldNumber;
const int ReportPlayerDTO::kBattlePowerLoseFieldNumber;
const int ReportPlayerDTO::kAdditionsFieldNumber;
const int ReportPlayerDTO::kArmiesFieldNumber;
#endif  // !_MSC_VER

ReportPlayerDTO::ReportPlayerDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportPlayerDTO::InitAsDefaultInstance() {
  playerpos_ = const_cast< ::slg::protocol::PositionDTO*>(&::slg::protocol::PositionDTO::default_instance());
}

ReportPlayerDTO::ReportPlayerDTO(const ReportPlayerDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportPlayerDTO::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  playerpos_ = NULL;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  battlepowerlose_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportPlayerDTO::~ReportPlayerDTO() {
  SharedDtor();
}

void ReportPlayerDTO::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
    delete playerpos_;
  }
}

void ReportPlayerDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportPlayerDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportPlayerDTO_descriptor_;
}

const ReportPlayerDTO& ReportPlayerDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

ReportPlayerDTO* ReportPlayerDTO::default_instance_ = NULL;

ReportPlayerDTO* ReportPlayerDTO::New() const {
  return new ReportPlayerDTO;
}

void ReportPlayerDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
    if (has_playerpos()) {
      if (playerpos_ != NULL) playerpos_->::slg::protocol::PositionDTO::Clear();
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    battlepowerlose_ = 0;
  }
  additions_.Clear();
  armies_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportPlayerDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerPos;
        break;
      }

      // required .slg.protocol.PositionDTO playerPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nickName;
        break;
      }

      // required string nickName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_battlePowerLose;
        break;
      }

      // required int32 battlePowerLose = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePowerLose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battlepowerlose_)));
          set_has_battlepowerlose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_additions;
        break;
      }

      // repeated .slg.protocol.PropertyDTO additions = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_additions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_additions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_additions;
        if (input->ExpectTag(50)) goto parse_armies;
        break;
      }

      // repeated .slg.protocol.ReportArmyDTO armies = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_armies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_armies()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_armies;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportPlayerDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // required .slg.protocol.PositionDTO playerPos = 2;
  if (has_playerpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->playerpos(), output);
  }

  // required string nickName = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nickname(), output);
  }

  // required int32 battlePowerLose = 4;
  if (has_battlepowerlose()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->battlepowerlose(), output);
  }

  // repeated .slg.protocol.PropertyDTO additions = 5;
  for (int i = 0; i < this->additions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->additions(i), output);
  }

  // repeated .slg.protocol.ReportArmyDTO armies = 6;
  for (int i = 0; i < this->armies_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->armies(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportPlayerDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // required .slg.protocol.PositionDTO playerPos = 2;
  if (has_playerpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->playerpos(), target);
  }

  // required string nickName = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // required int32 battlePowerLose = 4;
  if (has_battlepowerlose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->battlepowerlose(), target);
  }

  // repeated .slg.protocol.PropertyDTO additions = 5;
  for (int i = 0; i < this->additions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->additions(i), target);
  }

  // repeated .slg.protocol.ReportArmyDTO armies = 6;
  for (int i = 0; i < this->armies_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->armies(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportPlayerDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // required .slg.protocol.PositionDTO playerPos = 2;
    if (has_playerpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerpos());
    }

    // required string nickName = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // required int32 battlePowerLose = 4;
    if (has_battlepowerlose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battlepowerlose());
    }

  }
  // repeated .slg.protocol.PropertyDTO additions = 5;
  total_size += 1 * this->additions_size();
  for (int i = 0; i < this->additions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->additions(i));
  }

  // repeated .slg.protocol.ReportArmyDTO armies = 6;
  total_size += 1 * this->armies_size();
  for (int i = 0; i < this->armies_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->armies(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportPlayerDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportPlayerDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportPlayerDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportPlayerDTO::MergeFrom(const ReportPlayerDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  additions_.MergeFrom(from.additions_);
  armies_.MergeFrom(from.armies_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_playerpos()) {
      mutable_playerpos()->::slg::protocol::PositionDTO::MergeFrom(from.playerpos());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_battlepowerlose()) {
      set_battlepowerlose(from.battlepowerlose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportPlayerDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportPlayerDTO::CopyFrom(const ReportPlayerDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportPlayerDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_playerpos()) {
    if (!this->playerpos().IsInitialized()) return false;
  }
  for (int i = 0; i < additions_size(); i++) {
    if (!this->additions(i).IsInitialized()) return false;
  }
  for (int i = 0; i < armies_size(); i++) {
    if (!this->armies(i).IsInitialized()) return false;
  }
  return true;
}

void ReportPlayerDTO::Swap(ReportPlayerDTO* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(playerpos_, other->playerpos_);
    std::swap(nickname_, other->nickname_);
    std::swap(battlepowerlose_, other->battlepowerlose_);
    additions_.Swap(&other->additions_);
    armies_.Swap(&other->armies_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportPlayerDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportPlayerDTO_descriptor_;
  metadata.reflection = ReportPlayerDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportResourceDTO::kLevelFieldNumber;
const int ReportResourceDTO::kTypeFieldNumber;
const int ReportResourceDTO::kNumFieldNumber;
const int ReportResourceDTO::kSoldiersFieldNumber;
#endif  // !_MSC_VER

ReportResourceDTO::ReportResourceDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportResourceDTO::InitAsDefaultInstance() {
}

ReportResourceDTO::ReportResourceDTO(const ReportResourceDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportResourceDTO::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  type_ = 0;
  num_ = 0;
  soldiers_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportResourceDTO::~ReportResourceDTO() {
  SharedDtor();
}

void ReportResourceDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportResourceDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportResourceDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportResourceDTO_descriptor_;
}

const ReportResourceDTO& ReportResourceDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

ReportResourceDTO* ReportResourceDTO::default_instance_ = NULL;

ReportResourceDTO* ReportResourceDTO::New() const {
  return new ReportResourceDTO;
}

void ReportResourceDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    type_ = 0;
    num_ = 0;
    soldiers_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportResourceDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // required int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_soldiers;
        break;
      }

      // required int32 soldiers = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soldiers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soldiers_)));
          set_has_soldiers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportResourceDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // required int32 soldiers = 4;
  if (has_soldiers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->soldiers(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportResourceDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // required int32 soldiers = 4;
  if (has_soldiers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->soldiers(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportResourceDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // required int32 soldiers = 4;
    if (has_soldiers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soldiers());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportResourceDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportResourceDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportResourceDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportResourceDTO::MergeFrom(const ReportResourceDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_soldiers()) {
      set_soldiers(from.soldiers());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportResourceDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportResourceDTO::CopyFrom(const ReportResourceDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportResourceDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ReportResourceDTO::Swap(ReportResourceDTO* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(type_, other->type_);
    std::swap(num_, other->num_);
    std::swap(soldiers_, other->soldiers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportResourceDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportResourceDTO_descriptor_;
  metadata.reflection = ReportResourceDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportPVPResourceDTO::kLevelFieldNumber;
const int ReportPVPResourceDTO::kTypeFieldNumber;
const int ReportPVPResourceDTO::kAttackerFieldNumber;
const int ReportPVPResourceDTO::kDefenderFieldNumber;
const int ReportPVPResourceDTO::kWinnerIdFieldNumber;
#endif  // !_MSC_VER

ReportPVPResourceDTO::ReportPVPResourceDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportPVPResourceDTO::InitAsDefaultInstance() {
  attacker_ = const_cast< ::slg::protocol::ReportPlayerDTO*>(&::slg::protocol::ReportPlayerDTO::default_instance());
  defender_ = const_cast< ::slg::protocol::ReportPlayerDTO*>(&::slg::protocol::ReportPlayerDTO::default_instance());
}

ReportPVPResourceDTO::ReportPVPResourceDTO(const ReportPVPResourceDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportPVPResourceDTO::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  type_ = 0;
  attacker_ = NULL;
  defender_ = NULL;
  winnerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportPVPResourceDTO::~ReportPVPResourceDTO() {
  SharedDtor();
}

void ReportPVPResourceDTO::SharedDtor() {
  if (this != default_instance_) {
    delete attacker_;
    delete defender_;
  }
}

void ReportPVPResourceDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportPVPResourceDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportPVPResourceDTO_descriptor_;
}

const ReportPVPResourceDTO& ReportPVPResourceDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

ReportPVPResourceDTO* ReportPVPResourceDTO::default_instance_ = NULL;

ReportPVPResourceDTO* ReportPVPResourceDTO::New() const {
  return new ReportPVPResourceDTO;
}

void ReportPVPResourceDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    type_ = 0;
    if (has_attacker()) {
      if (attacker_ != NULL) attacker_->::slg::protocol::ReportPlayerDTO::Clear();
    }
    if (has_defender()) {
      if (defender_ != NULL) defender_->::slg::protocol::ReportPlayerDTO::Clear();
    }
    winnerid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportPVPResourceDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attacker;
        break;
      }

      // required .slg.protocol.ReportPlayerDTO attacker = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attacker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attacker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_defender;
        break;
      }

      // required .slg.protocol.ReportPlayerDTO defender = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defender()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_winnerId;
        break;
      }

      // required int64 winnerId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winnerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &winnerid_)));
          set_has_winnerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportPVPResourceDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required .slg.protocol.ReportPlayerDTO attacker = 3;
  if (has_attacker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attacker(), output);
  }

  // required .slg.protocol.ReportPlayerDTO defender = 4;
  if (has_defender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->defender(), output);
  }

  // required int64 winnerId = 5;
  if (has_winnerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->winnerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportPVPResourceDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required .slg.protocol.ReportPlayerDTO attacker = 3;
  if (has_attacker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attacker(), target);
  }

  // required .slg.protocol.ReportPlayerDTO defender = 4;
  if (has_defender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->defender(), target);
  }

  // required int64 winnerId = 5;
  if (has_winnerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->winnerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportPVPResourceDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required .slg.protocol.ReportPlayerDTO attacker = 3;
    if (has_attacker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attacker());
    }

    // required .slg.protocol.ReportPlayerDTO defender = 4;
    if (has_defender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defender());
    }

    // required int64 winnerId = 5;
    if (has_winnerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->winnerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportPVPResourceDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportPVPResourceDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportPVPResourceDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportPVPResourceDTO::MergeFrom(const ReportPVPResourceDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_attacker()) {
      mutable_attacker()->::slg::protocol::ReportPlayerDTO::MergeFrom(from.attacker());
    }
    if (from.has_defender()) {
      mutable_defender()->::slg::protocol::ReportPlayerDTO::MergeFrom(from.defender());
    }
    if (from.has_winnerid()) {
      set_winnerid(from.winnerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportPVPResourceDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportPVPResourceDTO::CopyFrom(const ReportPVPResourceDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportPVPResourceDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_attacker()) {
    if (!this->attacker().IsInitialized()) return false;
  }
  if (has_defender()) {
    if (!this->defender().IsInitialized()) return false;
  }
  return true;
}

void ReportPVPResourceDTO::Swap(ReportPVPResourceDTO* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(type_, other->type_);
    std::swap(attacker_, other->attacker_);
    std::swap(defender_, other->defender_);
    std::swap(winnerid_, other->winnerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportPVPResourceDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportPVPResourceDTO_descriptor_;
  metadata.reflection = ReportPVPResourceDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportResourcePillageDTO::kTypeFieldNumber;
const int ReportResourcePillageDTO::kCountFieldNumber;
const int ReportResourcePillageDTO::kUpperBoundFieldNumber;
#endif  // !_MSC_VER

ReportResourcePillageDTO::ReportResourcePillageDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportResourcePillageDTO::InitAsDefaultInstance() {
}

ReportResourcePillageDTO::ReportResourcePillageDTO(const ReportResourcePillageDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportResourcePillageDTO::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  count_ = 0;
  upperbound_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportResourcePillageDTO::~ReportResourcePillageDTO() {
  SharedDtor();
}

void ReportResourcePillageDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportResourcePillageDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportResourcePillageDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportResourcePillageDTO_descriptor_;
}

const ReportResourcePillageDTO& ReportResourcePillageDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

ReportResourcePillageDTO* ReportResourcePillageDTO::default_instance_ = NULL;

ReportResourcePillageDTO* ReportResourcePillageDTO::New() const {
  return new ReportResourcePillageDTO;
}

void ReportResourcePillageDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    count_ = 0;
    upperbound_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportResourcePillageDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_upperBound;
        break;
      }

      // required int32 upperBound = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upperBound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upperbound_)));
          set_has_upperbound();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportResourcePillageDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // required int32 upperBound = 3;
  if (has_upperbound()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->upperbound(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportResourcePillageDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // required int32 upperBound = 3;
  if (has_upperbound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->upperbound(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportResourcePillageDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // required int32 upperBound = 3;
    if (has_upperbound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upperbound());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportResourcePillageDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportResourcePillageDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportResourcePillageDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportResourcePillageDTO::MergeFrom(const ReportResourcePillageDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_upperbound()) {
      set_upperbound(from.upperbound());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportResourcePillageDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportResourcePillageDTO::CopyFrom(const ReportResourcePillageDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportResourcePillageDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ReportResourcePillageDTO::Swap(ReportResourcePillageDTO* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(count_, other->count_);
    std::swap(upperbound_, other->upperbound_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportResourcePillageDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportResourcePillageDTO_descriptor_;
  metadata.reflection = ReportResourcePillageDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportPVPCityDTO::kAttackerFieldNumber;
const int ReportPVPCityDTO::kDefenderFieldNumber;
const int ReportPVPCityDTO::kPillagesFieldNumber;
const int ReportPVPCityDTO::kWinnerIdFieldNumber;
#endif  // !_MSC_VER

ReportPVPCityDTO::ReportPVPCityDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportPVPCityDTO::InitAsDefaultInstance() {
  attacker_ = const_cast< ::slg::protocol::ReportPlayerDTO*>(&::slg::protocol::ReportPlayerDTO::default_instance());
  defender_ = const_cast< ::slg::protocol::ReportPlayerDTO*>(&::slg::protocol::ReportPlayerDTO::default_instance());
}

ReportPVPCityDTO::ReportPVPCityDTO(const ReportPVPCityDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportPVPCityDTO::SharedCtor() {
  _cached_size_ = 0;
  attacker_ = NULL;
  defender_ = NULL;
  winnerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportPVPCityDTO::~ReportPVPCityDTO() {
  SharedDtor();
}

void ReportPVPCityDTO::SharedDtor() {
  if (this != default_instance_) {
    delete attacker_;
    delete defender_;
  }
}

void ReportPVPCityDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportPVPCityDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportPVPCityDTO_descriptor_;
}

const ReportPVPCityDTO& ReportPVPCityDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

ReportPVPCityDTO* ReportPVPCityDTO::default_instance_ = NULL;

ReportPVPCityDTO* ReportPVPCityDTO::New() const {
  return new ReportPVPCityDTO;
}

void ReportPVPCityDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_attacker()) {
      if (attacker_ != NULL) attacker_->::slg::protocol::ReportPlayerDTO::Clear();
    }
    if (has_defender()) {
      if (defender_ != NULL) defender_->::slg::protocol::ReportPlayerDTO::Clear();
    }
    winnerid_ = GOOGLE_LONGLONG(0);
  }
  pillages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportPVPCityDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .slg.protocol.ReportPlayerDTO attacker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attacker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_defender;
        break;
      }

      // required .slg.protocol.ReportPlayerDTO defender = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defender()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pillages;
        break;
      }

      // repeated .slg.protocol.ReportResourcePillageDTO pillages = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pillages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pillages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pillages;
        if (input->ExpectTag(32)) goto parse_winnerId;
        break;
      }

      // required int64 winnerId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winnerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &winnerid_)));
          set_has_winnerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportPVPCityDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .slg.protocol.ReportPlayerDTO attacker = 1;
  if (has_attacker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attacker(), output);
  }

  // required .slg.protocol.ReportPlayerDTO defender = 2;
  if (has_defender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->defender(), output);
  }

  // repeated .slg.protocol.ReportResourcePillageDTO pillages = 3;
  for (int i = 0; i < this->pillages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pillages(i), output);
  }

  // required int64 winnerId = 4;
  if (has_winnerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->winnerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportPVPCityDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .slg.protocol.ReportPlayerDTO attacker = 1;
  if (has_attacker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attacker(), target);
  }

  // required .slg.protocol.ReportPlayerDTO defender = 2;
  if (has_defender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->defender(), target);
  }

  // repeated .slg.protocol.ReportResourcePillageDTO pillages = 3;
  for (int i = 0; i < this->pillages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pillages(i), target);
  }

  // required int64 winnerId = 4;
  if (has_winnerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->winnerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportPVPCityDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .slg.protocol.ReportPlayerDTO attacker = 1;
    if (has_attacker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attacker());
    }

    // required .slg.protocol.ReportPlayerDTO defender = 2;
    if (has_defender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defender());
    }

    // required int64 winnerId = 4;
    if (has_winnerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->winnerid());
    }

  }
  // repeated .slg.protocol.ReportResourcePillageDTO pillages = 3;
  total_size += 1 * this->pillages_size();
  for (int i = 0; i < this->pillages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pillages(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportPVPCityDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportPVPCityDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportPVPCityDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportPVPCityDTO::MergeFrom(const ReportPVPCityDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  pillages_.MergeFrom(from.pillages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attacker()) {
      mutable_attacker()->::slg::protocol::ReportPlayerDTO::MergeFrom(from.attacker());
    }
    if (from.has_defender()) {
      mutable_defender()->::slg::protocol::ReportPlayerDTO::MergeFrom(from.defender());
    }
    if (from.has_winnerid()) {
      set_winnerid(from.winnerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportPVPCityDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportPVPCityDTO::CopyFrom(const ReportPVPCityDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportPVPCityDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (has_attacker()) {
    if (!this->attacker().IsInitialized()) return false;
  }
  if (has_defender()) {
    if (!this->defender().IsInitialized()) return false;
  }
  for (int i = 0; i < pillages_size(); i++) {
    if (!this->pillages(i).IsInitialized()) return false;
  }
  return true;
}

void ReportPVPCityDTO::Swap(ReportPVPCityDTO* other) {
  if (other != this) {
    std::swap(attacker_, other->attacker_);
    std::swap(defender_, other->defender_);
    pillages_.Swap(&other->pillages_);
    std::swap(winnerid_, other->winnerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportPVPCityDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportPVPCityDTO_descriptor_;
  metadata.reflection = ReportPVPCityDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportRewardDTO::kIdFieldNumber;
const int ReportRewardDTO::kCountFieldNumber;
#endif  // !_MSC_VER

ReportRewardDTO::ReportRewardDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportRewardDTO::InitAsDefaultInstance() {
}

ReportRewardDTO::ReportRewardDTO(const ReportRewardDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportRewardDTO::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportRewardDTO::~ReportRewardDTO() {
  SharedDtor();
}

void ReportRewardDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportRewardDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportRewardDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportRewardDTO_descriptor_;
}

const ReportRewardDTO& ReportRewardDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

ReportRewardDTO* ReportRewardDTO::default_instance_ = NULL;

ReportRewardDTO* ReportRewardDTO::New() const {
  return new ReportRewardDTO;
}

void ReportRewardDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportRewardDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportRewardDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportRewardDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportRewardDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportRewardDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportRewardDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportRewardDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportRewardDTO::MergeFrom(const ReportRewardDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportRewardDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportRewardDTO::CopyFrom(const ReportRewardDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportRewardDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReportRewardDTO::Swap(ReportRewardDTO* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportRewardDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportRewardDTO_descriptor_;
  metadata.reflection = ReportRewardDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportPVEMonsterDTO::kMonsterIdFieldNumber;
const int ReportPVEMonsterDTO::kWonFieldNumber;
const int ReportPVEMonsterDTO::kFirstKillFieldNumber;
const int ReportPVEMonsterDTO::kDispatchFieldNumber;
const int ReportPVEMonsterDTO::kRemainFieldNumber;
const int ReportPVEMonsterDTO::kRewardsFieldNumber;
#endif  // !_MSC_VER

ReportPVEMonsterDTO::ReportPVEMonsterDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportPVEMonsterDTO::InitAsDefaultInstance() {
}

ReportPVEMonsterDTO::ReportPVEMonsterDTO(const ReportPVEMonsterDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportPVEMonsterDTO::SharedCtor() {
  _cached_size_ = 0;
  monsterid_ = 0;
  won_ = false;
  firstkill_ = false;
  dispatch_ = 0;
  remain_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportPVEMonsterDTO::~ReportPVEMonsterDTO() {
  SharedDtor();
}

void ReportPVEMonsterDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportPVEMonsterDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportPVEMonsterDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportPVEMonsterDTO_descriptor_;
}

const ReportPVEMonsterDTO& ReportPVEMonsterDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

ReportPVEMonsterDTO* ReportPVEMonsterDTO::default_instance_ = NULL;

ReportPVEMonsterDTO* ReportPVEMonsterDTO::New() const {
  return new ReportPVEMonsterDTO;
}

void ReportPVEMonsterDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    monsterid_ = 0;
    won_ = false;
    firstkill_ = false;
    dispatch_ = 0;
    remain_ = 0;
  }
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportPVEMonsterDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 monsterId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_won;
        break;
      }

      // required bool won = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_won:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &won_)));
          set_has_won();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_firstKill;
        break;
      }

      // required bool firstKill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_firstKill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &firstkill_)));
          set_has_firstkill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dispatch;
        break;
      }

      // required int32 dispatch = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dispatch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dispatch_)));
          set_has_dispatch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_remain;
        break;
      }

      // required int32 remain = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_)));
          set_has_remain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_rewards;
        break;
      }

      // repeated .slg.protocol.ReportRewardDTO rewards = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_rewards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportPVEMonsterDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 monsterId = 1;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->monsterid(), output);
  }

  // required bool won = 2;
  if (has_won()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->won(), output);
  }

  // required bool firstKill = 3;
  if (has_firstkill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->firstkill(), output);
  }

  // required int32 dispatch = 4;
  if (has_dispatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dispatch(), output);
  }

  // required int32 remain = 5;
  if (has_remain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->remain(), output);
  }

  // repeated .slg.protocol.ReportRewardDTO rewards = 6;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportPVEMonsterDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 monsterId = 1;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->monsterid(), target);
  }

  // required bool won = 2;
  if (has_won()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->won(), target);
  }

  // required bool firstKill = 3;
  if (has_firstkill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->firstkill(), target);
  }

  // required int32 dispatch = 4;
  if (has_dispatch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dispatch(), target);
  }

  // required int32 remain = 5;
  if (has_remain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->remain(), target);
  }

  // repeated .slg.protocol.ReportRewardDTO rewards = 6;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportPVEMonsterDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 monsterId = 1;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monsterid());
    }

    // required bool won = 2;
    if (has_won()) {
      total_size += 1 + 1;
    }

    // required bool firstKill = 3;
    if (has_firstkill()) {
      total_size += 1 + 1;
    }

    // required int32 dispatch = 4;
    if (has_dispatch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dispatch());
    }

    // required int32 remain = 5;
    if (has_remain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain());
    }

  }
  // repeated .slg.protocol.ReportRewardDTO rewards = 6;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportPVEMonsterDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportPVEMonsterDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportPVEMonsterDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportPVEMonsterDTO::MergeFrom(const ReportPVEMonsterDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_won()) {
      set_won(from.won());
    }
    if (from.has_firstkill()) {
      set_firstkill(from.firstkill());
    }
    if (from.has_dispatch()) {
      set_dispatch(from.dispatch());
    }
    if (from.has_remain()) {
      set_remain(from.remain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportPVEMonsterDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportPVEMonsterDTO::CopyFrom(const ReportPVEMonsterDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportPVEMonsterDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  for (int i = 0; i < rewards_size(); i++) {
    if (!this->rewards(i).IsInitialized()) return false;
  }
  return true;
}

void ReportPVEMonsterDTO::Swap(ReportPVEMonsterDTO* other) {
  if (other != this) {
    std::swap(monsterid_, other->monsterid_);
    std::swap(won_, other->won_);
    std::swap(firstkill_, other->firstkill_);
    std::swap(dispatch_, other->dispatch_);
    std::swap(remain_, other->remain_);
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportPVEMonsterDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportPVEMonsterDTO_descriptor_;
  metadata.reflection = ReportPVEMonsterDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TradeResultDTO::kPlayerNameFieldNumber;
const int TradeResultDTO::kRewardsFieldNumber;
const int TradeResultDTO::kEnvetFieldNumber;
const int TradeResultDTO::kTraderIdFieldNumber;
#endif  // !_MSC_VER

TradeResultDTO::TradeResultDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TradeResultDTO::InitAsDefaultInstance() {
}

TradeResultDTO::TradeResultDTO(const TradeResultDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TradeResultDTO::SharedCtor() {
  _cached_size_ = 0;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  envet_ = 0;
  traderid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TradeResultDTO::~TradeResultDTO() {
  SharedDtor();
}

void TradeResultDTO::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void TradeResultDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeResultDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradeResultDTO_descriptor_;
}

const TradeResultDTO& TradeResultDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

TradeResultDTO* TradeResultDTO::default_instance_ = NULL;

TradeResultDTO* TradeResultDTO::New() const {
  return new TradeResultDTO;
}

void TradeResultDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    envet_ = 0;
    traderid_ = 0;
  }
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TradeResultDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playerName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rewards;
        break;
      }

      // repeated .slg.protocol.PropertyDTO rewards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rewards;
        if (input->ExpectTag(24)) goto parse_envet;
        break;
      }

      // required int32 envet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_envet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &envet_)));
          set_has_envet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_traderId;
        break;
      }

      // required int32 traderId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_traderId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &traderid_)));
          set_has_traderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TradeResultDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string playerName = 1;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playername(), output);
  }

  // repeated .slg.protocol.PropertyDTO rewards = 2;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewards(i), output);
  }

  // required int32 envet = 3;
  if (has_envet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->envet(), output);
  }

  // required int32 traderId = 4;
  if (has_traderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->traderid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TradeResultDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string playerName = 1;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playername(), target);
  }

  // repeated .slg.protocol.PropertyDTO rewards = 2;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewards(i), target);
  }

  // required int32 envet = 3;
  if (has_envet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->envet(), target);
  }

  // required int32 traderId = 4;
  if (has_traderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->traderid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TradeResultDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string playerName = 1;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // required int32 envet = 3;
    if (has_envet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->envet());
    }

    // required int32 traderId = 4;
    if (has_traderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->traderid());
    }

  }
  // repeated .slg.protocol.PropertyDTO rewards = 2;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeResultDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TradeResultDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TradeResultDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TradeResultDTO::MergeFrom(const TradeResultDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_envet()) {
      set_envet(from.envet());
    }
    if (from.has_traderid()) {
      set_traderid(from.traderid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TradeResultDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeResultDTO::CopyFrom(const TradeResultDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeResultDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  for (int i = 0; i < rewards_size(); i++) {
    if (!this->rewards(i).IsInitialized()) return false;
  }
  return true;
}

void TradeResultDTO::Swap(TradeResultDTO* other) {
  if (other != this) {
    std::swap(playername_, other->playername_);
    rewards_.Swap(&other->rewards_);
    std::swap(envet_, other->envet_);
    std::swap(traderid_, other->traderid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TradeResultDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TradeResultDTO_descriptor_;
  metadata.reflection = TradeResultDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportTradeDTO::kTradeListFieldNumber;
#endif  // !_MSC_VER

ReportTradeDTO::ReportTradeDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportTradeDTO::InitAsDefaultInstance() {
}

ReportTradeDTO::ReportTradeDTO(const ReportTradeDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportTradeDTO::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportTradeDTO::~ReportTradeDTO() {
  SharedDtor();
}

void ReportTradeDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportTradeDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportTradeDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportTradeDTO_descriptor_;
}

const ReportTradeDTO& ReportTradeDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

ReportTradeDTO* ReportTradeDTO::default_instance_ = NULL;

ReportTradeDTO* ReportTradeDTO::New() const {
  return new ReportTradeDTO;
}

void ReportTradeDTO::Clear() {
  tradelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportTradeDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.TradeResultDTO tradeList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tradeList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tradelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tradeList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportTradeDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.TradeResultDTO tradeList = 1;
  for (int i = 0; i < this->tradelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tradelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportTradeDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.TradeResultDTO tradeList = 1;
  for (int i = 0; i < this->tradelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tradelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportTradeDTO::ByteSize() const {
  int total_size = 0;

  // repeated .slg.protocol.TradeResultDTO tradeList = 1;
  total_size += 1 * this->tradelist_size();
  for (int i = 0; i < this->tradelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tradelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportTradeDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportTradeDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportTradeDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportTradeDTO::MergeFrom(const ReportTradeDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  tradelist_.MergeFrom(from.tradelist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportTradeDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportTradeDTO::CopyFrom(const ReportTradeDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportTradeDTO::IsInitialized() const {

  for (int i = 0; i < tradelist_size(); i++) {
    if (!this->tradelist(i).IsInitialized()) return false;
  }
  return true;
}

void ReportTradeDTO::Swap(ReportTradeDTO* other) {
  if (other != this) {
    tradelist_.Swap(&other->tradelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportTradeDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportTradeDTO_descriptor_;
  metadata.reflection = ReportTradeDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArmyDeadDTO::kArmyTypeFieldNumber;
const int ArmyDeadDTO::kArmyLevelFieldNumber;
const int ArmyDeadDTO::kDeadNumFieldNumber;
const int ArmyDeadDTO::kLastNumFieldNumber;
#endif  // !_MSC_VER

ArmyDeadDTO::ArmyDeadDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArmyDeadDTO::InitAsDefaultInstance() {
}

ArmyDeadDTO::ArmyDeadDTO(const ArmyDeadDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArmyDeadDTO::SharedCtor() {
  _cached_size_ = 0;
  armytype_ = 0;
  armylevel_ = 0;
  deadnum_ = 0;
  lastnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArmyDeadDTO::~ArmyDeadDTO() {
  SharedDtor();
}

void ArmyDeadDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArmyDeadDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArmyDeadDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArmyDeadDTO_descriptor_;
}

const ArmyDeadDTO& ArmyDeadDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

ArmyDeadDTO* ArmyDeadDTO::default_instance_ = NULL;

ArmyDeadDTO* ArmyDeadDTO::New() const {
  return new ArmyDeadDTO;
}

void ArmyDeadDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    armytype_ = 0;
    armylevel_ = 0;
    deadnum_ = 0;
    lastnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArmyDeadDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 armyType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armytype_)));
          set_has_armytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_armyLevel;
        break;
      }

      // required int32 armyLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_armyLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armylevel_)));
          set_has_armylevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_deadNum;
        break;
      }

      // required int32 deadNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deadNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deadnum_)));
          set_has_deadnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lastNum;
        break;
      }

      // required int32 lastNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastnum_)));
          set_has_lastnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArmyDeadDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 armyType = 1;
  if (has_armytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->armytype(), output);
  }

  // required int32 armyLevel = 2;
  if (has_armylevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->armylevel(), output);
  }

  // required int32 deadNum = 3;
  if (has_deadnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->deadnum(), output);
  }

  // required int32 lastNum = 4;
  if (has_lastnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lastnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArmyDeadDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 armyType = 1;
  if (has_armytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->armytype(), target);
  }

  // required int32 armyLevel = 2;
  if (has_armylevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->armylevel(), target);
  }

  // required int32 deadNum = 3;
  if (has_deadnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->deadnum(), target);
  }

  // required int32 lastNum = 4;
  if (has_lastnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lastnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArmyDeadDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 armyType = 1;
    if (has_armytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armytype());
    }

    // required int32 armyLevel = 2;
    if (has_armylevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armylevel());
    }

    // required int32 deadNum = 3;
    if (has_deadnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deadnum());
    }

    // required int32 lastNum = 4;
    if (has_lastnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArmyDeadDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArmyDeadDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArmyDeadDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArmyDeadDTO::MergeFrom(const ArmyDeadDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_armytype()) {
      set_armytype(from.armytype());
    }
    if (from.has_armylevel()) {
      set_armylevel(from.armylevel());
    }
    if (from.has_deadnum()) {
      set_deadnum(from.deadnum());
    }
    if (from.has_lastnum()) {
      set_lastnum(from.lastnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArmyDeadDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArmyDeadDTO::CopyFrom(const ArmyDeadDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArmyDeadDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ArmyDeadDTO::Swap(ArmyDeadDTO* other) {
  if (other != this) {
    std::swap(armytype_, other->armytype_);
    std::swap(armylevel_, other->armylevel_);
    std::swap(deadnum_, other->deadnum_);
    std::swap(lastnum_, other->lastnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArmyDeadDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArmyDeadDTO_descriptor_;
  metadata.reflection = ArmyDeadDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportDeadDTO::kDeadListFieldNumber;
#endif  // !_MSC_VER

ReportDeadDTO::ReportDeadDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportDeadDTO::InitAsDefaultInstance() {
}

ReportDeadDTO::ReportDeadDTO(const ReportDeadDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportDeadDTO::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportDeadDTO::~ReportDeadDTO() {
  SharedDtor();
}

void ReportDeadDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportDeadDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportDeadDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportDeadDTO_descriptor_;
}

const ReportDeadDTO& ReportDeadDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

ReportDeadDTO* ReportDeadDTO::default_instance_ = NULL;

ReportDeadDTO* ReportDeadDTO::New() const {
  return new ReportDeadDTO;
}

void ReportDeadDTO::Clear() {
  deadlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportDeadDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.ArmyDeadDTO deadList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deadList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_deadlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_deadList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportDeadDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.ArmyDeadDTO deadList = 1;
  for (int i = 0; i < this->deadlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->deadlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportDeadDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.ArmyDeadDTO deadList = 1;
  for (int i = 0; i < this->deadlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->deadlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportDeadDTO::ByteSize() const {
  int total_size = 0;

  // repeated .slg.protocol.ArmyDeadDTO deadList = 1;
  total_size += 1 * this->deadlist_size();
  for (int i = 0; i < this->deadlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->deadlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportDeadDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportDeadDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportDeadDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportDeadDTO::MergeFrom(const ReportDeadDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  deadlist_.MergeFrom(from.deadlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportDeadDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportDeadDTO::CopyFrom(const ReportDeadDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportDeadDTO::IsInitialized() const {

  for (int i = 0; i < deadlist_size(); i++) {
    if (!this->deadlist(i).IsInitialized()) return false;
  }
  return true;
}

void ReportDeadDTO::Swap(ReportDeadDTO* other) {
  if (other != this) {
    deadlist_.Swap(&other->deadlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportDeadDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportDeadDTO_descriptor_;
  metadata.reflection = ReportDeadDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportDTO::kReportIdFieldNumber;
const int ReportDTO::kTypeFieldNumber;
const int ReportDTO::kTimeFieldNumber;
const int ReportDTO::kResourceFieldNumber;
const int ReportDTO::kResourcePVPFieldNumber;
const int ReportDTO::kCityPVPFieldNumber;
const int ReportDTO::kMonsterFieldNumber;
const int ReportDTO::kTradeFieldNumber;
const int ReportDTO::kDeadFieldNumber;
#endif  // !_MSC_VER

ReportDTO::ReportDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportDTO::InitAsDefaultInstance() {
  resource_ = const_cast< ::slg::protocol::ReportResourceDTO*>(&::slg::protocol::ReportResourceDTO::default_instance());
  resourcepvp_ = const_cast< ::slg::protocol::ReportPVPResourceDTO*>(&::slg::protocol::ReportPVPResourceDTO::default_instance());
  citypvp_ = const_cast< ::slg::protocol::ReportPVPCityDTO*>(&::slg::protocol::ReportPVPCityDTO::default_instance());
  monster_ = const_cast< ::slg::protocol::ReportPVEMonsterDTO*>(&::slg::protocol::ReportPVEMonsterDTO::default_instance());
  trade_ = const_cast< ::slg::protocol::ReportTradeDTO*>(&::slg::protocol::ReportTradeDTO::default_instance());
  dead_ = const_cast< ::slg::protocol::ReportDeadDTO*>(&::slg::protocol::ReportDeadDTO::default_instance());
}

ReportDTO::ReportDTO(const ReportDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportDTO::SharedCtor() {
  _cached_size_ = 0;
  reportid_ = GOOGLE_LONGLONG(0);
  type_ = 1;
  time_ = 0;
  resource_ = NULL;
  resourcepvp_ = NULL;
  citypvp_ = NULL;
  monster_ = NULL;
  trade_ = NULL;
  dead_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportDTO::~ReportDTO() {
  SharedDtor();
}

void ReportDTO::SharedDtor() {
  if (this != default_instance_) {
    delete resource_;
    delete resourcepvp_;
    delete citypvp_;
    delete monster_;
    delete trade_;
    delete dead_;
  }
}

void ReportDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportDTO_descriptor_;
}

const ReportDTO& ReportDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

ReportDTO* ReportDTO::default_instance_ = NULL;

ReportDTO* ReportDTO::New() const {
  return new ReportDTO;
}

void ReportDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reportid_ = GOOGLE_LONGLONG(0);
    type_ = 1;
    time_ = 0;
    if (has_resource()) {
      if (resource_ != NULL) resource_->::slg::protocol::ReportResourceDTO::Clear();
    }
    if (has_resourcepvp()) {
      if (resourcepvp_ != NULL) resourcepvp_->::slg::protocol::ReportPVPResourceDTO::Clear();
    }
    if (has_citypvp()) {
      if (citypvp_ != NULL) citypvp_->::slg::protocol::ReportPVPCityDTO::Clear();
    }
    if (has_monster()) {
      if (monster_ != NULL) monster_->::slg::protocol::ReportPVEMonsterDTO::Clear();
    }
    if (has_trade()) {
      if (trade_ != NULL) trade_->::slg::protocol::ReportTradeDTO::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_dead()) {
      if (dead_ != NULL) dead_->::slg::protocol::ReportDeadDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 reportId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reportid_)));
          set_has_reportid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .slg.protocol.ReportType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::slg::protocol::ReportType_IsValid(value)) {
            set_type(static_cast< ::slg::protocol::ReportType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_resource;
        break;
      }

      // optional .slg.protocol.ReportResourceDTO resource = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_resourcePVP;
        break;
      }

      // optional .slg.protocol.ReportPVPResourceDTO resourcePVP = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resourcePVP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resourcepvp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_cityPVP;
        break;
      }

      // optional .slg.protocol.ReportPVPCityDTO cityPVP = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cityPVP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_citypvp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_monster;
        break;
      }

      // optional .slg.protocol.ReportPVEMonsterDTO monster = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_monster()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_trade;
        break;
      }

      // optional .slg.protocol.ReportTradeDTO trade = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_dead;
        break;
      }

      // optional .slg.protocol.ReportDeadDTO dead = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dead:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dead()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 reportId = 1;
  if (has_reportid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->reportid(), output);
  }

  // required .slg.protocol.ReportType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // optional .slg.protocol.ReportResourceDTO resource = 10;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->resource(), output);
  }

  // optional .slg.protocol.ReportPVPResourceDTO resourcePVP = 11;
  if (has_resourcepvp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->resourcepvp(), output);
  }

  // optional .slg.protocol.ReportPVPCityDTO cityPVP = 12;
  if (has_citypvp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->citypvp(), output);
  }

  // optional .slg.protocol.ReportPVEMonsterDTO monster = 13;
  if (has_monster()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->monster(), output);
  }

  // optional .slg.protocol.ReportTradeDTO trade = 14;
  if (has_trade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->trade(), output);
  }

  // optional .slg.protocol.ReportDeadDTO dead = 15;
  if (has_dead()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->dead(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 reportId = 1;
  if (has_reportid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->reportid(), target);
  }

  // required .slg.protocol.ReportType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  // optional .slg.protocol.ReportResourceDTO resource = 10;
  if (has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->resource(), target);
  }

  // optional .slg.protocol.ReportPVPResourceDTO resourcePVP = 11;
  if (has_resourcepvp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->resourcepvp(), target);
  }

  // optional .slg.protocol.ReportPVPCityDTO cityPVP = 12;
  if (has_citypvp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->citypvp(), target);
  }

  // optional .slg.protocol.ReportPVEMonsterDTO monster = 13;
  if (has_monster()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->monster(), target);
  }

  // optional .slg.protocol.ReportTradeDTO trade = 14;
  if (has_trade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->trade(), target);
  }

  // optional .slg.protocol.ReportDeadDTO dead = 15;
  if (has_dead()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->dead(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 reportId = 1;
    if (has_reportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reportid());
    }

    // required .slg.protocol.ReportType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional .slg.protocol.ReportResourceDTO resource = 10;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resource());
    }

    // optional .slg.protocol.ReportPVPResourceDTO resourcePVP = 11;
    if (has_resourcepvp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resourcepvp());
    }

    // optional .slg.protocol.ReportPVPCityDTO cityPVP = 12;
    if (has_citypvp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->citypvp());
    }

    // optional .slg.protocol.ReportPVEMonsterDTO monster = 13;
    if (has_monster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->monster());
    }

    // optional .slg.protocol.ReportTradeDTO trade = 14;
    if (has_trade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trade());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .slg.protocol.ReportDeadDTO dead = 15;
    if (has_dead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dead());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportDTO::MergeFrom(const ReportDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reportid()) {
      set_reportid(from.reportid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_resource()) {
      mutable_resource()->::slg::protocol::ReportResourceDTO::MergeFrom(from.resource());
    }
    if (from.has_resourcepvp()) {
      mutable_resourcepvp()->::slg::protocol::ReportPVPResourceDTO::MergeFrom(from.resourcepvp());
    }
    if (from.has_citypvp()) {
      mutable_citypvp()->::slg::protocol::ReportPVPCityDTO::MergeFrom(from.citypvp());
    }
    if (from.has_monster()) {
      mutable_monster()->::slg::protocol::ReportPVEMonsterDTO::MergeFrom(from.monster());
    }
    if (from.has_trade()) {
      mutable_trade()->::slg::protocol::ReportTradeDTO::MergeFrom(from.trade());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dead()) {
      mutable_dead()->::slg::protocol::ReportDeadDTO::MergeFrom(from.dead());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportDTO::CopyFrom(const ReportDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_resource()) {
    if (!this->resource().IsInitialized()) return false;
  }
  if (has_resourcepvp()) {
    if (!this->resourcepvp().IsInitialized()) return false;
  }
  if (has_citypvp()) {
    if (!this->citypvp().IsInitialized()) return false;
  }
  if (has_monster()) {
    if (!this->monster().IsInitialized()) return false;
  }
  if (has_trade()) {
    if (!this->trade().IsInitialized()) return false;
  }
  if (has_dead()) {
    if (!this->dead().IsInitialized()) return false;
  }
  return true;
}

void ReportDTO::Swap(ReportDTO* other) {
  if (other != this) {
    std::swap(reportid_, other->reportid_);
    std::swap(type_, other->type_);
    std::swap(time_, other->time_);
    std::swap(resource_, other->resource_);
    std::swap(resourcepvp_, other->resourcepvp_);
    std::swap(citypvp_, other->citypvp_);
    std::swap(monster_, other->monster_);
    std::swap(trade_, other->trade_);
    std::swap(dead_, other->dead_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportDTO_descriptor_;
  metadata.reflection = ReportDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportTargetDTO::kIdFieldNumber;
const int ReportTargetDTO::kLevelFieldNumber;
const int ReportTargetDTO::kValueFieldNumber;
#endif  // !_MSC_VER

ReportTargetDTO::ReportTargetDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportTargetDTO::InitAsDefaultInstance() {
}

ReportTargetDTO::ReportTargetDTO(const ReportTargetDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportTargetDTO::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  level_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportTargetDTO::~ReportTargetDTO() {
  SharedDtor();
}

void ReportTargetDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportTargetDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportTargetDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportTargetDTO_descriptor_;
}

const ReportTargetDTO& ReportTargetDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

ReportTargetDTO* ReportTargetDTO::default_instance_ = NULL;

ReportTargetDTO* ReportTargetDTO::New() const {
  return new ReportTargetDTO;
}

void ReportTargetDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    level_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportTargetDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional int32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportTargetDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional int32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportTargetDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional int32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportTargetDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportTargetDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportTargetDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportTargetDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportTargetDTO::MergeFrom(const ReportTargetDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportTargetDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportTargetDTO::CopyFrom(const ReportTargetDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportTargetDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReportTargetDTO::Swap(ReportTargetDTO* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportTargetDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportTargetDTO_descriptor_;
  metadata.reflection = ReportTargetDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportResultDTO::kAttackFieldNumber;
const int ReportResultDTO::kWinFieldNumber;
const int ReportResultDTO::kFirstFieldNumber;
#endif  // !_MSC_VER

ReportResultDTO::ReportResultDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportResultDTO::InitAsDefaultInstance() {
}

ReportResultDTO::ReportResultDTO(const ReportResultDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportResultDTO::SharedCtor() {
  _cached_size_ = 0;
  attack_ = false;
  win_ = false;
  first_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportResultDTO::~ReportResultDTO() {
  SharedDtor();
}

void ReportResultDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportResultDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportResultDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportResultDTO_descriptor_;
}

const ReportResultDTO& ReportResultDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

ReportResultDTO* ReportResultDTO::default_instance_ = NULL;

ReportResultDTO* ReportResultDTO::New() const {
  return new ReportResultDTO;
}

void ReportResultDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attack_ = false;
    win_ = false;
    first_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportResultDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool attack = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &attack_)));
          set_has_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_win;
        break;
      }

      // required bool win = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_first;
        break;
      }

      // optional bool first = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &first_)));
          set_has_first();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportResultDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool attack = 1;
  if (has_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->attack(), output);
  }

  // required bool win = 2;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->win(), output);
  }

  // optional bool first = 3;
  if (has_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->first(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportResultDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool attack = 1;
  if (has_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->attack(), target);
  }

  // required bool win = 2;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->win(), target);
  }

  // optional bool first = 3;
  if (has_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->first(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportResultDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool attack = 1;
    if (has_attack()) {
      total_size += 1 + 1;
    }

    // required bool win = 2;
    if (has_win()) {
      total_size += 1 + 1;
    }

    // optional bool first = 3;
    if (has_first()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportResultDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportResultDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportResultDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportResultDTO::MergeFrom(const ReportResultDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attack()) {
      set_attack(from.attack());
    }
    if (from.has_win()) {
      set_win(from.win());
    }
    if (from.has_first()) {
      set_first(from.first());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportResultDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportResultDTO::CopyFrom(const ReportResultDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportResultDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReportResultDTO::Swap(ReportResultDTO* other) {
  if (other != this) {
    std::swap(attack_, other->attack_);
    std::swap(win_, other->win_);
    std::swap(first_, other->first_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportResultDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportResultDTO_descriptor_;
  metadata.reflection = ReportResultDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportProfileDTO::kReportIdFieldNumber;
const int ReportProfileDTO::kTypeFieldNumber;
const int ReportProfileDTO::kTargetFieldNumber;
const int ReportProfileDTO::kResultFieldNumber;
const int ReportProfileDTO::kTimeFieldNumber;
const int ReportProfileDTO::kReadFieldNumber;
const int ReportProfileDTO::kRewardDiamondFieldNumber;
#endif  // !_MSC_VER

ReportProfileDTO::ReportProfileDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportProfileDTO::InitAsDefaultInstance() {
  target_ = const_cast< ::slg::protocol::ReportTargetDTO*>(&::slg::protocol::ReportTargetDTO::default_instance());
  result_ = const_cast< ::slg::protocol::ReportResultDTO*>(&::slg::protocol::ReportResultDTO::default_instance());
}

ReportProfileDTO::ReportProfileDTO(const ReportProfileDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportProfileDTO::SharedCtor() {
  _cached_size_ = 0;
  reportid_ = GOOGLE_LONGLONG(0);
  type_ = 1;
  target_ = NULL;
  result_ = NULL;
  time_ = 0;
  read_ = false;
  rewarddiamond_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportProfileDTO::~ReportProfileDTO() {
  SharedDtor();
}

void ReportProfileDTO::SharedDtor() {
  if (this != default_instance_) {
    delete target_;
    delete result_;
  }
}

void ReportProfileDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportProfileDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportProfileDTO_descriptor_;
}

const ReportProfileDTO& ReportProfileDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

ReportProfileDTO* ReportProfileDTO::default_instance_ = NULL;

ReportProfileDTO* ReportProfileDTO::New() const {
  return new ReportProfileDTO;
}

void ReportProfileDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reportid_ = GOOGLE_LONGLONG(0);
    type_ = 1;
    if (has_target()) {
      if (target_ != NULL) target_->::slg::protocol::ReportTargetDTO::Clear();
    }
    if (has_result()) {
      if (result_ != NULL) result_->::slg::protocol::ReportResultDTO::Clear();
    }
    time_ = 0;
    read_ = false;
    rewarddiamond_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportProfileDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 reportId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reportid_)));
          set_has_reportid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .slg.protocol.ReportType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::slg::protocol::ReportType_IsValid(value)) {
            set_type(static_cast< ::slg::protocol::ReportType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_target;
        break;
      }

      // required .slg.protocol.ReportTargetDTO target = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_result;
        break;
      }

      // optional .slg.protocol.ReportResultDTO result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // required int32 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_read;
        break;
      }

      // required bool read = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_read:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &read_)));
          set_has_read();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_rewardDiamond;
        break;
      }

      // optional int32 rewardDiamond = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardDiamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewarddiamond_)));
          set_has_rewarddiamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportProfileDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 reportId = 1;
  if (has_reportid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->reportid(), output);
  }

  // required .slg.protocol.ReportType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required .slg.protocol.ReportTargetDTO target = 3;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->target(), output);
  }

  // optional .slg.protocol.ReportResultDTO result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->result(), output);
  }

  // required int32 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->time(), output);
  }

  // required bool read = 6;
  if (has_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->read(), output);
  }

  // optional int32 rewardDiamond = 7;
  if (has_rewarddiamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->rewarddiamond(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportProfileDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 reportId = 1;
  if (has_reportid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->reportid(), target);
  }

  // required .slg.protocol.ReportType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required .slg.protocol.ReportTargetDTO target = 3;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->target(), target);
  }

  // optional .slg.protocol.ReportResultDTO result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->result(), target);
  }

  // required int32 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->time(), target);
  }

  // required bool read = 6;
  if (has_read()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->read(), target);
  }

  // optional int32 rewardDiamond = 7;
  if (has_rewarddiamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->rewarddiamond(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportProfileDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 reportId = 1;
    if (has_reportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reportid());
    }

    // required .slg.protocol.ReportType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .slg.protocol.ReportTargetDTO target = 3;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }

    // optional .slg.protocol.ReportResultDTO result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // required int32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // required bool read = 6;
    if (has_read()) {
      total_size += 1 + 1;
    }

    // optional int32 rewardDiamond = 7;
    if (has_rewarddiamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewarddiamond());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportProfileDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportProfileDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportProfileDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportProfileDTO::MergeFrom(const ReportProfileDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reportid()) {
      set_reportid(from.reportid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_target()) {
      mutable_target()->::slg::protocol::ReportTargetDTO::MergeFrom(from.target());
    }
    if (from.has_result()) {
      mutable_result()->::slg::protocol::ReportResultDTO::MergeFrom(from.result());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_read()) {
      set_read(from.read());
    }
    if (from.has_rewarddiamond()) {
      set_rewarddiamond(from.rewarddiamond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportProfileDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportProfileDTO::CopyFrom(const ReportProfileDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportProfileDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000037) != 0x00000037) return false;

  if (has_target()) {
    if (!this->target().IsInitialized()) return false;
  }
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void ReportProfileDTO::Swap(ReportProfileDTO* other) {
  if (other != this) {
    std::swap(reportid_, other->reportid_);
    std::swap(type_, other->type_);
    std::swap(target_, other->target_);
    std::swap(result_, other->result_);
    std::swap(time_, other->time_);
    std::swap(read_, other->read_);
    std::swap(rewarddiamond_, other->rewarddiamond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportProfileDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportProfileDTO_descriptor_;
  metadata.reflection = ReportProfileDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportDetailRequest::kReportIdFieldNumber;
#endif  // !_MSC_VER

ReportDetailRequest::ReportDetailRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportDetailRequest::InitAsDefaultInstance() {
}

ReportDetailRequest::ReportDetailRequest(const ReportDetailRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportDetailRequest::SharedCtor() {
  _cached_size_ = 0;
  reportid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportDetailRequest::~ReportDetailRequest() {
  SharedDtor();
}

void ReportDetailRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportDetailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportDetailRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportDetailRequest_descriptor_;
}

const ReportDetailRequest& ReportDetailRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

ReportDetailRequest* ReportDetailRequest::default_instance_ = NULL;

ReportDetailRequest* ReportDetailRequest::New() const {
  return new ReportDetailRequest;
}

void ReportDetailRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reportid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportDetailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 reportId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reportid_)));
          set_has_reportid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportDetailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 reportId = 1;
  if (has_reportid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->reportid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportDetailRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 reportId = 1;
  if (has_reportid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->reportid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportDetailRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 reportId = 1;
    if (has_reportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reportid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportDetailRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportDetailRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportDetailRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportDetailRequest::MergeFrom(const ReportDetailRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reportid()) {
      set_reportid(from.reportid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportDetailRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportDetailRequest::CopyFrom(const ReportDetailRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportDetailRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReportDetailRequest::Swap(ReportDetailRequest* other) {
  if (other != this) {
    std::swap(reportid_, other->reportid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportDetailRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportDetailRequest_descriptor_;
  metadata.reflection = ReportDetailRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportDetailResponse::kReportFieldNumber;
#endif  // !_MSC_VER

ReportDetailResponse::ReportDetailResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportDetailResponse::InitAsDefaultInstance() {
  report_ = const_cast< ::slg::protocol::ReportDTO*>(&::slg::protocol::ReportDTO::default_instance());
}

ReportDetailResponse::ReportDetailResponse(const ReportDetailResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportDetailResponse::SharedCtor() {
  _cached_size_ = 0;
  report_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportDetailResponse::~ReportDetailResponse() {
  SharedDtor();
}

void ReportDetailResponse::SharedDtor() {
  if (this != default_instance_) {
    delete report_;
  }
}

void ReportDetailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportDetailResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportDetailResponse_descriptor_;
}

const ReportDetailResponse& ReportDetailResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

ReportDetailResponse* ReportDetailResponse::default_instance_ = NULL;

ReportDetailResponse* ReportDetailResponse::New() const {
  return new ReportDetailResponse;
}

void ReportDetailResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_report()) {
      if (report_ != NULL) report_->::slg::protocol::ReportDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportDetailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .slg.protocol.ReportDTO report = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_report()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportDetailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .slg.protocol.ReportDTO report = 1;
  if (has_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->report(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportDetailResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .slg.protocol.ReportDTO report = 1;
  if (has_report()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->report(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportDetailResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .slg.protocol.ReportDTO report = 1;
    if (has_report()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->report());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportDetailResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportDetailResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportDetailResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportDetailResponse::MergeFrom(const ReportDetailResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_report()) {
      mutable_report()->::slg::protocol::ReportDTO::MergeFrom(from.report());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportDetailResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportDetailResponse::CopyFrom(const ReportDetailResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportDetailResponse::IsInitialized() const {

  if (has_report()) {
    if (!this->report().IsInitialized()) return false;
  }
  return true;
}

void ReportDetailResponse::Swap(ReportDetailResponse* other) {
  if (other != this) {
    std::swap(report_, other->report_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportDetailResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportDetailResponse_descriptor_;
  metadata.reflection = ReportDetailResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportRewardTakeRequest::kReportIdFieldNumber;
#endif  // !_MSC_VER

ReportRewardTakeRequest::ReportRewardTakeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportRewardTakeRequest::InitAsDefaultInstance() {
}

ReportRewardTakeRequest::ReportRewardTakeRequest(const ReportRewardTakeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportRewardTakeRequest::SharedCtor() {
  _cached_size_ = 0;
  reportid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportRewardTakeRequest::~ReportRewardTakeRequest() {
  SharedDtor();
}

void ReportRewardTakeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportRewardTakeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportRewardTakeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportRewardTakeRequest_descriptor_;
}

const ReportRewardTakeRequest& ReportRewardTakeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

ReportRewardTakeRequest* ReportRewardTakeRequest::default_instance_ = NULL;

ReportRewardTakeRequest* ReportRewardTakeRequest::New() const {
  return new ReportRewardTakeRequest;
}

void ReportRewardTakeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reportid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportRewardTakeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 reportId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reportid_)));
          set_has_reportid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportRewardTakeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 reportId = 1;
  if (has_reportid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->reportid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportRewardTakeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 reportId = 1;
  if (has_reportid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->reportid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportRewardTakeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 reportId = 1;
    if (has_reportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reportid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportRewardTakeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportRewardTakeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportRewardTakeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportRewardTakeRequest::MergeFrom(const ReportRewardTakeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reportid()) {
      set_reportid(from.reportid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportRewardTakeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportRewardTakeRequest::CopyFrom(const ReportRewardTakeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportRewardTakeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReportRewardTakeRequest::Swap(ReportRewardTakeRequest* other) {
  if (other != this) {
    std::swap(reportid_, other->reportid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportRewardTakeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportRewardTakeRequest_descriptor_;
  metadata.reflection = ReportRewardTakeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportRewardTakeResponse::kReportIdFieldNumber;
#endif  // !_MSC_VER

ReportRewardTakeResponse::ReportRewardTakeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportRewardTakeResponse::InitAsDefaultInstance() {
}

ReportRewardTakeResponse::ReportRewardTakeResponse(const ReportRewardTakeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportRewardTakeResponse::SharedCtor() {
  _cached_size_ = 0;
  reportid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportRewardTakeResponse::~ReportRewardTakeResponse() {
  SharedDtor();
}

void ReportRewardTakeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportRewardTakeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportRewardTakeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportRewardTakeResponse_descriptor_;
}

const ReportRewardTakeResponse& ReportRewardTakeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

ReportRewardTakeResponse* ReportRewardTakeResponse::default_instance_ = NULL;

ReportRewardTakeResponse* ReportRewardTakeResponse::New() const {
  return new ReportRewardTakeResponse;
}

void ReportRewardTakeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reportid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportRewardTakeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 reportId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reportid_)));
          set_has_reportid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportRewardTakeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 reportId = 1;
  if (has_reportid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->reportid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportRewardTakeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 reportId = 1;
  if (has_reportid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->reportid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportRewardTakeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 reportId = 1;
    if (has_reportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reportid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportRewardTakeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportRewardTakeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportRewardTakeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportRewardTakeResponse::MergeFrom(const ReportRewardTakeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reportid()) {
      set_reportid(from.reportid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportRewardTakeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportRewardTakeResponse::CopyFrom(const ReportRewardTakeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportRewardTakeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReportRewardTakeResponse::Swap(ReportRewardTakeResponse* other) {
  if (other != this) {
    std::swap(reportid_, other->reportid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportRewardTakeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportRewardTakeResponse_descriptor_;
  metadata.reflection = ReportRewardTakeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportDeleteRequest::kReportIdFieldNumber;
#endif  // !_MSC_VER

ReportDeleteRequest::ReportDeleteRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportDeleteRequest::InitAsDefaultInstance() {
}

ReportDeleteRequest::ReportDeleteRequest(const ReportDeleteRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportDeleteRequest::SharedCtor() {
  _cached_size_ = 0;
  reportid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportDeleteRequest::~ReportDeleteRequest() {
  SharedDtor();
}

void ReportDeleteRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportDeleteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportDeleteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportDeleteRequest_descriptor_;
}

const ReportDeleteRequest& ReportDeleteRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

ReportDeleteRequest* ReportDeleteRequest::default_instance_ = NULL;

ReportDeleteRequest* ReportDeleteRequest::New() const {
  return new ReportDeleteRequest;
}

void ReportDeleteRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reportid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportDeleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 reportId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reportid_)));
          set_has_reportid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportDeleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 reportId = 1;
  if (has_reportid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->reportid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportDeleteRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 reportId = 1;
  if (has_reportid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->reportid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportDeleteRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 reportId = 1;
    if (has_reportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reportid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportDeleteRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportDeleteRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportDeleteRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportDeleteRequest::MergeFrom(const ReportDeleteRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reportid()) {
      set_reportid(from.reportid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportDeleteRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportDeleteRequest::CopyFrom(const ReportDeleteRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportDeleteRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReportDeleteRequest::Swap(ReportDeleteRequest* other) {
  if (other != this) {
    std::swap(reportid_, other->reportid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportDeleteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportDeleteRequest_descriptor_;
  metadata.reflection = ReportDeleteRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportDeleteResponse::kReportIdFieldNumber;
#endif  // !_MSC_VER

ReportDeleteResponse::ReportDeleteResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportDeleteResponse::InitAsDefaultInstance() {
}

ReportDeleteResponse::ReportDeleteResponse(const ReportDeleteResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportDeleteResponse::SharedCtor() {
  _cached_size_ = 0;
  reportid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportDeleteResponse::~ReportDeleteResponse() {
  SharedDtor();
}

void ReportDeleteResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportDeleteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportDeleteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportDeleteResponse_descriptor_;
}

const ReportDeleteResponse& ReportDeleteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

ReportDeleteResponse* ReportDeleteResponse::default_instance_ = NULL;

ReportDeleteResponse* ReportDeleteResponse::New() const {
  return new ReportDeleteResponse;
}

void ReportDeleteResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reportid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportDeleteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 reportId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reportid_)));
          set_has_reportid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportDeleteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 reportId = 1;
  if (has_reportid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->reportid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportDeleteResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 reportId = 1;
  if (has_reportid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->reportid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportDeleteResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 reportId = 1;
    if (has_reportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reportid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportDeleteResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportDeleteResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportDeleteResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportDeleteResponse::MergeFrom(const ReportDeleteResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reportid()) {
      set_reportid(from.reportid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportDeleteResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportDeleteResponse::CopyFrom(const ReportDeleteResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportDeleteResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReportDeleteResponse::Swap(ReportDeleteResponse* other) {
  if (other != this) {
    std::swap(reportid_, other->reportid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportDeleteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportDeleteResponse_descriptor_;
  metadata.reflection = ReportDeleteResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportProfileListPush::kReportProfilesFieldNumber;
#endif  // !_MSC_VER

ReportProfileListPush::ReportProfileListPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportProfileListPush::InitAsDefaultInstance() {
}

ReportProfileListPush::ReportProfileListPush(const ReportProfileListPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportProfileListPush::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportProfileListPush::~ReportProfileListPush() {
  SharedDtor();
}

void ReportProfileListPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportProfileListPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportProfileListPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportProfileListPush_descriptor_;
}

const ReportProfileListPush& ReportProfileListPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

ReportProfileListPush* ReportProfileListPush::default_instance_ = NULL;

ReportProfileListPush* ReportProfileListPush::New() const {
  return new ReportProfileListPush;
}

void ReportProfileListPush::Clear() {
  reportprofiles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportProfileListPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.ReportProfileDTO reportProfiles = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reportProfiles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reportprofiles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_reportProfiles;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportProfileListPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.ReportProfileDTO reportProfiles = 1;
  for (int i = 0; i < this->reportprofiles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reportprofiles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportProfileListPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.ReportProfileDTO reportProfiles = 1;
  for (int i = 0; i < this->reportprofiles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reportprofiles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportProfileListPush::ByteSize() const {
  int total_size = 0;

  // repeated .slg.protocol.ReportProfileDTO reportProfiles = 1;
  total_size += 1 * this->reportprofiles_size();
  for (int i = 0; i < this->reportprofiles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reportprofiles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportProfileListPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportProfileListPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportProfileListPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportProfileListPush::MergeFrom(const ReportProfileListPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  reportprofiles_.MergeFrom(from.reportprofiles_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportProfileListPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportProfileListPush::CopyFrom(const ReportProfileListPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportProfileListPush::IsInitialized() const {

  for (int i = 0; i < reportprofiles_size(); i++) {
    if (!this->reportprofiles(i).IsInitialized()) return false;
  }
  return true;
}

void ReportProfileListPush::Swap(ReportProfileListPush* other) {
  if (other != this) {
    reportprofiles_.Swap(&other->reportprofiles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportProfileListPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportProfileListPush_descriptor_;
  metadata.reflection = ReportProfileListPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportSpyPlayerDTO::kIdFieldNumber;
const int ReportSpyPlayerDTO::kNameFieldNumber;
const int ReportSpyPlayerDTO::kAllianceShortNameFieldNumber;
const int ReportSpyPlayerDTO::kPositionFieldNumber;
#endif  // !_MSC_VER

ReportSpyPlayerDTO::ReportSpyPlayerDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportSpyPlayerDTO::InitAsDefaultInstance() {
  position_ = const_cast< ::slg::protocol::PositionDTO*>(&::slg::protocol::PositionDTO::default_instance());
}

ReportSpyPlayerDTO::ReportSpyPlayerDTO(const ReportSpyPlayerDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportSpyPlayerDTO::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  allianceshortname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportSpyPlayerDTO::~ReportSpyPlayerDTO() {
  SharedDtor();
}

void ReportSpyPlayerDTO::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (allianceshortname_ != &::google::protobuf::internal::kEmptyString) {
    delete allianceshortname_;
  }
  if (this != default_instance_) {
    delete position_;
  }
}

void ReportSpyPlayerDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportSpyPlayerDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportSpyPlayerDTO_descriptor_;
}

const ReportSpyPlayerDTO& ReportSpyPlayerDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

ReportSpyPlayerDTO* ReportSpyPlayerDTO::default_instance_ = NULL;

ReportSpyPlayerDTO* ReportSpyPlayerDTO::New() const {
  return new ReportSpyPlayerDTO;
}

void ReportSpyPlayerDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_allianceshortname()) {
      if (allianceshortname_ != &::google::protobuf::internal::kEmptyString) {
        allianceshortname_->clear();
      }
    }
    if (has_position()) {
      if (position_ != NULL) position_->::slg::protocol::PositionDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportSpyPlayerDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_allianceShortName;
        break;
      }

      // required string allianceShortName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allianceShortName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_allianceshortname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->allianceshortname().data(), this->allianceshortname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_position;
        break;
      }

      // required .slg.protocol.PositionDTO position = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportSpyPlayerDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required string allianceShortName = 3;
  if (has_allianceshortname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->allianceshortname().data(), this->allianceshortname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->allianceshortname(), output);
  }

  // required .slg.protocol.PositionDTO position = 4;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportSpyPlayerDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required string allianceShortName = 3;
  if (has_allianceshortname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->allianceshortname().data(), this->allianceshortname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->allianceshortname(), target);
  }

  // required .slg.protocol.PositionDTO position = 4;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportSpyPlayerDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string allianceShortName = 3;
    if (has_allianceshortname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->allianceshortname());
    }

    // required .slg.protocol.PositionDTO position = 4;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportSpyPlayerDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportSpyPlayerDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportSpyPlayerDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportSpyPlayerDTO::MergeFrom(const ReportSpyPlayerDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_allianceshortname()) {
      set_allianceshortname(from.allianceshortname());
    }
    if (from.has_position()) {
      mutable_position()->::slg::protocol::PositionDTO::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportSpyPlayerDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportSpyPlayerDTO::CopyFrom(const ReportSpyPlayerDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportSpyPlayerDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void ReportSpyPlayerDTO::Swap(ReportSpyPlayerDTO* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(allianceshortname_, other->allianceshortname_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportSpyPlayerDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportSpyPlayerDTO_descriptor_;
  metadata.reflection = ReportSpyPlayerDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportSpyResourceDTO::kTypeFieldNumber;
const int ReportSpyResourceDTO::kRemainingFieldNumber;
const int ReportSpyResourceDTO::kCanBeRobbedFieldNumber;
#endif  // !_MSC_VER

ReportSpyResourceDTO::ReportSpyResourceDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportSpyResourceDTO::InitAsDefaultInstance() {
}

ReportSpyResourceDTO::ReportSpyResourceDTO(const ReportSpyResourceDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportSpyResourceDTO::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  remaining_ = 0;
  canberobbed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportSpyResourceDTO::~ReportSpyResourceDTO() {
  SharedDtor();
}

void ReportSpyResourceDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportSpyResourceDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportSpyResourceDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportSpyResourceDTO_descriptor_;
}

const ReportSpyResourceDTO& ReportSpyResourceDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

ReportSpyResourceDTO* ReportSpyResourceDTO::default_instance_ = NULL;

ReportSpyResourceDTO* ReportSpyResourceDTO::New() const {
  return new ReportSpyResourceDTO;
}

void ReportSpyResourceDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    remaining_ = 0;
    canberobbed_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportSpyResourceDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_remaining;
        break;
      }

      // required int32 remaining = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaining_)));
          set_has_remaining();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_canBeRobbed;
        break;
      }

      // required int32 canBeRobbed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canBeRobbed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &canberobbed_)));
          set_has_canberobbed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportSpyResourceDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 remaining = 2;
  if (has_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->remaining(), output);
  }

  // required int32 canBeRobbed = 3;
  if (has_canberobbed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->canberobbed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportSpyResourceDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 remaining = 2;
  if (has_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->remaining(), target);
  }

  // required int32 canBeRobbed = 3;
  if (has_canberobbed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->canberobbed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportSpyResourceDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 remaining = 2;
    if (has_remaining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remaining());
    }

    // required int32 canBeRobbed = 3;
    if (has_canberobbed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->canberobbed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportSpyResourceDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportSpyResourceDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportSpyResourceDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportSpyResourceDTO::MergeFrom(const ReportSpyResourceDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_remaining()) {
      set_remaining(from.remaining());
    }
    if (from.has_canberobbed()) {
      set_canberobbed(from.canberobbed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportSpyResourceDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportSpyResourceDTO::CopyFrom(const ReportSpyResourceDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportSpyResourceDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ReportSpyResourceDTO::Swap(ReportSpyResourceDTO* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(remaining_, other->remaining_);
    std::swap(canberobbed_, other->canberobbed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportSpyResourceDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportSpyResourceDTO_descriptor_;
  metadata.reflection = ReportSpyResourceDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportSpyWallDTO::kCurrentValueFieldNumber;
const int ReportSpyWallDTO::kTotalValueFieldNumber;
const int ReportSpyWallDTO::kBurnRateFieldNumber;
const int ReportSpyWallDTO::kBurnRemianingTimeFieldNumber;
#endif  // !_MSC_VER

ReportSpyWallDTO::ReportSpyWallDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportSpyWallDTO::InitAsDefaultInstance() {
}

ReportSpyWallDTO::ReportSpyWallDTO(const ReportSpyWallDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportSpyWallDTO::SharedCtor() {
  _cached_size_ = 0;
  currentvalue_ = 0;
  totalvalue_ = 0;
  burnrate_ = 0;
  burnremianingtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportSpyWallDTO::~ReportSpyWallDTO() {
  SharedDtor();
}

void ReportSpyWallDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportSpyWallDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportSpyWallDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportSpyWallDTO_descriptor_;
}

const ReportSpyWallDTO& ReportSpyWallDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

ReportSpyWallDTO* ReportSpyWallDTO::default_instance_ = NULL;

ReportSpyWallDTO* ReportSpyWallDTO::New() const {
  return new ReportSpyWallDTO;
}

void ReportSpyWallDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    currentvalue_ = 0;
    totalvalue_ = 0;
    burnrate_ = 0;
    burnremianingtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportSpyWallDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 currentValue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentvalue_)));
          set_has_currentvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_totalValue;
        break;
      }

      // required int32 totalValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalvalue_)));
          set_has_totalvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_burnRate;
        break;
      }

      // optional int32 burnRate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_burnRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &burnrate_)));
          set_has_burnrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_burnRemianingTime;
        break;
      }

      // optional int32 burnRemianingTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_burnRemianingTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &burnremianingtime_)));
          set_has_burnremianingtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportSpyWallDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 currentValue = 1;
  if (has_currentvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->currentvalue(), output);
  }

  // required int32 totalValue = 2;
  if (has_totalvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->totalvalue(), output);
  }

  // optional int32 burnRate = 3;
  if (has_burnrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->burnrate(), output);
  }

  // optional int32 burnRemianingTime = 4;
  if (has_burnremianingtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->burnremianingtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportSpyWallDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 currentValue = 1;
  if (has_currentvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->currentvalue(), target);
  }

  // required int32 totalValue = 2;
  if (has_totalvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->totalvalue(), target);
  }

  // optional int32 burnRate = 3;
  if (has_burnrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->burnrate(), target);
  }

  // optional int32 burnRemianingTime = 4;
  if (has_burnremianingtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->burnremianingtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportSpyWallDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 currentValue = 1;
    if (has_currentvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentvalue());
    }

    // required int32 totalValue = 2;
    if (has_totalvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalvalue());
    }

    // optional int32 burnRate = 3;
    if (has_burnrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->burnrate());
    }

    // optional int32 burnRemianingTime = 4;
    if (has_burnremianingtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->burnremianingtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportSpyWallDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportSpyWallDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportSpyWallDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportSpyWallDTO::MergeFrom(const ReportSpyWallDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_currentvalue()) {
      set_currentvalue(from.currentvalue());
    }
    if (from.has_totalvalue()) {
      set_totalvalue(from.totalvalue());
    }
    if (from.has_burnrate()) {
      set_burnrate(from.burnrate());
    }
    if (from.has_burnremianingtime()) {
      set_burnremianingtime(from.burnremianingtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportSpyWallDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportSpyWallDTO::CopyFrom(const ReportSpyWallDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportSpyWallDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReportSpyWallDTO::Swap(ReportSpyWallDTO* other) {
  if (other != this) {
    std::swap(currentvalue_, other->currentvalue_);
    std::swap(totalvalue_, other->totalvalue_);
    std::swap(burnrate_, other->burnrate_);
    std::swap(burnremianingtime_, other->burnremianingtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportSpyWallDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportSpyWallDTO_descriptor_;
  metadata.reflection = ReportSpyWallDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportSpyArmyDTO::kTypeFieldNumber;
const int ReportSpyArmyDTO::kLevelFieldNumber;
const int ReportSpyArmyDTO::kNumFieldNumber;
#endif  // !_MSC_VER

ReportSpyArmyDTO::ReportSpyArmyDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportSpyArmyDTO::InitAsDefaultInstance() {
}

ReportSpyArmyDTO::ReportSpyArmyDTO(const ReportSpyArmyDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportSpyArmyDTO::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  level_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportSpyArmyDTO::~ReportSpyArmyDTO() {
  SharedDtor();
}

void ReportSpyArmyDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportSpyArmyDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportSpyArmyDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportSpyArmyDTO_descriptor_;
}

const ReportSpyArmyDTO& ReportSpyArmyDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

ReportSpyArmyDTO* ReportSpyArmyDTO::default_instance_ = NULL;

ReportSpyArmyDTO* ReportSpyArmyDTO::New() const {
  return new ReportSpyArmyDTO;
}

void ReportSpyArmyDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    level_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportSpyArmyDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // required int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportSpyArmyDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportSpyArmyDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportSpyArmyDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportSpyArmyDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportSpyArmyDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportSpyArmyDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportSpyArmyDTO::MergeFrom(const ReportSpyArmyDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportSpyArmyDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportSpyArmyDTO::CopyFrom(const ReportSpyArmyDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportSpyArmyDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ReportSpyArmyDTO::Swap(ReportSpyArmyDTO* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportSpyArmyDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportSpyArmyDTO_descriptor_;
  metadata.reflection = ReportSpyArmyDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportSpyAidDTO::kPlayerFieldNumber;
const int ReportSpyAidDTO::kArmiesFieldNumber;
#endif  // !_MSC_VER

ReportSpyAidDTO::ReportSpyAidDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportSpyAidDTO::InitAsDefaultInstance() {
  player_ = const_cast< ::slg::protocol::ReportSpyPlayerDTO*>(&::slg::protocol::ReportSpyPlayerDTO::default_instance());
}

ReportSpyAidDTO::ReportSpyAidDTO(const ReportSpyAidDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportSpyAidDTO::SharedCtor() {
  _cached_size_ = 0;
  player_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportSpyAidDTO::~ReportSpyAidDTO() {
  SharedDtor();
}

void ReportSpyAidDTO::SharedDtor() {
  if (this != default_instance_) {
    delete player_;
  }
}

void ReportSpyAidDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportSpyAidDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportSpyAidDTO_descriptor_;
}

const ReportSpyAidDTO& ReportSpyAidDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

ReportSpyAidDTO* ReportSpyAidDTO::default_instance_ = NULL;

ReportSpyAidDTO* ReportSpyAidDTO::New() const {
  return new ReportSpyAidDTO;
}

void ReportSpyAidDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player()) {
      if (player_ != NULL) player_->::slg::protocol::ReportSpyPlayerDTO::Clear();
    }
  }
  armies_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportSpyAidDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .slg.protocol.ReportSpyPlayerDTO player = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_armies;
        break;
      }

      // repeated .slg.protocol.ReportSpyArmyDTO armies = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_armies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_armies()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_armies;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportSpyAidDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .slg.protocol.ReportSpyPlayerDTO player = 1;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player(), output);
  }

  // repeated .slg.protocol.ReportSpyArmyDTO armies = 2;
  for (int i = 0; i < this->armies_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->armies(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportSpyAidDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .slg.protocol.ReportSpyPlayerDTO player = 1;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player(), target);
  }

  // repeated .slg.protocol.ReportSpyArmyDTO armies = 2;
  for (int i = 0; i < this->armies_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->armies(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportSpyAidDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .slg.protocol.ReportSpyPlayerDTO player = 1;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player());
    }

  }
  // repeated .slg.protocol.ReportSpyArmyDTO armies = 2;
  total_size += 1 * this->armies_size();
  for (int i = 0; i < this->armies_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->armies(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportSpyAidDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportSpyAidDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportSpyAidDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportSpyAidDTO::MergeFrom(const ReportSpyAidDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  armies_.MergeFrom(from.armies_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player()) {
      mutable_player()->::slg::protocol::ReportSpyPlayerDTO::MergeFrom(from.player());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportSpyAidDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportSpyAidDTO::CopyFrom(const ReportSpyAidDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportSpyAidDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_player()) {
    if (!this->player().IsInitialized()) return false;
  }
  for (int i = 0; i < armies_size(); i++) {
    if (!this->armies(i).IsInitialized()) return false;
  }
  return true;
}

void ReportSpyAidDTO::Swap(ReportSpyAidDTO* other) {
  if (other != this) {
    std::swap(player_, other->player_);
    armies_.Swap(&other->armies_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportSpyAidDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportSpyAidDTO_descriptor_;
  metadata.reflection = ReportSpyAidDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportSpyTowerDTO::kLevelFieldNumber;
const int ReportSpyTowerDTO::kAtkFieldNumber;
const int ReportSpyTowerDTO::kCurrentNumFieldNumber;
const int ReportSpyTowerDTO::kCapacityFieldNumber;
#endif  // !_MSC_VER

ReportSpyTowerDTO::ReportSpyTowerDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportSpyTowerDTO::InitAsDefaultInstance() {
}

ReportSpyTowerDTO::ReportSpyTowerDTO(const ReportSpyTowerDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportSpyTowerDTO::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  atk_ = 0;
  currentnum_ = 0;
  capacity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportSpyTowerDTO::~ReportSpyTowerDTO() {
  SharedDtor();
}

void ReportSpyTowerDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportSpyTowerDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportSpyTowerDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportSpyTowerDTO_descriptor_;
}

const ReportSpyTowerDTO& ReportSpyTowerDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

ReportSpyTowerDTO* ReportSpyTowerDTO::default_instance_ = NULL;

ReportSpyTowerDTO* ReportSpyTowerDTO::New() const {
  return new ReportSpyTowerDTO;
}

void ReportSpyTowerDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    atk_ = 0;
    currentnum_ = 0;
    capacity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportSpyTowerDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_atk;
        break;
      }

      // optional int32 atk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atk_)));
          set_has_atk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_currentNum;
        break;
      }

      // required int32 currentNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentnum_)));
          set_has_currentnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_capacity;
        break;
      }

      // required int32 capacity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &capacity_)));
          set_has_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportSpyTowerDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // optional int32 atk = 2;
  if (has_atk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->atk(), output);
  }

  // required int32 currentNum = 3;
  if (has_currentnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->currentnum(), output);
  }

  // required int32 capacity = 4;
  if (has_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->capacity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportSpyTowerDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // optional int32 atk = 2;
  if (has_atk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->atk(), target);
  }

  // required int32 currentNum = 3;
  if (has_currentnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->currentnum(), target);
  }

  // required int32 capacity = 4;
  if (has_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->capacity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportSpyTowerDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 atk = 2;
    if (has_atk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atk());
    }

    // required int32 currentNum = 3;
    if (has_currentnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentnum());
    }

    // required int32 capacity = 4;
    if (has_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->capacity());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportSpyTowerDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportSpyTowerDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportSpyTowerDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportSpyTowerDTO::MergeFrom(const ReportSpyTowerDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_atk()) {
      set_atk(from.atk());
    }
    if (from.has_currentnum()) {
      set_currentnum(from.currentnum());
    }
    if (from.has_capacity()) {
      set_capacity(from.capacity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportSpyTowerDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportSpyTowerDTO::CopyFrom(const ReportSpyTowerDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportSpyTowerDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  return true;
}

void ReportSpyTowerDTO::Swap(ReportSpyTowerDTO* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(atk_, other->atk_);
    std::swap(currentnum_, other->currentnum_);
    std::swap(capacity_, other->capacity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportSpyTowerDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportSpyTowerDTO_descriptor_;
  metadata.reflection = ReportSpyTowerDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportSpyCityDTO::kProtectedPercentageFieldNumber;
const int ReportSpyCityDTO::kResourcesFieldNumber;
const int ReportSpyCityDTO::kWallFieldNumber;
const int ReportSpyCityDTO::kTotalArmyCountFieldNumber;
const int ReportSpyCityDTO::kArmiesFieldNumber;
const int ReportSpyCityDTO::kTowersFieldNumber;
const int ReportSpyCityDTO::kAidsFieldNumber;
#endif  // !_MSC_VER

ReportSpyCityDTO::ReportSpyCityDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportSpyCityDTO::InitAsDefaultInstance() {
  wall_ = const_cast< ::slg::protocol::ReportSpyWallDTO*>(&::slg::protocol::ReportSpyWallDTO::default_instance());
}

ReportSpyCityDTO::ReportSpyCityDTO(const ReportSpyCityDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportSpyCityDTO::SharedCtor() {
  _cached_size_ = 0;
  protectedpercentage_ = 0;
  wall_ = NULL;
  totalarmycount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportSpyCityDTO::~ReportSpyCityDTO() {
  SharedDtor();
}

void ReportSpyCityDTO::SharedDtor() {
  if (this != default_instance_) {
    delete wall_;
  }
}

void ReportSpyCityDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportSpyCityDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportSpyCityDTO_descriptor_;
}

const ReportSpyCityDTO& ReportSpyCityDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

ReportSpyCityDTO* ReportSpyCityDTO::default_instance_ = NULL;

ReportSpyCityDTO* ReportSpyCityDTO::New() const {
  return new ReportSpyCityDTO;
}

void ReportSpyCityDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protectedpercentage_ = 0;
    if (has_wall()) {
      if (wall_ != NULL) wall_->::slg::protocol::ReportSpyWallDTO::Clear();
    }
    totalarmycount_ = 0;
  }
  resources_.Clear();
  armies_.Clear();
  towers_.Clear();
  aids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportSpyCityDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 protectedPercentage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protectedpercentage_)));
          set_has_protectedpercentage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resources;
        break;
      }

      // repeated .slg.protocol.ReportSpyResourceDTO resources = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resources()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resources;
        if (input->ExpectTag(26)) goto parse_wall;
        break;
      }

      // optional .slg.protocol.ReportSpyWallDTO wall = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wall:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wall()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_totalArmyCount;
        break;
      }

      // optional int32 totalArmyCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalArmyCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalarmycount_)));
          set_has_totalarmycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_armies;
        break;
      }

      // repeated .slg.protocol.ReportSpyArmyDTO armies = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_armies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_armies()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_armies;
        if (input->ExpectTag(58)) goto parse_towers;
        break;
      }

      // repeated .slg.protocol.ReportSpyTowerDTO towers = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_towers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_towers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_towers;
        if (input->ExpectTag(66)) goto parse_aids;
        break;
      }

      // repeated .slg.protocol.ReportSpyAidDTO aids = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_aids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_aids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportSpyCityDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 protectedPercentage = 1;
  if (has_protectedpercentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->protectedpercentage(), output);
  }

  // repeated .slg.protocol.ReportSpyResourceDTO resources = 2;
  for (int i = 0; i < this->resources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->resources(i), output);
  }

  // optional .slg.protocol.ReportSpyWallDTO wall = 3;
  if (has_wall()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->wall(), output);
  }

  // optional int32 totalArmyCount = 4;
  if (has_totalarmycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->totalarmycount(), output);
  }

  // repeated .slg.protocol.ReportSpyArmyDTO armies = 6;
  for (int i = 0; i < this->armies_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->armies(i), output);
  }

  // repeated .slg.protocol.ReportSpyTowerDTO towers = 7;
  for (int i = 0; i < this->towers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->towers(i), output);
  }

  // repeated .slg.protocol.ReportSpyAidDTO aids = 8;
  for (int i = 0; i < this->aids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->aids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportSpyCityDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 protectedPercentage = 1;
  if (has_protectedpercentage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->protectedpercentage(), target);
  }

  // repeated .slg.protocol.ReportSpyResourceDTO resources = 2;
  for (int i = 0; i < this->resources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->resources(i), target);
  }

  // optional .slg.protocol.ReportSpyWallDTO wall = 3;
  if (has_wall()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->wall(), target);
  }

  // optional int32 totalArmyCount = 4;
  if (has_totalarmycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->totalarmycount(), target);
  }

  // repeated .slg.protocol.ReportSpyArmyDTO armies = 6;
  for (int i = 0; i < this->armies_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->armies(i), target);
  }

  // repeated .slg.protocol.ReportSpyTowerDTO towers = 7;
  for (int i = 0; i < this->towers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->towers(i), target);
  }

  // repeated .slg.protocol.ReportSpyAidDTO aids = 8;
  for (int i = 0; i < this->aids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->aids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportSpyCityDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 protectedPercentage = 1;
    if (has_protectedpercentage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protectedpercentage());
    }

    // optional .slg.protocol.ReportSpyWallDTO wall = 3;
    if (has_wall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wall());
    }

    // optional int32 totalArmyCount = 4;
    if (has_totalarmycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalarmycount());
    }

  }
  // repeated .slg.protocol.ReportSpyResourceDTO resources = 2;
  total_size += 1 * this->resources_size();
  for (int i = 0; i < this->resources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resources(i));
  }

  // repeated .slg.protocol.ReportSpyArmyDTO armies = 6;
  total_size += 1 * this->armies_size();
  for (int i = 0; i < this->armies_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->armies(i));
  }

  // repeated .slg.protocol.ReportSpyTowerDTO towers = 7;
  total_size += 1 * this->towers_size();
  for (int i = 0; i < this->towers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->towers(i));
  }

  // repeated .slg.protocol.ReportSpyAidDTO aids = 8;
  total_size += 1 * this->aids_size();
  for (int i = 0; i < this->aids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->aids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportSpyCityDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportSpyCityDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportSpyCityDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportSpyCityDTO::MergeFrom(const ReportSpyCityDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  resources_.MergeFrom(from.resources_);
  armies_.MergeFrom(from.armies_);
  towers_.MergeFrom(from.towers_);
  aids_.MergeFrom(from.aids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protectedpercentage()) {
      set_protectedpercentage(from.protectedpercentage());
    }
    if (from.has_wall()) {
      mutable_wall()->::slg::protocol::ReportSpyWallDTO::MergeFrom(from.wall());
    }
    if (from.has_totalarmycount()) {
      set_totalarmycount(from.totalarmycount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportSpyCityDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportSpyCityDTO::CopyFrom(const ReportSpyCityDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportSpyCityDTO::IsInitialized() const {

  for (int i = 0; i < resources_size(); i++) {
    if (!this->resources(i).IsInitialized()) return false;
  }
  if (has_wall()) {
    if (!this->wall().IsInitialized()) return false;
  }
  for (int i = 0; i < armies_size(); i++) {
    if (!this->armies(i).IsInitialized()) return false;
  }
  for (int i = 0; i < towers_size(); i++) {
    if (!this->towers(i).IsInitialized()) return false;
  }
  for (int i = 0; i < aids_size(); i++) {
    if (!this->aids(i).IsInitialized()) return false;
  }
  return true;
}

void ReportSpyCityDTO::Swap(ReportSpyCityDTO* other) {
  if (other != this) {
    std::swap(protectedpercentage_, other->protectedpercentage_);
    resources_.Swap(&other->resources_);
    std::swap(wall_, other->wall_);
    std::swap(totalarmycount_, other->totalarmycount_);
    armies_.Swap(&other->armies_);
    towers_.Swap(&other->towers_);
    aids_.Swap(&other->aids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportSpyCityDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportSpyCityDTO_descriptor_;
  metadata.reflection = ReportSpyCityDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportSpyResourceGridProfileDTO::kTypeFieldNumber;
const int ReportSpyResourceGridProfileDTO::kLevelFieldNumber;
#endif  // !_MSC_VER

ReportSpyResourceGridProfileDTO::ReportSpyResourceGridProfileDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportSpyResourceGridProfileDTO::InitAsDefaultInstance() {
}

ReportSpyResourceGridProfileDTO::ReportSpyResourceGridProfileDTO(const ReportSpyResourceGridProfileDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportSpyResourceGridProfileDTO::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportSpyResourceGridProfileDTO::~ReportSpyResourceGridProfileDTO() {
  SharedDtor();
}

void ReportSpyResourceGridProfileDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportSpyResourceGridProfileDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportSpyResourceGridProfileDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportSpyResourceGridProfileDTO_descriptor_;
}

const ReportSpyResourceGridProfileDTO& ReportSpyResourceGridProfileDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

ReportSpyResourceGridProfileDTO* ReportSpyResourceGridProfileDTO::default_instance_ = NULL;

ReportSpyResourceGridProfileDTO* ReportSpyResourceGridProfileDTO::New() const {
  return new ReportSpyResourceGridProfileDTO;
}

void ReportSpyResourceGridProfileDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportSpyResourceGridProfileDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportSpyResourceGridProfileDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportSpyResourceGridProfileDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportSpyResourceGridProfileDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportSpyResourceGridProfileDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportSpyResourceGridProfileDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportSpyResourceGridProfileDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportSpyResourceGridProfileDTO::MergeFrom(const ReportSpyResourceGridProfileDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportSpyResourceGridProfileDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportSpyResourceGridProfileDTO::CopyFrom(const ReportSpyResourceGridProfileDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportSpyResourceGridProfileDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReportSpyResourceGridProfileDTO::Swap(ReportSpyResourceGridProfileDTO* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportSpyResourceGridProfileDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportSpyResourceGridProfileDTO_descriptor_;
  metadata.reflection = ReportSpyResourceGridProfileDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportSpyResourceGridDTO::kProfileFieldNumber;
const int ReportSpyResourceGridDTO::kPositionFieldNumber;
const int ReportSpyResourceGridDTO::kRemainingFieldNumber;
const int ReportSpyResourceGridDTO::kTotalArmyCountFieldNumber;
const int ReportSpyResourceGridDTO::kArmiesFieldNumber;
#endif  // !_MSC_VER

ReportSpyResourceGridDTO::ReportSpyResourceGridDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportSpyResourceGridDTO::InitAsDefaultInstance() {
  profile_ = const_cast< ::slg::protocol::ReportSpyResourceGridProfileDTO*>(&::slg::protocol::ReportSpyResourceGridProfileDTO::default_instance());
  position_ = const_cast< ::slg::protocol::PositionDTO*>(&::slg::protocol::PositionDTO::default_instance());
}

ReportSpyResourceGridDTO::ReportSpyResourceGridDTO(const ReportSpyResourceGridDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportSpyResourceGridDTO::SharedCtor() {
  _cached_size_ = 0;
  profile_ = NULL;
  position_ = NULL;
  remaining_ = 0;
  totalarmycount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportSpyResourceGridDTO::~ReportSpyResourceGridDTO() {
  SharedDtor();
}

void ReportSpyResourceGridDTO::SharedDtor() {
  if (this != default_instance_) {
    delete profile_;
    delete position_;
  }
}

void ReportSpyResourceGridDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportSpyResourceGridDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportSpyResourceGridDTO_descriptor_;
}

const ReportSpyResourceGridDTO& ReportSpyResourceGridDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

ReportSpyResourceGridDTO* ReportSpyResourceGridDTO::default_instance_ = NULL;

ReportSpyResourceGridDTO* ReportSpyResourceGridDTO::New() const {
  return new ReportSpyResourceGridDTO;
}

void ReportSpyResourceGridDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_profile()) {
      if (profile_ != NULL) profile_->::slg::protocol::ReportSpyResourceGridProfileDTO::Clear();
    }
    if (has_position()) {
      if (position_ != NULL) position_->::slg::protocol::PositionDTO::Clear();
    }
    remaining_ = 0;
    totalarmycount_ = 0;
  }
  armies_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportSpyResourceGridDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .slg.protocol.ReportSpyResourceGridProfileDTO profile = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_profile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // required .slg.protocol.PositionDTO position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_remaining;
        break;
      }

      // required int32 remaining = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaining_)));
          set_has_remaining();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_totalArmyCount;
        break;
      }

      // optional int32 totalArmyCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalArmyCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalarmycount_)));
          set_has_totalarmycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_armies;
        break;
      }

      // repeated .slg.protocol.ReportSpyArmyDTO armies = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_armies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_armies()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_armies;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportSpyResourceGridDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .slg.protocol.ReportSpyResourceGridProfileDTO profile = 1;
  if (has_profile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->profile(), output);
  }

  // required .slg.protocol.PositionDTO position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }

  // required int32 remaining = 3;
  if (has_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->remaining(), output);
  }

  // optional int32 totalArmyCount = 4;
  if (has_totalarmycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->totalarmycount(), output);
  }

  // repeated .slg.protocol.ReportSpyArmyDTO armies = 5;
  for (int i = 0; i < this->armies_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->armies(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportSpyResourceGridDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .slg.protocol.ReportSpyResourceGridProfileDTO profile = 1;
  if (has_profile()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->profile(), target);
  }

  // required .slg.protocol.PositionDTO position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }

  // required int32 remaining = 3;
  if (has_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->remaining(), target);
  }

  // optional int32 totalArmyCount = 4;
  if (has_totalarmycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->totalarmycount(), target);
  }

  // repeated .slg.protocol.ReportSpyArmyDTO armies = 5;
  for (int i = 0; i < this->armies_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->armies(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportSpyResourceGridDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .slg.protocol.ReportSpyResourceGridProfileDTO profile = 1;
    if (has_profile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->profile());
    }

    // required .slg.protocol.PositionDTO position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // required int32 remaining = 3;
    if (has_remaining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remaining());
    }

    // optional int32 totalArmyCount = 4;
    if (has_totalarmycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalarmycount());
    }

  }
  // repeated .slg.protocol.ReportSpyArmyDTO armies = 5;
  total_size += 1 * this->armies_size();
  for (int i = 0; i < this->armies_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->armies(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportSpyResourceGridDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportSpyResourceGridDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportSpyResourceGridDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportSpyResourceGridDTO::MergeFrom(const ReportSpyResourceGridDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  armies_.MergeFrom(from.armies_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_profile()) {
      mutable_profile()->::slg::protocol::ReportSpyResourceGridProfileDTO::MergeFrom(from.profile());
    }
    if (from.has_position()) {
      mutable_position()->::slg::protocol::PositionDTO::MergeFrom(from.position());
    }
    if (from.has_remaining()) {
      set_remaining(from.remaining());
    }
    if (from.has_totalarmycount()) {
      set_totalarmycount(from.totalarmycount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportSpyResourceGridDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportSpyResourceGridDTO::CopyFrom(const ReportSpyResourceGridDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportSpyResourceGridDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_profile()) {
    if (!this->profile().IsInitialized()) return false;
  }
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  for (int i = 0; i < armies_size(); i++) {
    if (!this->armies(i).IsInitialized()) return false;
  }
  return true;
}

void ReportSpyResourceGridDTO::Swap(ReportSpyResourceGridDTO* other) {
  if (other != this) {
    std::swap(profile_, other->profile_);
    std::swap(position_, other->position_);
    std::swap(remaining_, other->remaining_);
    std::swap(totalarmycount_, other->totalarmycount_);
    armies_.Swap(&other->armies_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportSpyResourceGridDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportSpyResourceGridDTO_descriptor_;
  metadata.reflection = ReportSpyResourceGridDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportSpyDTO::kReportIdFieldNumber;
const int ReportSpyDTO::kTypeFieldNumber;
const int ReportSpyDTO::kTimeFieldNumber;
const int ReportSpyDTO::kCityFieldNumber;
const int ReportSpyDTO::kResourceFieldNumber;
#endif  // !_MSC_VER

ReportSpyDTO::ReportSpyDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportSpyDTO::InitAsDefaultInstance() {
  city_ = const_cast< ::slg::protocol::ReportSpyCityDTO*>(&::slg::protocol::ReportSpyCityDTO::default_instance());
  resource_ = const_cast< ::slg::protocol::ReportSpyResourceGridDTO*>(&::slg::protocol::ReportSpyResourceGridDTO::default_instance());
}

ReportSpyDTO::ReportSpyDTO(const ReportSpyDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportSpyDTO::SharedCtor() {
  _cached_size_ = 0;
  reportid_ = GOOGLE_LONGLONG(0);
  type_ = 1;
  time_ = 0;
  city_ = NULL;
  resource_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportSpyDTO::~ReportSpyDTO() {
  SharedDtor();
}

void ReportSpyDTO::SharedDtor() {
  if (this != default_instance_) {
    delete city_;
    delete resource_;
  }
}

void ReportSpyDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportSpyDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportSpyDTO_descriptor_;
}

const ReportSpyDTO& ReportSpyDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

ReportSpyDTO* ReportSpyDTO::default_instance_ = NULL;

ReportSpyDTO* ReportSpyDTO::New() const {
  return new ReportSpyDTO;
}

void ReportSpyDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reportid_ = GOOGLE_LONGLONG(0);
    type_ = 1;
    time_ = 0;
    if (has_city()) {
      if (city_ != NULL) city_->::slg::protocol::ReportSpyCityDTO::Clear();
    }
    if (has_resource()) {
      if (resource_ != NULL) resource_->::slg::protocol::ReportSpyResourceGridDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportSpyDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 reportId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reportid_)));
          set_has_reportid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .slg.protocol.ReportSpyType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::slg::protocol::ReportSpyType_IsValid(value)) {
            set_type(static_cast< ::slg::protocol::ReportSpyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_city;
        break;
      }

      // optional .slg.protocol.ReportSpyCityDTO city = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_city()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_resource;
        break;
      }

      // optional .slg.protocol.ReportSpyResourceGridDTO resource = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportSpyDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 reportId = 1;
  if (has_reportid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->reportid(), output);
  }

  // required .slg.protocol.ReportSpyType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // optional .slg.protocol.ReportSpyCityDTO city = 4;
  if (has_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->city(), output);
  }

  // optional .slg.protocol.ReportSpyResourceGridDTO resource = 5;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->resource(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportSpyDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 reportId = 1;
  if (has_reportid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->reportid(), target);
  }

  // required .slg.protocol.ReportSpyType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  // optional .slg.protocol.ReportSpyCityDTO city = 4;
  if (has_city()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->city(), target);
  }

  // optional .slg.protocol.ReportSpyResourceGridDTO resource = 5;
  if (has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->resource(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportSpyDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 reportId = 1;
    if (has_reportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reportid());
    }

    // required .slg.protocol.ReportSpyType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional .slg.protocol.ReportSpyCityDTO city = 4;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->city());
    }

    // optional .slg.protocol.ReportSpyResourceGridDTO resource = 5;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resource());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportSpyDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportSpyDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportSpyDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportSpyDTO::MergeFrom(const ReportSpyDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reportid()) {
      set_reportid(from.reportid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_city()) {
      mutable_city()->::slg::protocol::ReportSpyCityDTO::MergeFrom(from.city());
    }
    if (from.has_resource()) {
      mutable_resource()->::slg::protocol::ReportSpyResourceGridDTO::MergeFrom(from.resource());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportSpyDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportSpyDTO::CopyFrom(const ReportSpyDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportSpyDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_city()) {
    if (!this->city().IsInitialized()) return false;
  }
  if (has_resource()) {
    if (!this->resource().IsInitialized()) return false;
  }
  return true;
}

void ReportSpyDTO::Swap(ReportSpyDTO* other) {
  if (other != this) {
    std::swap(reportid_, other->reportid_);
    std::swap(type_, other->type_);
    std::swap(time_, other->time_);
    std::swap(city_, other->city_);
    std::swap(resource_, other->resource_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportSpyDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportSpyDTO_descriptor_;
  metadata.reflection = ReportSpyDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportSpyProfileDTO::kReportIdFieldNumber;
const int ReportSpyProfileDTO::kTypeFieldNumber;
const int ReportSpyProfileDTO::kTargetFieldNumber;
const int ReportSpyProfileDTO::kResultFieldNumber;
const int ReportSpyProfileDTO::kTimeFieldNumber;
const int ReportSpyProfileDTO::kReadFieldNumber;
const int ReportSpyProfileDTO::kBeSpiedFieldNumber;
const int ReportSpyProfileDTO::kResourceProfileFieldNumber;
#endif  // !_MSC_VER

ReportSpyProfileDTO::ReportSpyProfileDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportSpyProfileDTO::InitAsDefaultInstance() {
  target_ = const_cast< ::slg::protocol::ReportSpyPlayerDTO*>(&::slg::protocol::ReportSpyPlayerDTO::default_instance());
  resourceprofile_ = const_cast< ::slg::protocol::ReportSpyResourceGridProfileDTO*>(&::slg::protocol::ReportSpyResourceGridProfileDTO::default_instance());
}

ReportSpyProfileDTO::ReportSpyProfileDTO(const ReportSpyProfileDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportSpyProfileDTO::SharedCtor() {
  _cached_size_ = 0;
  reportid_ = GOOGLE_LONGLONG(0);
  type_ = 1;
  target_ = NULL;
  result_ = 1;
  time_ = 0;
  read_ = false;
  bespied_ = false;
  resourceprofile_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportSpyProfileDTO::~ReportSpyProfileDTO() {
  SharedDtor();
}

void ReportSpyProfileDTO::SharedDtor() {
  if (this != default_instance_) {
    delete target_;
    delete resourceprofile_;
  }
}

void ReportSpyProfileDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportSpyProfileDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportSpyProfileDTO_descriptor_;
}

const ReportSpyProfileDTO& ReportSpyProfileDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

ReportSpyProfileDTO* ReportSpyProfileDTO::default_instance_ = NULL;

ReportSpyProfileDTO* ReportSpyProfileDTO::New() const {
  return new ReportSpyProfileDTO;
}

void ReportSpyProfileDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reportid_ = GOOGLE_LONGLONG(0);
    type_ = 1;
    if (has_target()) {
      if (target_ != NULL) target_->::slg::protocol::ReportSpyPlayerDTO::Clear();
    }
    result_ = 1;
    time_ = 0;
    read_ = false;
    bespied_ = false;
    if (has_resourceprofile()) {
      if (resourceprofile_ != NULL) resourceprofile_->::slg::protocol::ReportSpyResourceGridProfileDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportSpyProfileDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 reportId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reportid_)));
          set_has_reportid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .slg.protocol.ReportSpyType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::slg::protocol::ReportSpyType_IsValid(value)) {
            set_type(static_cast< ::slg::protocol::ReportSpyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_target;
        break;
      }

      // required .slg.protocol.ReportSpyPlayerDTO target = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // required .slg.protocol.ReportSpyResult result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::slg::protocol::ReportSpyResult_IsValid(value)) {
            set_result(static_cast< ::slg::protocol::ReportSpyResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // required int32 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_read;
        break;
      }

      // required bool read = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_read:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &read_)));
          set_has_read();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_beSpied;
        break;
      }

      // required bool beSpied = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beSpied:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bespied_)));
          set_has_bespied();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_resourceProfile;
        break;
      }

      // optional .slg.protocol.ReportSpyResourceGridProfileDTO resourceProfile = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resourceProfile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resourceprofile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportSpyProfileDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 reportId = 1;
  if (has_reportid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->reportid(), output);
  }

  // required .slg.protocol.ReportSpyType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required .slg.protocol.ReportSpyPlayerDTO target = 3;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->target(), output);
  }

  // required .slg.protocol.ReportSpyResult result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  // required int32 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->time(), output);
  }

  // required bool read = 6;
  if (has_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->read(), output);
  }

  // required bool beSpied = 7;
  if (has_bespied()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->bespied(), output);
  }

  // optional .slg.protocol.ReportSpyResourceGridProfileDTO resourceProfile = 10;
  if (has_resourceprofile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->resourceprofile(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportSpyProfileDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 reportId = 1;
  if (has_reportid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->reportid(), target);
  }

  // required .slg.protocol.ReportSpyType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required .slg.protocol.ReportSpyPlayerDTO target = 3;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->target(), target);
  }

  // required .slg.protocol.ReportSpyResult result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->result(), target);
  }

  // required int32 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->time(), target);
  }

  // required bool read = 6;
  if (has_read()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->read(), target);
  }

  // required bool beSpied = 7;
  if (has_bespied()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->bespied(), target);
  }

  // optional .slg.protocol.ReportSpyResourceGridProfileDTO resourceProfile = 10;
  if (has_resourceprofile()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->resourceprofile(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportSpyProfileDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 reportId = 1;
    if (has_reportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reportid());
    }

    // required .slg.protocol.ReportSpyType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .slg.protocol.ReportSpyPlayerDTO target = 3;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }

    // required .slg.protocol.ReportSpyResult result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // required int32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // required bool read = 6;
    if (has_read()) {
      total_size += 1 + 1;
    }

    // required bool beSpied = 7;
    if (has_bespied()) {
      total_size += 1 + 1;
    }

    // optional .slg.protocol.ReportSpyResourceGridProfileDTO resourceProfile = 10;
    if (has_resourceprofile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resourceprofile());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportSpyProfileDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportSpyProfileDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportSpyProfileDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportSpyProfileDTO::MergeFrom(const ReportSpyProfileDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reportid()) {
      set_reportid(from.reportid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_target()) {
      mutable_target()->::slg::protocol::ReportSpyPlayerDTO::MergeFrom(from.target());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_read()) {
      set_read(from.read());
    }
    if (from.has_bespied()) {
      set_bespied(from.bespied());
    }
    if (from.has_resourceprofile()) {
      mutable_resourceprofile()->::slg::protocol::ReportSpyResourceGridProfileDTO::MergeFrom(from.resourceprofile());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportSpyProfileDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportSpyProfileDTO::CopyFrom(const ReportSpyProfileDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportSpyProfileDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_target()) {
    if (!this->target().IsInitialized()) return false;
  }
  if (has_resourceprofile()) {
    if (!this->resourceprofile().IsInitialized()) return false;
  }
  return true;
}

void ReportSpyProfileDTO::Swap(ReportSpyProfileDTO* other) {
  if (other != this) {
    std::swap(reportid_, other->reportid_);
    std::swap(type_, other->type_);
    std::swap(target_, other->target_);
    std::swap(result_, other->result_);
    std::swap(time_, other->time_);
    std::swap(read_, other->read_);
    std::swap(bespied_, other->bespied_);
    std::swap(resourceprofile_, other->resourceprofile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportSpyProfileDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportSpyProfileDTO_descriptor_;
  metadata.reflection = ReportSpyProfileDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportSpyProfileListPush::kProfilesFieldNumber;
#endif  // !_MSC_VER

ReportSpyProfileListPush::ReportSpyProfileListPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportSpyProfileListPush::InitAsDefaultInstance() {
}

ReportSpyProfileListPush::ReportSpyProfileListPush(const ReportSpyProfileListPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportSpyProfileListPush::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportSpyProfileListPush::~ReportSpyProfileListPush() {
  SharedDtor();
}

void ReportSpyProfileListPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportSpyProfileListPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportSpyProfileListPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportSpyProfileListPush_descriptor_;
}

const ReportSpyProfileListPush& ReportSpyProfileListPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

ReportSpyProfileListPush* ReportSpyProfileListPush::default_instance_ = NULL;

ReportSpyProfileListPush* ReportSpyProfileListPush::New() const {
  return new ReportSpyProfileListPush;
}

void ReportSpyProfileListPush::Clear() {
  profiles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportSpyProfileListPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.ReportSpyProfileDTO profiles = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_profiles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_profiles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_profiles;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportSpyProfileListPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.ReportSpyProfileDTO profiles = 1;
  for (int i = 0; i < this->profiles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->profiles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportSpyProfileListPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.ReportSpyProfileDTO profiles = 1;
  for (int i = 0; i < this->profiles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->profiles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportSpyProfileListPush::ByteSize() const {
  int total_size = 0;

  // repeated .slg.protocol.ReportSpyProfileDTO profiles = 1;
  total_size += 1 * this->profiles_size();
  for (int i = 0; i < this->profiles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->profiles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportSpyProfileListPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportSpyProfileListPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportSpyProfileListPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportSpyProfileListPush::MergeFrom(const ReportSpyProfileListPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  profiles_.MergeFrom(from.profiles_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportSpyProfileListPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportSpyProfileListPush::CopyFrom(const ReportSpyProfileListPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportSpyProfileListPush::IsInitialized() const {

  for (int i = 0; i < profiles_size(); i++) {
    if (!this->profiles(i).IsInitialized()) return false;
  }
  return true;
}

void ReportSpyProfileListPush::Swap(ReportSpyProfileListPush* other) {
  if (other != this) {
    profiles_.Swap(&other->profiles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportSpyProfileListPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportSpyProfileListPush_descriptor_;
  metadata.reflection = ReportSpyProfileListPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportSpyDetailRequest::kReportIdFieldNumber;
#endif  // !_MSC_VER

ReportSpyDetailRequest::ReportSpyDetailRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportSpyDetailRequest::InitAsDefaultInstance() {
}

ReportSpyDetailRequest::ReportSpyDetailRequest(const ReportSpyDetailRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportSpyDetailRequest::SharedCtor() {
  _cached_size_ = 0;
  reportid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportSpyDetailRequest::~ReportSpyDetailRequest() {
  SharedDtor();
}

void ReportSpyDetailRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportSpyDetailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportSpyDetailRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportSpyDetailRequest_descriptor_;
}

const ReportSpyDetailRequest& ReportSpyDetailRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

ReportSpyDetailRequest* ReportSpyDetailRequest::default_instance_ = NULL;

ReportSpyDetailRequest* ReportSpyDetailRequest::New() const {
  return new ReportSpyDetailRequest;
}

void ReportSpyDetailRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reportid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportSpyDetailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 reportId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reportid_)));
          set_has_reportid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportSpyDetailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 reportId = 1;
  if (has_reportid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->reportid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportSpyDetailRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 reportId = 1;
  if (has_reportid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->reportid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportSpyDetailRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 reportId = 1;
    if (has_reportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reportid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportSpyDetailRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportSpyDetailRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportSpyDetailRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportSpyDetailRequest::MergeFrom(const ReportSpyDetailRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reportid()) {
      set_reportid(from.reportid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportSpyDetailRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportSpyDetailRequest::CopyFrom(const ReportSpyDetailRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportSpyDetailRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReportSpyDetailRequest::Swap(ReportSpyDetailRequest* other) {
  if (other != this) {
    std::swap(reportid_, other->reportid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportSpyDetailRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportSpyDetailRequest_descriptor_;
  metadata.reflection = ReportSpyDetailRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportSpyDetailResponse::kReportFieldNumber;
#endif  // !_MSC_VER

ReportSpyDetailResponse::ReportSpyDetailResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportSpyDetailResponse::InitAsDefaultInstance() {
  report_ = const_cast< ::slg::protocol::ReportSpyDTO*>(&::slg::protocol::ReportSpyDTO::default_instance());
}

ReportSpyDetailResponse::ReportSpyDetailResponse(const ReportSpyDetailResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportSpyDetailResponse::SharedCtor() {
  _cached_size_ = 0;
  report_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportSpyDetailResponse::~ReportSpyDetailResponse() {
  SharedDtor();
}

void ReportSpyDetailResponse::SharedDtor() {
  if (this != default_instance_) {
    delete report_;
  }
}

void ReportSpyDetailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportSpyDetailResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportSpyDetailResponse_descriptor_;
}

const ReportSpyDetailResponse& ReportSpyDetailResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

ReportSpyDetailResponse* ReportSpyDetailResponse::default_instance_ = NULL;

ReportSpyDetailResponse* ReportSpyDetailResponse::New() const {
  return new ReportSpyDetailResponse;
}

void ReportSpyDetailResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_report()) {
      if (report_ != NULL) report_->::slg::protocol::ReportSpyDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportSpyDetailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .slg.protocol.ReportSpyDTO report = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_report()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportSpyDetailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .slg.protocol.ReportSpyDTO report = 1;
  if (has_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->report(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportSpyDetailResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .slg.protocol.ReportSpyDTO report = 1;
  if (has_report()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->report(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportSpyDetailResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .slg.protocol.ReportSpyDTO report = 1;
    if (has_report()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->report());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportSpyDetailResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportSpyDetailResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportSpyDetailResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportSpyDetailResponse::MergeFrom(const ReportSpyDetailResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_report()) {
      mutable_report()->::slg::protocol::ReportSpyDTO::MergeFrom(from.report());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportSpyDetailResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportSpyDetailResponse::CopyFrom(const ReportSpyDetailResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportSpyDetailResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_report()) {
    if (!this->report().IsInitialized()) return false;
  }
  return true;
}

void ReportSpyDetailResponse::Swap(ReportSpyDetailResponse* other) {
  if (other != this) {
    std::swap(report_, other->report_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportSpyDetailResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportSpyDetailResponse_descriptor_;
  metadata.reflection = ReportSpyDetailResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportSpyReadRequest::kReportIdFieldNumber;
#endif  // !_MSC_VER

ReportSpyReadRequest::ReportSpyReadRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportSpyReadRequest::InitAsDefaultInstance() {
}

ReportSpyReadRequest::ReportSpyReadRequest(const ReportSpyReadRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportSpyReadRequest::SharedCtor() {
  _cached_size_ = 0;
  reportid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportSpyReadRequest::~ReportSpyReadRequest() {
  SharedDtor();
}

void ReportSpyReadRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportSpyReadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportSpyReadRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportSpyReadRequest_descriptor_;
}

const ReportSpyReadRequest& ReportSpyReadRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

ReportSpyReadRequest* ReportSpyReadRequest::default_instance_ = NULL;

ReportSpyReadRequest* ReportSpyReadRequest::New() const {
  return new ReportSpyReadRequest;
}

void ReportSpyReadRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reportid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportSpyReadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 reportId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reportid_)));
          set_has_reportid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportSpyReadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 reportId = 1;
  if (has_reportid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->reportid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportSpyReadRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 reportId = 1;
  if (has_reportid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->reportid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportSpyReadRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 reportId = 1;
    if (has_reportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reportid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportSpyReadRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportSpyReadRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportSpyReadRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportSpyReadRequest::MergeFrom(const ReportSpyReadRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reportid()) {
      set_reportid(from.reportid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportSpyReadRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportSpyReadRequest::CopyFrom(const ReportSpyReadRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportSpyReadRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReportSpyReadRequest::Swap(ReportSpyReadRequest* other) {
  if (other != this) {
    std::swap(reportid_, other->reportid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportSpyReadRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportSpyReadRequest_descriptor_;
  metadata.reflection = ReportSpyReadRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportSpyDeleteRequest::kReportIdFieldNumber;
#endif  // !_MSC_VER

ReportSpyDeleteRequest::ReportSpyDeleteRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportSpyDeleteRequest::InitAsDefaultInstance() {
}

ReportSpyDeleteRequest::ReportSpyDeleteRequest(const ReportSpyDeleteRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportSpyDeleteRequest::SharedCtor() {
  _cached_size_ = 0;
  reportid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportSpyDeleteRequest::~ReportSpyDeleteRequest() {
  SharedDtor();
}

void ReportSpyDeleteRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportSpyDeleteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportSpyDeleteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportSpyDeleteRequest_descriptor_;
}

const ReportSpyDeleteRequest& ReportSpyDeleteRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

ReportSpyDeleteRequest* ReportSpyDeleteRequest::default_instance_ = NULL;

ReportSpyDeleteRequest* ReportSpyDeleteRequest::New() const {
  return new ReportSpyDeleteRequest;
}

void ReportSpyDeleteRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reportid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportSpyDeleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 reportId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reportid_)));
          set_has_reportid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportSpyDeleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 reportId = 1;
  if (has_reportid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->reportid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportSpyDeleteRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 reportId = 1;
  if (has_reportid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->reportid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportSpyDeleteRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 reportId = 1;
    if (has_reportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reportid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportSpyDeleteRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportSpyDeleteRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportSpyDeleteRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportSpyDeleteRequest::MergeFrom(const ReportSpyDeleteRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reportid()) {
      set_reportid(from.reportid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportSpyDeleteRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportSpyDeleteRequest::CopyFrom(const ReportSpyDeleteRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportSpyDeleteRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReportSpyDeleteRequest::Swap(ReportSpyDeleteRequest* other) {
  if (other != this) {
    std::swap(reportid_, other->reportid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportSpyDeleteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportSpyDeleteRequest_descriptor_;
  metadata.reflection = ReportSpyDeleteRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace slg

// @@protoc_insertion_point(global_scope)
