// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: alliance.proto

#ifndef PROTOBUF_alliance_2eproto__INCLUDED
#define PROTOBUF_alliance_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace slg {
namespace protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_alliance_2eproto();
void protobuf_AssignDesc_alliance_2eproto();
void protobuf_ShutdownFile_alliance_2eproto();

class AllianceSummaryDTO;
class AllianceTechVoteDTO;
class RecommendDTO;
class AllianceInviteDTO;
class AllianceShopItemDTO;
class ContributeDTO;
class AllianceContributeInfoDTO;
class AllianceTechDTO;
class AllianceTechUpgradeDTO;
class AllianceNewsDTO;
class AllianceHelpDTO;
class AllianceMemberDTO;
class AllianceDTO;
class CreateAllianceRequest;
class CreateAllianceResponse;
class QueryAllianceRequest;
class QueryAllianceResponse;
class MyAllianceInfoRequest;
class MyAllianceInfoResponse;
class JoinAllianceRequest;
class JoinAllianceResponse;
class SetPositionRequest;
class SetPositionResponse;
class KickOutAllianceRequest;
class ExitsAllianceRequest;
class ExitsAllianceResponse;
class TransferLeaderRequest;
class TransferLeaderResponse;
class AllianceSettingRequest;
class AllianceSettingResponse;
class AllianceApplyRequest;
class AllianceApplyesponse;
class AllianceListRequest;
class AllianceListResponse;
class CheckAllianceNameRequest;
class CheckAllianceNameResponse;
class SendAllianceHelpRequest;
class HelpMemberRequest;
class HelpMemberResponse;
class AllianceHelpListRequest;
class AllianceHelpListResponse;
class AllianceVoteRequest;
class AllianceVoteResponse;
class AllianceTechUpgradeRequest;
class AllianceTechUpgradeResponse;
class ContributeInfoRequest;
class ContributeInfoResponse;
class ContributeRequest;
class DrawAllianceGiftRequest;
class DrawAllianceGiftResponse;
class ClearContributedCdRequest;
class ClearContributedCdResponse;
class AllianceShopInfoRequest;
class AllianceShopInfoResponse;
class AllianceShopBuyRequest;
class AllianceShopBuyResponse;
class InviteJoinAllianceRequest;
class InviteJoinAllianceResponse;
class DealInviteRequest;
class DealInviteResponse;
class FreshRecommendRequest;
class FreshRecommendResponse;
class GetRecommendRequest;
class GetRecommendResponse;
class QuickJoinRequest;
class QueryInviterRequest;
class QueryInviterResponse;
class AllianceMemberRequest;
class AllianceMemberResponse;
class NeedAllianceDataRequest;
class AllianceSummaryRequest;
class AllianceSummaryResponse;
class MemberChangePush;
class MemberExitPush;
class MyAllianceInfoPush;
class HelpChangePush;
class HelpRemovePush;
class AllianceNewsPush;
class AllianceTechPush;
class AllianceTechUpgradePush;
class AllianceDonationPush;
class AllianceWelfarePush;
class AllianceNewsRemovePush;
class AllianceInvitePush;
class HasSendHelpTimesPush;
class AllianceScorePush;
class MyVotePush;
class AllianceVoteInfoPush;
class AllianceChangePush;

enum AllianceCommandId {
  ALLIANCE_CRATE_ALLIANCE = 1501,
  ALLIANCE_QUERY_ALLIANCE = 1502,
  ALLIANCE_JOIN_ALLIANCE = 1503,
  ALLIANCE_SET_POSITION = 1504,
  ALLIANCE_KICK_MEMBER = 1505,
  ALLIANCE_EXITS_MEMBER = 1506,
  ALLIANCE_REPLACE_LEADER = 1507,
  ALLIANCE_SET_ALLIANCE = 1508,
  ALLIANCE_APPLY_ALLIANCE = 1509,
  ALLIANCE_GET_ALLIANCELIST = 1510,
  ALLIANCE_CHECK_ALLIANCNAME = 1511,
  ALLIANCE_SEND_HELP = 1512,
  ALLIANCE_HELP_MEMBER = 1513,
  ALLIANCE_GET_HELP_LIST = 1514,
  ALLIANCE_MY_ALLIANCE_INFO = 1515,
  ALLIANCE_TECH_VOTE = 1516,
  ALLIANCE_TECH_UPGRADE = 1517,
  ALLIANCE_CONTRIBUTE_INFO = 1518,
  ALLIANCE_CONTRIBUTE = 1519,
  ALLIANCE_CONTRIBUTE_GIFT = 1520,
  ALLIANCE_CONTRIBUTE_CD_CLEAR = 1521,
  ALLIANCE_SHOP_INFO = 1522,
  ALLIANCE_SHOP_BUY = 1523,
  ALLIANCE_INVITE_JOIN = 1524,
  ALLIANCE_DEAL_INVITE = 1525,
  ALLIANCE_FRESH_RECOMMEND = 1526,
  ALLIANCE_GET_RECOMMEND = 1527,
  ALLIANCE_QUICK_JOIN = 1528,
  ALLIANCE_QUERY_INVITER = 1529,
  ALLIANCE_MEMBER_LIST = 1530,
  ALLIANCE_TRANSFER_LEADER = 1531,
  ALLIANCE_NEED_ALLIANCE_DATA = 1532,
  ALLIANCE_SUMMARY_INFO = 1533
};
bool AllianceCommandId_IsValid(int value);
const AllianceCommandId AllianceCommandId_MIN = ALLIANCE_CRATE_ALLIANCE;
const AllianceCommandId AllianceCommandId_MAX = ALLIANCE_SUMMARY_INFO;
const int AllianceCommandId_ARRAYSIZE = AllianceCommandId_MAX + 1;

const ::google::protobuf::EnumDescriptor* AllianceCommandId_descriptor();
inline const ::std::string& AllianceCommandId_Name(AllianceCommandId value) {
  return ::google::protobuf::internal::NameOfEnum(
    AllianceCommandId_descriptor(), value);
}
inline bool AllianceCommandId_Parse(
    const ::std::string& name, AllianceCommandId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AllianceCommandId>(
    AllianceCommandId_descriptor(), name, value);
}
enum AlliancePushId {
  ALLIANCE_MEMBER_CHANGE_PUSH = 51501,
  ALLIANCE_MEMBER_EXIT_PUSH = 51502,
  ALLIANCE_MY_ALLIANCE_PUSH = 51503,
  ALLIANCE_HELP_CHANGE_PUSH = 51504,
  ALLIANCE_HELP_REMOVE_PUSH = 51505,
  ALLIANCE_NEWS_PUSH = 51506,
  ALLIANCE_TECH_PUSH = 51507,
  ALLIANCE_TECH_UPGRADE_PUSH = 51508,
  ALLIANCE_CONTRIBUTE_PUSH = 51509,
  ALLIANCE_WELFARE_PUSH = 51510,
  ALLIANCE_NEWS_REMOVE_PUSH = 51511,
  ALLIANCE_INVITE_PUSH = 51512,
  ALLIANCE_SENDHELP_PUSH = 51513,
  ALLIANCE_SCORE_PUSH = 51514,
  ALLIANCE_MY_VOTE_PUSH = 51515,
  ALLIANCE_VOTE_PUSH = 51516,
  ALLIANCE_CHANGE_PUSH = 51517,
  ALLIANCE_JOIN_SUCCEED = 51518
};
bool AlliancePushId_IsValid(int value);
const AlliancePushId AlliancePushId_MIN = ALLIANCE_MEMBER_CHANGE_PUSH;
const AlliancePushId AlliancePushId_MAX = ALLIANCE_JOIN_SUCCEED;
const int AlliancePushId_ARRAYSIZE = AlliancePushId_MAX + 1;

const ::google::protobuf::EnumDescriptor* AlliancePushId_descriptor();
inline const ::std::string& AlliancePushId_Name(AlliancePushId value) {
  return ::google::protobuf::internal::NameOfEnum(
    AlliancePushId_descriptor(), value);
}
inline bool AlliancePushId_Parse(
    const ::std::string& name, AlliancePushId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AlliancePushId>(
    AlliancePushId_descriptor(), name, value);
}
// ===================================================================

class AllianceSummaryDTO : public ::google::protobuf::Message {
 public:
  AllianceSummaryDTO();
  virtual ~AllianceSummaryDTO();

  AllianceSummaryDTO(const AllianceSummaryDTO& from);

  inline AllianceSummaryDTO& operator=(const AllianceSummaryDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceSummaryDTO& default_instance();

  void Swap(AllianceSummaryDTO* other);

  // implements Message ----------------------------------------------

  AllianceSummaryDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceSummaryDTO& from);
  void MergeFrom(const AllianceSummaryDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 honor = 3;
  inline bool has_honor() const;
  inline void clear_honor();
  static const int kHonorFieldNumber = 3;
  inline ::google::protobuf::int32 honor() const;
  inline void set_honor(::google::protobuf::int32 value);

  // required int32 flag = 4;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 4;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // required string leaderName = 5;
  inline bool has_leadername() const;
  inline void clear_leadername();
  static const int kLeaderNameFieldNumber = 5;
  inline const ::std::string& leadername() const;
  inline void set_leadername(const ::std::string& value);
  inline void set_leadername(const char* value);
  inline void set_leadername(const char* value, size_t size);
  inline ::std::string* mutable_leadername();
  inline ::std::string* release_leadername();
  inline void set_allocated_leadername(::std::string* leadername);

  // required int32 memberLimit = 6;
  inline bool has_memberlimit() const;
  inline void clear_memberlimit();
  static const int kMemberLimitFieldNumber = 6;
  inline ::google::protobuf::int32 memberlimit() const;
  inline void set_memberlimit(::google::protobuf::int32 value);

  // required int32 currentMember = 7;
  inline bool has_currentmember() const;
  inline void clear_currentmember();
  static const int kCurrentMemberFieldNumber = 7;
  inline ::google::protobuf::int32 currentmember() const;
  inline void set_currentmember(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceSummaryDTO)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_honor();
  inline void clear_has_honor();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_leadername();
  inline void clear_has_leadername();
  inline void set_has_memberlimit();
  inline void clear_has_memberlimit();
  inline void set_has_currentmember();
  inline void clear_has_currentmember();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 honor_;
  ::std::string* leadername_;
  ::google::protobuf::int32 flag_;
  ::google::protobuf::int32 memberlimit_;
  ::google::protobuf::int32 currentmember_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceSummaryDTO* default_instance_;
};
// -------------------------------------------------------------------

class AllianceTechVoteDTO : public ::google::protobuf::Message {
 public:
  AllianceTechVoteDTO();
  virtual ~AllianceTechVoteDTO();

  AllianceTechVoteDTO(const AllianceTechVoteDTO& from);

  inline AllianceTechVoteDTO& operator=(const AllianceTechVoteDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceTechVoteDTO& default_instance();

  void Swap(AllianceTechVoteDTO* other);

  // implements Message ----------------------------------------------

  AllianceTechVoteDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceTechVoteDTO& from);
  void MergeFrom(const AllianceTechVoteDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 techType = 1;
  inline bool has_techtype() const;
  inline void clear_techtype();
  static const int kTechTypeFieldNumber = 1;
  inline ::google::protobuf::int32 techtype() const;
  inline void set_techtype(::google::protobuf::int32 value);

  // required int32 voteNum = 2;
  inline bool has_votenum() const;
  inline void clear_votenum();
  static const int kVoteNumFieldNumber = 2;
  inline ::google::protobuf::int32 votenum() const;
  inline void set_votenum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceTechVoteDTO)
 private:
  inline void set_has_techtype();
  inline void clear_has_techtype();
  inline void set_has_votenum();
  inline void clear_has_votenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 techtype_;
  ::google::protobuf::int32 votenum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceTechVoteDTO* default_instance_;
};
// -------------------------------------------------------------------

class RecommendDTO : public ::google::protobuf::Message {
 public:
  RecommendDTO();
  virtual ~RecommendDTO();

  RecommendDTO(const RecommendDTO& from);

  inline RecommendDTO& operator=(const RecommendDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecommendDTO& default_instance();

  void Swap(RecommendDTO* other);

  // implements Message ----------------------------------------------

  RecommendDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecommendDTO& from);
  void MergeFrom(const RecommendDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // required string icon = 2;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 2;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // required int32 battle = 3;
  inline bool has_battle() const;
  inline void clear_battle();
  static const int kBattleFieldNumber = 3;
  inline ::google::protobuf::int32 battle() const;
  inline void set_battle(::google::protobuf::int32 value);

  // required bool isInvited = 4;
  inline bool has_isinvited() const;
  inline void clear_isinvited();
  static const int kIsInvitedFieldNumber = 4;
  inline bool isinvited() const;
  inline void set_isinvited(bool value);

  // required string playerName = 5;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 5;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // @@protoc_insertion_point(class_scope:slg.protocol.RecommendDTO)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_battle();
  inline void clear_has_battle();
  inline void set_has_isinvited();
  inline void clear_has_isinvited();
  inline void set_has_playername();
  inline void clear_has_playername();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 playerid_;
  ::std::string* icon_;
  ::google::protobuf::int32 battle_;
  bool isinvited_;
  ::std::string* playername_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static RecommendDTO* default_instance_;
};
// -------------------------------------------------------------------

class AllianceInviteDTO : public ::google::protobuf::Message {
 public:
  AllianceInviteDTO();
  virtual ~AllianceInviteDTO();

  AllianceInviteDTO(const AllianceInviteDTO& from);

  inline AllianceInviteDTO& operator=(const AllianceInviteDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceInviteDTO& default_instance();

  void Swap(AllianceInviteDTO* other);

  // implements Message ----------------------------------------------

  AllianceInviteDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceInviteDTO& from);
  void MergeFrom(const AllianceInviteDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 allianceId = 1;
  inline bool has_allianceid() const;
  inline void clear_allianceid();
  static const int kAllianceIdFieldNumber = 1;
  inline ::google::protobuf::int32 allianceid() const;
  inline void set_allianceid(::google::protobuf::int32 value);

  // required string allianceName = 2;
  inline bool has_alliancename() const;
  inline void clear_alliancename();
  static const int kAllianceNameFieldNumber = 2;
  inline const ::std::string& alliancename() const;
  inline void set_alliancename(const ::std::string& value);
  inline void set_alliancename(const char* value);
  inline void set_alliancename(const char* value, size_t size);
  inline ::std::string* mutable_alliancename();
  inline ::std::string* release_alliancename();
  inline void set_allocated_alliancename(::std::string* alliancename);

  // required int32 icon = 3;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 3;
  inline ::google::protobuf::int32 icon() const;
  inline void set_icon(::google::protobuf::int32 value);

  // required int32 current = 4;
  inline bool has_current() const;
  inline void clear_current();
  static const int kCurrentFieldNumber = 4;
  inline ::google::protobuf::int32 current() const;
  inline void set_current(::google::protobuf::int32 value);

  // required int32 limit = 5;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 5;
  inline ::google::protobuf::int32 limit() const;
  inline void set_limit(::google::protobuf::int32 value);

  // required int32 honor = 6;
  inline bool has_honor() const;
  inline void clear_honor();
  static const int kHonorFieldNumber = 6;
  inline ::google::protobuf::int32 honor() const;
  inline void set_honor(::google::protobuf::int32 value);

  // required int64 leaderId = 7;
  inline bool has_leaderid() const;
  inline void clear_leaderid();
  static const int kLeaderIdFieldNumber = 7;
  inline ::google::protobuf::int64 leaderid() const;
  inline void set_leaderid(::google::protobuf::int64 value);

  // required string leaderName = 8;
  inline bool has_leadername() const;
  inline void clear_leadername();
  static const int kLeaderNameFieldNumber = 8;
  inline const ::std::string& leadername() const;
  inline void set_leadername(const ::std::string& value);
  inline void set_leadername(const char* value);
  inline void set_leadername(const char* value, size_t size);
  inline ::std::string* mutable_leadername();
  inline ::std::string* release_leadername();
  inline void set_allocated_leadername(::std::string* leadername);

  // required int32 inviteTime = 9;
  inline bool has_invitetime() const;
  inline void clear_invitetime();
  static const int kInviteTimeFieldNumber = 9;
  inline ::google::protobuf::int32 invitetime() const;
  inline void set_invitetime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceInviteDTO)
 private:
  inline void set_has_allianceid();
  inline void clear_has_allianceid();
  inline void set_has_alliancename();
  inline void clear_has_alliancename();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_current();
  inline void clear_has_current();
  inline void set_has_limit();
  inline void clear_has_limit();
  inline void set_has_honor();
  inline void clear_has_honor();
  inline void set_has_leaderid();
  inline void clear_has_leaderid();
  inline void set_has_leadername();
  inline void clear_has_leadername();
  inline void set_has_invitetime();
  inline void clear_has_invitetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* alliancename_;
  ::google::protobuf::int32 allianceid_;
  ::google::protobuf::int32 icon_;
  ::google::protobuf::int32 current_;
  ::google::protobuf::int32 limit_;
  ::google::protobuf::int64 leaderid_;
  ::google::protobuf::int32 honor_;
  ::google::protobuf::int32 invitetime_;
  ::std::string* leadername_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceInviteDTO* default_instance_;
};
// -------------------------------------------------------------------

class AllianceShopItemDTO : public ::google::protobuf::Message {
 public:
  AllianceShopItemDTO();
  virtual ~AllianceShopItemDTO();

  AllianceShopItemDTO(const AllianceShopItemDTO& from);

  inline AllianceShopItemDTO& operator=(const AllianceShopItemDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceShopItemDTO& default_instance();

  void Swap(AllianceShopItemDTO* other);

  // implements Message ----------------------------------------------

  AllianceShopItemDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceShopItemDTO& from);
  void MergeFrom(const AllianceShopItemDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 buyTimes = 2;
  inline bool has_buytimes() const;
  inline void clear_buytimes();
  static const int kBuyTimesFieldNumber = 2;
  inline ::google::protobuf::int32 buytimes() const;
  inline void set_buytimes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceShopItemDTO)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_buytimes();
  inline void clear_has_buytimes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 buytimes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceShopItemDTO* default_instance_;
};
// -------------------------------------------------------------------

class ContributeDTO : public ::google::protobuf::Message {
 public:
  ContributeDTO();
  virtual ~ContributeDTO();

  ContributeDTO(const ContributeDTO& from);

  inline ContributeDTO& operator=(const ContributeDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContributeDTO& default_instance();

  void Swap(ContributeDTO* other);

  // implements Message ----------------------------------------------

  ContributeDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContributeDTO& from);
  void MergeFrom(const ContributeDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required bool is_open = 2;
  inline bool has_is_open() const;
  inline void clear_is_open();
  static const int kIsOpenFieldNumber = 2;
  inline bool is_open() const;
  inline void set_is_open(bool value);

  // required int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.ContributeDTO)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_is_open();
  inline void clear_has_is_open();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 level_;
  bool is_open_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static ContributeDTO* default_instance_;
};
// -------------------------------------------------------------------

class AllianceContributeInfoDTO : public ::google::protobuf::Message {
 public:
  AllianceContributeInfoDTO();
  virtual ~AllianceContributeInfoDTO();

  AllianceContributeInfoDTO(const AllianceContributeInfoDTO& from);

  inline AllianceContributeInfoDTO& operator=(const AllianceContributeInfoDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceContributeInfoDTO& default_instance();

  void Swap(AllianceContributeInfoDTO* other);

  // implements Message ----------------------------------------------

  AllianceContributeInfoDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceContributeInfoDTO& from);
  void MergeFrom(const AllianceContributeInfoDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .slg.protocol.ContributeDTO contributes = 1;
  inline int contributes_size() const;
  inline void clear_contributes();
  static const int kContributesFieldNumber = 1;
  inline const ::slg::protocol::ContributeDTO& contributes(int index) const;
  inline ::slg::protocol::ContributeDTO* mutable_contributes(int index);
  inline ::slg::protocol::ContributeDTO* add_contributes();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::ContributeDTO >&
      contributes() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::ContributeDTO >*
      mutable_contributes();

  // required int32 coolDownTime = 2;
  inline bool has_cooldowntime() const;
  inline void clear_cooldowntime();
  static const int kCoolDownTimeFieldNumber = 2;
  inline ::google::protobuf::int32 cooldowntime() const;
  inline void set_cooldowntime(::google::protobuf::int32 value);

  // required int32 coolStartTime = 3;
  inline bool has_coolstarttime() const;
  inline void clear_coolstarttime();
  static const int kCoolStartTimeFieldNumber = 3;
  inline ::google::protobuf::int32 coolstarttime() const;
  inline void set_coolstarttime(::google::protobuf::int32 value);

  // required bool isJoinCd = 4;
  inline bool has_isjoincd() const;
  inline void clear_isjoincd();
  static const int kIsJoinCdFieldNumber = 4;
  inline bool isjoincd() const;
  inline void set_isjoincd(bool value);

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceContributeInfoDTO)
 private:
  inline void set_has_cooldowntime();
  inline void clear_has_cooldowntime();
  inline void set_has_coolstarttime();
  inline void clear_has_coolstarttime();
  inline void set_has_isjoincd();
  inline void clear_has_isjoincd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::slg::protocol::ContributeDTO > contributes_;
  ::google::protobuf::int32 cooldowntime_;
  ::google::protobuf::int32 coolstarttime_;
  bool isjoincd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceContributeInfoDTO* default_instance_;
};
// -------------------------------------------------------------------

class AllianceTechDTO : public ::google::protobuf::Message {
 public:
  AllianceTechDTO();
  virtual ~AllianceTechDTO();

  AllianceTechDTO(const AllianceTechDTO& from);

  inline AllianceTechDTO& operator=(const AllianceTechDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceTechDTO& default_instance();

  void Swap(AllianceTechDTO* other);

  // implements Message ----------------------------------------------

  AllianceTechDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceTechDTO& from);
  void MergeFrom(const AllianceTechDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceTechDTO)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceTechDTO* default_instance_;
};
// -------------------------------------------------------------------

class AllianceTechUpgradeDTO : public ::google::protobuf::Message {
 public:
  AllianceTechUpgradeDTO();
  virtual ~AllianceTechUpgradeDTO();

  AllianceTechUpgradeDTO(const AllianceTechUpgradeDTO& from);

  inline AllianceTechUpgradeDTO& operator=(const AllianceTechUpgradeDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceTechUpgradeDTO& default_instance();

  void Swap(AllianceTechUpgradeDTO* other);

  // implements Message ----------------------------------------------

  AllianceTechUpgradeDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceTechUpgradeDTO& from);
  void MergeFrom(const AllianceTechUpgradeDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 endTime = 2;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 2;
  inline ::google::protobuf::int32 endtime() const;
  inline void set_endtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceTechUpgradeDTO)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_endtime();
  inline void clear_has_endtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 endtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceTechUpgradeDTO* default_instance_;
};
// -------------------------------------------------------------------

class AllianceNewsDTO : public ::google::protobuf::Message {
 public:
  AllianceNewsDTO();
  virtual ~AllianceNewsDTO();

  AllianceNewsDTO(const AllianceNewsDTO& from);

  inline AllianceNewsDTO& operator=(const AllianceNewsDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceNewsDTO& default_instance();

  void Swap(AllianceNewsDTO* other);

  // implements Message ----------------------------------------------

  AllianceNewsDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceNewsDTO& from);
  void MergeFrom(const AllianceNewsDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int64 targetId = 3;
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetIdFieldNumber = 3;
  inline ::google::protobuf::int64 targetid() const;
  inline void set_targetid(::google::protobuf::int64 value);

  // optional string applyMsg = 4;
  inline bool has_applymsg() const;
  inline void clear_applymsg();
  static const int kApplyMsgFieldNumber = 4;
  inline const ::std::string& applymsg() const;
  inline void set_applymsg(const ::std::string& value);
  inline void set_applymsg(const char* value);
  inline void set_applymsg(const char* value, size_t size);
  inline ::std::string* mutable_applymsg();
  inline ::std::string* release_applymsg();
  inline void set_allocated_applymsg(::std::string* applymsg);

  // optional string playerName1 = 5;
  inline bool has_playername1() const;
  inline void clear_playername1();
  static const int kPlayerName1FieldNumber = 5;
  inline const ::std::string& playername1() const;
  inline void set_playername1(const ::std::string& value);
  inline void set_playername1(const char* value);
  inline void set_playername1(const char* value, size_t size);
  inline ::std::string* mutable_playername1();
  inline ::std::string* release_playername1();
  inline void set_allocated_playername1(::std::string* playername1);

  // optional string playerName2 = 6;
  inline bool has_playername2() const;
  inline void clear_playername2();
  static const int kPlayerName2FieldNumber = 6;
  inline const ::std::string& playername2() const;
  inline void set_playername2(const ::std::string& value);
  inline void set_playername2(const char* value);
  inline void set_playername2(const char* value, size_t size);
  inline ::std::string* mutable_playername2();
  inline ::std::string* release_playername2();
  inline void set_allocated_playername2(::std::string* playername2);

  // optional .slg.protocol.PositionDTO position = 7;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 7;
  inline const ::slg::protocol::PositionDTO& position() const;
  inline ::slg::protocol::PositionDTO* mutable_position();
  inline ::slg::protocol::PositionDTO* release_position();
  inline void set_allocated_position(::slg::protocol::PositionDTO* position);

  // optional int32 time = 8;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 8;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // optional bool friendIsWin = 9;
  inline bool has_friendiswin() const;
  inline void clear_friendiswin();
  static const int kFriendIsWinFieldNumber = 9;
  inline bool friendiswin() const;
  inline void set_friendiswin(bool value);

  // optional string enAlliShortName = 10;
  inline bool has_enallishortname() const;
  inline void clear_enallishortname();
  static const int kEnAlliShortNameFieldNumber = 10;
  inline const ::std::string& enallishortname() const;
  inline void set_enallishortname(const ::std::string& value);
  inline void set_enallishortname(const char* value);
  inline void set_enallishortname(const char* value, size_t size);
  inline ::std::string* mutable_enallishortname();
  inline ::std::string* release_enallishortname();
  inline void set_allocated_enallishortname(::std::string* enallishortname);

  // optional int32 param1 = 11;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 11;
  inline ::google::protobuf::int32 param1() const;
  inline void set_param1(::google::protobuf::int32 value);

  // optional int32 param2 = 12;
  inline bool has_param2() const;
  inline void clear_param2();
  static const int kParam2FieldNumber = 12;
  inline ::google::protobuf::int32 param2() const;
  inline void set_param2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceNewsDTO)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_targetid();
  inline void clear_has_targetid();
  inline void set_has_applymsg();
  inline void clear_has_applymsg();
  inline void set_has_playername1();
  inline void clear_has_playername1();
  inline void set_has_playername2();
  inline void clear_has_playername2();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_friendiswin();
  inline void clear_has_friendiswin();
  inline void set_has_enallishortname();
  inline void clear_has_enallishortname();
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_param2();
  inline void clear_has_param2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int64 targetid_;
  ::std::string* applymsg_;
  ::std::string* playername1_;
  ::std::string* playername2_;
  ::slg::protocol::PositionDTO* position_;
  ::google::protobuf::int32 time_;
  bool friendiswin_;
  ::std::string* enallishortname_;
  ::google::protobuf::int32 param1_;
  ::google::protobuf::int32 param2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceNewsDTO* default_instance_;
};
// -------------------------------------------------------------------

class AllianceHelpDTO : public ::google::protobuf::Message {
 public:
  AllianceHelpDTO();
  virtual ~AllianceHelpDTO();

  AllianceHelpDTO(const AllianceHelpDTO& from);

  inline AllianceHelpDTO& operator=(const AllianceHelpDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceHelpDTO& default_instance();

  void Swap(AllianceHelpDTO* other);

  // implements Message ----------------------------------------------

  AllianceHelpDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceHelpDTO& from);
  void MergeFrom(const AllianceHelpDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 timerId = 1;
  inline bool has_timerid() const;
  inline void clear_timerid();
  static const int kTimerIdFieldNumber = 1;
  inline ::google::protobuf::int32 timerid() const;
  inline void set_timerid(::google::protobuf::int32 value);

  // required int64 playerId = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // required string playerName = 3;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 3;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // required int32 targetId = 4;
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetIdFieldNumber = 4;
  inline ::google::protobuf::int32 targetid() const;
  inline void set_targetid(::google::protobuf::int32 value);

  // required int32 helpType = 5;
  inline bool has_helptype() const;
  inline void clear_helptype();
  static const int kHelpTypeFieldNumber = 5;
  inline ::google::protobuf::int32 helptype() const;
  inline void set_helptype(::google::protobuf::int32 value);

  // required int32 helpTimes = 6;
  inline bool has_helptimes() const;
  inline void clear_helptimes();
  static const int kHelpTimesFieldNumber = 6;
  inline ::google::protobuf::int32 helptimes() const;
  inline void set_helptimes(::google::protobuf::int32 value);

  // required int32 targetLevel = 7;
  inline bool has_targetlevel() const;
  inline void clear_targetlevel();
  static const int kTargetLevelFieldNumber = 7;
  inline ::google::protobuf::int32 targetlevel() const;
  inline void set_targetlevel(::google::protobuf::int32 value);

  // required int32 maxTimes = 8;
  inline bool has_maxtimes() const;
  inline void clear_maxtimes();
  static const int kMaxTimesFieldNumber = 8;
  inline ::google::protobuf::int32 maxtimes() const;
  inline void set_maxtimes(::google::protobuf::int32 value);

  // required string playerIcon = 9;
  inline bool has_playericon() const;
  inline void clear_playericon();
  static const int kPlayerIconFieldNumber = 9;
  inline const ::std::string& playericon() const;
  inline void set_playericon(const ::std::string& value);
  inline void set_playericon(const char* value);
  inline void set_playericon(const char* value, size_t size);
  inline ::std::string* mutable_playericon();
  inline ::std::string* release_playericon();
  inline void set_allocated_playericon(::std::string* playericon);

  // required int32 helpId = 10;
  inline bool has_helpid() const;
  inline void clear_helpid();
  static const int kHelpIdFieldNumber = 10;
  inline ::google::protobuf::int32 helpid() const;
  inline void set_helpid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceHelpDTO)
 private:
  inline void set_has_timerid();
  inline void clear_has_timerid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_targetid();
  inline void clear_has_targetid();
  inline void set_has_helptype();
  inline void clear_has_helptype();
  inline void set_has_helptimes();
  inline void clear_has_helptimes();
  inline void set_has_targetlevel();
  inline void clear_has_targetlevel();
  inline void set_has_maxtimes();
  inline void clear_has_maxtimes();
  inline void set_has_playericon();
  inline void clear_has_playericon();
  inline void set_has_helpid();
  inline void clear_has_helpid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 playerid_;
  ::google::protobuf::int32 timerid_;
  ::google::protobuf::int32 targetid_;
  ::std::string* playername_;
  ::google::protobuf::int32 helptype_;
  ::google::protobuf::int32 helptimes_;
  ::google::protobuf::int32 targetlevel_;
  ::google::protobuf::int32 maxtimes_;
  ::std::string* playericon_;
  ::google::protobuf::int32 helpid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceHelpDTO* default_instance_;
};
// -------------------------------------------------------------------

class AllianceMemberDTO : public ::google::protobuf::Message {
 public:
  AllianceMemberDTO();
  virtual ~AllianceMemberDTO();

  AllianceMemberDTO(const AllianceMemberDTO& from);

  inline AllianceMemberDTO& operator=(const AllianceMemberDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceMemberDTO& default_instance();

  void Swap(AllianceMemberDTO* other);

  // implements Message ----------------------------------------------

  AllianceMemberDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceMemberDTO& from);
  void MergeFrom(const AllianceMemberDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 power = 3;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 3;
  inline ::google::protobuf::int32 power() const;
  inline void set_power(::google::protobuf::int32 value);

  // required int32 historyDon = 4;
  inline bool has_historydon() const;
  inline void clear_historydon();
  static const int kHistoryDonFieldNumber = 4;
  inline ::google::protobuf::int32 historydon() const;
  inline void set_historydon(::google::protobuf::int32 value);

  // required int32 dayDon = 5;
  inline bool has_daydon() const;
  inline void clear_daydon();
  static const int kDayDonFieldNumber = 5;
  inline ::google::protobuf::int32 daydon() const;
  inline void set_daydon(::google::protobuf::int32 value);

  // required int32 weekDon = 6;
  inline bool has_weekdon() const;
  inline void clear_weekdon();
  static const int kWeekDonFieldNumber = 6;
  inline ::google::protobuf::int32 weekdon() const;
  inline void set_weekdon(::google::protobuf::int32 value);

  // required bool isOnline = 7;
  inline bool has_isonline() const;
  inline void clear_isonline();
  static const int kIsOnlineFieldNumber = 7;
  inline bool isonline() const;
  inline void set_isonline(bool value);

  // required string icon = 8;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 8;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // required int32 position = 9;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 9;
  inline ::google::protobuf::int32 position() const;
  inline void set_position(::google::protobuf::int32 value);

  // required .slg.protocol.PositionDTO pos = 10;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 10;
  inline const ::slg::protocol::PositionDTO& pos() const;
  inline ::slg::protocol::PositionDTO* mutable_pos();
  inline ::slg::protocol::PositionDTO* release_pos();
  inline void set_allocated_pos(::slg::protocol::PositionDTO* pos);

  // required int32 lastLoginTime = 11;
  inline bool has_lastlogintime() const;
  inline void clear_lastlogintime();
  static const int kLastLoginTimeFieldNumber = 11;
  inline ::google::protobuf::int32 lastlogintime() const;
  inline void set_lastlogintime(::google::protobuf::int32 value);

  // required int32 vipLevel = 12;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kVipLevelFieldNumber = 12;
  inline ::google::protobuf::int32 viplevel() const;
  inline void set_viplevel(::google::protobuf::int32 value);

  // required bool activated = 13;
  inline bool has_activated() const;
  inline void clear_activated();
  static const int kActivatedFieldNumber = 13;
  inline bool activated() const;
  inline void set_activated(bool value);

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceMemberDTO)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_historydon();
  inline void clear_has_historydon();
  inline void set_has_daydon();
  inline void clear_has_daydon();
  inline void set_has_weekdon();
  inline void clear_has_weekdon();
  inline void set_has_isonline();
  inline void clear_has_isonline();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_lastlogintime();
  inline void clear_has_lastlogintime();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_activated();
  inline void clear_has_activated();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 playerid_;
  ::std::string* name_;
  ::google::protobuf::int32 power_;
  ::google::protobuf::int32 historydon_;
  ::google::protobuf::int32 daydon_;
  ::google::protobuf::int32 weekdon_;
  ::std::string* icon_;
  ::google::protobuf::int32 position_;
  bool isonline_;
  bool activated_;
  ::slg::protocol::PositionDTO* pos_;
  ::google::protobuf::int32 lastlogintime_;
  ::google::protobuf::int32 viplevel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceMemberDTO* default_instance_;
};
// -------------------------------------------------------------------

class AllianceDTO : public ::google::protobuf::Message {
 public:
  AllianceDTO();
  virtual ~AllianceDTO();

  AllianceDTO(const AllianceDTO& from);

  inline AllianceDTO& operator=(const AllianceDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceDTO& default_instance();

  void Swap(AllianceDTO* other);

  // implements Message ----------------------------------------------

  AllianceDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceDTO& from);
  void MergeFrom(const AllianceDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string shortName = 3;
  inline bool has_shortname() const;
  inline void clear_shortname();
  static const int kShortNameFieldNumber = 3;
  inline const ::std::string& shortname() const;
  inline void set_shortname(const ::std::string& value);
  inline void set_shortname(const char* value);
  inline void set_shortname(const char* value, size_t size);
  inline ::std::string* mutable_shortname();
  inline ::std::string* release_shortname();
  inline void set_allocated_shortname(::std::string* shortname);

  // required int32 honor = 4;
  inline bool has_honor() const;
  inline void clear_honor();
  static const int kHonorFieldNumber = 4;
  inline ::google::protobuf::int32 honor() const;
  inline void set_honor(::google::protobuf::int32 value);

  // required int32 flag = 5;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 5;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // required string declaration = 6;
  inline bool has_declaration() const;
  inline void clear_declaration();
  static const int kDeclarationFieldNumber = 6;
  inline const ::std::string& declaration() const;
  inline void set_declaration(const ::std::string& value);
  inline void set_declaration(const char* value);
  inline void set_declaration(const char* value, size_t size);
  inline ::std::string* mutable_declaration();
  inline ::std::string* release_declaration();
  inline void set_allocated_declaration(::std::string* declaration);

  // required bool isPublic = 7;
  inline bool has_ispublic() const;
  inline void clear_ispublic();
  static const int kIsPublicFieldNumber = 7;
  inline bool ispublic() const;
  inline void set_ispublic(bool value);

  // required int32 joinPower = 8;
  inline bool has_joinpower() const;
  inline void clear_joinpower();
  static const int kJoinPowerFieldNumber = 8;
  inline ::google::protobuf::int32 joinpower() const;
  inline void set_joinpower(::google::protobuf::int32 value);

  // required string language = 9;
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 9;
  inline const ::std::string& language() const;
  inline void set_language(const ::std::string& value);
  inline void set_language(const char* value);
  inline void set_language(const char* value, size_t size);
  inline ::std::string* mutable_language();
  inline ::std::string* release_language();
  inline void set_allocated_language(::std::string* language);

  // repeated .slg.protocol.AllianceMemberDTO members = 10;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 10;
  inline const ::slg::protocol::AllianceMemberDTO& members(int index) const;
  inline ::slg::protocol::AllianceMemberDTO* mutable_members(int index);
  inline ::slg::protocol::AllianceMemberDTO* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceMemberDTO >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceMemberDTO >*
      mutable_members();

  // required bool leaderAbsence = 11;
  inline bool has_leaderabsence() const;
  inline void clear_leaderabsence();
  static const int kLeaderAbsenceFieldNumber = 11;
  inline bool leaderabsence() const;
  inline void set_leaderabsence(bool value);

  // repeated .slg.protocol.AllianceNewsDTO msgs = 12;
  inline int msgs_size() const;
  inline void clear_msgs();
  static const int kMsgsFieldNumber = 12;
  inline const ::slg::protocol::AllianceNewsDTO& msgs(int index) const;
  inline ::slg::protocol::AllianceNewsDTO* mutable_msgs(int index);
  inline ::slg::protocol::AllianceNewsDTO* add_msgs();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceNewsDTO >&
      msgs() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceNewsDTO >*
      mutable_msgs();

  // required int32 memberLimit = 13;
  inline bool has_memberlimit() const;
  inline void clear_memberlimit();
  static const int kMemberLimitFieldNumber = 13;
  inline ::google::protobuf::int32 memberlimit() const;
  inline void set_memberlimit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceDTO)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_shortname();
  inline void clear_has_shortname();
  inline void set_has_honor();
  inline void clear_has_honor();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_declaration();
  inline void clear_has_declaration();
  inline void set_has_ispublic();
  inline void clear_has_ispublic();
  inline void set_has_joinpower();
  inline void clear_has_joinpower();
  inline void set_has_language();
  inline void clear_has_language();
  inline void set_has_leaderabsence();
  inline void clear_has_leaderabsence();
  inline void set_has_memberlimit();
  inline void clear_has_memberlimit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 honor_;
  ::std::string* shortname_;
  ::std::string* declaration_;
  ::google::protobuf::int32 flag_;
  ::google::protobuf::int32 joinpower_;
  ::std::string* language_;
  ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceMemberDTO > members_;
  bool ispublic_;
  bool leaderabsence_;
  ::google::protobuf::int32 memberlimit_;
  ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceNewsDTO > msgs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceDTO* default_instance_;
};
// -------------------------------------------------------------------

class CreateAllianceRequest : public ::google::protobuf::Message {
 public:
  CreateAllianceRequest();
  virtual ~CreateAllianceRequest();

  CreateAllianceRequest(const CreateAllianceRequest& from);

  inline CreateAllianceRequest& operator=(const CreateAllianceRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateAllianceRequest& default_instance();

  void Swap(CreateAllianceRequest* other);

  // implements Message ----------------------------------------------

  CreateAllianceRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateAllianceRequest& from);
  void MergeFrom(const CreateAllianceRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string declaration = 2;
  inline bool has_declaration() const;
  inline void clear_declaration();
  static const int kDeclarationFieldNumber = 2;
  inline const ::std::string& declaration() const;
  inline void set_declaration(const ::std::string& value);
  inline void set_declaration(const char* value);
  inline void set_declaration(const char* value, size_t size);
  inline ::std::string* mutable_declaration();
  inline ::std::string* release_declaration();
  inline void set_allocated_declaration(::std::string* declaration);

  // @@protoc_insertion_point(class_scope:slg.protocol.CreateAllianceRequest)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_declaration();
  inline void clear_has_declaration();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* declaration_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static CreateAllianceRequest* default_instance_;
};
// -------------------------------------------------------------------

class CreateAllianceResponse : public ::google::protobuf::Message {
 public:
  CreateAllianceResponse();
  virtual ~CreateAllianceResponse();

  CreateAllianceResponse(const CreateAllianceResponse& from);

  inline CreateAllianceResponse& operator=(const CreateAllianceResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateAllianceResponse& default_instance();

  void Swap(CreateAllianceResponse* other);

  // implements Message ----------------------------------------------

  CreateAllianceResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateAllianceResponse& from);
  void MergeFrom(const CreateAllianceResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .slg.protocol.AllianceDTO alliance = 1;
  inline bool has_alliance() const;
  inline void clear_alliance();
  static const int kAllianceFieldNumber = 1;
  inline const ::slg::protocol::AllianceDTO& alliance() const;
  inline ::slg::protocol::AllianceDTO* mutable_alliance();
  inline ::slg::protocol::AllianceDTO* release_alliance();
  inline void set_allocated_alliance(::slg::protocol::AllianceDTO* alliance);

  // @@protoc_insertion_point(class_scope:slg.protocol.CreateAllianceResponse)
 private:
  inline void set_has_alliance();
  inline void clear_has_alliance();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::slg::protocol::AllianceDTO* alliance_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static CreateAllianceResponse* default_instance_;
};
// -------------------------------------------------------------------

class QueryAllianceRequest : public ::google::protobuf::Message {
 public:
  QueryAllianceRequest();
  virtual ~QueryAllianceRequest();

  QueryAllianceRequest(const QueryAllianceRequest& from);

  inline QueryAllianceRequest& operator=(const QueryAllianceRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryAllianceRequest& default_instance();

  void Swap(QueryAllianceRequest* other);

  // implements Message ----------------------------------------------

  QueryAllianceRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryAllianceRequest& from);
  void MergeFrom(const QueryAllianceRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 allianceId = 1;
  inline bool has_allianceid() const;
  inline void clear_allianceid();
  static const int kAllianceIdFieldNumber = 1;
  inline ::google::protobuf::int32 allianceid() const;
  inline void set_allianceid(::google::protobuf::int32 value);

  // optional string allianceName = 2;
  inline bool has_alliancename() const;
  inline void clear_alliancename();
  static const int kAllianceNameFieldNumber = 2;
  inline const ::std::string& alliancename() const;
  inline void set_alliancename(const ::std::string& value);
  inline void set_alliancename(const char* value);
  inline void set_alliancename(const char* value, size_t size);
  inline ::std::string* mutable_alliancename();
  inline ::std::string* release_alliancename();
  inline void set_allocated_alliancename(::std::string* alliancename);

  // @@protoc_insertion_point(class_scope:slg.protocol.QueryAllianceRequest)
 private:
  inline void set_has_allianceid();
  inline void clear_has_allianceid();
  inline void set_has_alliancename();
  inline void clear_has_alliancename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* alliancename_;
  ::google::protobuf::int32 allianceid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static QueryAllianceRequest* default_instance_;
};
// -------------------------------------------------------------------

class QueryAllianceResponse : public ::google::protobuf::Message {
 public:
  QueryAllianceResponse();
  virtual ~QueryAllianceResponse();

  QueryAllianceResponse(const QueryAllianceResponse& from);

  inline QueryAllianceResponse& operator=(const QueryAllianceResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryAllianceResponse& default_instance();

  void Swap(QueryAllianceResponse* other);

  // implements Message ----------------------------------------------

  QueryAllianceResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryAllianceResponse& from);
  void MergeFrom(const QueryAllianceResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .slg.protocol.AllianceDTO alliance = 1;
  inline bool has_alliance() const;
  inline void clear_alliance();
  static const int kAllianceFieldNumber = 1;
  inline const ::slg::protocol::AllianceDTO& alliance() const;
  inline ::slg::protocol::AllianceDTO* mutable_alliance();
  inline ::slg::protocol::AllianceDTO* release_alliance();
  inline void set_allocated_alliance(::slg::protocol::AllianceDTO* alliance);

  // @@protoc_insertion_point(class_scope:slg.protocol.QueryAllianceResponse)
 private:
  inline void set_has_alliance();
  inline void clear_has_alliance();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::slg::protocol::AllianceDTO* alliance_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static QueryAllianceResponse* default_instance_;
};
// -------------------------------------------------------------------

class MyAllianceInfoRequest : public ::google::protobuf::Message {
 public:
  MyAllianceInfoRequest();
  virtual ~MyAllianceInfoRequest();

  MyAllianceInfoRequest(const MyAllianceInfoRequest& from);

  inline MyAllianceInfoRequest& operator=(const MyAllianceInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MyAllianceInfoRequest& default_instance();

  void Swap(MyAllianceInfoRequest* other);

  // implements Message ----------------------------------------------

  MyAllianceInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MyAllianceInfoRequest& from);
  void MergeFrom(const MyAllianceInfoRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:slg.protocol.MyAllianceInfoRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static MyAllianceInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class MyAllianceInfoResponse : public ::google::protobuf::Message {
 public:
  MyAllianceInfoResponse();
  virtual ~MyAllianceInfoResponse();

  MyAllianceInfoResponse(const MyAllianceInfoResponse& from);

  inline MyAllianceInfoResponse& operator=(const MyAllianceInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MyAllianceInfoResponse& default_instance();

  void Swap(MyAllianceInfoResponse* other);

  // implements Message ----------------------------------------------

  MyAllianceInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MyAllianceInfoResponse& from);
  void MergeFrom(const MyAllianceInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .slg.protocol.AllianceDTO alliance = 1;
  inline bool has_alliance() const;
  inline void clear_alliance();
  static const int kAllianceFieldNumber = 1;
  inline const ::slg::protocol::AllianceDTO& alliance() const;
  inline ::slg::protocol::AllianceDTO* mutable_alliance();
  inline ::slg::protocol::AllianceDTO* release_alliance();
  inline void set_allocated_alliance(::slg::protocol::AllianceDTO* alliance);

  // @@protoc_insertion_point(class_scope:slg.protocol.MyAllianceInfoResponse)
 private:
  inline void set_has_alliance();
  inline void clear_has_alliance();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::slg::protocol::AllianceDTO* alliance_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static MyAllianceInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class JoinAllianceRequest : public ::google::protobuf::Message {
 public:
  JoinAllianceRequest();
  virtual ~JoinAllianceRequest();

  JoinAllianceRequest(const JoinAllianceRequest& from);

  inline JoinAllianceRequest& operator=(const JoinAllianceRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinAllianceRequest& default_instance();

  void Swap(JoinAllianceRequest* other);

  // implements Message ----------------------------------------------

  JoinAllianceRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JoinAllianceRequest& from);
  void MergeFrom(const JoinAllianceRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 allianceId = 1;
  inline bool has_allianceid() const;
  inline void clear_allianceid();
  static const int kAllianceIdFieldNumber = 1;
  inline ::google::protobuf::int32 allianceid() const;
  inline void set_allianceid(::google::protobuf::int32 value);

  // optional string applyMsg = 2;
  inline bool has_applymsg() const;
  inline void clear_applymsg();
  static const int kApplyMsgFieldNumber = 2;
  inline const ::std::string& applymsg() const;
  inline void set_applymsg(const ::std::string& value);
  inline void set_applymsg(const char* value);
  inline void set_applymsg(const char* value, size_t size);
  inline ::std::string* mutable_applymsg();
  inline ::std::string* release_applymsg();
  inline void set_allocated_applymsg(::std::string* applymsg);

  // @@protoc_insertion_point(class_scope:slg.protocol.JoinAllianceRequest)
 private:
  inline void set_has_allianceid();
  inline void clear_has_allianceid();
  inline void set_has_applymsg();
  inline void clear_has_applymsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* applymsg_;
  ::google::protobuf::int32 allianceid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static JoinAllianceRequest* default_instance_;
};
// -------------------------------------------------------------------

class JoinAllianceResponse : public ::google::protobuf::Message {
 public:
  JoinAllianceResponse();
  virtual ~JoinAllianceResponse();

  JoinAllianceResponse(const JoinAllianceResponse& from);

  inline JoinAllianceResponse& operator=(const JoinAllianceResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinAllianceResponse& default_instance();

  void Swap(JoinAllianceResponse* other);

  // implements Message ----------------------------------------------

  JoinAllianceResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JoinAllianceResponse& from);
  void MergeFrom(const JoinAllianceResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .slg.protocol.AllianceDTO alliance = 1;
  inline bool has_alliance() const;
  inline void clear_alliance();
  static const int kAllianceFieldNumber = 1;
  inline const ::slg::protocol::AllianceDTO& alliance() const;
  inline ::slg::protocol::AllianceDTO* mutable_alliance();
  inline ::slg::protocol::AllianceDTO* release_alliance();
  inline void set_allocated_alliance(::slg::protocol::AllianceDTO* alliance);

  // @@protoc_insertion_point(class_scope:slg.protocol.JoinAllianceResponse)
 private:
  inline void set_has_alliance();
  inline void clear_has_alliance();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::slg::protocol::AllianceDTO* alliance_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static JoinAllianceResponse* default_instance_;
};
// -------------------------------------------------------------------

class SetPositionRequest : public ::google::protobuf::Message {
 public:
  SetPositionRequest();
  virtual ~SetPositionRequest();

  SetPositionRequest(const SetPositionRequest& from);

  inline SetPositionRequest& operator=(const SetPositionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetPositionRequest& default_instance();

  void Swap(SetPositionRequest* other);

  // implements Message ----------------------------------------------

  SetPositionRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetPositionRequest& from);
  void MergeFrom(const SetPositionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // required int32 position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline ::google::protobuf::int32 position() const;
  inline void set_position(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.SetPositionRequest)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_position();
  inline void clear_has_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 playerid_;
  ::google::protobuf::int32 position_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static SetPositionRequest* default_instance_;
};
// -------------------------------------------------------------------

class SetPositionResponse : public ::google::protobuf::Message {
 public:
  SetPositionResponse();
  virtual ~SetPositionResponse();

  SetPositionResponse(const SetPositionResponse& from);

  inline SetPositionResponse& operator=(const SetPositionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetPositionResponse& default_instance();

  void Swap(SetPositionResponse* other);

  // implements Message ----------------------------------------------

  SetPositionResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetPositionResponse& from);
  void MergeFrom(const SetPositionResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // required int32 position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline ::google::protobuf::int32 position() const;
  inline void set_position(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.SetPositionResponse)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_position();
  inline void clear_has_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 playerid_;
  ::google::protobuf::int32 position_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static SetPositionResponse* default_instance_;
};
// -------------------------------------------------------------------

class KickOutAllianceRequest : public ::google::protobuf::Message {
 public:
  KickOutAllianceRequest();
  virtual ~KickOutAllianceRequest();

  KickOutAllianceRequest(const KickOutAllianceRequest& from);

  inline KickOutAllianceRequest& operator=(const KickOutAllianceRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KickOutAllianceRequest& default_instance();

  void Swap(KickOutAllianceRequest* other);

  // implements Message ----------------------------------------------

  KickOutAllianceRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KickOutAllianceRequest& from);
  void MergeFrom(const KickOutAllianceRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.KickOutAllianceRequest)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static KickOutAllianceRequest* default_instance_;
};
// -------------------------------------------------------------------

class ExitsAllianceRequest : public ::google::protobuf::Message {
 public:
  ExitsAllianceRequest();
  virtual ~ExitsAllianceRequest();

  ExitsAllianceRequest(const ExitsAllianceRequest& from);

  inline ExitsAllianceRequest& operator=(const ExitsAllianceRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExitsAllianceRequest& default_instance();

  void Swap(ExitsAllianceRequest* other);

  // implements Message ----------------------------------------------

  ExitsAllianceRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExitsAllianceRequest& from);
  void MergeFrom(const ExitsAllianceRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:slg.protocol.ExitsAllianceRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static ExitsAllianceRequest* default_instance_;
};
// -------------------------------------------------------------------

class ExitsAllianceResponse : public ::google::protobuf::Message {
 public:
  ExitsAllianceResponse();
  virtual ~ExitsAllianceResponse();

  ExitsAllianceResponse(const ExitsAllianceResponse& from);

  inline ExitsAllianceResponse& operator=(const ExitsAllianceResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExitsAllianceResponse& default_instance();

  void Swap(ExitsAllianceResponse* other);

  // implements Message ----------------------------------------------

  ExitsAllianceResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExitsAllianceResponse& from);
  void MergeFrom(const ExitsAllianceResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.ExitsAllianceResponse)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static ExitsAllianceResponse* default_instance_;
};
// -------------------------------------------------------------------

class TransferLeaderRequest : public ::google::protobuf::Message {
 public:
  TransferLeaderRequest();
  virtual ~TransferLeaderRequest();

  TransferLeaderRequest(const TransferLeaderRequest& from);

  inline TransferLeaderRequest& operator=(const TransferLeaderRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferLeaderRequest& default_instance();

  void Swap(TransferLeaderRequest* other);

  // implements Message ----------------------------------------------

  TransferLeaderRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransferLeaderRequest& from);
  void MergeFrom(const TransferLeaderRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.TransferLeaderRequest)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static TransferLeaderRequest* default_instance_;
};
// -------------------------------------------------------------------

class TransferLeaderResponse : public ::google::protobuf::Message {
 public:
  TransferLeaderResponse();
  virtual ~TransferLeaderResponse();

  TransferLeaderResponse(const TransferLeaderResponse& from);

  inline TransferLeaderResponse& operator=(const TransferLeaderResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferLeaderResponse& default_instance();

  void Swap(TransferLeaderResponse* other);

  // implements Message ----------------------------------------------

  TransferLeaderResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransferLeaderResponse& from);
  void MergeFrom(const TransferLeaderResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.TransferLeaderResponse)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static TransferLeaderResponse* default_instance_;
};
// -------------------------------------------------------------------

class AllianceSettingRequest : public ::google::protobuf::Message {
 public:
  AllianceSettingRequest();
  virtual ~AllianceSettingRequest();

  AllianceSettingRequest(const AllianceSettingRequest& from);

  inline AllianceSettingRequest& operator=(const AllianceSettingRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceSettingRequest& default_instance();

  void Swap(AllianceSettingRequest* other);

  // implements Message ----------------------------------------------

  AllianceSettingRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceSettingRequest& from);
  void MergeFrom(const AllianceSettingRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string allianceName = 1;
  inline bool has_alliancename() const;
  inline void clear_alliancename();
  static const int kAllianceNameFieldNumber = 1;
  inline const ::std::string& alliancename() const;
  inline void set_alliancename(const ::std::string& value);
  inline void set_alliancename(const char* value);
  inline void set_alliancename(const char* value, size_t size);
  inline ::std::string* mutable_alliancename();
  inline ::std::string* release_alliancename();
  inline void set_allocated_alliancename(::std::string* alliancename);

  // optional int32 flag = 2;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // optional string declaration = 3;
  inline bool has_declaration() const;
  inline void clear_declaration();
  static const int kDeclarationFieldNumber = 3;
  inline const ::std::string& declaration() const;
  inline void set_declaration(const ::std::string& value);
  inline void set_declaration(const char* value);
  inline void set_declaration(const char* value, size_t size);
  inline ::std::string* mutable_declaration();
  inline ::std::string* release_declaration();
  inline void set_allocated_declaration(::std::string* declaration);

  // optional bool isPublic = 4;
  inline bool has_ispublic() const;
  inline void clear_ispublic();
  static const int kIsPublicFieldNumber = 4;
  inline bool ispublic() const;
  inline void set_ispublic(bool value);

  // optional int32 joinPower = 5;
  inline bool has_joinpower() const;
  inline void clear_joinpower();
  static const int kJoinPowerFieldNumber = 5;
  inline ::google::protobuf::int32 joinpower() const;
  inline void set_joinpower(::google::protobuf::int32 value);

  // optional string language = 6;
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 6;
  inline const ::std::string& language() const;
  inline void set_language(const ::std::string& value);
  inline void set_language(const char* value);
  inline void set_language(const char* value, size_t size);
  inline ::std::string* mutable_language();
  inline ::std::string* release_language();
  inline void set_allocated_language(::std::string* language);

  // optional string shortName = 7;
  inline bool has_shortname() const;
  inline void clear_shortname();
  static const int kShortNameFieldNumber = 7;
  inline const ::std::string& shortname() const;
  inline void set_shortname(const ::std::string& value);
  inline void set_shortname(const char* value);
  inline void set_shortname(const char* value, size_t size);
  inline ::std::string* mutable_shortname();
  inline ::std::string* release_shortname();
  inline void set_allocated_shortname(::std::string* shortname);

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceSettingRequest)
 private:
  inline void set_has_alliancename();
  inline void clear_has_alliancename();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_declaration();
  inline void clear_has_declaration();
  inline void set_has_ispublic();
  inline void clear_has_ispublic();
  inline void set_has_joinpower();
  inline void clear_has_joinpower();
  inline void set_has_language();
  inline void clear_has_language();
  inline void set_has_shortname();
  inline void clear_has_shortname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* alliancename_;
  ::std::string* declaration_;
  ::google::protobuf::int32 flag_;
  bool ispublic_;
  ::std::string* language_;
  ::std::string* shortname_;
  ::google::protobuf::int32 joinpower_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceSettingRequest* default_instance_;
};
// -------------------------------------------------------------------

class AllianceSettingResponse : public ::google::protobuf::Message {
 public:
  AllianceSettingResponse();
  virtual ~AllianceSettingResponse();

  AllianceSettingResponse(const AllianceSettingResponse& from);

  inline AllianceSettingResponse& operator=(const AllianceSettingResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceSettingResponse& default_instance();

  void Swap(AllianceSettingResponse* other);

  // implements Message ----------------------------------------------

  AllianceSettingResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceSettingResponse& from);
  void MergeFrom(const AllianceSettingResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string allianceName = 1;
  inline bool has_alliancename() const;
  inline void clear_alliancename();
  static const int kAllianceNameFieldNumber = 1;
  inline const ::std::string& alliancename() const;
  inline void set_alliancename(const ::std::string& value);
  inline void set_alliancename(const char* value);
  inline void set_alliancename(const char* value, size_t size);
  inline ::std::string* mutable_alliancename();
  inline ::std::string* release_alliancename();
  inline void set_allocated_alliancename(::std::string* alliancename);

  // optional int32 flag = 2;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // optional string declaration = 3;
  inline bool has_declaration() const;
  inline void clear_declaration();
  static const int kDeclarationFieldNumber = 3;
  inline const ::std::string& declaration() const;
  inline void set_declaration(const ::std::string& value);
  inline void set_declaration(const char* value);
  inline void set_declaration(const char* value, size_t size);
  inline ::std::string* mutable_declaration();
  inline ::std::string* release_declaration();
  inline void set_allocated_declaration(::std::string* declaration);

  // optional bool isPublic = 4;
  inline bool has_ispublic() const;
  inline void clear_ispublic();
  static const int kIsPublicFieldNumber = 4;
  inline bool ispublic() const;
  inline void set_ispublic(bool value);

  // optional int32 joinPower = 5;
  inline bool has_joinpower() const;
  inline void clear_joinpower();
  static const int kJoinPowerFieldNumber = 5;
  inline ::google::protobuf::int32 joinpower() const;
  inline void set_joinpower(::google::protobuf::int32 value);

  // optional string language = 6;
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 6;
  inline const ::std::string& language() const;
  inline void set_language(const ::std::string& value);
  inline void set_language(const char* value);
  inline void set_language(const char* value, size_t size);
  inline ::std::string* mutable_language();
  inline ::std::string* release_language();
  inline void set_allocated_language(::std::string* language);

  // optional string shortName = 7;
  inline bool has_shortname() const;
  inline void clear_shortname();
  static const int kShortNameFieldNumber = 7;
  inline const ::std::string& shortname() const;
  inline void set_shortname(const ::std::string& value);
  inline void set_shortname(const char* value);
  inline void set_shortname(const char* value, size_t size);
  inline ::std::string* mutable_shortname();
  inline ::std::string* release_shortname();
  inline void set_allocated_shortname(::std::string* shortname);

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceSettingResponse)
 private:
  inline void set_has_alliancename();
  inline void clear_has_alliancename();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_declaration();
  inline void clear_has_declaration();
  inline void set_has_ispublic();
  inline void clear_has_ispublic();
  inline void set_has_joinpower();
  inline void clear_has_joinpower();
  inline void set_has_language();
  inline void clear_has_language();
  inline void set_has_shortname();
  inline void clear_has_shortname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* alliancename_;
  ::std::string* declaration_;
  ::google::protobuf::int32 flag_;
  bool ispublic_;
  ::std::string* language_;
  ::std::string* shortname_;
  ::google::protobuf::int32 joinpower_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceSettingResponse* default_instance_;
};
// -------------------------------------------------------------------

class AllianceApplyRequest : public ::google::protobuf::Message {
 public:
  AllianceApplyRequest();
  virtual ~AllianceApplyRequest();

  AllianceApplyRequest(const AllianceApplyRequest& from);

  inline AllianceApplyRequest& operator=(const AllianceApplyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceApplyRequest& default_instance();

  void Swap(AllianceApplyRequest* other);

  // implements Message ----------------------------------------------

  AllianceApplyRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceApplyRequest& from);
  void MergeFrom(const AllianceApplyRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool isAgree = 1;
  inline bool has_isagree() const;
  inline void clear_isagree();
  static const int kIsAgreeFieldNumber = 1;
  inline bool isagree() const;
  inline void set_isagree(bool value);

  // required int64 playerId = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceApplyRequest)
 private:
  inline void set_has_isagree();
  inline void clear_has_isagree();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 playerid_;
  bool isagree_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceApplyRequest* default_instance_;
};
// -------------------------------------------------------------------

class AllianceApplyesponse : public ::google::protobuf::Message {
 public:
  AllianceApplyesponse();
  virtual ~AllianceApplyesponse();

  AllianceApplyesponse(const AllianceApplyesponse& from);

  inline AllianceApplyesponse& operator=(const AllianceApplyesponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceApplyesponse& default_instance();

  void Swap(AllianceApplyesponse* other);

  // implements Message ----------------------------------------------

  AllianceApplyesponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceApplyesponse& from);
  void MergeFrom(const AllianceApplyesponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool isAgree = 1;
  inline bool has_isagree() const;
  inline void clear_isagree();
  static const int kIsAgreeFieldNumber = 1;
  inline bool isagree() const;
  inline void set_isagree(bool value);

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceApplyesponse)
 private:
  inline void set_has_isagree();
  inline void clear_has_isagree();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool isagree_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceApplyesponse* default_instance_;
};
// -------------------------------------------------------------------

class AllianceListRequest : public ::google::protobuf::Message {
 public:
  AllianceListRequest();
  virtual ~AllianceListRequest();

  AllianceListRequest(const AllianceListRequest& from);

  inline AllianceListRequest& operator=(const AllianceListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceListRequest& default_instance();

  void Swap(AllianceListRequest* other);

  // implements Message ----------------------------------------------

  AllianceListRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceListRequest& from);
  void MergeFrom(const AllianceListRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceListRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceListRequest* default_instance_;
};
// -------------------------------------------------------------------

class AllianceListResponse : public ::google::protobuf::Message {
 public:
  AllianceListResponse();
  virtual ~AllianceListResponse();

  AllianceListResponse(const AllianceListResponse& from);

  inline AllianceListResponse& operator=(const AllianceListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceListResponse& default_instance();

  void Swap(AllianceListResponse* other);

  // implements Message ----------------------------------------------

  AllianceListResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceListResponse& from);
  void MergeFrom(const AllianceListResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .slg.protocol.AllianceSummaryDTO allianceList = 1;
  inline int alliancelist_size() const;
  inline void clear_alliancelist();
  static const int kAllianceListFieldNumber = 1;
  inline const ::slg::protocol::AllianceSummaryDTO& alliancelist(int index) const;
  inline ::slg::protocol::AllianceSummaryDTO* mutable_alliancelist(int index);
  inline ::slg::protocol::AllianceSummaryDTO* add_alliancelist();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceSummaryDTO >&
      alliancelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceSummaryDTO >*
      mutable_alliancelist();

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceListResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceSummaryDTO > alliancelist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceListResponse* default_instance_;
};
// -------------------------------------------------------------------

class CheckAllianceNameRequest : public ::google::protobuf::Message {
 public:
  CheckAllianceNameRequest();
  virtual ~CheckAllianceNameRequest();

  CheckAllianceNameRequest(const CheckAllianceNameRequest& from);

  inline CheckAllianceNameRequest& operator=(const CheckAllianceNameRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckAllianceNameRequest& default_instance();

  void Swap(CheckAllianceNameRequest* other);

  // implements Message ----------------------------------------------

  CheckAllianceNameRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheckAllianceNameRequest& from);
  void MergeFrom(const CheckAllianceNameRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:slg.protocol.CheckAllianceNameRequest)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static CheckAllianceNameRequest* default_instance_;
};
// -------------------------------------------------------------------

class CheckAllianceNameResponse : public ::google::protobuf::Message {
 public:
  CheckAllianceNameResponse();
  virtual ~CheckAllianceNameResponse();

  CheckAllianceNameResponse(const CheckAllianceNameResponse& from);

  inline CheckAllianceNameResponse& operator=(const CheckAllianceNameResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckAllianceNameResponse& default_instance();

  void Swap(CheckAllianceNameResponse* other);

  // implements Message ----------------------------------------------

  CheckAllianceNameResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheckAllianceNameResponse& from);
  void MergeFrom(const CheckAllianceNameResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool isAvailable = 1;
  inline bool has_isavailable() const;
  inline void clear_isavailable();
  static const int kIsAvailableFieldNumber = 1;
  inline bool isavailable() const;
  inline void set_isavailable(bool value);

  // @@protoc_insertion_point(class_scope:slg.protocol.CheckAllianceNameResponse)
 private:
  inline void set_has_isavailable();
  inline void clear_has_isavailable();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool isavailable_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static CheckAllianceNameResponse* default_instance_;
};
// -------------------------------------------------------------------

class SendAllianceHelpRequest : public ::google::protobuf::Message {
 public:
  SendAllianceHelpRequest();
  virtual ~SendAllianceHelpRequest();

  SendAllianceHelpRequest(const SendAllianceHelpRequest& from);

  inline SendAllianceHelpRequest& operator=(const SendAllianceHelpRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendAllianceHelpRequest& default_instance();

  void Swap(SendAllianceHelpRequest* other);

  // implements Message ----------------------------------------------

  SendAllianceHelpRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendAllianceHelpRequest& from);
  void MergeFrom(const SendAllianceHelpRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 timerId = 1;
  inline bool has_timerid() const;
  inline void clear_timerid();
  static const int kTimerIdFieldNumber = 1;
  inline ::google::protobuf::int32 timerid() const;
  inline void set_timerid(::google::protobuf::int32 value);

  // required int32 helpType = 2;
  inline bool has_helptype() const;
  inline void clear_helptype();
  static const int kHelpTypeFieldNumber = 2;
  inline ::google::protobuf::int32 helptype() const;
  inline void set_helptype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.SendAllianceHelpRequest)
 private:
  inline void set_has_timerid();
  inline void clear_has_timerid();
  inline void set_has_helptype();
  inline void clear_has_helptype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 timerid_;
  ::google::protobuf::int32 helptype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static SendAllianceHelpRequest* default_instance_;
};
// -------------------------------------------------------------------

class HelpMemberRequest : public ::google::protobuf::Message {
 public:
  HelpMemberRequest();
  virtual ~HelpMemberRequest();

  HelpMemberRequest(const HelpMemberRequest& from);

  inline HelpMemberRequest& operator=(const HelpMemberRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HelpMemberRequest& default_instance();

  void Swap(HelpMemberRequest* other);

  // implements Message ----------------------------------------------

  HelpMemberRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HelpMemberRequest& from);
  void MergeFrom(const HelpMemberRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 helpId = 1;
  inline bool has_helpid() const;
  inline void clear_helpid();
  static const int kHelpIdFieldNumber = 1;
  inline ::google::protobuf::int32 helpid() const;
  inline void set_helpid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.HelpMemberRequest)
 private:
  inline void set_has_helpid();
  inline void clear_has_helpid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 helpid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static HelpMemberRequest* default_instance_;
};
// -------------------------------------------------------------------

class HelpMemberResponse : public ::google::protobuf::Message {
 public:
  HelpMemberResponse();
  virtual ~HelpMemberResponse();

  HelpMemberResponse(const HelpMemberResponse& from);

  inline HelpMemberResponse& operator=(const HelpMemberResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HelpMemberResponse& default_instance();

  void Swap(HelpMemberResponse* other);

  // implements Message ----------------------------------------------

  HelpMemberResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HelpMemberResponse& from);
  void MergeFrom(const HelpMemberResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 helpId = 1;
  inline bool has_helpid() const;
  inline void clear_helpid();
  static const int kHelpIdFieldNumber = 1;
  inline ::google::protobuf::int32 helpid() const;
  inline void set_helpid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.HelpMemberResponse)
 private:
  inline void set_has_helpid();
  inline void clear_has_helpid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 helpid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static HelpMemberResponse* default_instance_;
};
// -------------------------------------------------------------------

class AllianceHelpListRequest : public ::google::protobuf::Message {
 public:
  AllianceHelpListRequest();
  virtual ~AllianceHelpListRequest();

  AllianceHelpListRequest(const AllianceHelpListRequest& from);

  inline AllianceHelpListRequest& operator=(const AllianceHelpListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceHelpListRequest& default_instance();

  void Swap(AllianceHelpListRequest* other);

  // implements Message ----------------------------------------------

  AllianceHelpListRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceHelpListRequest& from);
  void MergeFrom(const AllianceHelpListRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceHelpListRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceHelpListRequest* default_instance_;
};
// -------------------------------------------------------------------

class AllianceHelpListResponse : public ::google::protobuf::Message {
 public:
  AllianceHelpListResponse();
  virtual ~AllianceHelpListResponse();

  AllianceHelpListResponse(const AllianceHelpListResponse& from);

  inline AllianceHelpListResponse& operator=(const AllianceHelpListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceHelpListResponse& default_instance();

  void Swap(AllianceHelpListResponse* other);

  // implements Message ----------------------------------------------

  AllianceHelpListResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceHelpListResponse& from);
  void MergeFrom(const AllianceHelpListResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .slg.protocol.AllianceHelpDTO helpList = 1;
  inline int helplist_size() const;
  inline void clear_helplist();
  static const int kHelpListFieldNumber = 1;
  inline const ::slg::protocol::AllianceHelpDTO& helplist(int index) const;
  inline ::slg::protocol::AllianceHelpDTO* mutable_helplist(int index);
  inline ::slg::protocol::AllianceHelpDTO* add_helplist();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceHelpDTO >&
      helplist() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceHelpDTO >*
      mutable_helplist();

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceHelpListResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceHelpDTO > helplist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceHelpListResponse* default_instance_;
};
// -------------------------------------------------------------------

class AllianceVoteRequest : public ::google::protobuf::Message {
 public:
  AllianceVoteRequest();
  virtual ~AllianceVoteRequest();

  AllianceVoteRequest(const AllianceVoteRequest& from);

  inline AllianceVoteRequest& operator=(const AllianceVoteRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceVoteRequest& default_instance();

  void Swap(AllianceVoteRequest* other);

  // implements Message ----------------------------------------------

  AllianceVoteRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceVoteRequest& from);
  void MergeFrom(const AllianceVoteRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 techType = 1;
  inline bool has_techtype() const;
  inline void clear_techtype();
  static const int kTechTypeFieldNumber = 1;
  inline ::google::protobuf::int32 techtype() const;
  inline void set_techtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceVoteRequest)
 private:
  inline void set_has_techtype();
  inline void clear_has_techtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 techtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceVoteRequest* default_instance_;
};
// -------------------------------------------------------------------

class AllianceVoteResponse : public ::google::protobuf::Message {
 public:
  AllianceVoteResponse();
  virtual ~AllianceVoteResponse();

  AllianceVoteResponse(const AllianceVoteResponse& from);

  inline AllianceVoteResponse& operator=(const AllianceVoteResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceVoteResponse& default_instance();

  void Swap(AllianceVoteResponse* other);

  // implements Message ----------------------------------------------

  AllianceVoteResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceVoteResponse& from);
  void MergeFrom(const AllianceVoteResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 techType = 1;
  inline bool has_techtype() const;
  inline void clear_techtype();
  static const int kTechTypeFieldNumber = 1;
  inline ::google::protobuf::int32 techtype() const;
  inline void set_techtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceVoteResponse)
 private:
  inline void set_has_techtype();
  inline void clear_has_techtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 techtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceVoteResponse* default_instance_;
};
// -------------------------------------------------------------------

class AllianceTechUpgradeRequest : public ::google::protobuf::Message {
 public:
  AllianceTechUpgradeRequest();
  virtual ~AllianceTechUpgradeRequest();

  AllianceTechUpgradeRequest(const AllianceTechUpgradeRequest& from);

  inline AllianceTechUpgradeRequest& operator=(const AllianceTechUpgradeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceTechUpgradeRequest& default_instance();

  void Swap(AllianceTechUpgradeRequest* other);

  // implements Message ----------------------------------------------

  AllianceTechUpgradeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceTechUpgradeRequest& from);
  void MergeFrom(const AllianceTechUpgradeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 techType = 1;
  inline bool has_techtype() const;
  inline void clear_techtype();
  static const int kTechTypeFieldNumber = 1;
  inline ::google::protobuf::int32 techtype() const;
  inline void set_techtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceTechUpgradeRequest)
 private:
  inline void set_has_techtype();
  inline void clear_has_techtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 techtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceTechUpgradeRequest* default_instance_;
};
// -------------------------------------------------------------------

class AllianceTechUpgradeResponse : public ::google::protobuf::Message {
 public:
  AllianceTechUpgradeResponse();
  virtual ~AllianceTechUpgradeResponse();

  AllianceTechUpgradeResponse(const AllianceTechUpgradeResponse& from);

  inline AllianceTechUpgradeResponse& operator=(const AllianceTechUpgradeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceTechUpgradeResponse& default_instance();

  void Swap(AllianceTechUpgradeResponse* other);

  // implements Message ----------------------------------------------

  AllianceTechUpgradeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceTechUpgradeResponse& from);
  void MergeFrom(const AllianceTechUpgradeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 techType = 1;
  inline bool has_techtype() const;
  inline void clear_techtype();
  static const int kTechTypeFieldNumber = 1;
  inline ::google::protobuf::int32 techtype() const;
  inline void set_techtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceTechUpgradeResponse)
 private:
  inline void set_has_techtype();
  inline void clear_has_techtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 techtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceTechUpgradeResponse* default_instance_;
};
// -------------------------------------------------------------------

class ContributeInfoRequest : public ::google::protobuf::Message {
 public:
  ContributeInfoRequest();
  virtual ~ContributeInfoRequest();

  ContributeInfoRequest(const ContributeInfoRequest& from);

  inline ContributeInfoRequest& operator=(const ContributeInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContributeInfoRequest& default_instance();

  void Swap(ContributeInfoRequest* other);

  // implements Message ----------------------------------------------

  ContributeInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContributeInfoRequest& from);
  void MergeFrom(const ContributeInfoRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:slg.protocol.ContributeInfoRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static ContributeInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class ContributeInfoResponse : public ::google::protobuf::Message {
 public:
  ContributeInfoResponse();
  virtual ~ContributeInfoResponse();

  ContributeInfoResponse(const ContributeInfoResponse& from);

  inline ContributeInfoResponse& operator=(const ContributeInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContributeInfoResponse& default_instance();

  void Swap(ContributeInfoResponse* other);

  // implements Message ----------------------------------------------

  ContributeInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContributeInfoResponse& from);
  void MergeFrom(const ContributeInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .slg.protocol.AllianceContributeInfoDTO donationInfo = 1;
  inline bool has_donationinfo() const;
  inline void clear_donationinfo();
  static const int kDonationInfoFieldNumber = 1;
  inline const ::slg::protocol::AllianceContributeInfoDTO& donationinfo() const;
  inline ::slg::protocol::AllianceContributeInfoDTO* mutable_donationinfo();
  inline ::slg::protocol::AllianceContributeInfoDTO* release_donationinfo();
  inline void set_allocated_donationinfo(::slg::protocol::AllianceContributeInfoDTO* donationinfo);

  // required int32 canReceiveTimes = 2;
  inline bool has_canreceivetimes() const;
  inline void clear_canreceivetimes();
  static const int kCanReceiveTimesFieldNumber = 2;
  inline ::google::protobuf::int32 canreceivetimes() const;
  inline void set_canreceivetimes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.ContributeInfoResponse)
 private:
  inline void set_has_donationinfo();
  inline void clear_has_donationinfo();
  inline void set_has_canreceivetimes();
  inline void clear_has_canreceivetimes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::slg::protocol::AllianceContributeInfoDTO* donationinfo_;
  ::google::protobuf::int32 canreceivetimes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static ContributeInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class ContributeRequest : public ::google::protobuf::Message {
 public:
  ContributeRequest();
  virtual ~ContributeRequest();

  ContributeRequest(const ContributeRequest& from);

  inline ContributeRequest& operator=(const ContributeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContributeRequest& default_instance();

  void Swap(ContributeRequest* other);

  // implements Message ----------------------------------------------

  ContributeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContributeRequest& from);
  void MergeFrom(const ContributeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.ContributeRequest)
 private:
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static ContributeRequest* default_instance_;
};
// -------------------------------------------------------------------

class DrawAllianceGiftRequest : public ::google::protobuf::Message {
 public:
  DrawAllianceGiftRequest();
  virtual ~DrawAllianceGiftRequest();

  DrawAllianceGiftRequest(const DrawAllianceGiftRequest& from);

  inline DrawAllianceGiftRequest& operator=(const DrawAllianceGiftRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DrawAllianceGiftRequest& default_instance();

  void Swap(DrawAllianceGiftRequest* other);

  // implements Message ----------------------------------------------

  DrawAllianceGiftRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DrawAllianceGiftRequest& from);
  void MergeFrom(const DrawAllianceGiftRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:slg.protocol.DrawAllianceGiftRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static DrawAllianceGiftRequest* default_instance_;
};
// -------------------------------------------------------------------

class DrawAllianceGiftResponse : public ::google::protobuf::Message {
 public:
  DrawAllianceGiftResponse();
  virtual ~DrawAllianceGiftResponse();

  DrawAllianceGiftResponse(const DrawAllianceGiftResponse& from);

  inline DrawAllianceGiftResponse& operator=(const DrawAllianceGiftResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DrawAllianceGiftResponse& default_instance();

  void Swap(DrawAllianceGiftResponse* other);

  // implements Message ----------------------------------------------

  DrawAllianceGiftResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DrawAllianceGiftResponse& from);
  void MergeFrom(const DrawAllianceGiftResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .slg.protocol.ItemDTO items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::slg::protocol::ItemDTO& items(int index) const;
  inline ::slg::protocol::ItemDTO* mutable_items(int index);
  inline ::slg::protocol::ItemDTO* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::ItemDTO >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::ItemDTO >*
      mutable_items();

  // repeated .slg.protocol.PropertyDTO propertys = 2;
  inline int propertys_size() const;
  inline void clear_propertys();
  static const int kPropertysFieldNumber = 2;
  inline const ::slg::protocol::PropertyDTO& propertys(int index) const;
  inline ::slg::protocol::PropertyDTO* mutable_propertys(int index);
  inline ::slg::protocol::PropertyDTO* add_propertys();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::PropertyDTO >&
      propertys() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::PropertyDTO >*
      mutable_propertys();

  // @@protoc_insertion_point(class_scope:slg.protocol.DrawAllianceGiftResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::slg::protocol::ItemDTO > items_;
  ::google::protobuf::RepeatedPtrField< ::slg::protocol::PropertyDTO > propertys_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static DrawAllianceGiftResponse* default_instance_;
};
// -------------------------------------------------------------------

class ClearContributedCdRequest : public ::google::protobuf::Message {
 public:
  ClearContributedCdRequest();
  virtual ~ClearContributedCdRequest();

  ClearContributedCdRequest(const ClearContributedCdRequest& from);

  inline ClearContributedCdRequest& operator=(const ClearContributedCdRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClearContributedCdRequest& default_instance();

  void Swap(ClearContributedCdRequest* other);

  // implements Message ----------------------------------------------

  ClearContributedCdRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClearContributedCdRequest& from);
  void MergeFrom(const ClearContributedCdRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:slg.protocol.ClearContributedCdRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static ClearContributedCdRequest* default_instance_;
};
// -------------------------------------------------------------------

class ClearContributedCdResponse : public ::google::protobuf::Message {
 public:
  ClearContributedCdResponse();
  virtual ~ClearContributedCdResponse();

  ClearContributedCdResponse(const ClearContributedCdResponse& from);

  inline ClearContributedCdResponse& operator=(const ClearContributedCdResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClearContributedCdResponse& default_instance();

  void Swap(ClearContributedCdResponse* other);

  // implements Message ----------------------------------------------

  ClearContributedCdResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClearContributedCdResponse& from);
  void MergeFrom(const ClearContributedCdResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 canContributeTime = 1;
  inline bool has_cancontributetime() const;
  inline void clear_cancontributetime();
  static const int kCanContributeTimeFieldNumber = 1;
  inline ::google::protobuf::int32 cancontributetime() const;
  inline void set_cancontributetime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.ClearContributedCdResponse)
 private:
  inline void set_has_cancontributetime();
  inline void clear_has_cancontributetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cancontributetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static ClearContributedCdResponse* default_instance_;
};
// -------------------------------------------------------------------

class AllianceShopInfoRequest : public ::google::protobuf::Message {
 public:
  AllianceShopInfoRequest();
  virtual ~AllianceShopInfoRequest();

  AllianceShopInfoRequest(const AllianceShopInfoRequest& from);

  inline AllianceShopInfoRequest& operator=(const AllianceShopInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceShopInfoRequest& default_instance();

  void Swap(AllianceShopInfoRequest* other);

  // implements Message ----------------------------------------------

  AllianceShopInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceShopInfoRequest& from);
  void MergeFrom(const AllianceShopInfoRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceShopInfoRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceShopInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class AllianceShopInfoResponse : public ::google::protobuf::Message {
 public:
  AllianceShopInfoResponse();
  virtual ~AllianceShopInfoResponse();

  AllianceShopInfoResponse(const AllianceShopInfoResponse& from);

  inline AllianceShopInfoResponse& operator=(const AllianceShopInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceShopInfoResponse& default_instance();

  void Swap(AllianceShopInfoResponse* other);

  // implements Message ----------------------------------------------

  AllianceShopInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceShopInfoResponse& from);
  void MergeFrom(const AllianceShopInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .slg.protocol.AllianceShopItemDTO items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::slg::protocol::AllianceShopItemDTO& items(int index) const;
  inline ::slg::protocol::AllianceShopItemDTO* mutable_items(int index);
  inline ::slg::protocol::AllianceShopItemDTO* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceShopItemDTO >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceShopItemDTO >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceShopInfoResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceShopItemDTO > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceShopInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class AllianceShopBuyRequest : public ::google::protobuf::Message {
 public:
  AllianceShopBuyRequest();
  virtual ~AllianceShopBuyRequest();

  AllianceShopBuyRequest(const AllianceShopBuyRequest& from);

  inline AllianceShopBuyRequest& operator=(const AllianceShopBuyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceShopBuyRequest& default_instance();

  void Swap(AllianceShopBuyRequest* other);

  // implements Message ----------------------------------------------

  AllianceShopBuyRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceShopBuyRequest& from);
  void MergeFrom(const AllianceShopBuyRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceShopBuyRequest)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceShopBuyRequest* default_instance_;
};
// -------------------------------------------------------------------

class AllianceShopBuyResponse : public ::google::protobuf::Message {
 public:
  AllianceShopBuyResponse();
  virtual ~AllianceShopBuyResponse();

  AllianceShopBuyResponse(const AllianceShopBuyResponse& from);

  inline AllianceShopBuyResponse& operator=(const AllianceShopBuyResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceShopBuyResponse& default_instance();

  void Swap(AllianceShopBuyResponse* other);

  // implements Message ----------------------------------------------

  AllianceShopBuyResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceShopBuyResponse& from);
  void MergeFrom(const AllianceShopBuyResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // required int32 itemId = 3;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 3;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceShopBuyResponse)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_itemid();
  inline void clear_has_itemid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 itemid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceShopBuyResponse* default_instance_;
};
// -------------------------------------------------------------------

class InviteJoinAllianceRequest : public ::google::protobuf::Message {
 public:
  InviteJoinAllianceRequest();
  virtual ~InviteJoinAllianceRequest();

  InviteJoinAllianceRequest(const InviteJoinAllianceRequest& from);

  inline InviteJoinAllianceRequest& operator=(const InviteJoinAllianceRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InviteJoinAllianceRequest& default_instance();

  void Swap(InviteJoinAllianceRequest* other);

  // implements Message ----------------------------------------------

  InviteJoinAllianceRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InviteJoinAllianceRequest& from);
  void MergeFrom(const InviteJoinAllianceRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.InviteJoinAllianceRequest)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static InviteJoinAllianceRequest* default_instance_;
};
// -------------------------------------------------------------------

class InviteJoinAllianceResponse : public ::google::protobuf::Message {
 public:
  InviteJoinAllianceResponse();
  virtual ~InviteJoinAllianceResponse();

  InviteJoinAllianceResponse(const InviteJoinAllianceResponse& from);

  inline InviteJoinAllianceResponse& operator=(const InviteJoinAllianceResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InviteJoinAllianceResponse& default_instance();

  void Swap(InviteJoinAllianceResponse* other);

  // implements Message ----------------------------------------------

  InviteJoinAllianceResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InviteJoinAllianceResponse& from);
  void MergeFrom(const InviteJoinAllianceResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.InviteJoinAllianceResponse)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static InviteJoinAllianceResponse* default_instance_;
};
// -------------------------------------------------------------------

class DealInviteRequest : public ::google::protobuf::Message {
 public:
  DealInviteRequest();
  virtual ~DealInviteRequest();

  DealInviteRequest(const DealInviteRequest& from);

  inline DealInviteRequest& operator=(const DealInviteRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DealInviteRequest& default_instance();

  void Swap(DealInviteRequest* other);

  // implements Message ----------------------------------------------

  DealInviteRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DealInviteRequest& from);
  void MergeFrom(const DealInviteRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool isAgree = 1;
  inline bool has_isagree() const;
  inline void clear_isagree();
  static const int kIsAgreeFieldNumber = 1;
  inline bool isagree() const;
  inline void set_isagree(bool value);

  // required int32 allianceId = 2;
  inline bool has_allianceid() const;
  inline void clear_allianceid();
  static const int kAllianceIdFieldNumber = 2;
  inline ::google::protobuf::int32 allianceid() const;
  inline void set_allianceid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.DealInviteRequest)
 private:
  inline void set_has_isagree();
  inline void clear_has_isagree();
  inline void set_has_allianceid();
  inline void clear_has_allianceid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool isagree_;
  ::google::protobuf::int32 allianceid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static DealInviteRequest* default_instance_;
};
// -------------------------------------------------------------------

class DealInviteResponse : public ::google::protobuf::Message {
 public:
  DealInviteResponse();
  virtual ~DealInviteResponse();

  DealInviteResponse(const DealInviteResponse& from);

  inline DealInviteResponse& operator=(const DealInviteResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DealInviteResponse& default_instance();

  void Swap(DealInviteResponse* other);

  // implements Message ----------------------------------------------

  DealInviteResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DealInviteResponse& from);
  void MergeFrom(const DealInviteResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool isAgree = 1;
  inline bool has_isagree() const;
  inline void clear_isagree();
  static const int kIsAgreeFieldNumber = 1;
  inline bool isagree() const;
  inline void set_isagree(bool value);

  // @@protoc_insertion_point(class_scope:slg.protocol.DealInviteResponse)
 private:
  inline void set_has_isagree();
  inline void clear_has_isagree();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool isagree_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static DealInviteResponse* default_instance_;
};
// -------------------------------------------------------------------

class FreshRecommendRequest : public ::google::protobuf::Message {
 public:
  FreshRecommendRequest();
  virtual ~FreshRecommendRequest();

  FreshRecommendRequest(const FreshRecommendRequest& from);

  inline FreshRecommendRequest& operator=(const FreshRecommendRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FreshRecommendRequest& default_instance();

  void Swap(FreshRecommendRequest* other);

  // implements Message ----------------------------------------------

  FreshRecommendRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FreshRecommendRequest& from);
  void MergeFrom(const FreshRecommendRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:slg.protocol.FreshRecommendRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static FreshRecommendRequest* default_instance_;
};
// -------------------------------------------------------------------

class FreshRecommendResponse : public ::google::protobuf::Message {
 public:
  FreshRecommendResponse();
  virtual ~FreshRecommendResponse();

  FreshRecommendResponse(const FreshRecommendResponse& from);

  inline FreshRecommendResponse& operator=(const FreshRecommendResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FreshRecommendResponse& default_instance();

  void Swap(FreshRecommendResponse* other);

  // implements Message ----------------------------------------------

  FreshRecommendResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FreshRecommendResponse& from);
  void MergeFrom(const FreshRecommendResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .slg.protocol.RecommendDTO recommendList = 1;
  inline int recommendlist_size() const;
  inline void clear_recommendlist();
  static const int kRecommendListFieldNumber = 1;
  inline const ::slg::protocol::RecommendDTO& recommendlist(int index) const;
  inline ::slg::protocol::RecommendDTO* mutable_recommendlist(int index);
  inline ::slg::protocol::RecommendDTO* add_recommendlist();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::RecommendDTO >&
      recommendlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::RecommendDTO >*
      mutable_recommendlist();

  // required int32 nextTime = 2;
  inline bool has_nexttime() const;
  inline void clear_nexttime();
  static const int kNextTimeFieldNumber = 2;
  inline ::google::protobuf::int32 nexttime() const;
  inline void set_nexttime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.FreshRecommendResponse)
 private:
  inline void set_has_nexttime();
  inline void clear_has_nexttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::slg::protocol::RecommendDTO > recommendlist_;
  ::google::protobuf::int32 nexttime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static FreshRecommendResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetRecommendRequest : public ::google::protobuf::Message {
 public:
  GetRecommendRequest();
  virtual ~GetRecommendRequest();

  GetRecommendRequest(const GetRecommendRequest& from);

  inline GetRecommendRequest& operator=(const GetRecommendRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRecommendRequest& default_instance();

  void Swap(GetRecommendRequest* other);

  // implements Message ----------------------------------------------

  GetRecommendRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetRecommendRequest& from);
  void MergeFrom(const GetRecommendRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:slg.protocol.GetRecommendRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static GetRecommendRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetRecommendResponse : public ::google::protobuf::Message {
 public:
  GetRecommendResponse();
  virtual ~GetRecommendResponse();

  GetRecommendResponse(const GetRecommendResponse& from);

  inline GetRecommendResponse& operator=(const GetRecommendResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRecommendResponse& default_instance();

  void Swap(GetRecommendResponse* other);

  // implements Message ----------------------------------------------

  GetRecommendResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetRecommendResponse& from);
  void MergeFrom(const GetRecommendResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .slg.protocol.RecommendDTO recommendList = 1;
  inline int recommendlist_size() const;
  inline void clear_recommendlist();
  static const int kRecommendListFieldNumber = 1;
  inline const ::slg::protocol::RecommendDTO& recommendlist(int index) const;
  inline ::slg::protocol::RecommendDTO* mutable_recommendlist(int index);
  inline ::slg::protocol::RecommendDTO* add_recommendlist();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::RecommendDTO >&
      recommendlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::RecommendDTO >*
      mutable_recommendlist();

  // required int32 nextTime = 2;
  inline bool has_nexttime() const;
  inline void clear_nexttime();
  static const int kNextTimeFieldNumber = 2;
  inline ::google::protobuf::int32 nexttime() const;
  inline void set_nexttime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.GetRecommendResponse)
 private:
  inline void set_has_nexttime();
  inline void clear_has_nexttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::slg::protocol::RecommendDTO > recommendlist_;
  ::google::protobuf::int32 nexttime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static GetRecommendResponse* default_instance_;
};
// -------------------------------------------------------------------

class QuickJoinRequest : public ::google::protobuf::Message {
 public:
  QuickJoinRequest();
  virtual ~QuickJoinRequest();

  QuickJoinRequest(const QuickJoinRequest& from);

  inline QuickJoinRequest& operator=(const QuickJoinRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuickJoinRequest& default_instance();

  void Swap(QuickJoinRequest* other);

  // implements Message ----------------------------------------------

  QuickJoinRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuickJoinRequest& from);
  void MergeFrom(const QuickJoinRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:slg.protocol.QuickJoinRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static QuickJoinRequest* default_instance_;
};
// -------------------------------------------------------------------

class QueryInviterRequest : public ::google::protobuf::Message {
 public:
  QueryInviterRequest();
  virtual ~QueryInviterRequest();

  QueryInviterRequest(const QueryInviterRequest& from);

  inline QueryInviterRequest& operator=(const QueryInviterRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryInviterRequest& default_instance();

  void Swap(QueryInviterRequest* other);

  // implements Message ----------------------------------------------

  QueryInviterRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryInviterRequest& from);
  void MergeFrom(const QueryInviterRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string playerName = 1;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 1;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // @@protoc_insertion_point(class_scope:slg.protocol.QueryInviterRequest)
 private:
  inline void set_has_playername();
  inline void clear_has_playername();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* playername_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static QueryInviterRequest* default_instance_;
};
// -------------------------------------------------------------------

class QueryInviterResponse : public ::google::protobuf::Message {
 public:
  QueryInviterResponse();
  virtual ~QueryInviterResponse();

  QueryInviterResponse(const QueryInviterResponse& from);

  inline QueryInviterResponse& operator=(const QueryInviterResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryInviterResponse& default_instance();

  void Swap(QueryInviterResponse* other);

  // implements Message ----------------------------------------------

  QueryInviterResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryInviterResponse& from);
  void MergeFrom(const QueryInviterResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .slg.protocol.RecommendDTO player = 1;
  inline bool has_player() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 1;
  inline const ::slg::protocol::RecommendDTO& player() const;
  inline ::slg::protocol::RecommendDTO* mutable_player();
  inline ::slg::protocol::RecommendDTO* release_player();
  inline void set_allocated_player(::slg::protocol::RecommendDTO* player);

  // @@protoc_insertion_point(class_scope:slg.protocol.QueryInviterResponse)
 private:
  inline void set_has_player();
  inline void clear_has_player();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::slg::protocol::RecommendDTO* player_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static QueryInviterResponse* default_instance_;
};
// -------------------------------------------------------------------

class AllianceMemberRequest : public ::google::protobuf::Message {
 public:
  AllianceMemberRequest();
  virtual ~AllianceMemberRequest();

  AllianceMemberRequest(const AllianceMemberRequest& from);

  inline AllianceMemberRequest& operator=(const AllianceMemberRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceMemberRequest& default_instance();

  void Swap(AllianceMemberRequest* other);

  // implements Message ----------------------------------------------

  AllianceMemberRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceMemberRequest& from);
  void MergeFrom(const AllianceMemberRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceMemberRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceMemberRequest* default_instance_;
};
// -------------------------------------------------------------------

class AllianceMemberResponse : public ::google::protobuf::Message {
 public:
  AllianceMemberResponse();
  virtual ~AllianceMemberResponse();

  AllianceMemberResponse(const AllianceMemberResponse& from);

  inline AllianceMemberResponse& operator=(const AllianceMemberResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceMemberResponse& default_instance();

  void Swap(AllianceMemberResponse* other);

  // implements Message ----------------------------------------------

  AllianceMemberResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceMemberResponse& from);
  void MergeFrom(const AllianceMemberResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .slg.protocol.AllianceMemberDTO memberList = 1;
  inline int memberlist_size() const;
  inline void clear_memberlist();
  static const int kMemberListFieldNumber = 1;
  inline const ::slg::protocol::AllianceMemberDTO& memberlist(int index) const;
  inline ::slg::protocol::AllianceMemberDTO* mutable_memberlist(int index);
  inline ::slg::protocol::AllianceMemberDTO* add_memberlist();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceMemberDTO >&
      memberlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceMemberDTO >*
      mutable_memberlist();

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceMemberResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceMemberDTO > memberlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceMemberResponse* default_instance_;
};
// -------------------------------------------------------------------

class NeedAllianceDataRequest : public ::google::protobuf::Message {
 public:
  NeedAllianceDataRequest();
  virtual ~NeedAllianceDataRequest();

  NeedAllianceDataRequest(const NeedAllianceDataRequest& from);

  inline NeedAllianceDataRequest& operator=(const NeedAllianceDataRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NeedAllianceDataRequest& default_instance();

  void Swap(NeedAllianceDataRequest* other);

  // implements Message ----------------------------------------------

  NeedAllianceDataRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NeedAllianceDataRequest& from);
  void MergeFrom(const NeedAllianceDataRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool isNeed = 1;
  inline bool has_isneed() const;
  inline void clear_isneed();
  static const int kIsNeedFieldNumber = 1;
  inline bool isneed() const;
  inline void set_isneed(bool value);

  // @@protoc_insertion_point(class_scope:slg.protocol.NeedAllianceDataRequest)
 private:
  inline void set_has_isneed();
  inline void clear_has_isneed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool isneed_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static NeedAllianceDataRequest* default_instance_;
};
// -------------------------------------------------------------------

class AllianceSummaryRequest : public ::google::protobuf::Message {
 public:
  AllianceSummaryRequest();
  virtual ~AllianceSummaryRequest();

  AllianceSummaryRequest(const AllianceSummaryRequest& from);

  inline AllianceSummaryRequest& operator=(const AllianceSummaryRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceSummaryRequest& default_instance();

  void Swap(AllianceSummaryRequest* other);

  // implements Message ----------------------------------------------

  AllianceSummaryRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceSummaryRequest& from);
  void MergeFrom(const AllianceSummaryRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceSummaryRequest)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceSummaryRequest* default_instance_;
};
// -------------------------------------------------------------------

class AllianceSummaryResponse : public ::google::protobuf::Message {
 public:
  AllianceSummaryResponse();
  virtual ~AllianceSummaryResponse();

  AllianceSummaryResponse(const AllianceSummaryResponse& from);

  inline AllianceSummaryResponse& operator=(const AllianceSummaryResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceSummaryResponse& default_instance();

  void Swap(AllianceSummaryResponse* other);

  // implements Message ----------------------------------------------

  AllianceSummaryResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceSummaryResponse& from);
  void MergeFrom(const AllianceSummaryResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .slg.protocol.AllianceSummaryDTO summaryInfo = 1;
  inline bool has_summaryinfo() const;
  inline void clear_summaryinfo();
  static const int kSummaryInfoFieldNumber = 1;
  inline const ::slg::protocol::AllianceSummaryDTO& summaryinfo() const;
  inline ::slg::protocol::AllianceSummaryDTO* mutable_summaryinfo();
  inline ::slg::protocol::AllianceSummaryDTO* release_summaryinfo();
  inline void set_allocated_summaryinfo(::slg::protocol::AllianceSummaryDTO* summaryinfo);

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceSummaryResponse)
 private:
  inline void set_has_summaryinfo();
  inline void clear_has_summaryinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::slg::protocol::AllianceSummaryDTO* summaryinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceSummaryResponse* default_instance_;
};
// -------------------------------------------------------------------

class MemberChangePush : public ::google::protobuf::Message {
 public:
  MemberChangePush();
  virtual ~MemberChangePush();

  MemberChangePush(const MemberChangePush& from);

  inline MemberChangePush& operator=(const MemberChangePush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MemberChangePush& default_instance();

  void Swap(MemberChangePush* other);

  // implements Message ----------------------------------------------

  MemberChangePush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MemberChangePush& from);
  void MergeFrom(const MemberChangePush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .slg.protocol.AllianceMemberDTO members = 1;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 1;
  inline const ::slg::protocol::AllianceMemberDTO& members(int index) const;
  inline ::slg::protocol::AllianceMemberDTO* mutable_members(int index);
  inline ::slg::protocol::AllianceMemberDTO* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceMemberDTO >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceMemberDTO >*
      mutable_members();

  // @@protoc_insertion_point(class_scope:slg.protocol.MemberChangePush)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceMemberDTO > members_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static MemberChangePush* default_instance_;
};
// -------------------------------------------------------------------

class MemberExitPush : public ::google::protobuf::Message {
 public:
  MemberExitPush();
  virtual ~MemberExitPush();

  MemberExitPush(const MemberExitPush& from);

  inline MemberExitPush& operator=(const MemberExitPush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MemberExitPush& default_instance();

  void Swap(MemberExitPush* other);

  // implements Message ----------------------------------------------

  MemberExitPush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MemberExitPush& from);
  void MergeFrom(const MemberExitPush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.MemberExitPush)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static MemberExitPush* default_instance_;
};
// -------------------------------------------------------------------

class MyAllianceInfoPush : public ::google::protobuf::Message {
 public:
  MyAllianceInfoPush();
  virtual ~MyAllianceInfoPush();

  MyAllianceInfoPush(const MyAllianceInfoPush& from);

  inline MyAllianceInfoPush& operator=(const MyAllianceInfoPush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MyAllianceInfoPush& default_instance();

  void Swap(MyAllianceInfoPush* other);

  // implements Message ----------------------------------------------

  MyAllianceInfoPush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MyAllianceInfoPush& from);
  void MergeFrom(const MyAllianceInfoPush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string shortName = 3;
  inline bool has_shortname() const;
  inline void clear_shortname();
  static const int kShortNameFieldNumber = 3;
  inline const ::std::string& shortname() const;
  inline void set_shortname(const ::std::string& value);
  inline void set_shortname(const char* value);
  inline void set_shortname(const char* value, size_t size);
  inline ::std::string* mutable_shortname();
  inline ::std::string* release_shortname();
  inline void set_allocated_shortname(::std::string* shortname);

  // optional int32 flag = 4;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 4;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // optional int32 position = 5;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 5;
  inline ::google::protobuf::int32 position() const;
  inline void set_position(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.MyAllianceInfoPush)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_shortname();
  inline void clear_has_shortname();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_position();
  inline void clear_has_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 flag_;
  ::std::string* shortname_;
  ::google::protobuf::int32 position_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static MyAllianceInfoPush* default_instance_;
};
// -------------------------------------------------------------------

class HelpChangePush : public ::google::protobuf::Message {
 public:
  HelpChangePush();
  virtual ~HelpChangePush();

  HelpChangePush(const HelpChangePush& from);

  inline HelpChangePush& operator=(const HelpChangePush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HelpChangePush& default_instance();

  void Swap(HelpChangePush* other);

  // implements Message ----------------------------------------------

  HelpChangePush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HelpChangePush& from);
  void MergeFrom(const HelpChangePush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .slg.protocol.AllianceHelpDTO help = 1;
  inline int help_size() const;
  inline void clear_help();
  static const int kHelpFieldNumber = 1;
  inline const ::slg::protocol::AllianceHelpDTO& help(int index) const;
  inline ::slg::protocol::AllianceHelpDTO* mutable_help(int index);
  inline ::slg::protocol::AllianceHelpDTO* add_help();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceHelpDTO >&
      help() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceHelpDTO >*
      mutable_help();

  // @@protoc_insertion_point(class_scope:slg.protocol.HelpChangePush)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceHelpDTO > help_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static HelpChangePush* default_instance_;
};
// -------------------------------------------------------------------

class HelpRemovePush : public ::google::protobuf::Message {
 public:
  HelpRemovePush();
  virtual ~HelpRemovePush();

  HelpRemovePush(const HelpRemovePush& from);

  inline HelpRemovePush& operator=(const HelpRemovePush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HelpRemovePush& default_instance();

  void Swap(HelpRemovePush* other);

  // implements Message ----------------------------------------------

  HelpRemovePush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HelpRemovePush& from);
  void MergeFrom(const HelpRemovePush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 helpId = 1;
  inline bool has_helpid() const;
  inline void clear_helpid();
  static const int kHelpIdFieldNumber = 1;
  inline ::google::protobuf::int32 helpid() const;
  inline void set_helpid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.HelpRemovePush)
 private:
  inline void set_has_helpid();
  inline void clear_has_helpid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 helpid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static HelpRemovePush* default_instance_;
};
// -------------------------------------------------------------------

class AllianceNewsPush : public ::google::protobuf::Message {
 public:
  AllianceNewsPush();
  virtual ~AllianceNewsPush();

  AllianceNewsPush(const AllianceNewsPush& from);

  inline AllianceNewsPush& operator=(const AllianceNewsPush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceNewsPush& default_instance();

  void Swap(AllianceNewsPush* other);

  // implements Message ----------------------------------------------

  AllianceNewsPush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceNewsPush& from);
  void MergeFrom(const AllianceNewsPush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .slg.protocol.AllianceNewsDTO news = 1;
  inline bool has_news() const;
  inline void clear_news();
  static const int kNewsFieldNumber = 1;
  inline const ::slg::protocol::AllianceNewsDTO& news() const;
  inline ::slg::protocol::AllianceNewsDTO* mutable_news();
  inline ::slg::protocol::AllianceNewsDTO* release_news();
  inline void set_allocated_news(::slg::protocol::AllianceNewsDTO* news);

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceNewsPush)
 private:
  inline void set_has_news();
  inline void clear_has_news();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::slg::protocol::AllianceNewsDTO* news_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceNewsPush* default_instance_;
};
// -------------------------------------------------------------------

class AllianceTechPush : public ::google::protobuf::Message {
 public:
  AllianceTechPush();
  virtual ~AllianceTechPush();

  AllianceTechPush(const AllianceTechPush& from);

  inline AllianceTechPush& operator=(const AllianceTechPush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceTechPush& default_instance();

  void Swap(AllianceTechPush* other);

  // implements Message ----------------------------------------------

  AllianceTechPush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceTechPush& from);
  void MergeFrom(const AllianceTechPush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .slg.protocol.AllianceTechDTO techs = 1;
  inline int techs_size() const;
  inline void clear_techs();
  static const int kTechsFieldNumber = 1;
  inline const ::slg::protocol::AllianceTechDTO& techs(int index) const;
  inline ::slg::protocol::AllianceTechDTO* mutable_techs(int index);
  inline ::slg::protocol::AllianceTechDTO* add_techs();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceTechDTO >&
      techs() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceTechDTO >*
      mutable_techs();

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceTechPush)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceTechDTO > techs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceTechPush* default_instance_;
};
// -------------------------------------------------------------------

class AllianceTechUpgradePush : public ::google::protobuf::Message {
 public:
  AllianceTechUpgradePush();
  virtual ~AllianceTechUpgradePush();

  AllianceTechUpgradePush(const AllianceTechUpgradePush& from);

  inline AllianceTechUpgradePush& operator=(const AllianceTechUpgradePush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceTechUpgradePush& default_instance();

  void Swap(AllianceTechUpgradePush* other);

  // implements Message ----------------------------------------------

  AllianceTechUpgradePush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceTechUpgradePush& from);
  void MergeFrom(const AllianceTechUpgradePush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .slg.protocol.AllianceTechUpgradeDTO upgrade = 1;
  inline bool has_upgrade() const;
  inline void clear_upgrade();
  static const int kUpgradeFieldNumber = 1;
  inline const ::slg::protocol::AllianceTechUpgradeDTO& upgrade() const;
  inline ::slg::protocol::AllianceTechUpgradeDTO* mutable_upgrade();
  inline ::slg::protocol::AllianceTechUpgradeDTO* release_upgrade();
  inline void set_allocated_upgrade(::slg::protocol::AllianceTechUpgradeDTO* upgrade);

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceTechUpgradePush)
 private:
  inline void set_has_upgrade();
  inline void clear_has_upgrade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::slg::protocol::AllianceTechUpgradeDTO* upgrade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceTechUpgradePush* default_instance_;
};
// -------------------------------------------------------------------

class AllianceDonationPush : public ::google::protobuf::Message {
 public:
  AllianceDonationPush();
  virtual ~AllianceDonationPush();

  AllianceDonationPush(const AllianceDonationPush& from);

  inline AllianceDonationPush& operator=(const AllianceDonationPush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceDonationPush& default_instance();

  void Swap(AllianceDonationPush* other);

  // implements Message ----------------------------------------------

  AllianceDonationPush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceDonationPush& from);
  void MergeFrom(const AllianceDonationPush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .slg.protocol.AllianceContributeInfoDTO info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::slg::protocol::AllianceContributeInfoDTO& info() const;
  inline ::slg::protocol::AllianceContributeInfoDTO* mutable_info();
  inline ::slg::protocol::AllianceContributeInfoDTO* release_info();
  inline void set_allocated_info(::slg::protocol::AllianceContributeInfoDTO* info);

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceDonationPush)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::slg::protocol::AllianceContributeInfoDTO* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceDonationPush* default_instance_;
};
// -------------------------------------------------------------------

class AllianceWelfarePush : public ::google::protobuf::Message {
 public:
  AllianceWelfarePush();
  virtual ~AllianceWelfarePush();

  AllianceWelfarePush(const AllianceWelfarePush& from);

  inline AllianceWelfarePush& operator=(const AllianceWelfarePush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceWelfarePush& default_instance();

  void Swap(AllianceWelfarePush* other);

  // implements Message ----------------------------------------------

  AllianceWelfarePush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceWelfarePush& from);
  void MergeFrom(const AllianceWelfarePush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 canReceiveTimes = 1;
  inline bool has_canreceivetimes() const;
  inline void clear_canreceivetimes();
  static const int kCanReceiveTimesFieldNumber = 1;
  inline ::google::protobuf::int32 canreceivetimes() const;
  inline void set_canreceivetimes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceWelfarePush)
 private:
  inline void set_has_canreceivetimes();
  inline void clear_has_canreceivetimes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 canreceivetimes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceWelfarePush* default_instance_;
};
// -------------------------------------------------------------------

class AllianceNewsRemovePush : public ::google::protobuf::Message {
 public:
  AllianceNewsRemovePush();
  virtual ~AllianceNewsRemovePush();

  AllianceNewsRemovePush(const AllianceNewsRemovePush& from);

  inline AllianceNewsRemovePush& operator=(const AllianceNewsRemovePush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceNewsRemovePush& default_instance();

  void Swap(AllianceNewsRemovePush* other);

  // implements Message ----------------------------------------------

  AllianceNewsRemovePush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceNewsRemovePush& from);
  void MergeFrom(const AllianceNewsRemovePush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 newsId = 1;
  inline bool has_newsid() const;
  inline void clear_newsid();
  static const int kNewsIdFieldNumber = 1;
  inline ::google::protobuf::int32 newsid() const;
  inline void set_newsid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceNewsRemovePush)
 private:
  inline void set_has_newsid();
  inline void clear_has_newsid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 newsid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceNewsRemovePush* default_instance_;
};
// -------------------------------------------------------------------

class AllianceInvitePush : public ::google::protobuf::Message {
 public:
  AllianceInvitePush();
  virtual ~AllianceInvitePush();

  AllianceInvitePush(const AllianceInvitePush& from);

  inline AllianceInvitePush& operator=(const AllianceInvitePush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceInvitePush& default_instance();

  void Swap(AllianceInvitePush* other);

  // implements Message ----------------------------------------------

  AllianceInvitePush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceInvitePush& from);
  void MergeFrom(const AllianceInvitePush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .slg.protocol.AllianceInviteDTO inviteList = 1;
  inline int invitelist_size() const;
  inline void clear_invitelist();
  static const int kInviteListFieldNumber = 1;
  inline const ::slg::protocol::AllianceInviteDTO& invitelist(int index) const;
  inline ::slg::protocol::AllianceInviteDTO* mutable_invitelist(int index);
  inline ::slg::protocol::AllianceInviteDTO* add_invitelist();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceInviteDTO >&
      invitelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceInviteDTO >*
      mutable_invitelist();

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceInvitePush)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceInviteDTO > invitelist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceInvitePush* default_instance_;
};
// -------------------------------------------------------------------

class HasSendHelpTimesPush : public ::google::protobuf::Message {
 public:
  HasSendHelpTimesPush();
  virtual ~HasSendHelpTimesPush();

  HasSendHelpTimesPush(const HasSendHelpTimesPush& from);

  inline HasSendHelpTimesPush& operator=(const HasSendHelpTimesPush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HasSendHelpTimesPush& default_instance();

  void Swap(HasSendHelpTimesPush* other);

  // implements Message ----------------------------------------------

  HasSendHelpTimesPush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HasSendHelpTimesPush& from);
  void MergeFrom(const HasSendHelpTimesPush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 timerIds = 1;
  inline int timerids_size() const;
  inline void clear_timerids();
  static const int kTimerIdsFieldNumber = 1;
  inline ::google::protobuf::int32 timerids(int index) const;
  inline void set_timerids(int index, ::google::protobuf::int32 value);
  inline void add_timerids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      timerids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_timerids();

  // @@protoc_insertion_point(class_scope:slg.protocol.HasSendHelpTimesPush)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > timerids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static HasSendHelpTimesPush* default_instance_;
};
// -------------------------------------------------------------------

class AllianceScorePush : public ::google::protobuf::Message {
 public:
  AllianceScorePush();
  virtual ~AllianceScorePush();

  AllianceScorePush(const AllianceScorePush& from);

  inline AllianceScorePush& operator=(const AllianceScorePush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceScorePush& default_instance();

  void Swap(AllianceScorePush* other);

  // implements Message ----------------------------------------------

  AllianceScorePush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceScorePush& from);
  void MergeFrom(const AllianceScorePush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 score = 1;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 1;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceScorePush)
 private:
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceScorePush* default_instance_;
};
// -------------------------------------------------------------------

class MyVotePush : public ::google::protobuf::Message {
 public:
  MyVotePush();
  virtual ~MyVotePush();

  MyVotePush(const MyVotePush& from);

  inline MyVotePush& operator=(const MyVotePush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MyVotePush& default_instance();

  void Swap(MyVotePush* other);

  // implements Message ----------------------------------------------

  MyVotePush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MyVotePush& from);
  void MergeFrom(const MyVotePush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 voteType = 1;
  inline bool has_votetype() const;
  inline void clear_votetype();
  static const int kVoteTypeFieldNumber = 1;
  inline ::google::protobuf::int32 votetype() const;
  inline void set_votetype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.MyVotePush)
 private:
  inline void set_has_votetype();
  inline void clear_has_votetype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 votetype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static MyVotePush* default_instance_;
};
// -------------------------------------------------------------------

class AllianceVoteInfoPush : public ::google::protobuf::Message {
 public:
  AllianceVoteInfoPush();
  virtual ~AllianceVoteInfoPush();

  AllianceVoteInfoPush(const AllianceVoteInfoPush& from);

  inline AllianceVoteInfoPush& operator=(const AllianceVoteInfoPush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceVoteInfoPush& default_instance();

  void Swap(AllianceVoteInfoPush* other);

  // implements Message ----------------------------------------------

  AllianceVoteInfoPush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceVoteInfoPush& from);
  void MergeFrom(const AllianceVoteInfoPush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .slg.protocol.AllianceTechVoteDTO votes = 1;
  inline int votes_size() const;
  inline void clear_votes();
  static const int kVotesFieldNumber = 1;
  inline const ::slg::protocol::AllianceTechVoteDTO& votes(int index) const;
  inline ::slg::protocol::AllianceTechVoteDTO* mutable_votes(int index);
  inline ::slg::protocol::AllianceTechVoteDTO* add_votes();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceTechVoteDTO >&
      votes() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceTechVoteDTO >*
      mutable_votes();

  // optional bool isClear = 2;
  inline bool has_isclear() const;
  inline void clear_isclear();
  static const int kIsClearFieldNumber = 2;
  inline bool isclear() const;
  inline void set_isclear(bool value);

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceVoteInfoPush)
 private:
  inline void set_has_isclear();
  inline void clear_has_isclear();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceTechVoteDTO > votes_;
  bool isclear_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceVoteInfoPush* default_instance_;
};
// -------------------------------------------------------------------

class AllianceChangePush : public ::google::protobuf::Message {
 public:
  AllianceChangePush();
  virtual ~AllianceChangePush();

  AllianceChangePush(const AllianceChangePush& from);

  inline AllianceChangePush& operator=(const AllianceChangePush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceChangePush& default_instance();

  void Swap(AllianceChangePush* other);

  // implements Message ----------------------------------------------

  AllianceChangePush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceChangePush& from);
  void MergeFrom(const AllianceChangePush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string allianceName = 1;
  inline bool has_alliancename() const;
  inline void clear_alliancename();
  static const int kAllianceNameFieldNumber = 1;
  inline const ::std::string& alliancename() const;
  inline void set_alliancename(const ::std::string& value);
  inline void set_alliancename(const char* value);
  inline void set_alliancename(const char* value, size_t size);
  inline ::std::string* mutable_alliancename();
  inline ::std::string* release_alliancename();
  inline void set_allocated_alliancename(::std::string* alliancename);

  // optional int32 flag = 2;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // optional string declaration = 3;
  inline bool has_declaration() const;
  inline void clear_declaration();
  static const int kDeclarationFieldNumber = 3;
  inline const ::std::string& declaration() const;
  inline void set_declaration(const ::std::string& value);
  inline void set_declaration(const char* value);
  inline void set_declaration(const char* value, size_t size);
  inline ::std::string* mutable_declaration();
  inline ::std::string* release_declaration();
  inline void set_allocated_declaration(::std::string* declaration);

  // optional bool isPublic = 4;
  inline bool has_ispublic() const;
  inline void clear_ispublic();
  static const int kIsPublicFieldNumber = 4;
  inline bool ispublic() const;
  inline void set_ispublic(bool value);

  // optional int32 joinPower = 5;
  inline bool has_joinpower() const;
  inline void clear_joinpower();
  static const int kJoinPowerFieldNumber = 5;
  inline ::google::protobuf::int32 joinpower() const;
  inline void set_joinpower(::google::protobuf::int32 value);

  // optional string language = 6;
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 6;
  inline const ::std::string& language() const;
  inline void set_language(const ::std::string& value);
  inline void set_language(const char* value);
  inline void set_language(const char* value, size_t size);
  inline ::std::string* mutable_language();
  inline ::std::string* release_language();
  inline void set_allocated_language(::std::string* language);

  // optional string shortName = 7;
  inline bool has_shortname() const;
  inline void clear_shortname();
  static const int kShortNameFieldNumber = 7;
  inline const ::std::string& shortname() const;
  inline void set_shortname(const ::std::string& value);
  inline void set_shortname(const char* value);
  inline void set_shortname(const char* value, size_t size);
  inline ::std::string* mutable_shortname();
  inline ::std::string* release_shortname();
  inline void set_allocated_shortname(::std::string* shortname);

  // optional int32 honor = 8;
  inline bool has_honor() const;
  inline void clear_honor();
  static const int kHonorFieldNumber = 8;
  inline ::google::protobuf::int32 honor() const;
  inline void set_honor(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceChangePush)
 private:
  inline void set_has_alliancename();
  inline void clear_has_alliancename();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_declaration();
  inline void clear_has_declaration();
  inline void set_has_ispublic();
  inline void clear_has_ispublic();
  inline void set_has_joinpower();
  inline void clear_has_joinpower();
  inline void set_has_language();
  inline void clear_has_language();
  inline void set_has_shortname();
  inline void clear_has_shortname();
  inline void set_has_honor();
  inline void clear_has_honor();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* alliancename_;
  ::std::string* declaration_;
  ::google::protobuf::int32 flag_;
  bool ispublic_;
  ::std::string* language_;
  ::google::protobuf::int32 joinpower_;
  ::google::protobuf::int32 honor_;
  ::std::string* shortname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_alliance_2eproto();
  friend void protobuf_AssignDesc_alliance_2eproto();
  friend void protobuf_ShutdownFile_alliance_2eproto();

  void InitAsDefaultInstance();
  static AllianceChangePush* default_instance_;
};
// ===================================================================


// ===================================================================

// AllianceSummaryDTO

// required int32 id = 1;
inline bool AllianceSummaryDTO::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllianceSummaryDTO::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllianceSummaryDTO::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllianceSummaryDTO::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 AllianceSummaryDTO::id() const {
  return id_;
}
inline void AllianceSummaryDTO::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool AllianceSummaryDTO::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllianceSummaryDTO::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllianceSummaryDTO::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllianceSummaryDTO::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& AllianceSummaryDTO::name() const {
  return *name_;
}
inline void AllianceSummaryDTO::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void AllianceSummaryDTO::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void AllianceSummaryDTO::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllianceSummaryDTO::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* AllianceSummaryDTO::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AllianceSummaryDTO::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 honor = 3;
inline bool AllianceSummaryDTO::has_honor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AllianceSummaryDTO::set_has_honor() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AllianceSummaryDTO::clear_has_honor() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AllianceSummaryDTO::clear_honor() {
  honor_ = 0;
  clear_has_honor();
}
inline ::google::protobuf::int32 AllianceSummaryDTO::honor() const {
  return honor_;
}
inline void AllianceSummaryDTO::set_honor(::google::protobuf::int32 value) {
  set_has_honor();
  honor_ = value;
}

// required int32 flag = 4;
inline bool AllianceSummaryDTO::has_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AllianceSummaryDTO::set_has_flag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AllianceSummaryDTO::clear_has_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AllianceSummaryDTO::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 AllianceSummaryDTO::flag() const {
  return flag_;
}
inline void AllianceSummaryDTO::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// required string leaderName = 5;
inline bool AllianceSummaryDTO::has_leadername() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AllianceSummaryDTO::set_has_leadername() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AllianceSummaryDTO::clear_has_leadername() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AllianceSummaryDTO::clear_leadername() {
  if (leadername_ != &::google::protobuf::internal::kEmptyString) {
    leadername_->clear();
  }
  clear_has_leadername();
}
inline const ::std::string& AllianceSummaryDTO::leadername() const {
  return *leadername_;
}
inline void AllianceSummaryDTO::set_leadername(const ::std::string& value) {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::kEmptyString) {
    leadername_ = new ::std::string;
  }
  leadername_->assign(value);
}
inline void AllianceSummaryDTO::set_leadername(const char* value) {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::kEmptyString) {
    leadername_ = new ::std::string;
  }
  leadername_->assign(value);
}
inline void AllianceSummaryDTO::set_leadername(const char* value, size_t size) {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::kEmptyString) {
    leadername_ = new ::std::string;
  }
  leadername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllianceSummaryDTO::mutable_leadername() {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::kEmptyString) {
    leadername_ = new ::std::string;
  }
  return leadername_;
}
inline ::std::string* AllianceSummaryDTO::release_leadername() {
  clear_has_leadername();
  if (leadername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = leadername_;
    leadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AllianceSummaryDTO::set_allocated_leadername(::std::string* leadername) {
  if (leadername_ != &::google::protobuf::internal::kEmptyString) {
    delete leadername_;
  }
  if (leadername) {
    set_has_leadername();
    leadername_ = leadername;
  } else {
    clear_has_leadername();
    leadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 memberLimit = 6;
inline bool AllianceSummaryDTO::has_memberlimit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AllianceSummaryDTO::set_has_memberlimit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AllianceSummaryDTO::clear_has_memberlimit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AllianceSummaryDTO::clear_memberlimit() {
  memberlimit_ = 0;
  clear_has_memberlimit();
}
inline ::google::protobuf::int32 AllianceSummaryDTO::memberlimit() const {
  return memberlimit_;
}
inline void AllianceSummaryDTO::set_memberlimit(::google::protobuf::int32 value) {
  set_has_memberlimit();
  memberlimit_ = value;
}

// required int32 currentMember = 7;
inline bool AllianceSummaryDTO::has_currentmember() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AllianceSummaryDTO::set_has_currentmember() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AllianceSummaryDTO::clear_has_currentmember() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AllianceSummaryDTO::clear_currentmember() {
  currentmember_ = 0;
  clear_has_currentmember();
}
inline ::google::protobuf::int32 AllianceSummaryDTO::currentmember() const {
  return currentmember_;
}
inline void AllianceSummaryDTO::set_currentmember(::google::protobuf::int32 value) {
  set_has_currentmember();
  currentmember_ = value;
}

// -------------------------------------------------------------------

// AllianceTechVoteDTO

// required int32 techType = 1;
inline bool AllianceTechVoteDTO::has_techtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllianceTechVoteDTO::set_has_techtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllianceTechVoteDTO::clear_has_techtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllianceTechVoteDTO::clear_techtype() {
  techtype_ = 0;
  clear_has_techtype();
}
inline ::google::protobuf::int32 AllianceTechVoteDTO::techtype() const {
  return techtype_;
}
inline void AllianceTechVoteDTO::set_techtype(::google::protobuf::int32 value) {
  set_has_techtype();
  techtype_ = value;
}

// required int32 voteNum = 2;
inline bool AllianceTechVoteDTO::has_votenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllianceTechVoteDTO::set_has_votenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllianceTechVoteDTO::clear_has_votenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllianceTechVoteDTO::clear_votenum() {
  votenum_ = 0;
  clear_has_votenum();
}
inline ::google::protobuf::int32 AllianceTechVoteDTO::votenum() const {
  return votenum_;
}
inline void AllianceTechVoteDTO::set_votenum(::google::protobuf::int32 value) {
  set_has_votenum();
  votenum_ = value;
}

// -------------------------------------------------------------------

// RecommendDTO

// required int64 playerId = 1;
inline bool RecommendDTO::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecommendDTO::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecommendDTO::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecommendDTO::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 RecommendDTO::playerid() const {
  return playerid_;
}
inline void RecommendDTO::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// required string icon = 2;
inline bool RecommendDTO::has_icon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecommendDTO::set_has_icon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecommendDTO::clear_has_icon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecommendDTO::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& RecommendDTO::icon() const {
  return *icon_;
}
inline void RecommendDTO::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void RecommendDTO::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void RecommendDTO::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecommendDTO::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* RecommendDTO::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RecommendDTO::set_allocated_icon(::std::string* icon) {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 battle = 3;
inline bool RecommendDTO::has_battle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecommendDTO::set_has_battle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecommendDTO::clear_has_battle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecommendDTO::clear_battle() {
  battle_ = 0;
  clear_has_battle();
}
inline ::google::protobuf::int32 RecommendDTO::battle() const {
  return battle_;
}
inline void RecommendDTO::set_battle(::google::protobuf::int32 value) {
  set_has_battle();
  battle_ = value;
}

// required bool isInvited = 4;
inline bool RecommendDTO::has_isinvited() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecommendDTO::set_has_isinvited() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecommendDTO::clear_has_isinvited() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecommendDTO::clear_isinvited() {
  isinvited_ = false;
  clear_has_isinvited();
}
inline bool RecommendDTO::isinvited() const {
  return isinvited_;
}
inline void RecommendDTO::set_isinvited(bool value) {
  set_has_isinvited();
  isinvited_ = value;
}

// required string playerName = 5;
inline bool RecommendDTO::has_playername() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecommendDTO::set_has_playername() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RecommendDTO::clear_has_playername() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RecommendDTO::clear_playername() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& RecommendDTO::playername() const {
  return *playername_;
}
inline void RecommendDTO::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void RecommendDTO::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void RecommendDTO::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecommendDTO::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  return playername_;
}
inline ::std::string* RecommendDTO::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RecommendDTO::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AllianceInviteDTO

// required int32 allianceId = 1;
inline bool AllianceInviteDTO::has_allianceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllianceInviteDTO::set_has_allianceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllianceInviteDTO::clear_has_allianceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllianceInviteDTO::clear_allianceid() {
  allianceid_ = 0;
  clear_has_allianceid();
}
inline ::google::protobuf::int32 AllianceInviteDTO::allianceid() const {
  return allianceid_;
}
inline void AllianceInviteDTO::set_allianceid(::google::protobuf::int32 value) {
  set_has_allianceid();
  allianceid_ = value;
}

// required string allianceName = 2;
inline bool AllianceInviteDTO::has_alliancename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllianceInviteDTO::set_has_alliancename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllianceInviteDTO::clear_has_alliancename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllianceInviteDTO::clear_alliancename() {
  if (alliancename_ != &::google::protobuf::internal::kEmptyString) {
    alliancename_->clear();
  }
  clear_has_alliancename();
}
inline const ::std::string& AllianceInviteDTO::alliancename() const {
  return *alliancename_;
}
inline void AllianceInviteDTO::set_alliancename(const ::std::string& value) {
  set_has_alliancename();
  if (alliancename_ == &::google::protobuf::internal::kEmptyString) {
    alliancename_ = new ::std::string;
  }
  alliancename_->assign(value);
}
inline void AllianceInviteDTO::set_alliancename(const char* value) {
  set_has_alliancename();
  if (alliancename_ == &::google::protobuf::internal::kEmptyString) {
    alliancename_ = new ::std::string;
  }
  alliancename_->assign(value);
}
inline void AllianceInviteDTO::set_alliancename(const char* value, size_t size) {
  set_has_alliancename();
  if (alliancename_ == &::google::protobuf::internal::kEmptyString) {
    alliancename_ = new ::std::string;
  }
  alliancename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllianceInviteDTO::mutable_alliancename() {
  set_has_alliancename();
  if (alliancename_ == &::google::protobuf::internal::kEmptyString) {
    alliancename_ = new ::std::string;
  }
  return alliancename_;
}
inline ::std::string* AllianceInviteDTO::release_alliancename() {
  clear_has_alliancename();
  if (alliancename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = alliancename_;
    alliancename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AllianceInviteDTO::set_allocated_alliancename(::std::string* alliancename) {
  if (alliancename_ != &::google::protobuf::internal::kEmptyString) {
    delete alliancename_;
  }
  if (alliancename) {
    set_has_alliancename();
    alliancename_ = alliancename;
  } else {
    clear_has_alliancename();
    alliancename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 icon = 3;
inline bool AllianceInviteDTO::has_icon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AllianceInviteDTO::set_has_icon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AllianceInviteDTO::clear_has_icon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AllianceInviteDTO::clear_icon() {
  icon_ = 0;
  clear_has_icon();
}
inline ::google::protobuf::int32 AllianceInviteDTO::icon() const {
  return icon_;
}
inline void AllianceInviteDTO::set_icon(::google::protobuf::int32 value) {
  set_has_icon();
  icon_ = value;
}

// required int32 current = 4;
inline bool AllianceInviteDTO::has_current() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AllianceInviteDTO::set_has_current() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AllianceInviteDTO::clear_has_current() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AllianceInviteDTO::clear_current() {
  current_ = 0;
  clear_has_current();
}
inline ::google::protobuf::int32 AllianceInviteDTO::current() const {
  return current_;
}
inline void AllianceInviteDTO::set_current(::google::protobuf::int32 value) {
  set_has_current();
  current_ = value;
}

// required int32 limit = 5;
inline bool AllianceInviteDTO::has_limit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AllianceInviteDTO::set_has_limit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AllianceInviteDTO::clear_has_limit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AllianceInviteDTO::clear_limit() {
  limit_ = 0;
  clear_has_limit();
}
inline ::google::protobuf::int32 AllianceInviteDTO::limit() const {
  return limit_;
}
inline void AllianceInviteDTO::set_limit(::google::protobuf::int32 value) {
  set_has_limit();
  limit_ = value;
}

// required int32 honor = 6;
inline bool AllianceInviteDTO::has_honor() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AllianceInviteDTO::set_has_honor() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AllianceInviteDTO::clear_has_honor() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AllianceInviteDTO::clear_honor() {
  honor_ = 0;
  clear_has_honor();
}
inline ::google::protobuf::int32 AllianceInviteDTO::honor() const {
  return honor_;
}
inline void AllianceInviteDTO::set_honor(::google::protobuf::int32 value) {
  set_has_honor();
  honor_ = value;
}

// required int64 leaderId = 7;
inline bool AllianceInviteDTO::has_leaderid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AllianceInviteDTO::set_has_leaderid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AllianceInviteDTO::clear_has_leaderid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AllianceInviteDTO::clear_leaderid() {
  leaderid_ = GOOGLE_LONGLONG(0);
  clear_has_leaderid();
}
inline ::google::protobuf::int64 AllianceInviteDTO::leaderid() const {
  return leaderid_;
}
inline void AllianceInviteDTO::set_leaderid(::google::protobuf::int64 value) {
  set_has_leaderid();
  leaderid_ = value;
}

// required string leaderName = 8;
inline bool AllianceInviteDTO::has_leadername() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AllianceInviteDTO::set_has_leadername() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AllianceInviteDTO::clear_has_leadername() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AllianceInviteDTO::clear_leadername() {
  if (leadername_ != &::google::protobuf::internal::kEmptyString) {
    leadername_->clear();
  }
  clear_has_leadername();
}
inline const ::std::string& AllianceInviteDTO::leadername() const {
  return *leadername_;
}
inline void AllianceInviteDTO::set_leadername(const ::std::string& value) {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::kEmptyString) {
    leadername_ = new ::std::string;
  }
  leadername_->assign(value);
}
inline void AllianceInviteDTO::set_leadername(const char* value) {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::kEmptyString) {
    leadername_ = new ::std::string;
  }
  leadername_->assign(value);
}
inline void AllianceInviteDTO::set_leadername(const char* value, size_t size) {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::kEmptyString) {
    leadername_ = new ::std::string;
  }
  leadername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllianceInviteDTO::mutable_leadername() {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::kEmptyString) {
    leadername_ = new ::std::string;
  }
  return leadername_;
}
inline ::std::string* AllianceInviteDTO::release_leadername() {
  clear_has_leadername();
  if (leadername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = leadername_;
    leadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AllianceInviteDTO::set_allocated_leadername(::std::string* leadername) {
  if (leadername_ != &::google::protobuf::internal::kEmptyString) {
    delete leadername_;
  }
  if (leadername) {
    set_has_leadername();
    leadername_ = leadername;
  } else {
    clear_has_leadername();
    leadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 inviteTime = 9;
inline bool AllianceInviteDTO::has_invitetime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AllianceInviteDTO::set_has_invitetime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AllianceInviteDTO::clear_has_invitetime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AllianceInviteDTO::clear_invitetime() {
  invitetime_ = 0;
  clear_has_invitetime();
}
inline ::google::protobuf::int32 AllianceInviteDTO::invitetime() const {
  return invitetime_;
}
inline void AllianceInviteDTO::set_invitetime(::google::protobuf::int32 value) {
  set_has_invitetime();
  invitetime_ = value;
}

// -------------------------------------------------------------------

// AllianceShopItemDTO

// required int32 id = 1;
inline bool AllianceShopItemDTO::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllianceShopItemDTO::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllianceShopItemDTO::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllianceShopItemDTO::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 AllianceShopItemDTO::id() const {
  return id_;
}
inline void AllianceShopItemDTO::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 buyTimes = 2;
inline bool AllianceShopItemDTO::has_buytimes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllianceShopItemDTO::set_has_buytimes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllianceShopItemDTO::clear_has_buytimes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllianceShopItemDTO::clear_buytimes() {
  buytimes_ = 0;
  clear_has_buytimes();
}
inline ::google::protobuf::int32 AllianceShopItemDTO::buytimes() const {
  return buytimes_;
}
inline void AllianceShopItemDTO::set_buytimes(::google::protobuf::int32 value) {
  set_has_buytimes();
  buytimes_ = value;
}

// -------------------------------------------------------------------

// ContributeDTO

// required int32 level = 1;
inline bool ContributeDTO::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContributeDTO::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContributeDTO::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContributeDTO::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ContributeDTO::level() const {
  return level_;
}
inline void ContributeDTO::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required bool is_open = 2;
inline bool ContributeDTO::has_is_open() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContributeDTO::set_has_is_open() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContributeDTO::clear_has_is_open() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContributeDTO::clear_is_open() {
  is_open_ = false;
  clear_has_is_open();
}
inline bool ContributeDTO::is_open() const {
  return is_open_;
}
inline void ContributeDTO::set_is_open(bool value) {
  set_has_is_open();
  is_open_ = value;
}

// required int32 type = 3;
inline bool ContributeDTO::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContributeDTO::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContributeDTO::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContributeDTO::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ContributeDTO::type() const {
  return type_;
}
inline void ContributeDTO::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// AllianceContributeInfoDTO

// repeated .slg.protocol.ContributeDTO contributes = 1;
inline int AllianceContributeInfoDTO::contributes_size() const {
  return contributes_.size();
}
inline void AllianceContributeInfoDTO::clear_contributes() {
  contributes_.Clear();
}
inline const ::slg::protocol::ContributeDTO& AllianceContributeInfoDTO::contributes(int index) const {
  return contributes_.Get(index);
}
inline ::slg::protocol::ContributeDTO* AllianceContributeInfoDTO::mutable_contributes(int index) {
  return contributes_.Mutable(index);
}
inline ::slg::protocol::ContributeDTO* AllianceContributeInfoDTO::add_contributes() {
  return contributes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::ContributeDTO >&
AllianceContributeInfoDTO::contributes() const {
  return contributes_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::ContributeDTO >*
AllianceContributeInfoDTO::mutable_contributes() {
  return &contributes_;
}

// required int32 coolDownTime = 2;
inline bool AllianceContributeInfoDTO::has_cooldowntime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllianceContributeInfoDTO::set_has_cooldowntime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllianceContributeInfoDTO::clear_has_cooldowntime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllianceContributeInfoDTO::clear_cooldowntime() {
  cooldowntime_ = 0;
  clear_has_cooldowntime();
}
inline ::google::protobuf::int32 AllianceContributeInfoDTO::cooldowntime() const {
  return cooldowntime_;
}
inline void AllianceContributeInfoDTO::set_cooldowntime(::google::protobuf::int32 value) {
  set_has_cooldowntime();
  cooldowntime_ = value;
}

// required int32 coolStartTime = 3;
inline bool AllianceContributeInfoDTO::has_coolstarttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AllianceContributeInfoDTO::set_has_coolstarttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AllianceContributeInfoDTO::clear_has_coolstarttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AllianceContributeInfoDTO::clear_coolstarttime() {
  coolstarttime_ = 0;
  clear_has_coolstarttime();
}
inline ::google::protobuf::int32 AllianceContributeInfoDTO::coolstarttime() const {
  return coolstarttime_;
}
inline void AllianceContributeInfoDTO::set_coolstarttime(::google::protobuf::int32 value) {
  set_has_coolstarttime();
  coolstarttime_ = value;
}

// required bool isJoinCd = 4;
inline bool AllianceContributeInfoDTO::has_isjoincd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AllianceContributeInfoDTO::set_has_isjoincd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AllianceContributeInfoDTO::clear_has_isjoincd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AllianceContributeInfoDTO::clear_isjoincd() {
  isjoincd_ = false;
  clear_has_isjoincd();
}
inline bool AllianceContributeInfoDTO::isjoincd() const {
  return isjoincd_;
}
inline void AllianceContributeInfoDTO::set_isjoincd(bool value) {
  set_has_isjoincd();
  isjoincd_ = value;
}

// -------------------------------------------------------------------

// AllianceTechDTO

// required int32 type = 1;
inline bool AllianceTechDTO::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllianceTechDTO::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllianceTechDTO::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllianceTechDTO::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 AllianceTechDTO::type() const {
  return type_;
}
inline void AllianceTechDTO::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 level = 2;
inline bool AllianceTechDTO::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllianceTechDTO::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllianceTechDTO::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllianceTechDTO::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 AllianceTechDTO::level() const {
  return level_;
}
inline void AllianceTechDTO::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// AllianceTechUpgradeDTO

// required int32 type = 1;
inline bool AllianceTechUpgradeDTO::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllianceTechUpgradeDTO::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllianceTechUpgradeDTO::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllianceTechUpgradeDTO::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 AllianceTechUpgradeDTO::type() const {
  return type_;
}
inline void AllianceTechUpgradeDTO::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 endTime = 2;
inline bool AllianceTechUpgradeDTO::has_endtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllianceTechUpgradeDTO::set_has_endtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllianceTechUpgradeDTO::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllianceTechUpgradeDTO::clear_endtime() {
  endtime_ = 0;
  clear_has_endtime();
}
inline ::google::protobuf::int32 AllianceTechUpgradeDTO::endtime() const {
  return endtime_;
}
inline void AllianceTechUpgradeDTO::set_endtime(::google::protobuf::int32 value) {
  set_has_endtime();
  endtime_ = value;
}

// -------------------------------------------------------------------

// AllianceNewsDTO

// required int32 id = 1;
inline bool AllianceNewsDTO::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllianceNewsDTO::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllianceNewsDTO::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllianceNewsDTO::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 AllianceNewsDTO::id() const {
  return id_;
}
inline void AllianceNewsDTO::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 type = 2;
inline bool AllianceNewsDTO::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllianceNewsDTO::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllianceNewsDTO::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllianceNewsDTO::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 AllianceNewsDTO::type() const {
  return type_;
}
inline void AllianceNewsDTO::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int64 targetId = 3;
inline bool AllianceNewsDTO::has_targetid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AllianceNewsDTO::set_has_targetid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AllianceNewsDTO::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AllianceNewsDTO::clear_targetid() {
  targetid_ = GOOGLE_LONGLONG(0);
  clear_has_targetid();
}
inline ::google::protobuf::int64 AllianceNewsDTO::targetid() const {
  return targetid_;
}
inline void AllianceNewsDTO::set_targetid(::google::protobuf::int64 value) {
  set_has_targetid();
  targetid_ = value;
}

// optional string applyMsg = 4;
inline bool AllianceNewsDTO::has_applymsg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AllianceNewsDTO::set_has_applymsg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AllianceNewsDTO::clear_has_applymsg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AllianceNewsDTO::clear_applymsg() {
  if (applymsg_ != &::google::protobuf::internal::kEmptyString) {
    applymsg_->clear();
  }
  clear_has_applymsg();
}
inline const ::std::string& AllianceNewsDTO::applymsg() const {
  return *applymsg_;
}
inline void AllianceNewsDTO::set_applymsg(const ::std::string& value) {
  set_has_applymsg();
  if (applymsg_ == &::google::protobuf::internal::kEmptyString) {
    applymsg_ = new ::std::string;
  }
  applymsg_->assign(value);
}
inline void AllianceNewsDTO::set_applymsg(const char* value) {
  set_has_applymsg();
  if (applymsg_ == &::google::protobuf::internal::kEmptyString) {
    applymsg_ = new ::std::string;
  }
  applymsg_->assign(value);
}
inline void AllianceNewsDTO::set_applymsg(const char* value, size_t size) {
  set_has_applymsg();
  if (applymsg_ == &::google::protobuf::internal::kEmptyString) {
    applymsg_ = new ::std::string;
  }
  applymsg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllianceNewsDTO::mutable_applymsg() {
  set_has_applymsg();
  if (applymsg_ == &::google::protobuf::internal::kEmptyString) {
    applymsg_ = new ::std::string;
  }
  return applymsg_;
}
inline ::std::string* AllianceNewsDTO::release_applymsg() {
  clear_has_applymsg();
  if (applymsg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = applymsg_;
    applymsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AllianceNewsDTO::set_allocated_applymsg(::std::string* applymsg) {
  if (applymsg_ != &::google::protobuf::internal::kEmptyString) {
    delete applymsg_;
  }
  if (applymsg) {
    set_has_applymsg();
    applymsg_ = applymsg;
  } else {
    clear_has_applymsg();
    applymsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string playerName1 = 5;
inline bool AllianceNewsDTO::has_playername1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AllianceNewsDTO::set_has_playername1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AllianceNewsDTO::clear_has_playername1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AllianceNewsDTO::clear_playername1() {
  if (playername1_ != &::google::protobuf::internal::kEmptyString) {
    playername1_->clear();
  }
  clear_has_playername1();
}
inline const ::std::string& AllianceNewsDTO::playername1() const {
  return *playername1_;
}
inline void AllianceNewsDTO::set_playername1(const ::std::string& value) {
  set_has_playername1();
  if (playername1_ == &::google::protobuf::internal::kEmptyString) {
    playername1_ = new ::std::string;
  }
  playername1_->assign(value);
}
inline void AllianceNewsDTO::set_playername1(const char* value) {
  set_has_playername1();
  if (playername1_ == &::google::protobuf::internal::kEmptyString) {
    playername1_ = new ::std::string;
  }
  playername1_->assign(value);
}
inline void AllianceNewsDTO::set_playername1(const char* value, size_t size) {
  set_has_playername1();
  if (playername1_ == &::google::protobuf::internal::kEmptyString) {
    playername1_ = new ::std::string;
  }
  playername1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllianceNewsDTO::mutable_playername1() {
  set_has_playername1();
  if (playername1_ == &::google::protobuf::internal::kEmptyString) {
    playername1_ = new ::std::string;
  }
  return playername1_;
}
inline ::std::string* AllianceNewsDTO::release_playername1() {
  clear_has_playername1();
  if (playername1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername1_;
    playername1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AllianceNewsDTO::set_allocated_playername1(::std::string* playername1) {
  if (playername1_ != &::google::protobuf::internal::kEmptyString) {
    delete playername1_;
  }
  if (playername1) {
    set_has_playername1();
    playername1_ = playername1;
  } else {
    clear_has_playername1();
    playername1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string playerName2 = 6;
inline bool AllianceNewsDTO::has_playername2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AllianceNewsDTO::set_has_playername2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AllianceNewsDTO::clear_has_playername2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AllianceNewsDTO::clear_playername2() {
  if (playername2_ != &::google::protobuf::internal::kEmptyString) {
    playername2_->clear();
  }
  clear_has_playername2();
}
inline const ::std::string& AllianceNewsDTO::playername2() const {
  return *playername2_;
}
inline void AllianceNewsDTO::set_playername2(const ::std::string& value) {
  set_has_playername2();
  if (playername2_ == &::google::protobuf::internal::kEmptyString) {
    playername2_ = new ::std::string;
  }
  playername2_->assign(value);
}
inline void AllianceNewsDTO::set_playername2(const char* value) {
  set_has_playername2();
  if (playername2_ == &::google::protobuf::internal::kEmptyString) {
    playername2_ = new ::std::string;
  }
  playername2_->assign(value);
}
inline void AllianceNewsDTO::set_playername2(const char* value, size_t size) {
  set_has_playername2();
  if (playername2_ == &::google::protobuf::internal::kEmptyString) {
    playername2_ = new ::std::string;
  }
  playername2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllianceNewsDTO::mutable_playername2() {
  set_has_playername2();
  if (playername2_ == &::google::protobuf::internal::kEmptyString) {
    playername2_ = new ::std::string;
  }
  return playername2_;
}
inline ::std::string* AllianceNewsDTO::release_playername2() {
  clear_has_playername2();
  if (playername2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername2_;
    playername2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AllianceNewsDTO::set_allocated_playername2(::std::string* playername2) {
  if (playername2_ != &::google::protobuf::internal::kEmptyString) {
    delete playername2_;
  }
  if (playername2) {
    set_has_playername2();
    playername2_ = playername2;
  } else {
    clear_has_playername2();
    playername2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .slg.protocol.PositionDTO position = 7;
inline bool AllianceNewsDTO::has_position() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AllianceNewsDTO::set_has_position() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AllianceNewsDTO::clear_has_position() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AllianceNewsDTO::clear_position() {
  if (position_ != NULL) position_->::slg::protocol::PositionDTO::Clear();
  clear_has_position();
}
inline const ::slg::protocol::PositionDTO& AllianceNewsDTO::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::slg::protocol::PositionDTO* AllianceNewsDTO::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::slg::protocol::PositionDTO;
  return position_;
}
inline ::slg::protocol::PositionDTO* AllianceNewsDTO::release_position() {
  clear_has_position();
  ::slg::protocol::PositionDTO* temp = position_;
  position_ = NULL;
  return temp;
}
inline void AllianceNewsDTO::set_allocated_position(::slg::protocol::PositionDTO* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
}

// optional int32 time = 8;
inline bool AllianceNewsDTO::has_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AllianceNewsDTO::set_has_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AllianceNewsDTO::clear_has_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AllianceNewsDTO::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 AllianceNewsDTO::time() const {
  return time_;
}
inline void AllianceNewsDTO::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// optional bool friendIsWin = 9;
inline bool AllianceNewsDTO::has_friendiswin() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AllianceNewsDTO::set_has_friendiswin() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AllianceNewsDTO::clear_has_friendiswin() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AllianceNewsDTO::clear_friendiswin() {
  friendiswin_ = false;
  clear_has_friendiswin();
}
inline bool AllianceNewsDTO::friendiswin() const {
  return friendiswin_;
}
inline void AllianceNewsDTO::set_friendiswin(bool value) {
  set_has_friendiswin();
  friendiswin_ = value;
}

// optional string enAlliShortName = 10;
inline bool AllianceNewsDTO::has_enallishortname() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AllianceNewsDTO::set_has_enallishortname() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AllianceNewsDTO::clear_has_enallishortname() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AllianceNewsDTO::clear_enallishortname() {
  if (enallishortname_ != &::google::protobuf::internal::kEmptyString) {
    enallishortname_->clear();
  }
  clear_has_enallishortname();
}
inline const ::std::string& AllianceNewsDTO::enallishortname() const {
  return *enallishortname_;
}
inline void AllianceNewsDTO::set_enallishortname(const ::std::string& value) {
  set_has_enallishortname();
  if (enallishortname_ == &::google::protobuf::internal::kEmptyString) {
    enallishortname_ = new ::std::string;
  }
  enallishortname_->assign(value);
}
inline void AllianceNewsDTO::set_enallishortname(const char* value) {
  set_has_enallishortname();
  if (enallishortname_ == &::google::protobuf::internal::kEmptyString) {
    enallishortname_ = new ::std::string;
  }
  enallishortname_->assign(value);
}
inline void AllianceNewsDTO::set_enallishortname(const char* value, size_t size) {
  set_has_enallishortname();
  if (enallishortname_ == &::google::protobuf::internal::kEmptyString) {
    enallishortname_ = new ::std::string;
  }
  enallishortname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllianceNewsDTO::mutable_enallishortname() {
  set_has_enallishortname();
  if (enallishortname_ == &::google::protobuf::internal::kEmptyString) {
    enallishortname_ = new ::std::string;
  }
  return enallishortname_;
}
inline ::std::string* AllianceNewsDTO::release_enallishortname() {
  clear_has_enallishortname();
  if (enallishortname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = enallishortname_;
    enallishortname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AllianceNewsDTO::set_allocated_enallishortname(::std::string* enallishortname) {
  if (enallishortname_ != &::google::protobuf::internal::kEmptyString) {
    delete enallishortname_;
  }
  if (enallishortname) {
    set_has_enallishortname();
    enallishortname_ = enallishortname;
  } else {
    clear_has_enallishortname();
    enallishortname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 param1 = 11;
inline bool AllianceNewsDTO::has_param1() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AllianceNewsDTO::set_has_param1() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AllianceNewsDTO::clear_has_param1() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AllianceNewsDTO::clear_param1() {
  param1_ = 0;
  clear_has_param1();
}
inline ::google::protobuf::int32 AllianceNewsDTO::param1() const {
  return param1_;
}
inline void AllianceNewsDTO::set_param1(::google::protobuf::int32 value) {
  set_has_param1();
  param1_ = value;
}

// optional int32 param2 = 12;
inline bool AllianceNewsDTO::has_param2() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AllianceNewsDTO::set_has_param2() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AllianceNewsDTO::clear_has_param2() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AllianceNewsDTO::clear_param2() {
  param2_ = 0;
  clear_has_param2();
}
inline ::google::protobuf::int32 AllianceNewsDTO::param2() const {
  return param2_;
}
inline void AllianceNewsDTO::set_param2(::google::protobuf::int32 value) {
  set_has_param2();
  param2_ = value;
}

// -------------------------------------------------------------------

// AllianceHelpDTO

// required int32 timerId = 1;
inline bool AllianceHelpDTO::has_timerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllianceHelpDTO::set_has_timerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllianceHelpDTO::clear_has_timerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllianceHelpDTO::clear_timerid() {
  timerid_ = 0;
  clear_has_timerid();
}
inline ::google::protobuf::int32 AllianceHelpDTO::timerid() const {
  return timerid_;
}
inline void AllianceHelpDTO::set_timerid(::google::protobuf::int32 value) {
  set_has_timerid();
  timerid_ = value;
}

// required int64 playerId = 2;
inline bool AllianceHelpDTO::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllianceHelpDTO::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllianceHelpDTO::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllianceHelpDTO::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 AllianceHelpDTO::playerid() const {
  return playerid_;
}
inline void AllianceHelpDTO::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// required string playerName = 3;
inline bool AllianceHelpDTO::has_playername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AllianceHelpDTO::set_has_playername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AllianceHelpDTO::clear_has_playername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AllianceHelpDTO::clear_playername() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& AllianceHelpDTO::playername() const {
  return *playername_;
}
inline void AllianceHelpDTO::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void AllianceHelpDTO::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void AllianceHelpDTO::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllianceHelpDTO::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  return playername_;
}
inline ::std::string* AllianceHelpDTO::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AllianceHelpDTO::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 targetId = 4;
inline bool AllianceHelpDTO::has_targetid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AllianceHelpDTO::set_has_targetid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AllianceHelpDTO::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AllianceHelpDTO::clear_targetid() {
  targetid_ = 0;
  clear_has_targetid();
}
inline ::google::protobuf::int32 AllianceHelpDTO::targetid() const {
  return targetid_;
}
inline void AllianceHelpDTO::set_targetid(::google::protobuf::int32 value) {
  set_has_targetid();
  targetid_ = value;
}

// required int32 helpType = 5;
inline bool AllianceHelpDTO::has_helptype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AllianceHelpDTO::set_has_helptype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AllianceHelpDTO::clear_has_helptype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AllianceHelpDTO::clear_helptype() {
  helptype_ = 0;
  clear_has_helptype();
}
inline ::google::protobuf::int32 AllianceHelpDTO::helptype() const {
  return helptype_;
}
inline void AllianceHelpDTO::set_helptype(::google::protobuf::int32 value) {
  set_has_helptype();
  helptype_ = value;
}

// required int32 helpTimes = 6;
inline bool AllianceHelpDTO::has_helptimes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AllianceHelpDTO::set_has_helptimes() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AllianceHelpDTO::clear_has_helptimes() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AllianceHelpDTO::clear_helptimes() {
  helptimes_ = 0;
  clear_has_helptimes();
}
inline ::google::protobuf::int32 AllianceHelpDTO::helptimes() const {
  return helptimes_;
}
inline void AllianceHelpDTO::set_helptimes(::google::protobuf::int32 value) {
  set_has_helptimes();
  helptimes_ = value;
}

// required int32 targetLevel = 7;
inline bool AllianceHelpDTO::has_targetlevel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AllianceHelpDTO::set_has_targetlevel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AllianceHelpDTO::clear_has_targetlevel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AllianceHelpDTO::clear_targetlevel() {
  targetlevel_ = 0;
  clear_has_targetlevel();
}
inline ::google::protobuf::int32 AllianceHelpDTO::targetlevel() const {
  return targetlevel_;
}
inline void AllianceHelpDTO::set_targetlevel(::google::protobuf::int32 value) {
  set_has_targetlevel();
  targetlevel_ = value;
}

// required int32 maxTimes = 8;
inline bool AllianceHelpDTO::has_maxtimes() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AllianceHelpDTO::set_has_maxtimes() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AllianceHelpDTO::clear_has_maxtimes() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AllianceHelpDTO::clear_maxtimes() {
  maxtimes_ = 0;
  clear_has_maxtimes();
}
inline ::google::protobuf::int32 AllianceHelpDTO::maxtimes() const {
  return maxtimes_;
}
inline void AllianceHelpDTO::set_maxtimes(::google::protobuf::int32 value) {
  set_has_maxtimes();
  maxtimes_ = value;
}

// required string playerIcon = 9;
inline bool AllianceHelpDTO::has_playericon() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AllianceHelpDTO::set_has_playericon() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AllianceHelpDTO::clear_has_playericon() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AllianceHelpDTO::clear_playericon() {
  if (playericon_ != &::google::protobuf::internal::kEmptyString) {
    playericon_->clear();
  }
  clear_has_playericon();
}
inline const ::std::string& AllianceHelpDTO::playericon() const {
  return *playericon_;
}
inline void AllianceHelpDTO::set_playericon(const ::std::string& value) {
  set_has_playericon();
  if (playericon_ == &::google::protobuf::internal::kEmptyString) {
    playericon_ = new ::std::string;
  }
  playericon_->assign(value);
}
inline void AllianceHelpDTO::set_playericon(const char* value) {
  set_has_playericon();
  if (playericon_ == &::google::protobuf::internal::kEmptyString) {
    playericon_ = new ::std::string;
  }
  playericon_->assign(value);
}
inline void AllianceHelpDTO::set_playericon(const char* value, size_t size) {
  set_has_playericon();
  if (playericon_ == &::google::protobuf::internal::kEmptyString) {
    playericon_ = new ::std::string;
  }
  playericon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllianceHelpDTO::mutable_playericon() {
  set_has_playericon();
  if (playericon_ == &::google::protobuf::internal::kEmptyString) {
    playericon_ = new ::std::string;
  }
  return playericon_;
}
inline ::std::string* AllianceHelpDTO::release_playericon() {
  clear_has_playericon();
  if (playericon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playericon_;
    playericon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AllianceHelpDTO::set_allocated_playericon(::std::string* playericon) {
  if (playericon_ != &::google::protobuf::internal::kEmptyString) {
    delete playericon_;
  }
  if (playericon) {
    set_has_playericon();
    playericon_ = playericon;
  } else {
    clear_has_playericon();
    playericon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 helpId = 10;
inline bool AllianceHelpDTO::has_helpid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AllianceHelpDTO::set_has_helpid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AllianceHelpDTO::clear_has_helpid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AllianceHelpDTO::clear_helpid() {
  helpid_ = 0;
  clear_has_helpid();
}
inline ::google::protobuf::int32 AllianceHelpDTO::helpid() const {
  return helpid_;
}
inline void AllianceHelpDTO::set_helpid(::google::protobuf::int32 value) {
  set_has_helpid();
  helpid_ = value;
}

// -------------------------------------------------------------------

// AllianceMemberDTO

// required int64 playerId = 1;
inline bool AllianceMemberDTO::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllianceMemberDTO::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllianceMemberDTO::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllianceMemberDTO::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 AllianceMemberDTO::playerid() const {
  return playerid_;
}
inline void AllianceMemberDTO::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// required string name = 2;
inline bool AllianceMemberDTO::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllianceMemberDTO::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllianceMemberDTO::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllianceMemberDTO::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& AllianceMemberDTO::name() const {
  return *name_;
}
inline void AllianceMemberDTO::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void AllianceMemberDTO::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void AllianceMemberDTO::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllianceMemberDTO::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* AllianceMemberDTO::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AllianceMemberDTO::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 power = 3;
inline bool AllianceMemberDTO::has_power() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AllianceMemberDTO::set_has_power() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AllianceMemberDTO::clear_has_power() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AllianceMemberDTO::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline ::google::protobuf::int32 AllianceMemberDTO::power() const {
  return power_;
}
inline void AllianceMemberDTO::set_power(::google::protobuf::int32 value) {
  set_has_power();
  power_ = value;
}

// required int32 historyDon = 4;
inline bool AllianceMemberDTO::has_historydon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AllianceMemberDTO::set_has_historydon() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AllianceMemberDTO::clear_has_historydon() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AllianceMemberDTO::clear_historydon() {
  historydon_ = 0;
  clear_has_historydon();
}
inline ::google::protobuf::int32 AllianceMemberDTO::historydon() const {
  return historydon_;
}
inline void AllianceMemberDTO::set_historydon(::google::protobuf::int32 value) {
  set_has_historydon();
  historydon_ = value;
}

// required int32 dayDon = 5;
inline bool AllianceMemberDTO::has_daydon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AllianceMemberDTO::set_has_daydon() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AllianceMemberDTO::clear_has_daydon() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AllianceMemberDTO::clear_daydon() {
  daydon_ = 0;
  clear_has_daydon();
}
inline ::google::protobuf::int32 AllianceMemberDTO::daydon() const {
  return daydon_;
}
inline void AllianceMemberDTO::set_daydon(::google::protobuf::int32 value) {
  set_has_daydon();
  daydon_ = value;
}

// required int32 weekDon = 6;
inline bool AllianceMemberDTO::has_weekdon() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AllianceMemberDTO::set_has_weekdon() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AllianceMemberDTO::clear_has_weekdon() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AllianceMemberDTO::clear_weekdon() {
  weekdon_ = 0;
  clear_has_weekdon();
}
inline ::google::protobuf::int32 AllianceMemberDTO::weekdon() const {
  return weekdon_;
}
inline void AllianceMemberDTO::set_weekdon(::google::protobuf::int32 value) {
  set_has_weekdon();
  weekdon_ = value;
}

// required bool isOnline = 7;
inline bool AllianceMemberDTO::has_isonline() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AllianceMemberDTO::set_has_isonline() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AllianceMemberDTO::clear_has_isonline() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AllianceMemberDTO::clear_isonline() {
  isonline_ = false;
  clear_has_isonline();
}
inline bool AllianceMemberDTO::isonline() const {
  return isonline_;
}
inline void AllianceMemberDTO::set_isonline(bool value) {
  set_has_isonline();
  isonline_ = value;
}

// required string icon = 8;
inline bool AllianceMemberDTO::has_icon() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AllianceMemberDTO::set_has_icon() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AllianceMemberDTO::clear_has_icon() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AllianceMemberDTO::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& AllianceMemberDTO::icon() const {
  return *icon_;
}
inline void AllianceMemberDTO::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void AllianceMemberDTO::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void AllianceMemberDTO::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllianceMemberDTO::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* AllianceMemberDTO::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AllianceMemberDTO::set_allocated_icon(::std::string* icon) {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 position = 9;
inline bool AllianceMemberDTO::has_position() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AllianceMemberDTO::set_has_position() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AllianceMemberDTO::clear_has_position() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AllianceMemberDTO::clear_position() {
  position_ = 0;
  clear_has_position();
}
inline ::google::protobuf::int32 AllianceMemberDTO::position() const {
  return position_;
}
inline void AllianceMemberDTO::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
}

// required .slg.protocol.PositionDTO pos = 10;
inline bool AllianceMemberDTO::has_pos() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AllianceMemberDTO::set_has_pos() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AllianceMemberDTO::clear_has_pos() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AllianceMemberDTO::clear_pos() {
  if (pos_ != NULL) pos_->::slg::protocol::PositionDTO::Clear();
  clear_has_pos();
}
inline const ::slg::protocol::PositionDTO& AllianceMemberDTO::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::slg::protocol::PositionDTO* AllianceMemberDTO::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::slg::protocol::PositionDTO;
  return pos_;
}
inline ::slg::protocol::PositionDTO* AllianceMemberDTO::release_pos() {
  clear_has_pos();
  ::slg::protocol::PositionDTO* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void AllianceMemberDTO::set_allocated_pos(::slg::protocol::PositionDTO* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// required int32 lastLoginTime = 11;
inline bool AllianceMemberDTO::has_lastlogintime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AllianceMemberDTO::set_has_lastlogintime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AllianceMemberDTO::clear_has_lastlogintime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AllianceMemberDTO::clear_lastlogintime() {
  lastlogintime_ = 0;
  clear_has_lastlogintime();
}
inline ::google::protobuf::int32 AllianceMemberDTO::lastlogintime() const {
  return lastlogintime_;
}
inline void AllianceMemberDTO::set_lastlogintime(::google::protobuf::int32 value) {
  set_has_lastlogintime();
  lastlogintime_ = value;
}

// required int32 vipLevel = 12;
inline bool AllianceMemberDTO::has_viplevel() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AllianceMemberDTO::set_has_viplevel() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AllianceMemberDTO::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AllianceMemberDTO::clear_viplevel() {
  viplevel_ = 0;
  clear_has_viplevel();
}
inline ::google::protobuf::int32 AllianceMemberDTO::viplevel() const {
  return viplevel_;
}
inline void AllianceMemberDTO::set_viplevel(::google::protobuf::int32 value) {
  set_has_viplevel();
  viplevel_ = value;
}

// required bool activated = 13;
inline bool AllianceMemberDTO::has_activated() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void AllianceMemberDTO::set_has_activated() {
  _has_bits_[0] |= 0x00001000u;
}
inline void AllianceMemberDTO::clear_has_activated() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void AllianceMemberDTO::clear_activated() {
  activated_ = false;
  clear_has_activated();
}
inline bool AllianceMemberDTO::activated() const {
  return activated_;
}
inline void AllianceMemberDTO::set_activated(bool value) {
  set_has_activated();
  activated_ = value;
}

// -------------------------------------------------------------------

// AllianceDTO

// required int32 id = 1;
inline bool AllianceDTO::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllianceDTO::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllianceDTO::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllianceDTO::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 AllianceDTO::id() const {
  return id_;
}
inline void AllianceDTO::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool AllianceDTO::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllianceDTO::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllianceDTO::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllianceDTO::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& AllianceDTO::name() const {
  return *name_;
}
inline void AllianceDTO::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void AllianceDTO::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void AllianceDTO::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllianceDTO::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* AllianceDTO::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AllianceDTO::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string shortName = 3;
inline bool AllianceDTO::has_shortname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AllianceDTO::set_has_shortname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AllianceDTO::clear_has_shortname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AllianceDTO::clear_shortname() {
  if (shortname_ != &::google::protobuf::internal::kEmptyString) {
    shortname_->clear();
  }
  clear_has_shortname();
}
inline const ::std::string& AllianceDTO::shortname() const {
  return *shortname_;
}
inline void AllianceDTO::set_shortname(const ::std::string& value) {
  set_has_shortname();
  if (shortname_ == &::google::protobuf::internal::kEmptyString) {
    shortname_ = new ::std::string;
  }
  shortname_->assign(value);
}
inline void AllianceDTO::set_shortname(const char* value) {
  set_has_shortname();
  if (shortname_ == &::google::protobuf::internal::kEmptyString) {
    shortname_ = new ::std::string;
  }
  shortname_->assign(value);
}
inline void AllianceDTO::set_shortname(const char* value, size_t size) {
  set_has_shortname();
  if (shortname_ == &::google::protobuf::internal::kEmptyString) {
    shortname_ = new ::std::string;
  }
  shortname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllianceDTO::mutable_shortname() {
  set_has_shortname();
  if (shortname_ == &::google::protobuf::internal::kEmptyString) {
    shortname_ = new ::std::string;
  }
  return shortname_;
}
inline ::std::string* AllianceDTO::release_shortname() {
  clear_has_shortname();
  if (shortname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = shortname_;
    shortname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AllianceDTO::set_allocated_shortname(::std::string* shortname) {
  if (shortname_ != &::google::protobuf::internal::kEmptyString) {
    delete shortname_;
  }
  if (shortname) {
    set_has_shortname();
    shortname_ = shortname;
  } else {
    clear_has_shortname();
    shortname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 honor = 4;
inline bool AllianceDTO::has_honor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AllianceDTO::set_has_honor() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AllianceDTO::clear_has_honor() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AllianceDTO::clear_honor() {
  honor_ = 0;
  clear_has_honor();
}
inline ::google::protobuf::int32 AllianceDTO::honor() const {
  return honor_;
}
inline void AllianceDTO::set_honor(::google::protobuf::int32 value) {
  set_has_honor();
  honor_ = value;
}

// required int32 flag = 5;
inline bool AllianceDTO::has_flag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AllianceDTO::set_has_flag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AllianceDTO::clear_has_flag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AllianceDTO::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 AllianceDTO::flag() const {
  return flag_;
}
inline void AllianceDTO::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// required string declaration = 6;
inline bool AllianceDTO::has_declaration() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AllianceDTO::set_has_declaration() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AllianceDTO::clear_has_declaration() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AllianceDTO::clear_declaration() {
  if (declaration_ != &::google::protobuf::internal::kEmptyString) {
    declaration_->clear();
  }
  clear_has_declaration();
}
inline const ::std::string& AllianceDTO::declaration() const {
  return *declaration_;
}
inline void AllianceDTO::set_declaration(const ::std::string& value) {
  set_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    declaration_ = new ::std::string;
  }
  declaration_->assign(value);
}
inline void AllianceDTO::set_declaration(const char* value) {
  set_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    declaration_ = new ::std::string;
  }
  declaration_->assign(value);
}
inline void AllianceDTO::set_declaration(const char* value, size_t size) {
  set_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    declaration_ = new ::std::string;
  }
  declaration_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllianceDTO::mutable_declaration() {
  set_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    declaration_ = new ::std::string;
  }
  return declaration_;
}
inline ::std::string* AllianceDTO::release_declaration() {
  clear_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = declaration_;
    declaration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AllianceDTO::set_allocated_declaration(::std::string* declaration) {
  if (declaration_ != &::google::protobuf::internal::kEmptyString) {
    delete declaration_;
  }
  if (declaration) {
    set_has_declaration();
    declaration_ = declaration;
  } else {
    clear_has_declaration();
    declaration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool isPublic = 7;
inline bool AllianceDTO::has_ispublic() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AllianceDTO::set_has_ispublic() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AllianceDTO::clear_has_ispublic() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AllianceDTO::clear_ispublic() {
  ispublic_ = false;
  clear_has_ispublic();
}
inline bool AllianceDTO::ispublic() const {
  return ispublic_;
}
inline void AllianceDTO::set_ispublic(bool value) {
  set_has_ispublic();
  ispublic_ = value;
}

// required int32 joinPower = 8;
inline bool AllianceDTO::has_joinpower() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AllianceDTO::set_has_joinpower() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AllianceDTO::clear_has_joinpower() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AllianceDTO::clear_joinpower() {
  joinpower_ = 0;
  clear_has_joinpower();
}
inline ::google::protobuf::int32 AllianceDTO::joinpower() const {
  return joinpower_;
}
inline void AllianceDTO::set_joinpower(::google::protobuf::int32 value) {
  set_has_joinpower();
  joinpower_ = value;
}

// required string language = 9;
inline bool AllianceDTO::has_language() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AllianceDTO::set_has_language() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AllianceDTO::clear_has_language() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AllianceDTO::clear_language() {
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    language_->clear();
  }
  clear_has_language();
}
inline const ::std::string& AllianceDTO::language() const {
  return *language_;
}
inline void AllianceDTO::set_language(const ::std::string& value) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  language_->assign(value);
}
inline void AllianceDTO::set_language(const char* value) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  language_->assign(value);
}
inline void AllianceDTO::set_language(const char* value, size_t size) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  language_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllianceDTO::mutable_language() {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  return language_;
}
inline ::std::string* AllianceDTO::release_language() {
  clear_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = language_;
    language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AllianceDTO::set_allocated_language(::std::string* language) {
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    delete language_;
  }
  if (language) {
    set_has_language();
    language_ = language;
  } else {
    clear_has_language();
    language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .slg.protocol.AllianceMemberDTO members = 10;
inline int AllianceDTO::members_size() const {
  return members_.size();
}
inline void AllianceDTO::clear_members() {
  members_.Clear();
}
inline const ::slg::protocol::AllianceMemberDTO& AllianceDTO::members(int index) const {
  return members_.Get(index);
}
inline ::slg::protocol::AllianceMemberDTO* AllianceDTO::mutable_members(int index) {
  return members_.Mutable(index);
}
inline ::slg::protocol::AllianceMemberDTO* AllianceDTO::add_members() {
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceMemberDTO >&
AllianceDTO::members() const {
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceMemberDTO >*
AllianceDTO::mutable_members() {
  return &members_;
}

// required bool leaderAbsence = 11;
inline bool AllianceDTO::has_leaderabsence() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AllianceDTO::set_has_leaderabsence() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AllianceDTO::clear_has_leaderabsence() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AllianceDTO::clear_leaderabsence() {
  leaderabsence_ = false;
  clear_has_leaderabsence();
}
inline bool AllianceDTO::leaderabsence() const {
  return leaderabsence_;
}
inline void AllianceDTO::set_leaderabsence(bool value) {
  set_has_leaderabsence();
  leaderabsence_ = value;
}

// repeated .slg.protocol.AllianceNewsDTO msgs = 12;
inline int AllianceDTO::msgs_size() const {
  return msgs_.size();
}
inline void AllianceDTO::clear_msgs() {
  msgs_.Clear();
}
inline const ::slg::protocol::AllianceNewsDTO& AllianceDTO::msgs(int index) const {
  return msgs_.Get(index);
}
inline ::slg::protocol::AllianceNewsDTO* AllianceDTO::mutable_msgs(int index) {
  return msgs_.Mutable(index);
}
inline ::slg::protocol::AllianceNewsDTO* AllianceDTO::add_msgs() {
  return msgs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceNewsDTO >&
AllianceDTO::msgs() const {
  return msgs_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceNewsDTO >*
AllianceDTO::mutable_msgs() {
  return &msgs_;
}

// required int32 memberLimit = 13;
inline bool AllianceDTO::has_memberlimit() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void AllianceDTO::set_has_memberlimit() {
  _has_bits_[0] |= 0x00001000u;
}
inline void AllianceDTO::clear_has_memberlimit() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void AllianceDTO::clear_memberlimit() {
  memberlimit_ = 0;
  clear_has_memberlimit();
}
inline ::google::protobuf::int32 AllianceDTO::memberlimit() const {
  return memberlimit_;
}
inline void AllianceDTO::set_memberlimit(::google::protobuf::int32 value) {
  set_has_memberlimit();
  memberlimit_ = value;
}

// -------------------------------------------------------------------

// CreateAllianceRequest

// required string name = 1;
inline bool CreateAllianceRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateAllianceRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateAllianceRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateAllianceRequest::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CreateAllianceRequest::name() const {
  return *name_;
}
inline void CreateAllianceRequest::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CreateAllianceRequest::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CreateAllianceRequest::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateAllianceRequest::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CreateAllianceRequest::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateAllianceRequest::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string declaration = 2;
inline bool CreateAllianceRequest::has_declaration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateAllianceRequest::set_has_declaration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateAllianceRequest::clear_has_declaration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateAllianceRequest::clear_declaration() {
  if (declaration_ != &::google::protobuf::internal::kEmptyString) {
    declaration_->clear();
  }
  clear_has_declaration();
}
inline const ::std::string& CreateAllianceRequest::declaration() const {
  return *declaration_;
}
inline void CreateAllianceRequest::set_declaration(const ::std::string& value) {
  set_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    declaration_ = new ::std::string;
  }
  declaration_->assign(value);
}
inline void CreateAllianceRequest::set_declaration(const char* value) {
  set_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    declaration_ = new ::std::string;
  }
  declaration_->assign(value);
}
inline void CreateAllianceRequest::set_declaration(const char* value, size_t size) {
  set_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    declaration_ = new ::std::string;
  }
  declaration_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateAllianceRequest::mutable_declaration() {
  set_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    declaration_ = new ::std::string;
  }
  return declaration_;
}
inline ::std::string* CreateAllianceRequest::release_declaration() {
  clear_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = declaration_;
    declaration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateAllianceRequest::set_allocated_declaration(::std::string* declaration) {
  if (declaration_ != &::google::protobuf::internal::kEmptyString) {
    delete declaration_;
  }
  if (declaration) {
    set_has_declaration();
    declaration_ = declaration;
  } else {
    clear_has_declaration();
    declaration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CreateAllianceResponse

// required .slg.protocol.AllianceDTO alliance = 1;
inline bool CreateAllianceResponse::has_alliance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateAllianceResponse::set_has_alliance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateAllianceResponse::clear_has_alliance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateAllianceResponse::clear_alliance() {
  if (alliance_ != NULL) alliance_->::slg::protocol::AllianceDTO::Clear();
  clear_has_alliance();
}
inline const ::slg::protocol::AllianceDTO& CreateAllianceResponse::alliance() const {
  return alliance_ != NULL ? *alliance_ : *default_instance_->alliance_;
}
inline ::slg::protocol::AllianceDTO* CreateAllianceResponse::mutable_alliance() {
  set_has_alliance();
  if (alliance_ == NULL) alliance_ = new ::slg::protocol::AllianceDTO;
  return alliance_;
}
inline ::slg::protocol::AllianceDTO* CreateAllianceResponse::release_alliance() {
  clear_has_alliance();
  ::slg::protocol::AllianceDTO* temp = alliance_;
  alliance_ = NULL;
  return temp;
}
inline void CreateAllianceResponse::set_allocated_alliance(::slg::protocol::AllianceDTO* alliance) {
  delete alliance_;
  alliance_ = alliance;
  if (alliance) {
    set_has_alliance();
  } else {
    clear_has_alliance();
  }
}

// -------------------------------------------------------------------

// QueryAllianceRequest

// optional int32 allianceId = 1;
inline bool QueryAllianceRequest::has_allianceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryAllianceRequest::set_has_allianceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryAllianceRequest::clear_has_allianceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryAllianceRequest::clear_allianceid() {
  allianceid_ = 0;
  clear_has_allianceid();
}
inline ::google::protobuf::int32 QueryAllianceRequest::allianceid() const {
  return allianceid_;
}
inline void QueryAllianceRequest::set_allianceid(::google::protobuf::int32 value) {
  set_has_allianceid();
  allianceid_ = value;
}

// optional string allianceName = 2;
inline bool QueryAllianceRequest::has_alliancename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryAllianceRequest::set_has_alliancename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryAllianceRequest::clear_has_alliancename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryAllianceRequest::clear_alliancename() {
  if (alliancename_ != &::google::protobuf::internal::kEmptyString) {
    alliancename_->clear();
  }
  clear_has_alliancename();
}
inline const ::std::string& QueryAllianceRequest::alliancename() const {
  return *alliancename_;
}
inline void QueryAllianceRequest::set_alliancename(const ::std::string& value) {
  set_has_alliancename();
  if (alliancename_ == &::google::protobuf::internal::kEmptyString) {
    alliancename_ = new ::std::string;
  }
  alliancename_->assign(value);
}
inline void QueryAllianceRequest::set_alliancename(const char* value) {
  set_has_alliancename();
  if (alliancename_ == &::google::protobuf::internal::kEmptyString) {
    alliancename_ = new ::std::string;
  }
  alliancename_->assign(value);
}
inline void QueryAllianceRequest::set_alliancename(const char* value, size_t size) {
  set_has_alliancename();
  if (alliancename_ == &::google::protobuf::internal::kEmptyString) {
    alliancename_ = new ::std::string;
  }
  alliancename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryAllianceRequest::mutable_alliancename() {
  set_has_alliancename();
  if (alliancename_ == &::google::protobuf::internal::kEmptyString) {
    alliancename_ = new ::std::string;
  }
  return alliancename_;
}
inline ::std::string* QueryAllianceRequest::release_alliancename() {
  clear_has_alliancename();
  if (alliancename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = alliancename_;
    alliancename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void QueryAllianceRequest::set_allocated_alliancename(::std::string* alliancename) {
  if (alliancename_ != &::google::protobuf::internal::kEmptyString) {
    delete alliancename_;
  }
  if (alliancename) {
    set_has_alliancename();
    alliancename_ = alliancename;
  } else {
    clear_has_alliancename();
    alliancename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// QueryAllianceResponse

// optional .slg.protocol.AllianceDTO alliance = 1;
inline bool QueryAllianceResponse::has_alliance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryAllianceResponse::set_has_alliance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryAllianceResponse::clear_has_alliance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryAllianceResponse::clear_alliance() {
  if (alliance_ != NULL) alliance_->::slg::protocol::AllianceDTO::Clear();
  clear_has_alliance();
}
inline const ::slg::protocol::AllianceDTO& QueryAllianceResponse::alliance() const {
  return alliance_ != NULL ? *alliance_ : *default_instance_->alliance_;
}
inline ::slg::protocol::AllianceDTO* QueryAllianceResponse::mutable_alliance() {
  set_has_alliance();
  if (alliance_ == NULL) alliance_ = new ::slg::protocol::AllianceDTO;
  return alliance_;
}
inline ::slg::protocol::AllianceDTO* QueryAllianceResponse::release_alliance() {
  clear_has_alliance();
  ::slg::protocol::AllianceDTO* temp = alliance_;
  alliance_ = NULL;
  return temp;
}
inline void QueryAllianceResponse::set_allocated_alliance(::slg::protocol::AllianceDTO* alliance) {
  delete alliance_;
  alliance_ = alliance;
  if (alliance) {
    set_has_alliance();
  } else {
    clear_has_alliance();
  }
}

// -------------------------------------------------------------------

// MyAllianceInfoRequest

// -------------------------------------------------------------------

// MyAllianceInfoResponse

// optional .slg.protocol.AllianceDTO alliance = 1;
inline bool MyAllianceInfoResponse::has_alliance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MyAllianceInfoResponse::set_has_alliance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MyAllianceInfoResponse::clear_has_alliance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MyAllianceInfoResponse::clear_alliance() {
  if (alliance_ != NULL) alliance_->::slg::protocol::AllianceDTO::Clear();
  clear_has_alliance();
}
inline const ::slg::protocol::AllianceDTO& MyAllianceInfoResponse::alliance() const {
  return alliance_ != NULL ? *alliance_ : *default_instance_->alliance_;
}
inline ::slg::protocol::AllianceDTO* MyAllianceInfoResponse::mutable_alliance() {
  set_has_alliance();
  if (alliance_ == NULL) alliance_ = new ::slg::protocol::AllianceDTO;
  return alliance_;
}
inline ::slg::protocol::AllianceDTO* MyAllianceInfoResponse::release_alliance() {
  clear_has_alliance();
  ::slg::protocol::AllianceDTO* temp = alliance_;
  alliance_ = NULL;
  return temp;
}
inline void MyAllianceInfoResponse::set_allocated_alliance(::slg::protocol::AllianceDTO* alliance) {
  delete alliance_;
  alliance_ = alliance;
  if (alliance) {
    set_has_alliance();
  } else {
    clear_has_alliance();
  }
}

// -------------------------------------------------------------------

// JoinAllianceRequest

// required int32 allianceId = 1;
inline bool JoinAllianceRequest::has_allianceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JoinAllianceRequest::set_has_allianceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JoinAllianceRequest::clear_has_allianceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JoinAllianceRequest::clear_allianceid() {
  allianceid_ = 0;
  clear_has_allianceid();
}
inline ::google::protobuf::int32 JoinAllianceRequest::allianceid() const {
  return allianceid_;
}
inline void JoinAllianceRequest::set_allianceid(::google::protobuf::int32 value) {
  set_has_allianceid();
  allianceid_ = value;
}

// optional string applyMsg = 2;
inline bool JoinAllianceRequest::has_applymsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JoinAllianceRequest::set_has_applymsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JoinAllianceRequest::clear_has_applymsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JoinAllianceRequest::clear_applymsg() {
  if (applymsg_ != &::google::protobuf::internal::kEmptyString) {
    applymsg_->clear();
  }
  clear_has_applymsg();
}
inline const ::std::string& JoinAllianceRequest::applymsg() const {
  return *applymsg_;
}
inline void JoinAllianceRequest::set_applymsg(const ::std::string& value) {
  set_has_applymsg();
  if (applymsg_ == &::google::protobuf::internal::kEmptyString) {
    applymsg_ = new ::std::string;
  }
  applymsg_->assign(value);
}
inline void JoinAllianceRequest::set_applymsg(const char* value) {
  set_has_applymsg();
  if (applymsg_ == &::google::protobuf::internal::kEmptyString) {
    applymsg_ = new ::std::string;
  }
  applymsg_->assign(value);
}
inline void JoinAllianceRequest::set_applymsg(const char* value, size_t size) {
  set_has_applymsg();
  if (applymsg_ == &::google::protobuf::internal::kEmptyString) {
    applymsg_ = new ::std::string;
  }
  applymsg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JoinAllianceRequest::mutable_applymsg() {
  set_has_applymsg();
  if (applymsg_ == &::google::protobuf::internal::kEmptyString) {
    applymsg_ = new ::std::string;
  }
  return applymsg_;
}
inline ::std::string* JoinAllianceRequest::release_applymsg() {
  clear_has_applymsg();
  if (applymsg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = applymsg_;
    applymsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JoinAllianceRequest::set_allocated_applymsg(::std::string* applymsg) {
  if (applymsg_ != &::google::protobuf::internal::kEmptyString) {
    delete applymsg_;
  }
  if (applymsg) {
    set_has_applymsg();
    applymsg_ = applymsg;
  } else {
    clear_has_applymsg();
    applymsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// JoinAllianceResponse

// optional .slg.protocol.AllianceDTO alliance = 1;
inline bool JoinAllianceResponse::has_alliance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JoinAllianceResponse::set_has_alliance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JoinAllianceResponse::clear_has_alliance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JoinAllianceResponse::clear_alliance() {
  if (alliance_ != NULL) alliance_->::slg::protocol::AllianceDTO::Clear();
  clear_has_alliance();
}
inline const ::slg::protocol::AllianceDTO& JoinAllianceResponse::alliance() const {
  return alliance_ != NULL ? *alliance_ : *default_instance_->alliance_;
}
inline ::slg::protocol::AllianceDTO* JoinAllianceResponse::mutable_alliance() {
  set_has_alliance();
  if (alliance_ == NULL) alliance_ = new ::slg::protocol::AllianceDTO;
  return alliance_;
}
inline ::slg::protocol::AllianceDTO* JoinAllianceResponse::release_alliance() {
  clear_has_alliance();
  ::slg::protocol::AllianceDTO* temp = alliance_;
  alliance_ = NULL;
  return temp;
}
inline void JoinAllianceResponse::set_allocated_alliance(::slg::protocol::AllianceDTO* alliance) {
  delete alliance_;
  alliance_ = alliance;
  if (alliance) {
    set_has_alliance();
  } else {
    clear_has_alliance();
  }
}

// -------------------------------------------------------------------

// SetPositionRequest

// required int64 playerId = 1;
inline bool SetPositionRequest::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetPositionRequest::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetPositionRequest::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetPositionRequest::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 SetPositionRequest::playerid() const {
  return playerid_;
}
inline void SetPositionRequest::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// required int32 position = 2;
inline bool SetPositionRequest::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetPositionRequest::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetPositionRequest::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetPositionRequest::clear_position() {
  position_ = 0;
  clear_has_position();
}
inline ::google::protobuf::int32 SetPositionRequest::position() const {
  return position_;
}
inline void SetPositionRequest::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
}

// -------------------------------------------------------------------

// SetPositionResponse

// required int64 playerId = 1;
inline bool SetPositionResponse::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetPositionResponse::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetPositionResponse::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetPositionResponse::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 SetPositionResponse::playerid() const {
  return playerid_;
}
inline void SetPositionResponse::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// required int32 position = 2;
inline bool SetPositionResponse::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetPositionResponse::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetPositionResponse::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetPositionResponse::clear_position() {
  position_ = 0;
  clear_has_position();
}
inline ::google::protobuf::int32 SetPositionResponse::position() const {
  return position_;
}
inline void SetPositionResponse::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
}

// -------------------------------------------------------------------

// KickOutAllianceRequest

// required int64 playerId = 1;
inline bool KickOutAllianceRequest::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KickOutAllianceRequest::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KickOutAllianceRequest::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KickOutAllianceRequest::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 KickOutAllianceRequest::playerid() const {
  return playerid_;
}
inline void KickOutAllianceRequest::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// ExitsAllianceRequest

// -------------------------------------------------------------------

// ExitsAllianceResponse

// required int64 playerId = 1;
inline bool ExitsAllianceResponse::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExitsAllianceResponse::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExitsAllianceResponse::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExitsAllianceResponse::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 ExitsAllianceResponse::playerid() const {
  return playerid_;
}
inline void ExitsAllianceResponse::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// TransferLeaderRequest

// required int64 playerId = 1;
inline bool TransferLeaderRequest::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransferLeaderRequest::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransferLeaderRequest::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransferLeaderRequest::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 TransferLeaderRequest::playerid() const {
  return playerid_;
}
inline void TransferLeaderRequest::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// TransferLeaderResponse

// required int64 playerId = 1;
inline bool TransferLeaderResponse::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransferLeaderResponse::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransferLeaderResponse::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransferLeaderResponse::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 TransferLeaderResponse::playerid() const {
  return playerid_;
}
inline void TransferLeaderResponse::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// AllianceSettingRequest

// optional string allianceName = 1;
inline bool AllianceSettingRequest::has_alliancename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllianceSettingRequest::set_has_alliancename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllianceSettingRequest::clear_has_alliancename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllianceSettingRequest::clear_alliancename() {
  if (alliancename_ != &::google::protobuf::internal::kEmptyString) {
    alliancename_->clear();
  }
  clear_has_alliancename();
}
inline const ::std::string& AllianceSettingRequest::alliancename() const {
  return *alliancename_;
}
inline void AllianceSettingRequest::set_alliancename(const ::std::string& value) {
  set_has_alliancename();
  if (alliancename_ == &::google::protobuf::internal::kEmptyString) {
    alliancename_ = new ::std::string;
  }
  alliancename_->assign(value);
}
inline void AllianceSettingRequest::set_alliancename(const char* value) {
  set_has_alliancename();
  if (alliancename_ == &::google::protobuf::internal::kEmptyString) {
    alliancename_ = new ::std::string;
  }
  alliancename_->assign(value);
}
inline void AllianceSettingRequest::set_alliancename(const char* value, size_t size) {
  set_has_alliancename();
  if (alliancename_ == &::google::protobuf::internal::kEmptyString) {
    alliancename_ = new ::std::string;
  }
  alliancename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllianceSettingRequest::mutable_alliancename() {
  set_has_alliancename();
  if (alliancename_ == &::google::protobuf::internal::kEmptyString) {
    alliancename_ = new ::std::string;
  }
  return alliancename_;
}
inline ::std::string* AllianceSettingRequest::release_alliancename() {
  clear_has_alliancename();
  if (alliancename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = alliancename_;
    alliancename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AllianceSettingRequest::set_allocated_alliancename(::std::string* alliancename) {
  if (alliancename_ != &::google::protobuf::internal::kEmptyString) {
    delete alliancename_;
  }
  if (alliancename) {
    set_has_alliancename();
    alliancename_ = alliancename;
  } else {
    clear_has_alliancename();
    alliancename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 flag = 2;
inline bool AllianceSettingRequest::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllianceSettingRequest::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllianceSettingRequest::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllianceSettingRequest::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 AllianceSettingRequest::flag() const {
  return flag_;
}
inline void AllianceSettingRequest::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// optional string declaration = 3;
inline bool AllianceSettingRequest::has_declaration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AllianceSettingRequest::set_has_declaration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AllianceSettingRequest::clear_has_declaration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AllianceSettingRequest::clear_declaration() {
  if (declaration_ != &::google::protobuf::internal::kEmptyString) {
    declaration_->clear();
  }
  clear_has_declaration();
}
inline const ::std::string& AllianceSettingRequest::declaration() const {
  return *declaration_;
}
inline void AllianceSettingRequest::set_declaration(const ::std::string& value) {
  set_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    declaration_ = new ::std::string;
  }
  declaration_->assign(value);
}
inline void AllianceSettingRequest::set_declaration(const char* value) {
  set_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    declaration_ = new ::std::string;
  }
  declaration_->assign(value);
}
inline void AllianceSettingRequest::set_declaration(const char* value, size_t size) {
  set_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    declaration_ = new ::std::string;
  }
  declaration_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllianceSettingRequest::mutable_declaration() {
  set_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    declaration_ = new ::std::string;
  }
  return declaration_;
}
inline ::std::string* AllianceSettingRequest::release_declaration() {
  clear_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = declaration_;
    declaration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AllianceSettingRequest::set_allocated_declaration(::std::string* declaration) {
  if (declaration_ != &::google::protobuf::internal::kEmptyString) {
    delete declaration_;
  }
  if (declaration) {
    set_has_declaration();
    declaration_ = declaration;
  } else {
    clear_has_declaration();
    declaration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool isPublic = 4;
inline bool AllianceSettingRequest::has_ispublic() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AllianceSettingRequest::set_has_ispublic() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AllianceSettingRequest::clear_has_ispublic() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AllianceSettingRequest::clear_ispublic() {
  ispublic_ = false;
  clear_has_ispublic();
}
inline bool AllianceSettingRequest::ispublic() const {
  return ispublic_;
}
inline void AllianceSettingRequest::set_ispublic(bool value) {
  set_has_ispublic();
  ispublic_ = value;
}

// optional int32 joinPower = 5;
inline bool AllianceSettingRequest::has_joinpower() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AllianceSettingRequest::set_has_joinpower() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AllianceSettingRequest::clear_has_joinpower() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AllianceSettingRequest::clear_joinpower() {
  joinpower_ = 0;
  clear_has_joinpower();
}
inline ::google::protobuf::int32 AllianceSettingRequest::joinpower() const {
  return joinpower_;
}
inline void AllianceSettingRequest::set_joinpower(::google::protobuf::int32 value) {
  set_has_joinpower();
  joinpower_ = value;
}

// optional string language = 6;
inline bool AllianceSettingRequest::has_language() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AllianceSettingRequest::set_has_language() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AllianceSettingRequest::clear_has_language() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AllianceSettingRequest::clear_language() {
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    language_->clear();
  }
  clear_has_language();
}
inline const ::std::string& AllianceSettingRequest::language() const {
  return *language_;
}
inline void AllianceSettingRequest::set_language(const ::std::string& value) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  language_->assign(value);
}
inline void AllianceSettingRequest::set_language(const char* value) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  language_->assign(value);
}
inline void AllianceSettingRequest::set_language(const char* value, size_t size) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  language_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllianceSettingRequest::mutable_language() {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  return language_;
}
inline ::std::string* AllianceSettingRequest::release_language() {
  clear_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = language_;
    language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AllianceSettingRequest::set_allocated_language(::std::string* language) {
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    delete language_;
  }
  if (language) {
    set_has_language();
    language_ = language;
  } else {
    clear_has_language();
    language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string shortName = 7;
inline bool AllianceSettingRequest::has_shortname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AllianceSettingRequest::set_has_shortname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AllianceSettingRequest::clear_has_shortname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AllianceSettingRequest::clear_shortname() {
  if (shortname_ != &::google::protobuf::internal::kEmptyString) {
    shortname_->clear();
  }
  clear_has_shortname();
}
inline const ::std::string& AllianceSettingRequest::shortname() const {
  return *shortname_;
}
inline void AllianceSettingRequest::set_shortname(const ::std::string& value) {
  set_has_shortname();
  if (shortname_ == &::google::protobuf::internal::kEmptyString) {
    shortname_ = new ::std::string;
  }
  shortname_->assign(value);
}
inline void AllianceSettingRequest::set_shortname(const char* value) {
  set_has_shortname();
  if (shortname_ == &::google::protobuf::internal::kEmptyString) {
    shortname_ = new ::std::string;
  }
  shortname_->assign(value);
}
inline void AllianceSettingRequest::set_shortname(const char* value, size_t size) {
  set_has_shortname();
  if (shortname_ == &::google::protobuf::internal::kEmptyString) {
    shortname_ = new ::std::string;
  }
  shortname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllianceSettingRequest::mutable_shortname() {
  set_has_shortname();
  if (shortname_ == &::google::protobuf::internal::kEmptyString) {
    shortname_ = new ::std::string;
  }
  return shortname_;
}
inline ::std::string* AllianceSettingRequest::release_shortname() {
  clear_has_shortname();
  if (shortname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = shortname_;
    shortname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AllianceSettingRequest::set_allocated_shortname(::std::string* shortname) {
  if (shortname_ != &::google::protobuf::internal::kEmptyString) {
    delete shortname_;
  }
  if (shortname) {
    set_has_shortname();
    shortname_ = shortname;
  } else {
    clear_has_shortname();
    shortname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AllianceSettingResponse

// optional string allianceName = 1;
inline bool AllianceSettingResponse::has_alliancename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllianceSettingResponse::set_has_alliancename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllianceSettingResponse::clear_has_alliancename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllianceSettingResponse::clear_alliancename() {
  if (alliancename_ != &::google::protobuf::internal::kEmptyString) {
    alliancename_->clear();
  }
  clear_has_alliancename();
}
inline const ::std::string& AllianceSettingResponse::alliancename() const {
  return *alliancename_;
}
inline void AllianceSettingResponse::set_alliancename(const ::std::string& value) {
  set_has_alliancename();
  if (alliancename_ == &::google::protobuf::internal::kEmptyString) {
    alliancename_ = new ::std::string;
  }
  alliancename_->assign(value);
}
inline void AllianceSettingResponse::set_alliancename(const char* value) {
  set_has_alliancename();
  if (alliancename_ == &::google::protobuf::internal::kEmptyString) {
    alliancename_ = new ::std::string;
  }
  alliancename_->assign(value);
}
inline void AllianceSettingResponse::set_alliancename(const char* value, size_t size) {
  set_has_alliancename();
  if (alliancename_ == &::google::protobuf::internal::kEmptyString) {
    alliancename_ = new ::std::string;
  }
  alliancename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllianceSettingResponse::mutable_alliancename() {
  set_has_alliancename();
  if (alliancename_ == &::google::protobuf::internal::kEmptyString) {
    alliancename_ = new ::std::string;
  }
  return alliancename_;
}
inline ::std::string* AllianceSettingResponse::release_alliancename() {
  clear_has_alliancename();
  if (alliancename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = alliancename_;
    alliancename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AllianceSettingResponse::set_allocated_alliancename(::std::string* alliancename) {
  if (alliancename_ != &::google::protobuf::internal::kEmptyString) {
    delete alliancename_;
  }
  if (alliancename) {
    set_has_alliancename();
    alliancename_ = alliancename;
  } else {
    clear_has_alliancename();
    alliancename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 flag = 2;
inline bool AllianceSettingResponse::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllianceSettingResponse::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllianceSettingResponse::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllianceSettingResponse::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 AllianceSettingResponse::flag() const {
  return flag_;
}
inline void AllianceSettingResponse::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// optional string declaration = 3;
inline bool AllianceSettingResponse::has_declaration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AllianceSettingResponse::set_has_declaration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AllianceSettingResponse::clear_has_declaration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AllianceSettingResponse::clear_declaration() {
  if (declaration_ != &::google::protobuf::internal::kEmptyString) {
    declaration_->clear();
  }
  clear_has_declaration();
}
inline const ::std::string& AllianceSettingResponse::declaration() const {
  return *declaration_;
}
inline void AllianceSettingResponse::set_declaration(const ::std::string& value) {
  set_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    declaration_ = new ::std::string;
  }
  declaration_->assign(value);
}
inline void AllianceSettingResponse::set_declaration(const char* value) {
  set_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    declaration_ = new ::std::string;
  }
  declaration_->assign(value);
}
inline void AllianceSettingResponse::set_declaration(const char* value, size_t size) {
  set_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    declaration_ = new ::std::string;
  }
  declaration_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllianceSettingResponse::mutable_declaration() {
  set_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    declaration_ = new ::std::string;
  }
  return declaration_;
}
inline ::std::string* AllianceSettingResponse::release_declaration() {
  clear_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = declaration_;
    declaration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AllianceSettingResponse::set_allocated_declaration(::std::string* declaration) {
  if (declaration_ != &::google::protobuf::internal::kEmptyString) {
    delete declaration_;
  }
  if (declaration) {
    set_has_declaration();
    declaration_ = declaration;
  } else {
    clear_has_declaration();
    declaration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool isPublic = 4;
inline bool AllianceSettingResponse::has_ispublic() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AllianceSettingResponse::set_has_ispublic() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AllianceSettingResponse::clear_has_ispublic() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AllianceSettingResponse::clear_ispublic() {
  ispublic_ = false;
  clear_has_ispublic();
}
inline bool AllianceSettingResponse::ispublic() const {
  return ispublic_;
}
inline void AllianceSettingResponse::set_ispublic(bool value) {
  set_has_ispublic();
  ispublic_ = value;
}

// optional int32 joinPower = 5;
inline bool AllianceSettingResponse::has_joinpower() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AllianceSettingResponse::set_has_joinpower() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AllianceSettingResponse::clear_has_joinpower() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AllianceSettingResponse::clear_joinpower() {
  joinpower_ = 0;
  clear_has_joinpower();
}
inline ::google::protobuf::int32 AllianceSettingResponse::joinpower() const {
  return joinpower_;
}
inline void AllianceSettingResponse::set_joinpower(::google::protobuf::int32 value) {
  set_has_joinpower();
  joinpower_ = value;
}

// optional string language = 6;
inline bool AllianceSettingResponse::has_language() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AllianceSettingResponse::set_has_language() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AllianceSettingResponse::clear_has_language() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AllianceSettingResponse::clear_language() {
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    language_->clear();
  }
  clear_has_language();
}
inline const ::std::string& AllianceSettingResponse::language() const {
  return *language_;
}
inline void AllianceSettingResponse::set_language(const ::std::string& value) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  language_->assign(value);
}
inline void AllianceSettingResponse::set_language(const char* value) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  language_->assign(value);
}
inline void AllianceSettingResponse::set_language(const char* value, size_t size) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  language_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllianceSettingResponse::mutable_language() {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  return language_;
}
inline ::std::string* AllianceSettingResponse::release_language() {
  clear_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = language_;
    language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AllianceSettingResponse::set_allocated_language(::std::string* language) {
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    delete language_;
  }
  if (language) {
    set_has_language();
    language_ = language;
  } else {
    clear_has_language();
    language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string shortName = 7;
inline bool AllianceSettingResponse::has_shortname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AllianceSettingResponse::set_has_shortname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AllianceSettingResponse::clear_has_shortname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AllianceSettingResponse::clear_shortname() {
  if (shortname_ != &::google::protobuf::internal::kEmptyString) {
    shortname_->clear();
  }
  clear_has_shortname();
}
inline const ::std::string& AllianceSettingResponse::shortname() const {
  return *shortname_;
}
inline void AllianceSettingResponse::set_shortname(const ::std::string& value) {
  set_has_shortname();
  if (shortname_ == &::google::protobuf::internal::kEmptyString) {
    shortname_ = new ::std::string;
  }
  shortname_->assign(value);
}
inline void AllianceSettingResponse::set_shortname(const char* value) {
  set_has_shortname();
  if (shortname_ == &::google::protobuf::internal::kEmptyString) {
    shortname_ = new ::std::string;
  }
  shortname_->assign(value);
}
inline void AllianceSettingResponse::set_shortname(const char* value, size_t size) {
  set_has_shortname();
  if (shortname_ == &::google::protobuf::internal::kEmptyString) {
    shortname_ = new ::std::string;
  }
  shortname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllianceSettingResponse::mutable_shortname() {
  set_has_shortname();
  if (shortname_ == &::google::protobuf::internal::kEmptyString) {
    shortname_ = new ::std::string;
  }
  return shortname_;
}
inline ::std::string* AllianceSettingResponse::release_shortname() {
  clear_has_shortname();
  if (shortname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = shortname_;
    shortname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AllianceSettingResponse::set_allocated_shortname(::std::string* shortname) {
  if (shortname_ != &::google::protobuf::internal::kEmptyString) {
    delete shortname_;
  }
  if (shortname) {
    set_has_shortname();
    shortname_ = shortname;
  } else {
    clear_has_shortname();
    shortname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AllianceApplyRequest

// required bool isAgree = 1;
inline bool AllianceApplyRequest::has_isagree() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllianceApplyRequest::set_has_isagree() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllianceApplyRequest::clear_has_isagree() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllianceApplyRequest::clear_isagree() {
  isagree_ = false;
  clear_has_isagree();
}
inline bool AllianceApplyRequest::isagree() const {
  return isagree_;
}
inline void AllianceApplyRequest::set_isagree(bool value) {
  set_has_isagree();
  isagree_ = value;
}

// required int64 playerId = 2;
inline bool AllianceApplyRequest::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllianceApplyRequest::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllianceApplyRequest::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllianceApplyRequest::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 AllianceApplyRequest::playerid() const {
  return playerid_;
}
inline void AllianceApplyRequest::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// AllianceApplyesponse

// required bool isAgree = 1;
inline bool AllianceApplyesponse::has_isagree() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllianceApplyesponse::set_has_isagree() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllianceApplyesponse::clear_has_isagree() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllianceApplyesponse::clear_isagree() {
  isagree_ = false;
  clear_has_isagree();
}
inline bool AllianceApplyesponse::isagree() const {
  return isagree_;
}
inline void AllianceApplyesponse::set_isagree(bool value) {
  set_has_isagree();
  isagree_ = value;
}

// -------------------------------------------------------------------

// AllianceListRequest

// -------------------------------------------------------------------

// AllianceListResponse

// repeated .slg.protocol.AllianceSummaryDTO allianceList = 1;
inline int AllianceListResponse::alliancelist_size() const {
  return alliancelist_.size();
}
inline void AllianceListResponse::clear_alliancelist() {
  alliancelist_.Clear();
}
inline const ::slg::protocol::AllianceSummaryDTO& AllianceListResponse::alliancelist(int index) const {
  return alliancelist_.Get(index);
}
inline ::slg::protocol::AllianceSummaryDTO* AllianceListResponse::mutable_alliancelist(int index) {
  return alliancelist_.Mutable(index);
}
inline ::slg::protocol::AllianceSummaryDTO* AllianceListResponse::add_alliancelist() {
  return alliancelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceSummaryDTO >&
AllianceListResponse::alliancelist() const {
  return alliancelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceSummaryDTO >*
AllianceListResponse::mutable_alliancelist() {
  return &alliancelist_;
}

// -------------------------------------------------------------------

// CheckAllianceNameRequest

// required string name = 1;
inline bool CheckAllianceNameRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckAllianceNameRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckAllianceNameRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckAllianceNameRequest::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CheckAllianceNameRequest::name() const {
  return *name_;
}
inline void CheckAllianceNameRequest::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CheckAllianceNameRequest::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CheckAllianceNameRequest::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CheckAllianceNameRequest::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CheckAllianceNameRequest::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CheckAllianceNameRequest::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CheckAllianceNameResponse

// required bool isAvailable = 1;
inline bool CheckAllianceNameResponse::has_isavailable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckAllianceNameResponse::set_has_isavailable() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckAllianceNameResponse::clear_has_isavailable() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckAllianceNameResponse::clear_isavailable() {
  isavailable_ = false;
  clear_has_isavailable();
}
inline bool CheckAllianceNameResponse::isavailable() const {
  return isavailable_;
}
inline void CheckAllianceNameResponse::set_isavailable(bool value) {
  set_has_isavailable();
  isavailable_ = value;
}

// -------------------------------------------------------------------

// SendAllianceHelpRequest

// required int32 timerId = 1;
inline bool SendAllianceHelpRequest::has_timerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendAllianceHelpRequest::set_has_timerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendAllianceHelpRequest::clear_has_timerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendAllianceHelpRequest::clear_timerid() {
  timerid_ = 0;
  clear_has_timerid();
}
inline ::google::protobuf::int32 SendAllianceHelpRequest::timerid() const {
  return timerid_;
}
inline void SendAllianceHelpRequest::set_timerid(::google::protobuf::int32 value) {
  set_has_timerid();
  timerid_ = value;
}

// required int32 helpType = 2;
inline bool SendAllianceHelpRequest::has_helptype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendAllianceHelpRequest::set_has_helptype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendAllianceHelpRequest::clear_has_helptype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendAllianceHelpRequest::clear_helptype() {
  helptype_ = 0;
  clear_has_helptype();
}
inline ::google::protobuf::int32 SendAllianceHelpRequest::helptype() const {
  return helptype_;
}
inline void SendAllianceHelpRequest::set_helptype(::google::protobuf::int32 value) {
  set_has_helptype();
  helptype_ = value;
}

// -------------------------------------------------------------------

// HelpMemberRequest

// required int32 helpId = 1;
inline bool HelpMemberRequest::has_helpid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HelpMemberRequest::set_has_helpid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HelpMemberRequest::clear_has_helpid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HelpMemberRequest::clear_helpid() {
  helpid_ = 0;
  clear_has_helpid();
}
inline ::google::protobuf::int32 HelpMemberRequest::helpid() const {
  return helpid_;
}
inline void HelpMemberRequest::set_helpid(::google::protobuf::int32 value) {
  set_has_helpid();
  helpid_ = value;
}

// -------------------------------------------------------------------

// HelpMemberResponse

// required int32 helpId = 1;
inline bool HelpMemberResponse::has_helpid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HelpMemberResponse::set_has_helpid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HelpMemberResponse::clear_has_helpid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HelpMemberResponse::clear_helpid() {
  helpid_ = 0;
  clear_has_helpid();
}
inline ::google::protobuf::int32 HelpMemberResponse::helpid() const {
  return helpid_;
}
inline void HelpMemberResponse::set_helpid(::google::protobuf::int32 value) {
  set_has_helpid();
  helpid_ = value;
}

// -------------------------------------------------------------------

// AllianceHelpListRequest

// -------------------------------------------------------------------

// AllianceHelpListResponse

// repeated .slg.protocol.AllianceHelpDTO helpList = 1;
inline int AllianceHelpListResponse::helplist_size() const {
  return helplist_.size();
}
inline void AllianceHelpListResponse::clear_helplist() {
  helplist_.Clear();
}
inline const ::slg::protocol::AllianceHelpDTO& AllianceHelpListResponse::helplist(int index) const {
  return helplist_.Get(index);
}
inline ::slg::protocol::AllianceHelpDTO* AllianceHelpListResponse::mutable_helplist(int index) {
  return helplist_.Mutable(index);
}
inline ::slg::protocol::AllianceHelpDTO* AllianceHelpListResponse::add_helplist() {
  return helplist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceHelpDTO >&
AllianceHelpListResponse::helplist() const {
  return helplist_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceHelpDTO >*
AllianceHelpListResponse::mutable_helplist() {
  return &helplist_;
}

// -------------------------------------------------------------------

// AllianceVoteRequest

// required int32 techType = 1;
inline bool AllianceVoteRequest::has_techtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllianceVoteRequest::set_has_techtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllianceVoteRequest::clear_has_techtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllianceVoteRequest::clear_techtype() {
  techtype_ = 0;
  clear_has_techtype();
}
inline ::google::protobuf::int32 AllianceVoteRequest::techtype() const {
  return techtype_;
}
inline void AllianceVoteRequest::set_techtype(::google::protobuf::int32 value) {
  set_has_techtype();
  techtype_ = value;
}

// -------------------------------------------------------------------

// AllianceVoteResponse

// required int32 techType = 1;
inline bool AllianceVoteResponse::has_techtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllianceVoteResponse::set_has_techtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllianceVoteResponse::clear_has_techtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllianceVoteResponse::clear_techtype() {
  techtype_ = 0;
  clear_has_techtype();
}
inline ::google::protobuf::int32 AllianceVoteResponse::techtype() const {
  return techtype_;
}
inline void AllianceVoteResponse::set_techtype(::google::protobuf::int32 value) {
  set_has_techtype();
  techtype_ = value;
}

// -------------------------------------------------------------------

// AllianceTechUpgradeRequest

// required int32 techType = 1;
inline bool AllianceTechUpgradeRequest::has_techtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllianceTechUpgradeRequest::set_has_techtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllianceTechUpgradeRequest::clear_has_techtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllianceTechUpgradeRequest::clear_techtype() {
  techtype_ = 0;
  clear_has_techtype();
}
inline ::google::protobuf::int32 AllianceTechUpgradeRequest::techtype() const {
  return techtype_;
}
inline void AllianceTechUpgradeRequest::set_techtype(::google::protobuf::int32 value) {
  set_has_techtype();
  techtype_ = value;
}

// -------------------------------------------------------------------

// AllianceTechUpgradeResponse

// required int32 techType = 1;
inline bool AllianceTechUpgradeResponse::has_techtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllianceTechUpgradeResponse::set_has_techtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllianceTechUpgradeResponse::clear_has_techtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllianceTechUpgradeResponse::clear_techtype() {
  techtype_ = 0;
  clear_has_techtype();
}
inline ::google::protobuf::int32 AllianceTechUpgradeResponse::techtype() const {
  return techtype_;
}
inline void AllianceTechUpgradeResponse::set_techtype(::google::protobuf::int32 value) {
  set_has_techtype();
  techtype_ = value;
}

// -------------------------------------------------------------------

// ContributeInfoRequest

// -------------------------------------------------------------------

// ContributeInfoResponse

// required .slg.protocol.AllianceContributeInfoDTO donationInfo = 1;
inline bool ContributeInfoResponse::has_donationinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContributeInfoResponse::set_has_donationinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContributeInfoResponse::clear_has_donationinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContributeInfoResponse::clear_donationinfo() {
  if (donationinfo_ != NULL) donationinfo_->::slg::protocol::AllianceContributeInfoDTO::Clear();
  clear_has_donationinfo();
}
inline const ::slg::protocol::AllianceContributeInfoDTO& ContributeInfoResponse::donationinfo() const {
  return donationinfo_ != NULL ? *donationinfo_ : *default_instance_->donationinfo_;
}
inline ::slg::protocol::AllianceContributeInfoDTO* ContributeInfoResponse::mutable_donationinfo() {
  set_has_donationinfo();
  if (donationinfo_ == NULL) donationinfo_ = new ::slg::protocol::AllianceContributeInfoDTO;
  return donationinfo_;
}
inline ::slg::protocol::AllianceContributeInfoDTO* ContributeInfoResponse::release_donationinfo() {
  clear_has_donationinfo();
  ::slg::protocol::AllianceContributeInfoDTO* temp = donationinfo_;
  donationinfo_ = NULL;
  return temp;
}
inline void ContributeInfoResponse::set_allocated_donationinfo(::slg::protocol::AllianceContributeInfoDTO* donationinfo) {
  delete donationinfo_;
  donationinfo_ = donationinfo;
  if (donationinfo) {
    set_has_donationinfo();
  } else {
    clear_has_donationinfo();
  }
}

// required int32 canReceiveTimes = 2;
inline bool ContributeInfoResponse::has_canreceivetimes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContributeInfoResponse::set_has_canreceivetimes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContributeInfoResponse::clear_has_canreceivetimes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContributeInfoResponse::clear_canreceivetimes() {
  canreceivetimes_ = 0;
  clear_has_canreceivetimes();
}
inline ::google::protobuf::int32 ContributeInfoResponse::canreceivetimes() const {
  return canreceivetimes_;
}
inline void ContributeInfoResponse::set_canreceivetimes(::google::protobuf::int32 value) {
  set_has_canreceivetimes();
  canreceivetimes_ = value;
}

// -------------------------------------------------------------------

// ContributeRequest

// required int32 level = 1;
inline bool ContributeRequest::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContributeRequest::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContributeRequest::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContributeRequest::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ContributeRequest::level() const {
  return level_;
}
inline void ContributeRequest::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// DrawAllianceGiftRequest

// -------------------------------------------------------------------

// DrawAllianceGiftResponse

// repeated .slg.protocol.ItemDTO items = 1;
inline int DrawAllianceGiftResponse::items_size() const {
  return items_.size();
}
inline void DrawAllianceGiftResponse::clear_items() {
  items_.Clear();
}
inline const ::slg::protocol::ItemDTO& DrawAllianceGiftResponse::items(int index) const {
  return items_.Get(index);
}
inline ::slg::protocol::ItemDTO* DrawAllianceGiftResponse::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::slg::protocol::ItemDTO* DrawAllianceGiftResponse::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::ItemDTO >&
DrawAllianceGiftResponse::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::ItemDTO >*
DrawAllianceGiftResponse::mutable_items() {
  return &items_;
}

// repeated .slg.protocol.PropertyDTO propertys = 2;
inline int DrawAllianceGiftResponse::propertys_size() const {
  return propertys_.size();
}
inline void DrawAllianceGiftResponse::clear_propertys() {
  propertys_.Clear();
}
inline const ::slg::protocol::PropertyDTO& DrawAllianceGiftResponse::propertys(int index) const {
  return propertys_.Get(index);
}
inline ::slg::protocol::PropertyDTO* DrawAllianceGiftResponse::mutable_propertys(int index) {
  return propertys_.Mutable(index);
}
inline ::slg::protocol::PropertyDTO* DrawAllianceGiftResponse::add_propertys() {
  return propertys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::PropertyDTO >&
DrawAllianceGiftResponse::propertys() const {
  return propertys_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::PropertyDTO >*
DrawAllianceGiftResponse::mutable_propertys() {
  return &propertys_;
}

// -------------------------------------------------------------------

// ClearContributedCdRequest

// -------------------------------------------------------------------

// ClearContributedCdResponse

// required int32 canContributeTime = 1;
inline bool ClearContributedCdResponse::has_cancontributetime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClearContributedCdResponse::set_has_cancontributetime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClearContributedCdResponse::clear_has_cancontributetime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClearContributedCdResponse::clear_cancontributetime() {
  cancontributetime_ = 0;
  clear_has_cancontributetime();
}
inline ::google::protobuf::int32 ClearContributedCdResponse::cancontributetime() const {
  return cancontributetime_;
}
inline void ClearContributedCdResponse::set_cancontributetime(::google::protobuf::int32 value) {
  set_has_cancontributetime();
  cancontributetime_ = value;
}

// -------------------------------------------------------------------

// AllianceShopInfoRequest

// -------------------------------------------------------------------

// AllianceShopInfoResponse

// repeated .slg.protocol.AllianceShopItemDTO items = 1;
inline int AllianceShopInfoResponse::items_size() const {
  return items_.size();
}
inline void AllianceShopInfoResponse::clear_items() {
  items_.Clear();
}
inline const ::slg::protocol::AllianceShopItemDTO& AllianceShopInfoResponse::items(int index) const {
  return items_.Get(index);
}
inline ::slg::protocol::AllianceShopItemDTO* AllianceShopInfoResponse::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::slg::protocol::AllianceShopItemDTO* AllianceShopInfoResponse::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceShopItemDTO >&
AllianceShopInfoResponse::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceShopItemDTO >*
AllianceShopInfoResponse::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// AllianceShopBuyRequest

// required int32 id = 1;
inline bool AllianceShopBuyRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllianceShopBuyRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllianceShopBuyRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllianceShopBuyRequest::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 AllianceShopBuyRequest::id() const {
  return id_;
}
inline void AllianceShopBuyRequest::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 num = 2;
inline bool AllianceShopBuyRequest::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllianceShopBuyRequest::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllianceShopBuyRequest::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllianceShopBuyRequest::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 AllianceShopBuyRequest::num() const {
  return num_;
}
inline void AllianceShopBuyRequest::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// AllianceShopBuyResponse

// required int32 id = 1;
inline bool AllianceShopBuyResponse::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllianceShopBuyResponse::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllianceShopBuyResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllianceShopBuyResponse::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 AllianceShopBuyResponse::id() const {
  return id_;
}
inline void AllianceShopBuyResponse::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 num = 2;
inline bool AllianceShopBuyResponse::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllianceShopBuyResponse::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllianceShopBuyResponse::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllianceShopBuyResponse::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 AllianceShopBuyResponse::num() const {
  return num_;
}
inline void AllianceShopBuyResponse::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// required int32 itemId = 3;
inline bool AllianceShopBuyResponse::has_itemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AllianceShopBuyResponse::set_has_itemid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AllianceShopBuyResponse::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AllianceShopBuyResponse::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 AllianceShopBuyResponse::itemid() const {
  return itemid_;
}
inline void AllianceShopBuyResponse::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// -------------------------------------------------------------------

// InviteJoinAllianceRequest

// required int64 playerId = 1;
inline bool InviteJoinAllianceRequest::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InviteJoinAllianceRequest::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InviteJoinAllianceRequest::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InviteJoinAllianceRequest::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 InviteJoinAllianceRequest::playerid() const {
  return playerid_;
}
inline void InviteJoinAllianceRequest::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// InviteJoinAllianceResponse

// required int64 playerId = 1;
inline bool InviteJoinAllianceResponse::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InviteJoinAllianceResponse::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InviteJoinAllianceResponse::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InviteJoinAllianceResponse::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 InviteJoinAllianceResponse::playerid() const {
  return playerid_;
}
inline void InviteJoinAllianceResponse::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// DealInviteRequest

// required bool isAgree = 1;
inline bool DealInviteRequest::has_isagree() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DealInviteRequest::set_has_isagree() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DealInviteRequest::clear_has_isagree() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DealInviteRequest::clear_isagree() {
  isagree_ = false;
  clear_has_isagree();
}
inline bool DealInviteRequest::isagree() const {
  return isagree_;
}
inline void DealInviteRequest::set_isagree(bool value) {
  set_has_isagree();
  isagree_ = value;
}

// required int32 allianceId = 2;
inline bool DealInviteRequest::has_allianceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DealInviteRequest::set_has_allianceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DealInviteRequest::clear_has_allianceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DealInviteRequest::clear_allianceid() {
  allianceid_ = 0;
  clear_has_allianceid();
}
inline ::google::protobuf::int32 DealInviteRequest::allianceid() const {
  return allianceid_;
}
inline void DealInviteRequest::set_allianceid(::google::protobuf::int32 value) {
  set_has_allianceid();
  allianceid_ = value;
}

// -------------------------------------------------------------------

// DealInviteResponse

// required bool isAgree = 1;
inline bool DealInviteResponse::has_isagree() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DealInviteResponse::set_has_isagree() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DealInviteResponse::clear_has_isagree() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DealInviteResponse::clear_isagree() {
  isagree_ = false;
  clear_has_isagree();
}
inline bool DealInviteResponse::isagree() const {
  return isagree_;
}
inline void DealInviteResponse::set_isagree(bool value) {
  set_has_isagree();
  isagree_ = value;
}

// -------------------------------------------------------------------

// FreshRecommendRequest

// -------------------------------------------------------------------

// FreshRecommendResponse

// repeated .slg.protocol.RecommendDTO recommendList = 1;
inline int FreshRecommendResponse::recommendlist_size() const {
  return recommendlist_.size();
}
inline void FreshRecommendResponse::clear_recommendlist() {
  recommendlist_.Clear();
}
inline const ::slg::protocol::RecommendDTO& FreshRecommendResponse::recommendlist(int index) const {
  return recommendlist_.Get(index);
}
inline ::slg::protocol::RecommendDTO* FreshRecommendResponse::mutable_recommendlist(int index) {
  return recommendlist_.Mutable(index);
}
inline ::slg::protocol::RecommendDTO* FreshRecommendResponse::add_recommendlist() {
  return recommendlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::RecommendDTO >&
FreshRecommendResponse::recommendlist() const {
  return recommendlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::RecommendDTO >*
FreshRecommendResponse::mutable_recommendlist() {
  return &recommendlist_;
}

// required int32 nextTime = 2;
inline bool FreshRecommendResponse::has_nexttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FreshRecommendResponse::set_has_nexttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FreshRecommendResponse::clear_has_nexttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FreshRecommendResponse::clear_nexttime() {
  nexttime_ = 0;
  clear_has_nexttime();
}
inline ::google::protobuf::int32 FreshRecommendResponse::nexttime() const {
  return nexttime_;
}
inline void FreshRecommendResponse::set_nexttime(::google::protobuf::int32 value) {
  set_has_nexttime();
  nexttime_ = value;
}

// -------------------------------------------------------------------

// GetRecommendRequest

// -------------------------------------------------------------------

// GetRecommendResponse

// repeated .slg.protocol.RecommendDTO recommendList = 1;
inline int GetRecommendResponse::recommendlist_size() const {
  return recommendlist_.size();
}
inline void GetRecommendResponse::clear_recommendlist() {
  recommendlist_.Clear();
}
inline const ::slg::protocol::RecommendDTO& GetRecommendResponse::recommendlist(int index) const {
  return recommendlist_.Get(index);
}
inline ::slg::protocol::RecommendDTO* GetRecommendResponse::mutable_recommendlist(int index) {
  return recommendlist_.Mutable(index);
}
inline ::slg::protocol::RecommendDTO* GetRecommendResponse::add_recommendlist() {
  return recommendlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::RecommendDTO >&
GetRecommendResponse::recommendlist() const {
  return recommendlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::RecommendDTO >*
GetRecommendResponse::mutable_recommendlist() {
  return &recommendlist_;
}

// required int32 nextTime = 2;
inline bool GetRecommendResponse::has_nexttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetRecommendResponse::set_has_nexttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetRecommendResponse::clear_has_nexttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetRecommendResponse::clear_nexttime() {
  nexttime_ = 0;
  clear_has_nexttime();
}
inline ::google::protobuf::int32 GetRecommendResponse::nexttime() const {
  return nexttime_;
}
inline void GetRecommendResponse::set_nexttime(::google::protobuf::int32 value) {
  set_has_nexttime();
  nexttime_ = value;
}

// -------------------------------------------------------------------

// QuickJoinRequest

// -------------------------------------------------------------------

// QueryInviterRequest

// required string playerName = 1;
inline bool QueryInviterRequest::has_playername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryInviterRequest::set_has_playername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryInviterRequest::clear_has_playername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryInviterRequest::clear_playername() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& QueryInviterRequest::playername() const {
  return *playername_;
}
inline void QueryInviterRequest::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void QueryInviterRequest::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void QueryInviterRequest::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryInviterRequest::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  return playername_;
}
inline ::std::string* QueryInviterRequest::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void QueryInviterRequest::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// QueryInviterResponse

// optional .slg.protocol.RecommendDTO player = 1;
inline bool QueryInviterResponse::has_player() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryInviterResponse::set_has_player() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryInviterResponse::clear_has_player() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryInviterResponse::clear_player() {
  if (player_ != NULL) player_->::slg::protocol::RecommendDTO::Clear();
  clear_has_player();
}
inline const ::slg::protocol::RecommendDTO& QueryInviterResponse::player() const {
  return player_ != NULL ? *player_ : *default_instance_->player_;
}
inline ::slg::protocol::RecommendDTO* QueryInviterResponse::mutable_player() {
  set_has_player();
  if (player_ == NULL) player_ = new ::slg::protocol::RecommendDTO;
  return player_;
}
inline ::slg::protocol::RecommendDTO* QueryInviterResponse::release_player() {
  clear_has_player();
  ::slg::protocol::RecommendDTO* temp = player_;
  player_ = NULL;
  return temp;
}
inline void QueryInviterResponse::set_allocated_player(::slg::protocol::RecommendDTO* player) {
  delete player_;
  player_ = player;
  if (player) {
    set_has_player();
  } else {
    clear_has_player();
  }
}

// -------------------------------------------------------------------

// AllianceMemberRequest

// -------------------------------------------------------------------

// AllianceMemberResponse

// repeated .slg.protocol.AllianceMemberDTO memberList = 1;
inline int AllianceMemberResponse::memberlist_size() const {
  return memberlist_.size();
}
inline void AllianceMemberResponse::clear_memberlist() {
  memberlist_.Clear();
}
inline const ::slg::protocol::AllianceMemberDTO& AllianceMemberResponse::memberlist(int index) const {
  return memberlist_.Get(index);
}
inline ::slg::protocol::AllianceMemberDTO* AllianceMemberResponse::mutable_memberlist(int index) {
  return memberlist_.Mutable(index);
}
inline ::slg::protocol::AllianceMemberDTO* AllianceMemberResponse::add_memberlist() {
  return memberlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceMemberDTO >&
AllianceMemberResponse::memberlist() const {
  return memberlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceMemberDTO >*
AllianceMemberResponse::mutable_memberlist() {
  return &memberlist_;
}

// -------------------------------------------------------------------

// NeedAllianceDataRequest

// required bool isNeed = 1;
inline bool NeedAllianceDataRequest::has_isneed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NeedAllianceDataRequest::set_has_isneed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NeedAllianceDataRequest::clear_has_isneed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NeedAllianceDataRequest::clear_isneed() {
  isneed_ = false;
  clear_has_isneed();
}
inline bool NeedAllianceDataRequest::isneed() const {
  return isneed_;
}
inline void NeedAllianceDataRequest::set_isneed(bool value) {
  set_has_isneed();
  isneed_ = value;
}

// -------------------------------------------------------------------

// AllianceSummaryRequest

// required string name = 1;
inline bool AllianceSummaryRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllianceSummaryRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllianceSummaryRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllianceSummaryRequest::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& AllianceSummaryRequest::name() const {
  return *name_;
}
inline void AllianceSummaryRequest::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void AllianceSummaryRequest::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void AllianceSummaryRequest::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllianceSummaryRequest::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* AllianceSummaryRequest::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AllianceSummaryRequest::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AllianceSummaryResponse

// optional .slg.protocol.AllianceSummaryDTO summaryInfo = 1;
inline bool AllianceSummaryResponse::has_summaryinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllianceSummaryResponse::set_has_summaryinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllianceSummaryResponse::clear_has_summaryinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllianceSummaryResponse::clear_summaryinfo() {
  if (summaryinfo_ != NULL) summaryinfo_->::slg::protocol::AllianceSummaryDTO::Clear();
  clear_has_summaryinfo();
}
inline const ::slg::protocol::AllianceSummaryDTO& AllianceSummaryResponse::summaryinfo() const {
  return summaryinfo_ != NULL ? *summaryinfo_ : *default_instance_->summaryinfo_;
}
inline ::slg::protocol::AllianceSummaryDTO* AllianceSummaryResponse::mutable_summaryinfo() {
  set_has_summaryinfo();
  if (summaryinfo_ == NULL) summaryinfo_ = new ::slg::protocol::AllianceSummaryDTO;
  return summaryinfo_;
}
inline ::slg::protocol::AllianceSummaryDTO* AllianceSummaryResponse::release_summaryinfo() {
  clear_has_summaryinfo();
  ::slg::protocol::AllianceSummaryDTO* temp = summaryinfo_;
  summaryinfo_ = NULL;
  return temp;
}
inline void AllianceSummaryResponse::set_allocated_summaryinfo(::slg::protocol::AllianceSummaryDTO* summaryinfo) {
  delete summaryinfo_;
  summaryinfo_ = summaryinfo;
  if (summaryinfo) {
    set_has_summaryinfo();
  } else {
    clear_has_summaryinfo();
  }
}

// -------------------------------------------------------------------

// MemberChangePush

// repeated .slg.protocol.AllianceMemberDTO members = 1;
inline int MemberChangePush::members_size() const {
  return members_.size();
}
inline void MemberChangePush::clear_members() {
  members_.Clear();
}
inline const ::slg::protocol::AllianceMemberDTO& MemberChangePush::members(int index) const {
  return members_.Get(index);
}
inline ::slg::protocol::AllianceMemberDTO* MemberChangePush::mutable_members(int index) {
  return members_.Mutable(index);
}
inline ::slg::protocol::AllianceMemberDTO* MemberChangePush::add_members() {
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceMemberDTO >&
MemberChangePush::members() const {
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceMemberDTO >*
MemberChangePush::mutable_members() {
  return &members_;
}

// -------------------------------------------------------------------

// MemberExitPush

// required int64 playerId = 1;
inline bool MemberExitPush::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemberExitPush::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MemberExitPush::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MemberExitPush::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 MemberExitPush::playerid() const {
  return playerid_;
}
inline void MemberExitPush::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// MyAllianceInfoPush

// optional int32 id = 1;
inline bool MyAllianceInfoPush::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MyAllianceInfoPush::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MyAllianceInfoPush::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MyAllianceInfoPush::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 MyAllianceInfoPush::id() const {
  return id_;
}
inline void MyAllianceInfoPush::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool MyAllianceInfoPush::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MyAllianceInfoPush::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MyAllianceInfoPush::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MyAllianceInfoPush::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MyAllianceInfoPush::name() const {
  return *name_;
}
inline void MyAllianceInfoPush::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MyAllianceInfoPush::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MyAllianceInfoPush::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MyAllianceInfoPush::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MyAllianceInfoPush::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MyAllianceInfoPush::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string shortName = 3;
inline bool MyAllianceInfoPush::has_shortname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MyAllianceInfoPush::set_has_shortname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MyAllianceInfoPush::clear_has_shortname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MyAllianceInfoPush::clear_shortname() {
  if (shortname_ != &::google::protobuf::internal::kEmptyString) {
    shortname_->clear();
  }
  clear_has_shortname();
}
inline const ::std::string& MyAllianceInfoPush::shortname() const {
  return *shortname_;
}
inline void MyAllianceInfoPush::set_shortname(const ::std::string& value) {
  set_has_shortname();
  if (shortname_ == &::google::protobuf::internal::kEmptyString) {
    shortname_ = new ::std::string;
  }
  shortname_->assign(value);
}
inline void MyAllianceInfoPush::set_shortname(const char* value) {
  set_has_shortname();
  if (shortname_ == &::google::protobuf::internal::kEmptyString) {
    shortname_ = new ::std::string;
  }
  shortname_->assign(value);
}
inline void MyAllianceInfoPush::set_shortname(const char* value, size_t size) {
  set_has_shortname();
  if (shortname_ == &::google::protobuf::internal::kEmptyString) {
    shortname_ = new ::std::string;
  }
  shortname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MyAllianceInfoPush::mutable_shortname() {
  set_has_shortname();
  if (shortname_ == &::google::protobuf::internal::kEmptyString) {
    shortname_ = new ::std::string;
  }
  return shortname_;
}
inline ::std::string* MyAllianceInfoPush::release_shortname() {
  clear_has_shortname();
  if (shortname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = shortname_;
    shortname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MyAllianceInfoPush::set_allocated_shortname(::std::string* shortname) {
  if (shortname_ != &::google::protobuf::internal::kEmptyString) {
    delete shortname_;
  }
  if (shortname) {
    set_has_shortname();
    shortname_ = shortname;
  } else {
    clear_has_shortname();
    shortname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 flag = 4;
inline bool MyAllianceInfoPush::has_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MyAllianceInfoPush::set_has_flag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MyAllianceInfoPush::clear_has_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MyAllianceInfoPush::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 MyAllianceInfoPush::flag() const {
  return flag_;
}
inline void MyAllianceInfoPush::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// optional int32 position = 5;
inline bool MyAllianceInfoPush::has_position() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MyAllianceInfoPush::set_has_position() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MyAllianceInfoPush::clear_has_position() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MyAllianceInfoPush::clear_position() {
  position_ = 0;
  clear_has_position();
}
inline ::google::protobuf::int32 MyAllianceInfoPush::position() const {
  return position_;
}
inline void MyAllianceInfoPush::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
}

// -------------------------------------------------------------------

// HelpChangePush

// repeated .slg.protocol.AllianceHelpDTO help = 1;
inline int HelpChangePush::help_size() const {
  return help_.size();
}
inline void HelpChangePush::clear_help() {
  help_.Clear();
}
inline const ::slg::protocol::AllianceHelpDTO& HelpChangePush::help(int index) const {
  return help_.Get(index);
}
inline ::slg::protocol::AllianceHelpDTO* HelpChangePush::mutable_help(int index) {
  return help_.Mutable(index);
}
inline ::slg::protocol::AllianceHelpDTO* HelpChangePush::add_help() {
  return help_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceHelpDTO >&
HelpChangePush::help() const {
  return help_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceHelpDTO >*
HelpChangePush::mutable_help() {
  return &help_;
}

// -------------------------------------------------------------------

// HelpRemovePush

// required int32 helpId = 1;
inline bool HelpRemovePush::has_helpid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HelpRemovePush::set_has_helpid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HelpRemovePush::clear_has_helpid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HelpRemovePush::clear_helpid() {
  helpid_ = 0;
  clear_has_helpid();
}
inline ::google::protobuf::int32 HelpRemovePush::helpid() const {
  return helpid_;
}
inline void HelpRemovePush::set_helpid(::google::protobuf::int32 value) {
  set_has_helpid();
  helpid_ = value;
}

// -------------------------------------------------------------------

// AllianceNewsPush

// required .slg.protocol.AllianceNewsDTO news = 1;
inline bool AllianceNewsPush::has_news() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllianceNewsPush::set_has_news() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllianceNewsPush::clear_has_news() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllianceNewsPush::clear_news() {
  if (news_ != NULL) news_->::slg::protocol::AllianceNewsDTO::Clear();
  clear_has_news();
}
inline const ::slg::protocol::AllianceNewsDTO& AllianceNewsPush::news() const {
  return news_ != NULL ? *news_ : *default_instance_->news_;
}
inline ::slg::protocol::AllianceNewsDTO* AllianceNewsPush::mutable_news() {
  set_has_news();
  if (news_ == NULL) news_ = new ::slg::protocol::AllianceNewsDTO;
  return news_;
}
inline ::slg::protocol::AllianceNewsDTO* AllianceNewsPush::release_news() {
  clear_has_news();
  ::slg::protocol::AllianceNewsDTO* temp = news_;
  news_ = NULL;
  return temp;
}
inline void AllianceNewsPush::set_allocated_news(::slg::protocol::AllianceNewsDTO* news) {
  delete news_;
  news_ = news;
  if (news) {
    set_has_news();
  } else {
    clear_has_news();
  }
}

// -------------------------------------------------------------------

// AllianceTechPush

// repeated .slg.protocol.AllianceTechDTO techs = 1;
inline int AllianceTechPush::techs_size() const {
  return techs_.size();
}
inline void AllianceTechPush::clear_techs() {
  techs_.Clear();
}
inline const ::slg::protocol::AllianceTechDTO& AllianceTechPush::techs(int index) const {
  return techs_.Get(index);
}
inline ::slg::protocol::AllianceTechDTO* AllianceTechPush::mutable_techs(int index) {
  return techs_.Mutable(index);
}
inline ::slg::protocol::AllianceTechDTO* AllianceTechPush::add_techs() {
  return techs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceTechDTO >&
AllianceTechPush::techs() const {
  return techs_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceTechDTO >*
AllianceTechPush::mutable_techs() {
  return &techs_;
}

// -------------------------------------------------------------------

// AllianceTechUpgradePush

// required .slg.protocol.AllianceTechUpgradeDTO upgrade = 1;
inline bool AllianceTechUpgradePush::has_upgrade() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllianceTechUpgradePush::set_has_upgrade() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllianceTechUpgradePush::clear_has_upgrade() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllianceTechUpgradePush::clear_upgrade() {
  if (upgrade_ != NULL) upgrade_->::slg::protocol::AllianceTechUpgradeDTO::Clear();
  clear_has_upgrade();
}
inline const ::slg::protocol::AllianceTechUpgradeDTO& AllianceTechUpgradePush::upgrade() const {
  return upgrade_ != NULL ? *upgrade_ : *default_instance_->upgrade_;
}
inline ::slg::protocol::AllianceTechUpgradeDTO* AllianceTechUpgradePush::mutable_upgrade() {
  set_has_upgrade();
  if (upgrade_ == NULL) upgrade_ = new ::slg::protocol::AllianceTechUpgradeDTO;
  return upgrade_;
}
inline ::slg::protocol::AllianceTechUpgradeDTO* AllianceTechUpgradePush::release_upgrade() {
  clear_has_upgrade();
  ::slg::protocol::AllianceTechUpgradeDTO* temp = upgrade_;
  upgrade_ = NULL;
  return temp;
}
inline void AllianceTechUpgradePush::set_allocated_upgrade(::slg::protocol::AllianceTechUpgradeDTO* upgrade) {
  delete upgrade_;
  upgrade_ = upgrade;
  if (upgrade) {
    set_has_upgrade();
  } else {
    clear_has_upgrade();
  }
}

// -------------------------------------------------------------------

// AllianceDonationPush

// required .slg.protocol.AllianceContributeInfoDTO info = 1;
inline bool AllianceDonationPush::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllianceDonationPush::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllianceDonationPush::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllianceDonationPush::clear_info() {
  if (info_ != NULL) info_->::slg::protocol::AllianceContributeInfoDTO::Clear();
  clear_has_info();
}
inline const ::slg::protocol::AllianceContributeInfoDTO& AllianceDonationPush::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::slg::protocol::AllianceContributeInfoDTO* AllianceDonationPush::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::slg::protocol::AllianceContributeInfoDTO;
  return info_;
}
inline ::slg::protocol::AllianceContributeInfoDTO* AllianceDonationPush::release_info() {
  clear_has_info();
  ::slg::protocol::AllianceContributeInfoDTO* temp = info_;
  info_ = NULL;
  return temp;
}
inline void AllianceDonationPush::set_allocated_info(::slg::protocol::AllianceContributeInfoDTO* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// AllianceWelfarePush

// required int32 canReceiveTimes = 1;
inline bool AllianceWelfarePush::has_canreceivetimes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllianceWelfarePush::set_has_canreceivetimes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllianceWelfarePush::clear_has_canreceivetimes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllianceWelfarePush::clear_canreceivetimes() {
  canreceivetimes_ = 0;
  clear_has_canreceivetimes();
}
inline ::google::protobuf::int32 AllianceWelfarePush::canreceivetimes() const {
  return canreceivetimes_;
}
inline void AllianceWelfarePush::set_canreceivetimes(::google::protobuf::int32 value) {
  set_has_canreceivetimes();
  canreceivetimes_ = value;
}

// -------------------------------------------------------------------

// AllianceNewsRemovePush

// required int32 newsId = 1;
inline bool AllianceNewsRemovePush::has_newsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllianceNewsRemovePush::set_has_newsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllianceNewsRemovePush::clear_has_newsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllianceNewsRemovePush::clear_newsid() {
  newsid_ = 0;
  clear_has_newsid();
}
inline ::google::protobuf::int32 AllianceNewsRemovePush::newsid() const {
  return newsid_;
}
inline void AllianceNewsRemovePush::set_newsid(::google::protobuf::int32 value) {
  set_has_newsid();
  newsid_ = value;
}

// -------------------------------------------------------------------

// AllianceInvitePush

// repeated .slg.protocol.AllianceInviteDTO inviteList = 1;
inline int AllianceInvitePush::invitelist_size() const {
  return invitelist_.size();
}
inline void AllianceInvitePush::clear_invitelist() {
  invitelist_.Clear();
}
inline const ::slg::protocol::AllianceInviteDTO& AllianceInvitePush::invitelist(int index) const {
  return invitelist_.Get(index);
}
inline ::slg::protocol::AllianceInviteDTO* AllianceInvitePush::mutable_invitelist(int index) {
  return invitelist_.Mutable(index);
}
inline ::slg::protocol::AllianceInviteDTO* AllianceInvitePush::add_invitelist() {
  return invitelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceInviteDTO >&
AllianceInvitePush::invitelist() const {
  return invitelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceInviteDTO >*
AllianceInvitePush::mutable_invitelist() {
  return &invitelist_;
}

// -------------------------------------------------------------------

// HasSendHelpTimesPush

// repeated int32 timerIds = 1;
inline int HasSendHelpTimesPush::timerids_size() const {
  return timerids_.size();
}
inline void HasSendHelpTimesPush::clear_timerids() {
  timerids_.Clear();
}
inline ::google::protobuf::int32 HasSendHelpTimesPush::timerids(int index) const {
  return timerids_.Get(index);
}
inline void HasSendHelpTimesPush::set_timerids(int index, ::google::protobuf::int32 value) {
  timerids_.Set(index, value);
}
inline void HasSendHelpTimesPush::add_timerids(::google::protobuf::int32 value) {
  timerids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HasSendHelpTimesPush::timerids() const {
  return timerids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HasSendHelpTimesPush::mutable_timerids() {
  return &timerids_;
}

// -------------------------------------------------------------------

// AllianceScorePush

// required int32 score = 1;
inline bool AllianceScorePush::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllianceScorePush::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllianceScorePush::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllianceScorePush::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 AllianceScorePush::score() const {
  return score_;
}
inline void AllianceScorePush::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// MyVotePush

// required int32 voteType = 1;
inline bool MyVotePush::has_votetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MyVotePush::set_has_votetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MyVotePush::clear_has_votetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MyVotePush::clear_votetype() {
  votetype_ = 0;
  clear_has_votetype();
}
inline ::google::protobuf::int32 MyVotePush::votetype() const {
  return votetype_;
}
inline void MyVotePush::set_votetype(::google::protobuf::int32 value) {
  set_has_votetype();
  votetype_ = value;
}

// -------------------------------------------------------------------

// AllianceVoteInfoPush

// repeated .slg.protocol.AllianceTechVoteDTO votes = 1;
inline int AllianceVoteInfoPush::votes_size() const {
  return votes_.size();
}
inline void AllianceVoteInfoPush::clear_votes() {
  votes_.Clear();
}
inline const ::slg::protocol::AllianceTechVoteDTO& AllianceVoteInfoPush::votes(int index) const {
  return votes_.Get(index);
}
inline ::slg::protocol::AllianceTechVoteDTO* AllianceVoteInfoPush::mutable_votes(int index) {
  return votes_.Mutable(index);
}
inline ::slg::protocol::AllianceTechVoteDTO* AllianceVoteInfoPush::add_votes() {
  return votes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceTechVoteDTO >&
AllianceVoteInfoPush::votes() const {
  return votes_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceTechVoteDTO >*
AllianceVoteInfoPush::mutable_votes() {
  return &votes_;
}

// optional bool isClear = 2;
inline bool AllianceVoteInfoPush::has_isclear() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllianceVoteInfoPush::set_has_isclear() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllianceVoteInfoPush::clear_has_isclear() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllianceVoteInfoPush::clear_isclear() {
  isclear_ = false;
  clear_has_isclear();
}
inline bool AllianceVoteInfoPush::isclear() const {
  return isclear_;
}
inline void AllianceVoteInfoPush::set_isclear(bool value) {
  set_has_isclear();
  isclear_ = value;
}

// -------------------------------------------------------------------

// AllianceChangePush

// optional string allianceName = 1;
inline bool AllianceChangePush::has_alliancename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllianceChangePush::set_has_alliancename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllianceChangePush::clear_has_alliancename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllianceChangePush::clear_alliancename() {
  if (alliancename_ != &::google::protobuf::internal::kEmptyString) {
    alliancename_->clear();
  }
  clear_has_alliancename();
}
inline const ::std::string& AllianceChangePush::alliancename() const {
  return *alliancename_;
}
inline void AllianceChangePush::set_alliancename(const ::std::string& value) {
  set_has_alliancename();
  if (alliancename_ == &::google::protobuf::internal::kEmptyString) {
    alliancename_ = new ::std::string;
  }
  alliancename_->assign(value);
}
inline void AllianceChangePush::set_alliancename(const char* value) {
  set_has_alliancename();
  if (alliancename_ == &::google::protobuf::internal::kEmptyString) {
    alliancename_ = new ::std::string;
  }
  alliancename_->assign(value);
}
inline void AllianceChangePush::set_alliancename(const char* value, size_t size) {
  set_has_alliancename();
  if (alliancename_ == &::google::protobuf::internal::kEmptyString) {
    alliancename_ = new ::std::string;
  }
  alliancename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllianceChangePush::mutable_alliancename() {
  set_has_alliancename();
  if (alliancename_ == &::google::protobuf::internal::kEmptyString) {
    alliancename_ = new ::std::string;
  }
  return alliancename_;
}
inline ::std::string* AllianceChangePush::release_alliancename() {
  clear_has_alliancename();
  if (alliancename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = alliancename_;
    alliancename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AllianceChangePush::set_allocated_alliancename(::std::string* alliancename) {
  if (alliancename_ != &::google::protobuf::internal::kEmptyString) {
    delete alliancename_;
  }
  if (alliancename) {
    set_has_alliancename();
    alliancename_ = alliancename;
  } else {
    clear_has_alliancename();
    alliancename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 flag = 2;
inline bool AllianceChangePush::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllianceChangePush::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllianceChangePush::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllianceChangePush::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 AllianceChangePush::flag() const {
  return flag_;
}
inline void AllianceChangePush::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// optional string declaration = 3;
inline bool AllianceChangePush::has_declaration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AllianceChangePush::set_has_declaration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AllianceChangePush::clear_has_declaration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AllianceChangePush::clear_declaration() {
  if (declaration_ != &::google::protobuf::internal::kEmptyString) {
    declaration_->clear();
  }
  clear_has_declaration();
}
inline const ::std::string& AllianceChangePush::declaration() const {
  return *declaration_;
}
inline void AllianceChangePush::set_declaration(const ::std::string& value) {
  set_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    declaration_ = new ::std::string;
  }
  declaration_->assign(value);
}
inline void AllianceChangePush::set_declaration(const char* value) {
  set_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    declaration_ = new ::std::string;
  }
  declaration_->assign(value);
}
inline void AllianceChangePush::set_declaration(const char* value, size_t size) {
  set_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    declaration_ = new ::std::string;
  }
  declaration_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllianceChangePush::mutable_declaration() {
  set_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    declaration_ = new ::std::string;
  }
  return declaration_;
}
inline ::std::string* AllianceChangePush::release_declaration() {
  clear_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = declaration_;
    declaration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AllianceChangePush::set_allocated_declaration(::std::string* declaration) {
  if (declaration_ != &::google::protobuf::internal::kEmptyString) {
    delete declaration_;
  }
  if (declaration) {
    set_has_declaration();
    declaration_ = declaration;
  } else {
    clear_has_declaration();
    declaration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool isPublic = 4;
inline bool AllianceChangePush::has_ispublic() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AllianceChangePush::set_has_ispublic() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AllianceChangePush::clear_has_ispublic() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AllianceChangePush::clear_ispublic() {
  ispublic_ = false;
  clear_has_ispublic();
}
inline bool AllianceChangePush::ispublic() const {
  return ispublic_;
}
inline void AllianceChangePush::set_ispublic(bool value) {
  set_has_ispublic();
  ispublic_ = value;
}

// optional int32 joinPower = 5;
inline bool AllianceChangePush::has_joinpower() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AllianceChangePush::set_has_joinpower() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AllianceChangePush::clear_has_joinpower() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AllianceChangePush::clear_joinpower() {
  joinpower_ = 0;
  clear_has_joinpower();
}
inline ::google::protobuf::int32 AllianceChangePush::joinpower() const {
  return joinpower_;
}
inline void AllianceChangePush::set_joinpower(::google::protobuf::int32 value) {
  set_has_joinpower();
  joinpower_ = value;
}

// optional string language = 6;
inline bool AllianceChangePush::has_language() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AllianceChangePush::set_has_language() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AllianceChangePush::clear_has_language() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AllianceChangePush::clear_language() {
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    language_->clear();
  }
  clear_has_language();
}
inline const ::std::string& AllianceChangePush::language() const {
  return *language_;
}
inline void AllianceChangePush::set_language(const ::std::string& value) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  language_->assign(value);
}
inline void AllianceChangePush::set_language(const char* value) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  language_->assign(value);
}
inline void AllianceChangePush::set_language(const char* value, size_t size) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  language_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllianceChangePush::mutable_language() {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  return language_;
}
inline ::std::string* AllianceChangePush::release_language() {
  clear_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = language_;
    language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AllianceChangePush::set_allocated_language(::std::string* language) {
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    delete language_;
  }
  if (language) {
    set_has_language();
    language_ = language;
  } else {
    clear_has_language();
    language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string shortName = 7;
inline bool AllianceChangePush::has_shortname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AllianceChangePush::set_has_shortname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AllianceChangePush::clear_has_shortname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AllianceChangePush::clear_shortname() {
  if (shortname_ != &::google::protobuf::internal::kEmptyString) {
    shortname_->clear();
  }
  clear_has_shortname();
}
inline const ::std::string& AllianceChangePush::shortname() const {
  return *shortname_;
}
inline void AllianceChangePush::set_shortname(const ::std::string& value) {
  set_has_shortname();
  if (shortname_ == &::google::protobuf::internal::kEmptyString) {
    shortname_ = new ::std::string;
  }
  shortname_->assign(value);
}
inline void AllianceChangePush::set_shortname(const char* value) {
  set_has_shortname();
  if (shortname_ == &::google::protobuf::internal::kEmptyString) {
    shortname_ = new ::std::string;
  }
  shortname_->assign(value);
}
inline void AllianceChangePush::set_shortname(const char* value, size_t size) {
  set_has_shortname();
  if (shortname_ == &::google::protobuf::internal::kEmptyString) {
    shortname_ = new ::std::string;
  }
  shortname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllianceChangePush::mutable_shortname() {
  set_has_shortname();
  if (shortname_ == &::google::protobuf::internal::kEmptyString) {
    shortname_ = new ::std::string;
  }
  return shortname_;
}
inline ::std::string* AllianceChangePush::release_shortname() {
  clear_has_shortname();
  if (shortname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = shortname_;
    shortname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AllianceChangePush::set_allocated_shortname(::std::string* shortname) {
  if (shortname_ != &::google::protobuf::internal::kEmptyString) {
    delete shortname_;
  }
  if (shortname) {
    set_has_shortname();
    shortname_ = shortname;
  } else {
    clear_has_shortname();
    shortname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 honor = 8;
inline bool AllianceChangePush::has_honor() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AllianceChangePush::set_has_honor() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AllianceChangePush::clear_has_honor() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AllianceChangePush::clear_honor() {
  honor_ = 0;
  clear_has_honor();
}
inline ::google::protobuf::int32 AllianceChangePush::honor() const {
  return honor_;
}
inline void AllianceChangePush::set_honor(::google::protobuf::int32 value) {
  set_has_honor();
  honor_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace slg

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::slg::protocol::AllianceCommandId>() {
  return ::slg::protocol::AllianceCommandId_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::slg::protocol::AlliancePushId>() {
  return ::slg::protocol::AlliancePushId_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_alliance_2eproto__INCLUDED
