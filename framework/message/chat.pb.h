// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#ifndef PROTOBUF_chat_2eproto__INCLUDED
#define PROTOBUF_chat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace slg {
namespace protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_chat_2eproto();
void protobuf_AssignDesc_chat_2eproto();
void protobuf_ShutdownFile_chat_2eproto();

class ChatContent;
class ChatPlayer;
class ChatMessage;
class ChatGroupCreateRequest;
class ChatGroupCreateResponse;
class ChatGroupLeaveRequest;
class ChatSendRequest;
class ChatSendResponse;
class ChatGroupSnapshot;
class ChatPullRequest;
class ChatMessagePush;
class ChatGroup;
class ChatGroupPush;

enum ChatContentType {
  CHAT_CONTENT_TEXT = 1
};
bool ChatContentType_IsValid(int value);
const ChatContentType ChatContentType_MIN = CHAT_CONTENT_TEXT;
const ChatContentType ChatContentType_MAX = CHAT_CONTENT_TEXT;
const int ChatContentType_ARRAYSIZE = ChatContentType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChatContentType_descriptor();
inline const ::std::string& ChatContentType_Name(ChatContentType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChatContentType_descriptor(), value);
}
inline bool ChatContentType_Parse(
    const ::std::string& name, ChatContentType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatContentType>(
    ChatContentType_descriptor(), name, value);
}
enum ChatCommandId {
  CHAT_SEND = 2201,
  CHAT_GROUP_CREATE = 2202,
  CHAT_GROUP_LEAVE = 2203,
  CHAT_PULL = 2204
};
bool ChatCommandId_IsValid(int value);
const ChatCommandId ChatCommandId_MIN = CHAT_SEND;
const ChatCommandId ChatCommandId_MAX = CHAT_PULL;
const int ChatCommandId_ARRAYSIZE = ChatCommandId_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChatCommandId_descriptor();
inline const ::std::string& ChatCommandId_Name(ChatCommandId value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChatCommandId_descriptor(), value);
}
inline bool ChatCommandId_Parse(
    const ::std::string& name, ChatCommandId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatCommandId>(
    ChatCommandId_descriptor(), name, value);
}
enum ChatChannel {
  CHAT_P2P = 1,
  CHAT_GROUP = 2,
  CHAT_ALLIANCE = 3,
  CHAT_WORLD = 4
};
bool ChatChannel_IsValid(int value);
const ChatChannel ChatChannel_MIN = CHAT_P2P;
const ChatChannel ChatChannel_MAX = CHAT_WORLD;
const int ChatChannel_ARRAYSIZE = ChatChannel_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChatChannel_descriptor();
inline const ::std::string& ChatChannel_Name(ChatChannel value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChatChannel_descriptor(), value);
}
inline bool ChatChannel_Parse(
    const ::std::string& name, ChatChannel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatChannel>(
    ChatChannel_descriptor(), name, value);
}
enum ChatPushId {
  CHAT_MESSAGE_PUSH = 52201,
  CHAT_GROUP_PUSH = 52202
};
bool ChatPushId_IsValid(int value);
const ChatPushId ChatPushId_MIN = CHAT_MESSAGE_PUSH;
const ChatPushId ChatPushId_MAX = CHAT_GROUP_PUSH;
const int ChatPushId_ARRAYSIZE = ChatPushId_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChatPushId_descriptor();
inline const ::std::string& ChatPushId_Name(ChatPushId value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChatPushId_descriptor(), value);
}
inline bool ChatPushId_Parse(
    const ::std::string& name, ChatPushId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatPushId>(
    ChatPushId_descriptor(), name, value);
}
// ===================================================================

class ChatContent : public ::google::protobuf::Message {
 public:
  ChatContent();
  virtual ~ChatContent();

  ChatContent(const ChatContent& from);

  inline ChatContent& operator=(const ChatContent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatContent& default_instance();

  void Swap(ChatContent* other);

  // implements Message ----------------------------------------------

  ChatContent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatContent& from);
  void MergeFrom(const ChatContent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .slg.protocol.ChatContentType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::slg::protocol::ChatContentType type() const;
  inline void set_type(::slg::protocol::ChatContentType value);

  // optional string text = 10;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 10;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:slg.protocol.ChatContent)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* text_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static ChatContent* default_instance_;
};
// -------------------------------------------------------------------

class ChatPlayer : public ::google::protobuf::Message {
 public:
  ChatPlayer();
  virtual ~ChatPlayer();

  ChatPlayer(const ChatPlayer& from);

  inline ChatPlayer& operator=(const ChatPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatPlayer& default_instance();

  void Swap(ChatPlayer* other);

  // implements Message ----------------------------------------------

  ChatPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatPlayer& from);
  void MergeFrom(const ChatPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string icon = 3;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 3;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // optional string allianceShortName = 4;
  inline bool has_allianceshortname() const;
  inline void clear_allianceshortname();
  static const int kAllianceShortNameFieldNumber = 4;
  inline const ::std::string& allianceshortname() const;
  inline void set_allianceshortname(const ::std::string& value);
  inline void set_allianceshortname(const char* value);
  inline void set_allianceshortname(const char* value, size_t size);
  inline ::std::string* mutable_allianceshortname();
  inline ::std::string* release_allianceshortname();
  inline void set_allocated_allianceshortname(::std::string* allianceshortname);

  // optional .slg.protocol.VipDTO vip = 5;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 5;
  inline const ::slg::protocol::VipDTO& vip() const;
  inline ::slg::protocol::VipDTO* mutable_vip();
  inline ::slg::protocol::VipDTO* release_vip();
  inline void set_allocated_vip(::slg::protocol::VipDTO* vip);

  // optional bool valid = 6;
  inline bool has_valid() const;
  inline void clear_valid();
  static const int kValidFieldNumber = 6;
  inline bool valid() const;
  inline void set_valid(bool value);

  // @@protoc_insertion_point(class_scope:slg.protocol.ChatPlayer)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_allianceshortname();
  inline void clear_has_allianceshortname();
  inline void set_has_vip();
  inline void clear_has_vip();
  inline void set_has_valid();
  inline void clear_has_valid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 playerid_;
  ::std::string* name_;
  ::std::string* icon_;
  ::std::string* allianceshortname_;
  ::slg::protocol::VipDTO* vip_;
  bool valid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static ChatPlayer* default_instance_;
};
// -------------------------------------------------------------------

class ChatMessage : public ::google::protobuf::Message {
 public:
  ChatMessage();
  virtual ~ChatMessage();

  ChatMessage(const ChatMessage& from);

  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatMessage& default_instance();

  void Swap(ChatMessage* other);

  // implements Message ----------------------------------------------

  ChatMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatMessage& from);
  void MergeFrom(const ChatMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 messageId = 1;
  inline bool has_messageid() const;
  inline void clear_messageid();
  static const int kMessageIdFieldNumber = 1;
  inline ::google::protobuf::int64 messageid() const;
  inline void set_messageid(::google::protobuf::int64 value);

  // required .slg.protocol.ChatContent content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::slg::protocol::ChatContent& content() const;
  inline ::slg::protocol::ChatContent* mutable_content();
  inline ::slg::protocol::ChatContent* release_content();
  inline void set_allocated_content(::slg::protocol::ChatContent* content);

  // required int32 timestamp = 3;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  inline ::google::protobuf::int32 timestamp() const;
  inline void set_timestamp(::google::protobuf::int32 value);

  // required int64 senderId = 10;
  inline bool has_senderid() const;
  inline void clear_senderid();
  static const int kSenderIdFieldNumber = 10;
  inline ::google::protobuf::int64 senderid() const;
  inline void set_senderid(::google::protobuf::int64 value);

  // optional .slg.protocol.ChatPlayer sender = 11;
  inline bool has_sender() const;
  inline void clear_sender();
  static const int kSenderFieldNumber = 11;
  inline const ::slg::protocol::ChatPlayer& sender() const;
  inline ::slg::protocol::ChatPlayer* mutable_sender();
  inline ::slg::protocol::ChatPlayer* release_sender();
  inline void set_allocated_sender(::slg::protocol::ChatPlayer* sender);

  // @@protoc_insertion_point(class_scope:slg.protocol.ChatMessage)
 private:
  inline void set_has_messageid();
  inline void clear_has_messageid();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_senderid();
  inline void clear_has_senderid();
  inline void set_has_sender();
  inline void clear_has_sender();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 messageid_;
  ::slg::protocol::ChatContent* content_;
  ::google::protobuf::int64 senderid_;
  ::slg::protocol::ChatPlayer* sender_;
  ::google::protobuf::int32 timestamp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static ChatMessage* default_instance_;
};
// -------------------------------------------------------------------

class ChatGroupCreateRequest : public ::google::protobuf::Message {
 public:
  ChatGroupCreateRequest();
  virtual ~ChatGroupCreateRequest();

  ChatGroupCreateRequest(const ChatGroupCreateRequest& from);

  inline ChatGroupCreateRequest& operator=(const ChatGroupCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatGroupCreateRequest& default_instance();

  void Swap(ChatGroupCreateRequest* other);

  // implements Message ----------------------------------------------

  ChatGroupCreateRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatGroupCreateRequest& from);
  void MergeFrom(const ChatGroupCreateRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 playerIds = 1;
  inline int playerids_size() const;
  inline void clear_playerids();
  static const int kPlayerIdsFieldNumber = 1;
  inline ::google::protobuf::int64 playerids(int index) const;
  inline void set_playerids(int index, ::google::protobuf::int64 value);
  inline void add_playerids(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      playerids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_playerids();

  // @@protoc_insertion_point(class_scope:slg.protocol.ChatGroupCreateRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > playerids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static ChatGroupCreateRequest* default_instance_;
};
// -------------------------------------------------------------------

class ChatGroupCreateResponse : public ::google::protobuf::Message {
 public:
  ChatGroupCreateResponse();
  virtual ~ChatGroupCreateResponse();

  ChatGroupCreateResponse(const ChatGroupCreateResponse& from);

  inline ChatGroupCreateResponse& operator=(const ChatGroupCreateResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatGroupCreateResponse& default_instance();

  void Swap(ChatGroupCreateResponse* other);

  // implements Message ----------------------------------------------

  ChatGroupCreateResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatGroupCreateResponse& from);
  void MergeFrom(const ChatGroupCreateResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 groupId = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::int64 groupid() const;
  inline void set_groupid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.ChatGroupCreateResponse)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 groupid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static ChatGroupCreateResponse* default_instance_;
};
// -------------------------------------------------------------------

class ChatGroupLeaveRequest : public ::google::protobuf::Message {
 public:
  ChatGroupLeaveRequest();
  virtual ~ChatGroupLeaveRequest();

  ChatGroupLeaveRequest(const ChatGroupLeaveRequest& from);

  inline ChatGroupLeaveRequest& operator=(const ChatGroupLeaveRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatGroupLeaveRequest& default_instance();

  void Swap(ChatGroupLeaveRequest* other);

  // implements Message ----------------------------------------------

  ChatGroupLeaveRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatGroupLeaveRequest& from);
  void MergeFrom(const ChatGroupLeaveRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 groupId = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::int64 groupid() const;
  inline void set_groupid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.ChatGroupLeaveRequest)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 groupid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static ChatGroupLeaveRequest* default_instance_;
};
// -------------------------------------------------------------------

class ChatSendRequest : public ::google::protobuf::Message {
 public:
  ChatSendRequest();
  virtual ~ChatSendRequest();

  ChatSendRequest(const ChatSendRequest& from);

  inline ChatSendRequest& operator=(const ChatSendRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatSendRequest& default_instance();

  void Swap(ChatSendRequest* other);

  // implements Message ----------------------------------------------

  ChatSendRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatSendRequest& from);
  void MergeFrom(const ChatSendRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .slg.protocol.ChatChannel channel = 1;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 1;
  inline ::slg::protocol::ChatChannel channel() const;
  inline void set_channel(::slg::protocol::ChatChannel value);

  // required .slg.protocol.ChatContent content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::slg::protocol::ChatContent& content() const;
  inline ::slg::protocol::ChatContent* mutable_content();
  inline ::slg::protocol::ChatContent* release_content();
  inline void set_allocated_content(::slg::protocol::ChatContent* content);

  // optional int64 targetId = 3;
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetIdFieldNumber = 3;
  inline ::google::protobuf::int64 targetid() const;
  inline void set_targetid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.ChatSendRequest)
 private:
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_targetid();
  inline void clear_has_targetid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::slg::protocol::ChatContent* content_;
  ::google::protobuf::int64 targetid_;
  int channel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static ChatSendRequest* default_instance_;
};
// -------------------------------------------------------------------

class ChatSendResponse : public ::google::protobuf::Message {
 public:
  ChatSendResponse();
  virtual ~ChatSendResponse();

  ChatSendResponse(const ChatSendResponse& from);

  inline ChatSendResponse& operator=(const ChatSendResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatSendResponse& default_instance();

  void Swap(ChatSendResponse* other);

  // implements Message ----------------------------------------------

  ChatSendResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatSendResponse& from);
  void MergeFrom(const ChatSendResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 messageId = 1;
  inline bool has_messageid() const;
  inline void clear_messageid();
  static const int kMessageIdFieldNumber = 1;
  inline ::google::protobuf::int64 messageid() const;
  inline void set_messageid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.ChatSendResponse)
 private:
  inline void set_has_messageid();
  inline void clear_has_messageid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 messageid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static ChatSendResponse* default_instance_;
};
// -------------------------------------------------------------------

class ChatGroupSnapshot : public ::google::protobuf::Message {
 public:
  ChatGroupSnapshot();
  virtual ~ChatGroupSnapshot();

  ChatGroupSnapshot(const ChatGroupSnapshot& from);

  inline ChatGroupSnapshot& operator=(const ChatGroupSnapshot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatGroupSnapshot& default_instance();

  void Swap(ChatGroupSnapshot* other);

  // implements Message ----------------------------------------------

  ChatGroupSnapshot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatGroupSnapshot& from);
  void MergeFrom(const ChatGroupSnapshot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 groupId = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::int64 groupid() const;
  inline void set_groupid(::google::protobuf::int64 value);

  // required int64 messageId = 2;
  inline bool has_messageid() const;
  inline void clear_messageid();
  static const int kMessageIdFieldNumber = 2;
  inline ::google::protobuf::int64 messageid() const;
  inline void set_messageid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.ChatGroupSnapshot)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_messageid();
  inline void clear_has_messageid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 groupid_;
  ::google::protobuf::int64 messageid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static ChatGroupSnapshot* default_instance_;
};
// -------------------------------------------------------------------

class ChatPullRequest : public ::google::protobuf::Message {
 public:
  ChatPullRequest();
  virtual ~ChatPullRequest();

  ChatPullRequest(const ChatPullRequest& from);

  inline ChatPullRequest& operator=(const ChatPullRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatPullRequest& default_instance();

  void Swap(ChatPullRequest* other);

  // implements Message ----------------------------------------------

  ChatPullRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatPullRequest& from);
  void MergeFrom(const ChatPullRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .slg.protocol.ChatGroupSnapshot snapshots = 1;
  inline int snapshots_size() const;
  inline void clear_snapshots();
  static const int kSnapshotsFieldNumber = 1;
  inline const ::slg::protocol::ChatGroupSnapshot& snapshots(int index) const;
  inline ::slg::protocol::ChatGroupSnapshot* mutable_snapshots(int index);
  inline ::slg::protocol::ChatGroupSnapshot* add_snapshots();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::ChatGroupSnapshot >&
      snapshots() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::ChatGroupSnapshot >*
      mutable_snapshots();

  // @@protoc_insertion_point(class_scope:slg.protocol.ChatPullRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::slg::protocol::ChatGroupSnapshot > snapshots_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static ChatPullRequest* default_instance_;
};
// -------------------------------------------------------------------

class ChatMessagePush : public ::google::protobuf::Message {
 public:
  ChatMessagePush();
  virtual ~ChatMessagePush();

  ChatMessagePush(const ChatMessagePush& from);

  inline ChatMessagePush& operator=(const ChatMessagePush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatMessagePush& default_instance();

  void Swap(ChatMessagePush* other);

  // implements Message ----------------------------------------------

  ChatMessagePush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatMessagePush& from);
  void MergeFrom(const ChatMessagePush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .slg.protocol.ChatChannel channel = 1;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 1;
  inline ::slg::protocol::ChatChannel channel() const;
  inline void set_channel(::slg::protocol::ChatChannel value);

  // repeated .slg.protocol.ChatMessage messages = 2;
  inline int messages_size() const;
  inline void clear_messages();
  static const int kMessagesFieldNumber = 2;
  inline const ::slg::protocol::ChatMessage& messages(int index) const;
  inline ::slg::protocol::ChatMessage* mutable_messages(int index);
  inline ::slg::protocol::ChatMessage* add_messages();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::ChatMessage >&
      messages() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::ChatMessage >*
      mutable_messages();

  // optional int64 groupId = 3;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIdFieldNumber = 3;
  inline ::google::protobuf::int64 groupid() const;
  inline void set_groupid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.ChatMessagePush)
 private:
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::slg::protocol::ChatMessage > messages_;
  ::google::protobuf::int64 groupid_;
  int channel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static ChatMessagePush* default_instance_;
};
// -------------------------------------------------------------------

class ChatGroup : public ::google::protobuf::Message {
 public:
  ChatGroup();
  virtual ~ChatGroup();

  ChatGroup(const ChatGroup& from);

  inline ChatGroup& operator=(const ChatGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatGroup& default_instance();

  void Swap(ChatGroup* other);

  // implements Message ----------------------------------------------

  ChatGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatGroup& from);
  void MergeFrom(const ChatGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 groupId = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::int64 groupid() const;
  inline void set_groupid(::google::protobuf::int64 value);

  // optional int64 ownerId = 2;
  inline bool has_ownerid() const;
  inline void clear_ownerid();
  static const int kOwnerIdFieldNumber = 2;
  inline ::google::protobuf::int64 ownerid() const;
  inline void set_ownerid(::google::protobuf::int64 value);

  // repeated .slg.protocol.ChatPlayer members = 3;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 3;
  inline const ::slg::protocol::ChatPlayer& members(int index) const;
  inline ::slg::protocol::ChatPlayer* mutable_members(int index);
  inline ::slg::protocol::ChatPlayer* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::ChatPlayer >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::ChatPlayer >*
      mutable_members();

  // required bool p2p = 4;
  inline bool has_p2p() const;
  inline void clear_p2p();
  static const int kP2PFieldNumber = 4;
  inline bool p2p() const;
  inline void set_p2p(bool value);

  // @@protoc_insertion_point(class_scope:slg.protocol.ChatGroup)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_ownerid();
  inline void clear_has_ownerid();
  inline void set_has_p2p();
  inline void clear_has_p2p();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 groupid_;
  ::google::protobuf::int64 ownerid_;
  ::google::protobuf::RepeatedPtrField< ::slg::protocol::ChatPlayer > members_;
  bool p2p_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static ChatGroup* default_instance_;
};
// -------------------------------------------------------------------

class ChatGroupPush : public ::google::protobuf::Message {
 public:
  ChatGroupPush();
  virtual ~ChatGroupPush();

  ChatGroupPush(const ChatGroupPush& from);

  inline ChatGroupPush& operator=(const ChatGroupPush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatGroupPush& default_instance();

  void Swap(ChatGroupPush* other);

  // implements Message ----------------------------------------------

  ChatGroupPush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatGroupPush& from);
  void MergeFrom(const ChatGroupPush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .slg.protocol.ChatGroup groups = 1;
  inline int groups_size() const;
  inline void clear_groups();
  static const int kGroupsFieldNumber = 1;
  inline const ::slg::protocol::ChatGroup& groups(int index) const;
  inline ::slg::protocol::ChatGroup* mutable_groups(int index);
  inline ::slg::protocol::ChatGroup* add_groups();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::ChatGroup >&
      groups() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::ChatGroup >*
      mutable_groups();

  // @@protoc_insertion_point(class_scope:slg.protocol.ChatGroupPush)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::slg::protocol::ChatGroup > groups_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static ChatGroupPush* default_instance_;
};
// ===================================================================


// ===================================================================

// ChatContent

// required .slg.protocol.ChatContentType type = 1;
inline bool ChatContent::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatContent::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatContent::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatContent::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::slg::protocol::ChatContentType ChatContent::type() const {
  return static_cast< ::slg::protocol::ChatContentType >(type_);
}
inline void ChatContent::set_type(::slg::protocol::ChatContentType value) {
  assert(::slg::protocol::ChatContentType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string text = 10;
inline bool ChatContent::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatContent::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatContent::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatContent::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& ChatContent::text() const {
  return *text_;
}
inline void ChatContent::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void ChatContent::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void ChatContent::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatContent::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* ChatContent::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChatContent::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ChatPlayer

// required int64 playerId = 1;
inline bool ChatPlayer::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatPlayer::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatPlayer::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatPlayer::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 ChatPlayer::playerid() const {
  return playerid_;
}
inline void ChatPlayer::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// required string name = 2;
inline bool ChatPlayer::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatPlayer::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatPlayer::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatPlayer::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ChatPlayer::name() const {
  return *name_;
}
inline void ChatPlayer::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ChatPlayer::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ChatPlayer::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatPlayer::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ChatPlayer::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChatPlayer::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string icon = 3;
inline bool ChatPlayer::has_icon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatPlayer::set_has_icon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatPlayer::clear_has_icon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatPlayer::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& ChatPlayer::icon() const {
  return *icon_;
}
inline void ChatPlayer::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void ChatPlayer::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void ChatPlayer::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatPlayer::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* ChatPlayer::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChatPlayer::set_allocated_icon(::std::string* icon) {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string allianceShortName = 4;
inline bool ChatPlayer::has_allianceshortname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatPlayer::set_has_allianceshortname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatPlayer::clear_has_allianceshortname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatPlayer::clear_allianceshortname() {
  if (allianceshortname_ != &::google::protobuf::internal::kEmptyString) {
    allianceshortname_->clear();
  }
  clear_has_allianceshortname();
}
inline const ::std::string& ChatPlayer::allianceshortname() const {
  return *allianceshortname_;
}
inline void ChatPlayer::set_allianceshortname(const ::std::string& value) {
  set_has_allianceshortname();
  if (allianceshortname_ == &::google::protobuf::internal::kEmptyString) {
    allianceshortname_ = new ::std::string;
  }
  allianceshortname_->assign(value);
}
inline void ChatPlayer::set_allianceshortname(const char* value) {
  set_has_allianceshortname();
  if (allianceshortname_ == &::google::protobuf::internal::kEmptyString) {
    allianceshortname_ = new ::std::string;
  }
  allianceshortname_->assign(value);
}
inline void ChatPlayer::set_allianceshortname(const char* value, size_t size) {
  set_has_allianceshortname();
  if (allianceshortname_ == &::google::protobuf::internal::kEmptyString) {
    allianceshortname_ = new ::std::string;
  }
  allianceshortname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatPlayer::mutable_allianceshortname() {
  set_has_allianceshortname();
  if (allianceshortname_ == &::google::protobuf::internal::kEmptyString) {
    allianceshortname_ = new ::std::string;
  }
  return allianceshortname_;
}
inline ::std::string* ChatPlayer::release_allianceshortname() {
  clear_has_allianceshortname();
  if (allianceshortname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = allianceshortname_;
    allianceshortname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChatPlayer::set_allocated_allianceshortname(::std::string* allianceshortname) {
  if (allianceshortname_ != &::google::protobuf::internal::kEmptyString) {
    delete allianceshortname_;
  }
  if (allianceshortname) {
    set_has_allianceshortname();
    allianceshortname_ = allianceshortname;
  } else {
    clear_has_allianceshortname();
    allianceshortname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .slg.protocol.VipDTO vip = 5;
inline bool ChatPlayer::has_vip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChatPlayer::set_has_vip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChatPlayer::clear_has_vip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChatPlayer::clear_vip() {
  if (vip_ != NULL) vip_->::slg::protocol::VipDTO::Clear();
  clear_has_vip();
}
inline const ::slg::protocol::VipDTO& ChatPlayer::vip() const {
  return vip_ != NULL ? *vip_ : *default_instance_->vip_;
}
inline ::slg::protocol::VipDTO* ChatPlayer::mutable_vip() {
  set_has_vip();
  if (vip_ == NULL) vip_ = new ::slg::protocol::VipDTO;
  return vip_;
}
inline ::slg::protocol::VipDTO* ChatPlayer::release_vip() {
  clear_has_vip();
  ::slg::protocol::VipDTO* temp = vip_;
  vip_ = NULL;
  return temp;
}
inline void ChatPlayer::set_allocated_vip(::slg::protocol::VipDTO* vip) {
  delete vip_;
  vip_ = vip;
  if (vip) {
    set_has_vip();
  } else {
    clear_has_vip();
  }
}

// optional bool valid = 6;
inline bool ChatPlayer::has_valid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChatPlayer::set_has_valid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChatPlayer::clear_has_valid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChatPlayer::clear_valid() {
  valid_ = false;
  clear_has_valid();
}
inline bool ChatPlayer::valid() const {
  return valid_;
}
inline void ChatPlayer::set_valid(bool value) {
  set_has_valid();
  valid_ = value;
}

// -------------------------------------------------------------------

// ChatMessage

// required int64 messageId = 1;
inline bool ChatMessage::has_messageid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatMessage::set_has_messageid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatMessage::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatMessage::clear_messageid() {
  messageid_ = GOOGLE_LONGLONG(0);
  clear_has_messageid();
}
inline ::google::protobuf::int64 ChatMessage::messageid() const {
  return messageid_;
}
inline void ChatMessage::set_messageid(::google::protobuf::int64 value) {
  set_has_messageid();
  messageid_ = value;
}

// required .slg.protocol.ChatContent content = 2;
inline bool ChatMessage::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatMessage::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatMessage::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatMessage::clear_content() {
  if (content_ != NULL) content_->::slg::protocol::ChatContent::Clear();
  clear_has_content();
}
inline const ::slg::protocol::ChatContent& ChatMessage::content() const {
  return content_ != NULL ? *content_ : *default_instance_->content_;
}
inline ::slg::protocol::ChatContent* ChatMessage::mutable_content() {
  set_has_content();
  if (content_ == NULL) content_ = new ::slg::protocol::ChatContent;
  return content_;
}
inline ::slg::protocol::ChatContent* ChatMessage::release_content() {
  clear_has_content();
  ::slg::protocol::ChatContent* temp = content_;
  content_ = NULL;
  return temp;
}
inline void ChatMessage::set_allocated_content(::slg::protocol::ChatContent* content) {
  delete content_;
  content_ = content;
  if (content) {
    set_has_content();
  } else {
    clear_has_content();
  }
}

// required int32 timestamp = 3;
inline bool ChatMessage::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatMessage::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatMessage::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatMessage::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 ChatMessage::timestamp() const {
  return timestamp_;
}
inline void ChatMessage::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// required int64 senderId = 10;
inline bool ChatMessage::has_senderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatMessage::set_has_senderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatMessage::clear_has_senderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatMessage::clear_senderid() {
  senderid_ = GOOGLE_LONGLONG(0);
  clear_has_senderid();
}
inline ::google::protobuf::int64 ChatMessage::senderid() const {
  return senderid_;
}
inline void ChatMessage::set_senderid(::google::protobuf::int64 value) {
  set_has_senderid();
  senderid_ = value;
}

// optional .slg.protocol.ChatPlayer sender = 11;
inline bool ChatMessage::has_sender() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChatMessage::set_has_sender() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChatMessage::clear_has_sender() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChatMessage::clear_sender() {
  if (sender_ != NULL) sender_->::slg::protocol::ChatPlayer::Clear();
  clear_has_sender();
}
inline const ::slg::protocol::ChatPlayer& ChatMessage::sender() const {
  return sender_ != NULL ? *sender_ : *default_instance_->sender_;
}
inline ::slg::protocol::ChatPlayer* ChatMessage::mutable_sender() {
  set_has_sender();
  if (sender_ == NULL) sender_ = new ::slg::protocol::ChatPlayer;
  return sender_;
}
inline ::slg::protocol::ChatPlayer* ChatMessage::release_sender() {
  clear_has_sender();
  ::slg::protocol::ChatPlayer* temp = sender_;
  sender_ = NULL;
  return temp;
}
inline void ChatMessage::set_allocated_sender(::slg::protocol::ChatPlayer* sender) {
  delete sender_;
  sender_ = sender;
  if (sender) {
    set_has_sender();
  } else {
    clear_has_sender();
  }
}

// -------------------------------------------------------------------

// ChatGroupCreateRequest

// repeated int64 playerIds = 1;
inline int ChatGroupCreateRequest::playerids_size() const {
  return playerids_.size();
}
inline void ChatGroupCreateRequest::clear_playerids() {
  playerids_.Clear();
}
inline ::google::protobuf::int64 ChatGroupCreateRequest::playerids(int index) const {
  return playerids_.Get(index);
}
inline void ChatGroupCreateRequest::set_playerids(int index, ::google::protobuf::int64 value) {
  playerids_.Set(index, value);
}
inline void ChatGroupCreateRequest::add_playerids(::google::protobuf::int64 value) {
  playerids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ChatGroupCreateRequest::playerids() const {
  return playerids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ChatGroupCreateRequest::mutable_playerids() {
  return &playerids_;
}

// -------------------------------------------------------------------

// ChatGroupCreateResponse

// required int64 groupId = 1;
inline bool ChatGroupCreateResponse::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatGroupCreateResponse::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatGroupCreateResponse::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatGroupCreateResponse::clear_groupid() {
  groupid_ = GOOGLE_LONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::int64 ChatGroupCreateResponse::groupid() const {
  return groupid_;
}
inline void ChatGroupCreateResponse::set_groupid(::google::protobuf::int64 value) {
  set_has_groupid();
  groupid_ = value;
}

// -------------------------------------------------------------------

// ChatGroupLeaveRequest

// required int64 groupId = 1;
inline bool ChatGroupLeaveRequest::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatGroupLeaveRequest::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatGroupLeaveRequest::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatGroupLeaveRequest::clear_groupid() {
  groupid_ = GOOGLE_LONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::int64 ChatGroupLeaveRequest::groupid() const {
  return groupid_;
}
inline void ChatGroupLeaveRequest::set_groupid(::google::protobuf::int64 value) {
  set_has_groupid();
  groupid_ = value;
}

// -------------------------------------------------------------------

// ChatSendRequest

// required .slg.protocol.ChatChannel channel = 1;
inline bool ChatSendRequest::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatSendRequest::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatSendRequest::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatSendRequest::clear_channel() {
  channel_ = 1;
  clear_has_channel();
}
inline ::slg::protocol::ChatChannel ChatSendRequest::channel() const {
  return static_cast< ::slg::protocol::ChatChannel >(channel_);
}
inline void ChatSendRequest::set_channel(::slg::protocol::ChatChannel value) {
  assert(::slg::protocol::ChatChannel_IsValid(value));
  set_has_channel();
  channel_ = value;
}

// required .slg.protocol.ChatContent content = 2;
inline bool ChatSendRequest::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatSendRequest::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatSendRequest::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatSendRequest::clear_content() {
  if (content_ != NULL) content_->::slg::protocol::ChatContent::Clear();
  clear_has_content();
}
inline const ::slg::protocol::ChatContent& ChatSendRequest::content() const {
  return content_ != NULL ? *content_ : *default_instance_->content_;
}
inline ::slg::protocol::ChatContent* ChatSendRequest::mutable_content() {
  set_has_content();
  if (content_ == NULL) content_ = new ::slg::protocol::ChatContent;
  return content_;
}
inline ::slg::protocol::ChatContent* ChatSendRequest::release_content() {
  clear_has_content();
  ::slg::protocol::ChatContent* temp = content_;
  content_ = NULL;
  return temp;
}
inline void ChatSendRequest::set_allocated_content(::slg::protocol::ChatContent* content) {
  delete content_;
  content_ = content;
  if (content) {
    set_has_content();
  } else {
    clear_has_content();
  }
}

// optional int64 targetId = 3;
inline bool ChatSendRequest::has_targetid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatSendRequest::set_has_targetid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatSendRequest::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatSendRequest::clear_targetid() {
  targetid_ = GOOGLE_LONGLONG(0);
  clear_has_targetid();
}
inline ::google::protobuf::int64 ChatSendRequest::targetid() const {
  return targetid_;
}
inline void ChatSendRequest::set_targetid(::google::protobuf::int64 value) {
  set_has_targetid();
  targetid_ = value;
}

// -------------------------------------------------------------------

// ChatSendResponse

// required int64 messageId = 1;
inline bool ChatSendResponse::has_messageid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatSendResponse::set_has_messageid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatSendResponse::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatSendResponse::clear_messageid() {
  messageid_ = GOOGLE_LONGLONG(0);
  clear_has_messageid();
}
inline ::google::protobuf::int64 ChatSendResponse::messageid() const {
  return messageid_;
}
inline void ChatSendResponse::set_messageid(::google::protobuf::int64 value) {
  set_has_messageid();
  messageid_ = value;
}

// -------------------------------------------------------------------

// ChatGroupSnapshot

// required int64 groupId = 1;
inline bool ChatGroupSnapshot::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatGroupSnapshot::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatGroupSnapshot::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatGroupSnapshot::clear_groupid() {
  groupid_ = GOOGLE_LONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::int64 ChatGroupSnapshot::groupid() const {
  return groupid_;
}
inline void ChatGroupSnapshot::set_groupid(::google::protobuf::int64 value) {
  set_has_groupid();
  groupid_ = value;
}

// required int64 messageId = 2;
inline bool ChatGroupSnapshot::has_messageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatGroupSnapshot::set_has_messageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatGroupSnapshot::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatGroupSnapshot::clear_messageid() {
  messageid_ = GOOGLE_LONGLONG(0);
  clear_has_messageid();
}
inline ::google::protobuf::int64 ChatGroupSnapshot::messageid() const {
  return messageid_;
}
inline void ChatGroupSnapshot::set_messageid(::google::protobuf::int64 value) {
  set_has_messageid();
  messageid_ = value;
}

// -------------------------------------------------------------------

// ChatPullRequest

// repeated .slg.protocol.ChatGroupSnapshot snapshots = 1;
inline int ChatPullRequest::snapshots_size() const {
  return snapshots_.size();
}
inline void ChatPullRequest::clear_snapshots() {
  snapshots_.Clear();
}
inline const ::slg::protocol::ChatGroupSnapshot& ChatPullRequest::snapshots(int index) const {
  return snapshots_.Get(index);
}
inline ::slg::protocol::ChatGroupSnapshot* ChatPullRequest::mutable_snapshots(int index) {
  return snapshots_.Mutable(index);
}
inline ::slg::protocol::ChatGroupSnapshot* ChatPullRequest::add_snapshots() {
  return snapshots_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::ChatGroupSnapshot >&
ChatPullRequest::snapshots() const {
  return snapshots_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::ChatGroupSnapshot >*
ChatPullRequest::mutable_snapshots() {
  return &snapshots_;
}

// -------------------------------------------------------------------

// ChatMessagePush

// required .slg.protocol.ChatChannel channel = 1;
inline bool ChatMessagePush::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatMessagePush::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatMessagePush::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatMessagePush::clear_channel() {
  channel_ = 1;
  clear_has_channel();
}
inline ::slg::protocol::ChatChannel ChatMessagePush::channel() const {
  return static_cast< ::slg::protocol::ChatChannel >(channel_);
}
inline void ChatMessagePush::set_channel(::slg::protocol::ChatChannel value) {
  assert(::slg::protocol::ChatChannel_IsValid(value));
  set_has_channel();
  channel_ = value;
}

// repeated .slg.protocol.ChatMessage messages = 2;
inline int ChatMessagePush::messages_size() const {
  return messages_.size();
}
inline void ChatMessagePush::clear_messages() {
  messages_.Clear();
}
inline const ::slg::protocol::ChatMessage& ChatMessagePush::messages(int index) const {
  return messages_.Get(index);
}
inline ::slg::protocol::ChatMessage* ChatMessagePush::mutable_messages(int index) {
  return messages_.Mutable(index);
}
inline ::slg::protocol::ChatMessage* ChatMessagePush::add_messages() {
  return messages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::ChatMessage >&
ChatMessagePush::messages() const {
  return messages_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::ChatMessage >*
ChatMessagePush::mutable_messages() {
  return &messages_;
}

// optional int64 groupId = 3;
inline bool ChatMessagePush::has_groupid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatMessagePush::set_has_groupid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatMessagePush::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatMessagePush::clear_groupid() {
  groupid_ = GOOGLE_LONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::int64 ChatMessagePush::groupid() const {
  return groupid_;
}
inline void ChatMessagePush::set_groupid(::google::protobuf::int64 value) {
  set_has_groupid();
  groupid_ = value;
}

// -------------------------------------------------------------------

// ChatGroup

// required int64 groupId = 1;
inline bool ChatGroup::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatGroup::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatGroup::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatGroup::clear_groupid() {
  groupid_ = GOOGLE_LONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::int64 ChatGroup::groupid() const {
  return groupid_;
}
inline void ChatGroup::set_groupid(::google::protobuf::int64 value) {
  set_has_groupid();
  groupid_ = value;
}

// optional int64 ownerId = 2;
inline bool ChatGroup::has_ownerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatGroup::set_has_ownerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatGroup::clear_has_ownerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatGroup::clear_ownerid() {
  ownerid_ = GOOGLE_LONGLONG(0);
  clear_has_ownerid();
}
inline ::google::protobuf::int64 ChatGroup::ownerid() const {
  return ownerid_;
}
inline void ChatGroup::set_ownerid(::google::protobuf::int64 value) {
  set_has_ownerid();
  ownerid_ = value;
}

// repeated .slg.protocol.ChatPlayer members = 3;
inline int ChatGroup::members_size() const {
  return members_.size();
}
inline void ChatGroup::clear_members() {
  members_.Clear();
}
inline const ::slg::protocol::ChatPlayer& ChatGroup::members(int index) const {
  return members_.Get(index);
}
inline ::slg::protocol::ChatPlayer* ChatGroup::mutable_members(int index) {
  return members_.Mutable(index);
}
inline ::slg::protocol::ChatPlayer* ChatGroup::add_members() {
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::ChatPlayer >&
ChatGroup::members() const {
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::ChatPlayer >*
ChatGroup::mutable_members() {
  return &members_;
}

// required bool p2p = 4;
inline bool ChatGroup::has_p2p() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatGroup::set_has_p2p() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatGroup::clear_has_p2p() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatGroup::clear_p2p() {
  p2p_ = false;
  clear_has_p2p();
}
inline bool ChatGroup::p2p() const {
  return p2p_;
}
inline void ChatGroup::set_p2p(bool value) {
  set_has_p2p();
  p2p_ = value;
}

// -------------------------------------------------------------------

// ChatGroupPush

// repeated .slg.protocol.ChatGroup groups = 1;
inline int ChatGroupPush::groups_size() const {
  return groups_.size();
}
inline void ChatGroupPush::clear_groups() {
  groups_.Clear();
}
inline const ::slg::protocol::ChatGroup& ChatGroupPush::groups(int index) const {
  return groups_.Get(index);
}
inline ::slg::protocol::ChatGroup* ChatGroupPush::mutable_groups(int index) {
  return groups_.Mutable(index);
}
inline ::slg::protocol::ChatGroup* ChatGroupPush::add_groups() {
  return groups_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::ChatGroup >&
ChatGroupPush::groups() const {
  return groups_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::ChatGroup >*
ChatGroupPush::mutable_groups() {
  return &groups_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace slg

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::slg::protocol::ChatContentType>() {
  return ::slg::protocol::ChatContentType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::slg::protocol::ChatCommandId>() {
  return ::slg::protocol::ChatCommandId_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::slg::protocol::ChatChannel>() {
  return ::slg::protocol::ChatChannel_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::slg::protocol::ChatPushId>() {
  return ::slg::protocol::ChatPushId_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_chat_2eproto__INCLUDED
