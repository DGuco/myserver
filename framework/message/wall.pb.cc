// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wall.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "wall.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace slg {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* WallStatusDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WallStatusDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* WallStatusPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WallStatusPush_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* WallCommandId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* WallPushId_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_wall_2eproto() {
  protobuf_AddDesc_wall_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "wall.proto");
  GOOGLE_CHECK(file != NULL);
  WallStatusDTO_descriptor_ = file->message_type(0);
  static const int WallStatusDTO_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WallStatusDTO, wallvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WallStatusDTO, nextrepairtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WallStatusDTO, fireendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WallStatusDTO, perdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WallStatusDTO, lastfreshtime_),
  };
  WallStatusDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WallStatusDTO_descriptor_,
      WallStatusDTO::default_instance_,
      WallStatusDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WallStatusDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WallStatusDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WallStatusDTO));
  WallStatusPush_descriptor_ = file->message_type(1);
  static const int WallStatusPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WallStatusPush, wallstatus_),
  };
  WallStatusPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WallStatusPush_descriptor_,
      WallStatusPush::default_instance_,
      WallStatusPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WallStatusPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WallStatusPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WallStatusPush));
  WallCommandId_descriptor_ = file->enum_type(0);
  WallPushId_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_wall_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WallStatusDTO_descriptor_, &WallStatusDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WallStatusPush_descriptor_, &WallStatusPush::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_wall_2eproto() {
  delete WallStatusDTO::default_instance_;
  delete WallStatusDTO_reflection_;
  delete WallStatusPush::default_instance_;
  delete WallStatusPush_reflection_;
}

void protobuf_AddDesc_wall_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nwall.proto\022\014slg.protocol\"w\n\rWallStatus"
    "DTO\022\021\n\twallValue\030\001 \002(\005\022\026\n\016nextRepairTime"
    "\030\002 \002(\005\022\023\n\013fireEndTime\030\003 \002(\005\022\017\n\007perDown\030\004"
    " \002(\005\022\025\n\rlastFreshTime\030\005 \002(\005\"A\n\016WallStatu"
    "sPush\022/\n\nwallStatus\030\001 \002(\0132\033.slg.protocol"
    ".WallStatusDTO*3\n\rWallCommandId\022\020\n\013WALL_"
    "UNFIRE\020\225\n\022\020\n\013WALL_REPAIR\020\226\n*$\n\nWallPushI"
    "d\022\026\n\020WALL_STATUS_PUSH\020\345\220\003B)\n\034com.bonusst"
    "udio.slg.protocolB\tWallProto", 348);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "wall.proto", &protobuf_RegisterTypes);
  WallStatusDTO::default_instance_ = new WallStatusDTO();
  WallStatusPush::default_instance_ = new WallStatusPush();
  WallStatusDTO::default_instance_->InitAsDefaultInstance();
  WallStatusPush::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_wall_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_wall_2eproto {
  StaticDescriptorInitializer_wall_2eproto() {
    protobuf_AddDesc_wall_2eproto();
  }
} static_descriptor_initializer_wall_2eproto_;
const ::google::protobuf::EnumDescriptor* WallCommandId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WallCommandId_descriptor_;
}
bool WallCommandId_IsValid(int value) {
  switch(value) {
    case 1301:
    case 1302:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WallPushId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WallPushId_descriptor_;
}
bool WallPushId_IsValid(int value) {
  switch(value) {
    case 51301:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int WallStatusDTO::kWallValueFieldNumber;
const int WallStatusDTO::kNextRepairTimeFieldNumber;
const int WallStatusDTO::kFireEndTimeFieldNumber;
const int WallStatusDTO::kPerDownFieldNumber;
const int WallStatusDTO::kLastFreshTimeFieldNumber;
#endif  // !_MSC_VER

WallStatusDTO::WallStatusDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WallStatusDTO::InitAsDefaultInstance() {
}

WallStatusDTO::WallStatusDTO(const WallStatusDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WallStatusDTO::SharedCtor() {
  _cached_size_ = 0;
  wallvalue_ = 0;
  nextrepairtime_ = 0;
  fireendtime_ = 0;
  perdown_ = 0;
  lastfreshtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WallStatusDTO::~WallStatusDTO() {
  SharedDtor();
}

void WallStatusDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WallStatusDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WallStatusDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WallStatusDTO_descriptor_;
}

const WallStatusDTO& WallStatusDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wall_2eproto();
  return *default_instance_;
}

WallStatusDTO* WallStatusDTO::default_instance_ = NULL;

WallStatusDTO* WallStatusDTO::New() const {
  return new WallStatusDTO;
}

void WallStatusDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wallvalue_ = 0;
    nextrepairtime_ = 0;
    fireendtime_ = 0;
    perdown_ = 0;
    lastfreshtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WallStatusDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 wallValue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wallvalue_)));
          set_has_wallvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nextRepairTime;
        break;
      }

      // required int32 nextRepairTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextRepairTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextrepairtime_)));
          set_has_nextrepairtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fireEndTime;
        break;
      }

      // required int32 fireEndTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fireEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fireendtime_)));
          set_has_fireendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_perDown;
        break;
      }

      // required int32 perDown = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_perDown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &perdown_)));
          set_has_perdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lastFreshTime;
        break;
      }

      // required int32 lastFreshTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastFreshTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastfreshtime_)));
          set_has_lastfreshtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WallStatusDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 wallValue = 1;
  if (has_wallvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wallvalue(), output);
  }

  // required int32 nextRepairTime = 2;
  if (has_nextrepairtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nextrepairtime(), output);
  }

  // required int32 fireEndTime = 3;
  if (has_fireendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fireendtime(), output);
  }

  // required int32 perDown = 4;
  if (has_perdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->perdown(), output);
  }

  // required int32 lastFreshTime = 5;
  if (has_lastfreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lastfreshtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WallStatusDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 wallValue = 1;
  if (has_wallvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wallvalue(), target);
  }

  // required int32 nextRepairTime = 2;
  if (has_nextrepairtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nextrepairtime(), target);
  }

  // required int32 fireEndTime = 3;
  if (has_fireendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fireendtime(), target);
  }

  // required int32 perDown = 4;
  if (has_perdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->perdown(), target);
  }

  // required int32 lastFreshTime = 5;
  if (has_lastfreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lastfreshtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WallStatusDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 wallValue = 1;
    if (has_wallvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wallvalue());
    }

    // required int32 nextRepairTime = 2;
    if (has_nextrepairtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextrepairtime());
    }

    // required int32 fireEndTime = 3;
    if (has_fireendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fireendtime());
    }

    // required int32 perDown = 4;
    if (has_perdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->perdown());
    }

    // required int32 lastFreshTime = 5;
    if (has_lastfreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastfreshtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WallStatusDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WallStatusDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WallStatusDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WallStatusDTO::MergeFrom(const WallStatusDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wallvalue()) {
      set_wallvalue(from.wallvalue());
    }
    if (from.has_nextrepairtime()) {
      set_nextrepairtime(from.nextrepairtime());
    }
    if (from.has_fireendtime()) {
      set_fireendtime(from.fireendtime());
    }
    if (from.has_perdown()) {
      set_perdown(from.perdown());
    }
    if (from.has_lastfreshtime()) {
      set_lastfreshtime(from.lastfreshtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WallStatusDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WallStatusDTO::CopyFrom(const WallStatusDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WallStatusDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void WallStatusDTO::Swap(WallStatusDTO* other) {
  if (other != this) {
    std::swap(wallvalue_, other->wallvalue_);
    std::swap(nextrepairtime_, other->nextrepairtime_);
    std::swap(fireendtime_, other->fireendtime_);
    std::swap(perdown_, other->perdown_);
    std::swap(lastfreshtime_, other->lastfreshtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WallStatusDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WallStatusDTO_descriptor_;
  metadata.reflection = WallStatusDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WallStatusPush::kWallStatusFieldNumber;
#endif  // !_MSC_VER

WallStatusPush::WallStatusPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WallStatusPush::InitAsDefaultInstance() {
  wallstatus_ = const_cast< ::slg::protocol::WallStatusDTO*>(&::slg::protocol::WallStatusDTO::default_instance());
}

WallStatusPush::WallStatusPush(const WallStatusPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WallStatusPush::SharedCtor() {
  _cached_size_ = 0;
  wallstatus_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WallStatusPush::~WallStatusPush() {
  SharedDtor();
}

void WallStatusPush::SharedDtor() {
  if (this != default_instance_) {
    delete wallstatus_;
  }
}

void WallStatusPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WallStatusPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WallStatusPush_descriptor_;
}

const WallStatusPush& WallStatusPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wall_2eproto();
  return *default_instance_;
}

WallStatusPush* WallStatusPush::default_instance_ = NULL;

WallStatusPush* WallStatusPush::New() const {
  return new WallStatusPush;
}

void WallStatusPush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_wallstatus()) {
      if (wallstatus_ != NULL) wallstatus_->::slg::protocol::WallStatusDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WallStatusPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .slg.protocol.WallStatusDTO wallStatus = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wallstatus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WallStatusPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .slg.protocol.WallStatusDTO wallStatus = 1;
  if (has_wallstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->wallstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WallStatusPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .slg.protocol.WallStatusDTO wallStatus = 1;
  if (has_wallstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->wallstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WallStatusPush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .slg.protocol.WallStatusDTO wallStatus = 1;
    if (has_wallstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wallstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WallStatusPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WallStatusPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WallStatusPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WallStatusPush::MergeFrom(const WallStatusPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wallstatus()) {
      mutable_wallstatus()->::slg::protocol::WallStatusDTO::MergeFrom(from.wallstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WallStatusPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WallStatusPush::CopyFrom(const WallStatusPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WallStatusPush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_wallstatus()) {
    if (!this->wallstatus().IsInitialized()) return false;
  }
  return true;
}

void WallStatusPush::Swap(WallStatusPush* other) {
  if (other != this) {
    std::swap(wallstatus_, other->wallstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WallStatusPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WallStatusPush_descriptor_;
  metadata.reflection = WallStatusPush_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace slg

// @@protoc_insertion_point(global_scope)
