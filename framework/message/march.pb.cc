// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: march.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "march.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace slg {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* MarchAllianceDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarchAllianceDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarchPlayerDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarchPlayerDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarchAidDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarchAidDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarchDetailDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarchDetailDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarchTimerDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarchTimerDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarchInfoDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarchInfoDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarchStartRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarchStartRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarchStartResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarchStartResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarchSpeedUpRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarchSpeedUpRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarchSpeedUpResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarchSpeedUpResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarchRecallRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarchRecallRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarchRecallResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarchRecallResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarchDismissRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarchDismissRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarchDismissResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarchDismissResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarchKickRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarchKickRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarchKickResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarchKickResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarchInfoPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarchInfoPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarchRemovePush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarchRemovePush_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarchResultPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarchResultPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarchTimerPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarchTimerPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* MilitaryDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MilitaryDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* MilitaryPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MilitaryPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* MilitaryDeletePush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MilitaryDeletePush_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MarchState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MarchType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MarchCommandId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MarchPushId_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_march_2eproto() {
  protobuf_AddDesc_march_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "march.proto");
  GOOGLE_CHECK(file != NULL);
  MarchAllianceDTO_descriptor_ = file->message_type(0);
  static const int MarchAllianceDTO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchAllianceDTO, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchAllianceDTO, shortname_),
  };
  MarchAllianceDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarchAllianceDTO_descriptor_,
      MarchAllianceDTO::default_instance_,
      MarchAllianceDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchAllianceDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchAllianceDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarchAllianceDTO));
  MarchPlayerDTO_descriptor_ = file->message_type(1);
  static const int MarchPlayerDTO_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchPlayerDTO, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchPlayerDTO, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchPlayerDTO, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchPlayerDTO, soldiers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchPlayerDTO, alliance_),
  };
  MarchPlayerDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarchPlayerDTO_descriptor_,
      MarchPlayerDTO::default_instance_,
      MarchPlayerDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchPlayerDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchPlayerDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarchPlayerDTO));
  MarchAidDTO_descriptor_ = file->message_type(2);
  static const int MarchAidDTO_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchAidDTO, arrivedplayers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchAidDTO, marchingplayers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchAidDTO, trooplimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchAidDTO, armylimit_),
  };
  MarchAidDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarchAidDTO_descriptor_,
      MarchAidDTO::default_instance_,
      MarchAidDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchAidDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchAidDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarchAidDTO));
  MarchDetailDTO_descriptor_ = file->message_type(3);
  static const int MarchDetailDTO_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchDetailDTO, startpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchDetailDTO, endpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchDetailDTO, attacker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchDetailDTO, defender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchDetailDTO, attackeraid_),
  };
  MarchDetailDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarchDetailDTO_descriptor_,
      MarchDetailDTO::default_instance_,
      MarchDetailDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchDetailDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchDetailDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarchDetailDTO));
  MarchTimerDTO_descriptor_ = file->message_type(4);
  static const int MarchTimerDTO_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchTimerDTO, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchTimerDTO, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchTimerDTO, speedupnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchTimerDTO, originaltime_),
  };
  MarchTimerDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarchTimerDTO_descriptor_,
      MarchTimerDTO::default_instance_,
      MarchTimerDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchTimerDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchTimerDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarchTimerDTO));
  MarchInfoDTO_descriptor_ = file->message_type(5);
  static const int MarchInfoDTO_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchInfoDTO, marchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchInfoDTO, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchInfoDTO, detail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchInfoDTO, timer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchInfoDTO, state_),
  };
  MarchInfoDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarchInfoDTO_descriptor_,
      MarchInfoDTO::default_instance_,
      MarchInfoDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchInfoDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchInfoDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarchInfoDTO));
  MarchStartRequest_descriptor_ = file->message_type(6);
  static const int MarchStartRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchStartRequest, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchStartRequest, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchStartRequest, soldiers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchStartRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchStartRequest, masstime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchStartRequest, joinid_),
  };
  MarchStartRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarchStartRequest_descriptor_,
      MarchStartRequest::default_instance_,
      MarchStartRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchStartRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchStartRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarchStartRequest));
  MarchStartResponse_descriptor_ = file->message_type(7);
  static const int MarchStartResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchStartResponse, marchid_),
  };
  MarchStartResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarchStartResponse_descriptor_,
      MarchStartResponse::default_instance_,
      MarchStartResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchStartResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchStartResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarchStartResponse));
  MarchSpeedUpRequest_descriptor_ = file->message_type(8);
  static const int MarchSpeedUpRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchSpeedUpRequest, marchid_),
  };
  MarchSpeedUpRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarchSpeedUpRequest_descriptor_,
      MarchSpeedUpRequest::default_instance_,
      MarchSpeedUpRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchSpeedUpRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchSpeedUpRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarchSpeedUpRequest));
  MarchSpeedUpResponse_descriptor_ = file->message_type(9);
  static const int MarchSpeedUpResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchSpeedUpResponse, marchid_),
  };
  MarchSpeedUpResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarchSpeedUpResponse_descriptor_,
      MarchSpeedUpResponse::default_instance_,
      MarchSpeedUpResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchSpeedUpResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchSpeedUpResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarchSpeedUpResponse));
  MarchRecallRequest_descriptor_ = file->message_type(10);
  static const int MarchRecallRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchRecallRequest, marchid_),
  };
  MarchRecallRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarchRecallRequest_descriptor_,
      MarchRecallRequest::default_instance_,
      MarchRecallRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchRecallRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchRecallRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarchRecallRequest));
  MarchRecallResponse_descriptor_ = file->message_type(11);
  static const int MarchRecallResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchRecallResponse, marchid_),
  };
  MarchRecallResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarchRecallResponse_descriptor_,
      MarchRecallResponse::default_instance_,
      MarchRecallResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchRecallResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchRecallResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarchRecallResponse));
  MarchDismissRequest_descriptor_ = file->message_type(12);
  static const int MarchDismissRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchDismissRequest, marchid_),
  };
  MarchDismissRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarchDismissRequest_descriptor_,
      MarchDismissRequest::default_instance_,
      MarchDismissRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchDismissRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchDismissRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarchDismissRequest));
  MarchDismissResponse_descriptor_ = file->message_type(13);
  static const int MarchDismissResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchDismissResponse, marchid_),
  };
  MarchDismissResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarchDismissResponse_descriptor_,
      MarchDismissResponse::default_instance_,
      MarchDismissResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchDismissResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchDismissResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarchDismissResponse));
  MarchKickRequest_descriptor_ = file->message_type(14);
  static const int MarchKickRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchKickRequest, marchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchKickRequest, targetmarchid_),
  };
  MarchKickRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarchKickRequest_descriptor_,
      MarchKickRequest::default_instance_,
      MarchKickRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchKickRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchKickRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarchKickRequest));
  MarchKickResponse_descriptor_ = file->message_type(15);
  static const int MarchKickResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchKickResponse, marchid_),
  };
  MarchKickResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarchKickResponse_descriptor_,
      MarchKickResponse::default_instance_,
      MarchKickResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchKickResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchKickResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarchKickResponse));
  MarchInfoPush_descriptor_ = file->message_type(16);
  static const int MarchInfoPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchInfoPush, infos_),
  };
  MarchInfoPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarchInfoPush_descriptor_,
      MarchInfoPush::default_instance_,
      MarchInfoPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchInfoPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchInfoPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarchInfoPush));
  MarchRemovePush_descriptor_ = file->message_type(17);
  static const int MarchRemovePush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchRemovePush, marchid_),
  };
  MarchRemovePush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarchRemovePush_descriptor_,
      MarchRemovePush::default_instance_,
      MarchRemovePush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchRemovePush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchRemovePush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarchRemovePush));
  MarchResultPush_descriptor_ = file->message_type(18);
  static const int MarchResultPush_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchResultPush, marchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchResultPush, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchResultPush, attacker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchResultPush, defencer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchResultPush, soldiers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchResultPush, won_),
  };
  MarchResultPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarchResultPush_descriptor_,
      MarchResultPush::default_instance_,
      MarchResultPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchResultPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchResultPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarchResultPush));
  MarchTimerPush_descriptor_ = file->message_type(19);
  static const int MarchTimerPush_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchTimerPush, marchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchTimerPush, timer_),
  };
  MarchTimerPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarchTimerPush_descriptor_,
      MarchTimerPush::default_instance_,
      MarchTimerPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchTimerPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarchTimerPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarchTimerPush));
  MilitaryDTO_descriptor_ = file->message_type(20);
  static const int MilitaryDTO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilitaryDTO, march_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilitaryDTO, defenderaid_),
  };
  MilitaryDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MilitaryDTO_descriptor_,
      MilitaryDTO::default_instance_,
      MilitaryDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilitaryDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilitaryDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MilitaryDTO));
  MilitaryPush_descriptor_ = file->message_type(21);
  static const int MilitaryPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilitaryPush, militaries_),
  };
  MilitaryPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MilitaryPush_descriptor_,
      MilitaryPush::default_instance_,
      MilitaryPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilitaryPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilitaryPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MilitaryPush));
  MilitaryDeletePush_descriptor_ = file->message_type(22);
  static const int MilitaryDeletePush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilitaryDeletePush, marchid_),
  };
  MilitaryDeletePush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MilitaryDeletePush_descriptor_,
      MilitaryDeletePush::default_instance_,
      MilitaryDeletePush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilitaryDeletePush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilitaryDeletePush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MilitaryDeletePush));
  MarchState_descriptor_ = file->enum_type(0);
  MarchType_descriptor_ = file->enum_type(1);
  MarchCommandId_descriptor_ = file->enum_type(2);
  MarchPushId_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_march_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarchAllianceDTO_descriptor_, &MarchAllianceDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarchPlayerDTO_descriptor_, &MarchPlayerDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarchAidDTO_descriptor_, &MarchAidDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarchDetailDTO_descriptor_, &MarchDetailDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarchTimerDTO_descriptor_, &MarchTimerDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarchInfoDTO_descriptor_, &MarchInfoDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarchStartRequest_descriptor_, &MarchStartRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarchStartResponse_descriptor_, &MarchStartResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarchSpeedUpRequest_descriptor_, &MarchSpeedUpRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarchSpeedUpResponse_descriptor_, &MarchSpeedUpResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarchRecallRequest_descriptor_, &MarchRecallRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarchRecallResponse_descriptor_, &MarchRecallResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarchDismissRequest_descriptor_, &MarchDismissRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarchDismissResponse_descriptor_, &MarchDismissResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarchKickRequest_descriptor_, &MarchKickRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarchKickResponse_descriptor_, &MarchKickResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarchInfoPush_descriptor_, &MarchInfoPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarchRemovePush_descriptor_, &MarchRemovePush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarchResultPush_descriptor_, &MarchResultPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarchTimerPush_descriptor_, &MarchTimerPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MilitaryDTO_descriptor_, &MilitaryDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MilitaryPush_descriptor_, &MilitaryPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MilitaryDeletePush_descriptor_, &MilitaryDeletePush::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_march_2eproto() {
  delete MarchAllianceDTO::default_instance_;
  delete MarchAllianceDTO_reflection_;
  delete MarchPlayerDTO::default_instance_;
  delete MarchPlayerDTO_reflection_;
  delete MarchAidDTO::default_instance_;
  delete MarchAidDTO_reflection_;
  delete MarchDetailDTO::default_instance_;
  delete MarchDetailDTO_reflection_;
  delete MarchTimerDTO::default_instance_;
  delete MarchTimerDTO_reflection_;
  delete MarchInfoDTO::default_instance_;
  delete MarchInfoDTO_reflection_;
  delete MarchStartRequest::default_instance_;
  delete MarchStartRequest_reflection_;
  delete MarchStartResponse::default_instance_;
  delete MarchStartResponse_reflection_;
  delete MarchSpeedUpRequest::default_instance_;
  delete MarchSpeedUpRequest_reflection_;
  delete MarchSpeedUpResponse::default_instance_;
  delete MarchSpeedUpResponse_reflection_;
  delete MarchRecallRequest::default_instance_;
  delete MarchRecallRequest_reflection_;
  delete MarchRecallResponse::default_instance_;
  delete MarchRecallResponse_reflection_;
  delete MarchDismissRequest::default_instance_;
  delete MarchDismissRequest_reflection_;
  delete MarchDismissResponse::default_instance_;
  delete MarchDismissResponse_reflection_;
  delete MarchKickRequest::default_instance_;
  delete MarchKickRequest_reflection_;
  delete MarchKickResponse::default_instance_;
  delete MarchKickResponse_reflection_;
  delete MarchInfoPush::default_instance_;
  delete MarchInfoPush_reflection_;
  delete MarchRemovePush::default_instance_;
  delete MarchRemovePush_reflection_;
  delete MarchResultPush::default_instance_;
  delete MarchResultPush_reflection_;
  delete MarchTimerPush::default_instance_;
  delete MarchTimerPush_reflection_;
  delete MilitaryDTO::default_instance_;
  delete MilitaryDTO_reflection_;
  delete MilitaryPush::default_instance_;
  delete MilitaryPush_reflection_;
  delete MilitaryDeletePush::default_instance_;
  delete MilitaryDeletePush_reflection_;
}

void protobuf_AddDesc_march_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::slg::protocol::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013march.proto\022\014slg.protocol\032\014common.prot"
    "o\"1\n\020MarchAllianceDTO\022\n\n\002id\030\001 \002(\005\022\021\n\tsho"
    "rtName\030\002 \002(\t\"\241\001\n\016MarchPlayerDTO\022\020\n\010playe"
    "rId\030\001 \002(\003\022\014\n\004icon\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022/\n"
    "\010soldiers\030\004 \003(\0132\035.slg.protocol.LevelSold"
    "ierDTO\0220\n\010alliance\030\005 \001(\0132\036.slg.protocol."
    "MarchAllianceDTO\"\241\001\n\013MarchAidDTO\0224\n\016arri"
    "vedPlayers\030\001 \003(\0132\034.slg.protocol.MarchPla"
    "yerDTO\0225\n\017marchingPlayers\030\002 \003(\0132\034.slg.pr"
    "otocol.MarchPlayerDTO\022\022\n\ntroopLimit\030\003 \002("
    "\005\022\021\n\tarmyLimit\030\004 \002(\005\"\370\001\n\016MarchDetailDTO\022"
    "+\n\010startPos\030\001 \002(\0132\031.slg.protocol.Positio"
    "nDTO\022)\n\006endPos\030\002 \002(\0132\031.slg.protocol.Posi"
    "tionDTO\022.\n\010attacker\030\003 \002(\0132\034.slg.protocol"
    ".MarchPlayerDTO\022.\n\010defender\030\004 \002(\0132\034.slg."
    "protocol.MarchPlayerDTO\022.\n\013attackerAid\030\005"
    " \001(\0132\031.slg.protocol.MarchAidDTO\"]\n\rMarch"
    "TimerDTO\022\021\n\tstartTime\030\001 \002(\005\022\017\n\007endTime\030\002"
    " \002(\005\022\022\n\nspeedUpNum\030\003 \002(\005\022\024\n\014originalTime"
    "\030\004 \002(\005\"\311\001\n\014MarchInfoDTO\022\017\n\007marchId\030\001 \002(\003"
    "\022%\n\004type\030\002 \002(\0162\027.slg.protocol.MarchType\022"
    ",\n\006detail\030\003 \002(\0132\034.slg.protocol.MarchDeta"
    "ilDTO\022*\n\005timer\030\004 \002(\0132\033.slg.protocol.Marc"
    "hTimerDTO\022\'\n\005state\030\005 \002(\0162\030.slg.protocol."
    "MarchState\"\304\001\n\021MarchStartRequest\022+\n\010posi"
    "tion\030\001 \002(\0132\031.slg.protocol.PositionDTO\022\r\n"
    "\005objId\030\002 \002(\003\022*\n\010soldiers\030\003 \003(\0132\030.slg.pro"
    "tocol.SoldierDTO\022%\n\004type\030\004 \002(\0162\027.slg.pro"
    "tocol.MarchType\022\020\n\010massTime\030\n \001(\005\022\016\n\006joi"
    "nId\030\013 \001(\003\"%\n\022MarchStartResponse\022\017\n\007march"
    "Id\030\001 \002(\003\"&\n\023MarchSpeedUpRequest\022\017\n\007march"
    "Id\030\001 \002(\003\"\'\n\024MarchSpeedUpResponse\022\017\n\007marc"
    "hId\030\001 \002(\003\"%\n\022MarchRecallRequest\022\017\n\007march"
    "Id\030\001 \002(\003\"&\n\023MarchRecallResponse\022\017\n\007march"
    "Id\030\001 \002(\003\"&\n\023MarchDismissRequest\022\017\n\007march"
    "Id\030\001 \002(\003\"\'\n\024MarchDismissResponse\022\017\n\007marc"
    "hId\030\001 \002(\003\":\n\020MarchKickRequest\022\017\n\007marchId"
    "\030\001 \002(\003\022\025\n\rtargetMarchId\030\002 \002(\003\"$\n\021MarchKi"
    "ckResponse\022\017\n\007marchId\030\001 \002(\003\":\n\rMarchInfo"
    "Push\022)\n\005infos\030\001 \003(\0132\032.slg.protocol.March"
    "InfoDTO\"\"\n\017MarchRemovePush\022\017\n\007marchId\030\001 "
    "\002(\003\"\334\001\n\017MarchResultPush\022\017\n\007marchId\030\001 \002(\003"
    "\022%\n\004type\030\002 \002(\0162\027.slg.protocol.MarchType\022"
    "+\n\010attacker\030\003 \002(\0132\031.slg.protocol.Positio"
    "nDTO\022+\n\010defencer\030\004 \002(\0132\031.slg.protocol.Po"
    "sitionDTO\022*\n\010soldiers\030\005 \003(\0132\030.slg.protoc"
    "ol.SoldierDTO\022\013\n\003won\030\006 \002(\010\"M\n\016MarchTimer"
    "Push\022\017\n\007marchId\030\001 \002(\003\022*\n\005timer\030\002 \002(\0132\033.s"
    "lg.protocol.MarchTimerDTO\"h\n\013MilitaryDTO"
    "\022)\n\005march\030\001 \002(\0132\032.slg.protocol.MarchInfo"
    "DTO\022.\n\013defenderAid\030\002 \001(\0132\031.slg.protocol."
    "MarchAidDTO\"=\n\014MilitaryPush\022-\n\nmilitarie"
    "s\030\001 \003(\0132\031.slg.protocol.MilitaryDTO\"%\n\022Mi"
    "litaryDeletePush\022\017\n\007marchId\030\001 \002(\003*n\n\nMar"
    "chState\022\024\n\020MARCH_STATE_WAIT\020\000\022\027\n\023MARCH_S"
    "TATE_FORWARD\020\001\022\027\n\023MARCH_STATE_STANDBY\020\002\022"
    "\030\n\024MARCH_STATE_BACKWARD\020\003*\242\001\n\tMarchType\022"
    "\r\n\tMARCH_PVP\020\001\022\r\n\tMARCH_PVE\020\002\022\022\n\016MARCH_R"
    "ESOURCE\020\003\022\r\n\tMARCH_EVP\020\004\022\r\n\tMARCH_SPY\020\005\022"
    "\016\n\nMARCH_MASS\020\006\022\016\n\nMARCH_JOIN\020\007\022\023\n\017MARCH"
    "_REINFORCE\020\010\022\020\n\014MARCH_MARKET\020\t*\201\001\n\016March"
    "CommandId\022\020\n\013MARCH_START\020\331\004\022\023\n\016MARCH_SPE"
    "ED_UP\020\332\004\022\021\n\014MARCH_RECALL\020\333\004\022\022\n\rMARCH_DIS"
    "MISS\020\334\004\022\017\n\nMARCH_KICK\020\335\004\022\020\n\013MARCH_TRADE\020"
    "\336\004*\237\001\n\013MarchPushId\022\032\n\024MARCH_INFO_LIST_PU"
    "SH\020\251\213\003\022\027\n\021MARCH_RESULT_PUSH\020\252\213\003\022\026\n\020MARCH"
    "_TIMER_PUSH\020\253\213\003\022\027\n\021MARCH_REMOVE_PUSH\020\257\213\003"
    "\022\023\n\rMILITARY_LIST\020\262\213\003\022\025\n\017MILITARY_DELETE"
    "\020\263\213\003B*\n\034com.bonusstudio.slg.protocolB\nMa"
    "rchProto", 2768);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "march.proto", &protobuf_RegisterTypes);
  MarchAllianceDTO::default_instance_ = new MarchAllianceDTO();
  MarchPlayerDTO::default_instance_ = new MarchPlayerDTO();
  MarchAidDTO::default_instance_ = new MarchAidDTO();
  MarchDetailDTO::default_instance_ = new MarchDetailDTO();
  MarchTimerDTO::default_instance_ = new MarchTimerDTO();
  MarchInfoDTO::default_instance_ = new MarchInfoDTO();
  MarchStartRequest::default_instance_ = new MarchStartRequest();
  MarchStartResponse::default_instance_ = new MarchStartResponse();
  MarchSpeedUpRequest::default_instance_ = new MarchSpeedUpRequest();
  MarchSpeedUpResponse::default_instance_ = new MarchSpeedUpResponse();
  MarchRecallRequest::default_instance_ = new MarchRecallRequest();
  MarchRecallResponse::default_instance_ = new MarchRecallResponse();
  MarchDismissRequest::default_instance_ = new MarchDismissRequest();
  MarchDismissResponse::default_instance_ = new MarchDismissResponse();
  MarchKickRequest::default_instance_ = new MarchKickRequest();
  MarchKickResponse::default_instance_ = new MarchKickResponse();
  MarchInfoPush::default_instance_ = new MarchInfoPush();
  MarchRemovePush::default_instance_ = new MarchRemovePush();
  MarchResultPush::default_instance_ = new MarchResultPush();
  MarchTimerPush::default_instance_ = new MarchTimerPush();
  MilitaryDTO::default_instance_ = new MilitaryDTO();
  MilitaryPush::default_instance_ = new MilitaryPush();
  MilitaryDeletePush::default_instance_ = new MilitaryDeletePush();
  MarchAllianceDTO::default_instance_->InitAsDefaultInstance();
  MarchPlayerDTO::default_instance_->InitAsDefaultInstance();
  MarchAidDTO::default_instance_->InitAsDefaultInstance();
  MarchDetailDTO::default_instance_->InitAsDefaultInstance();
  MarchTimerDTO::default_instance_->InitAsDefaultInstance();
  MarchInfoDTO::default_instance_->InitAsDefaultInstance();
  MarchStartRequest::default_instance_->InitAsDefaultInstance();
  MarchStartResponse::default_instance_->InitAsDefaultInstance();
  MarchSpeedUpRequest::default_instance_->InitAsDefaultInstance();
  MarchSpeedUpResponse::default_instance_->InitAsDefaultInstance();
  MarchRecallRequest::default_instance_->InitAsDefaultInstance();
  MarchRecallResponse::default_instance_->InitAsDefaultInstance();
  MarchDismissRequest::default_instance_->InitAsDefaultInstance();
  MarchDismissResponse::default_instance_->InitAsDefaultInstance();
  MarchKickRequest::default_instance_->InitAsDefaultInstance();
  MarchKickResponse::default_instance_->InitAsDefaultInstance();
  MarchInfoPush::default_instance_->InitAsDefaultInstance();
  MarchRemovePush::default_instance_->InitAsDefaultInstance();
  MarchResultPush::default_instance_->InitAsDefaultInstance();
  MarchTimerPush::default_instance_->InitAsDefaultInstance();
  MilitaryDTO::default_instance_->InitAsDefaultInstance();
  MilitaryPush::default_instance_->InitAsDefaultInstance();
  MilitaryDeletePush::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_march_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_march_2eproto {
  StaticDescriptorInitializer_march_2eproto() {
    protobuf_AddDesc_march_2eproto();
  }
} static_descriptor_initializer_march_2eproto_;
const ::google::protobuf::EnumDescriptor* MarchState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarchState_descriptor_;
}
bool MarchState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MarchType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarchType_descriptor_;
}
bool MarchType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MarchCommandId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarchCommandId_descriptor_;
}
bool MarchCommandId_IsValid(int value) {
  switch(value) {
    case 601:
    case 602:
    case 603:
    case 604:
    case 605:
    case 606:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MarchPushId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarchPushId_descriptor_;
}
bool MarchPushId_IsValid(int value) {
  switch(value) {
    case 50601:
    case 50602:
    case 50603:
    case 50607:
    case 50610:
    case 50611:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MarchAllianceDTO::kIdFieldNumber;
const int MarchAllianceDTO::kShortNameFieldNumber;
#endif  // !_MSC_VER

MarchAllianceDTO::MarchAllianceDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarchAllianceDTO::InitAsDefaultInstance() {
}

MarchAllianceDTO::MarchAllianceDTO(const MarchAllianceDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarchAllianceDTO::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  shortname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarchAllianceDTO::~MarchAllianceDTO() {
  SharedDtor();
}

void MarchAllianceDTO::SharedDtor() {
  if (shortname_ != &::google::protobuf::internal::kEmptyString) {
    delete shortname_;
  }
  if (this != default_instance_) {
  }
}

void MarchAllianceDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarchAllianceDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarchAllianceDTO_descriptor_;
}

const MarchAllianceDTO& MarchAllianceDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_march_2eproto();
  return *default_instance_;
}

MarchAllianceDTO* MarchAllianceDTO::default_instance_ = NULL;

MarchAllianceDTO* MarchAllianceDTO::New() const {
  return new MarchAllianceDTO;
}

void MarchAllianceDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_shortname()) {
      if (shortname_ != &::google::protobuf::internal::kEmptyString) {
        shortname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarchAllianceDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shortName;
        break;
      }

      // required string shortName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shortName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shortname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->shortname().data(), this->shortname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarchAllianceDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string shortName = 2;
  if (has_shortname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shortname().data(), this->shortname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->shortname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarchAllianceDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string shortName = 2;
  if (has_shortname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shortname().data(), this->shortname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->shortname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarchAllianceDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string shortName = 2;
    if (has_shortname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shortname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarchAllianceDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarchAllianceDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarchAllianceDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarchAllianceDTO::MergeFrom(const MarchAllianceDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_shortname()) {
      set_shortname(from.shortname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarchAllianceDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarchAllianceDTO::CopyFrom(const MarchAllianceDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarchAllianceDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MarchAllianceDTO::Swap(MarchAllianceDTO* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(shortname_, other->shortname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarchAllianceDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarchAllianceDTO_descriptor_;
  metadata.reflection = MarchAllianceDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarchPlayerDTO::kPlayerIdFieldNumber;
const int MarchPlayerDTO::kIconFieldNumber;
const int MarchPlayerDTO::kNameFieldNumber;
const int MarchPlayerDTO::kSoldiersFieldNumber;
const int MarchPlayerDTO::kAllianceFieldNumber;
#endif  // !_MSC_VER

MarchPlayerDTO::MarchPlayerDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarchPlayerDTO::InitAsDefaultInstance() {
  alliance_ = const_cast< ::slg::protocol::MarchAllianceDTO*>(&::slg::protocol::MarchAllianceDTO::default_instance());
}

MarchPlayerDTO::MarchPlayerDTO(const MarchPlayerDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarchPlayerDTO::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  alliance_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarchPlayerDTO::~MarchPlayerDTO() {
  SharedDtor();
}

void MarchPlayerDTO::SharedDtor() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete alliance_;
  }
}

void MarchPlayerDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarchPlayerDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarchPlayerDTO_descriptor_;
}

const MarchPlayerDTO& MarchPlayerDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_march_2eproto();
  return *default_instance_;
}

MarchPlayerDTO* MarchPlayerDTO::default_instance_ = NULL;

MarchPlayerDTO* MarchPlayerDTO::New() const {
  return new MarchPlayerDTO;
}

void MarchPlayerDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_alliance()) {
      if (alliance_ != NULL) alliance_->::slg::protocol::MarchAllianceDTO::Clear();
    }
  }
  soldiers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarchPlayerDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_icon;
        break;
      }

      // optional string icon = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_soldiers;
        break;
      }

      // repeated .slg.protocol.LevelSoldierDTO soldiers = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soldiers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_soldiers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_soldiers;
        if (input->ExpectTag(42)) goto parse_alliance;
        break;
      }

      // optional .slg.protocol.MarchAllianceDTO alliance = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alliance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alliance()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarchPlayerDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // optional string icon = 2;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->icon(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // repeated .slg.protocol.LevelSoldierDTO soldiers = 4;
  for (int i = 0; i < this->soldiers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->soldiers(i), output);
  }

  // optional .slg.protocol.MarchAllianceDTO alliance = 5;
  if (has_alliance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->alliance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarchPlayerDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // optional string icon = 2;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->icon(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // repeated .slg.protocol.LevelSoldierDTO soldiers = 4;
  for (int i = 0; i < this->soldiers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->soldiers(i), target);
  }

  // optional .slg.protocol.MarchAllianceDTO alliance = 5;
  if (has_alliance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->alliance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarchPlayerDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional string icon = 2;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .slg.protocol.MarchAllianceDTO alliance = 5;
    if (has_alliance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alliance());
    }

  }
  // repeated .slg.protocol.LevelSoldierDTO soldiers = 4;
  total_size += 1 * this->soldiers_size();
  for (int i = 0; i < this->soldiers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->soldiers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarchPlayerDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarchPlayerDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarchPlayerDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarchPlayerDTO::MergeFrom(const MarchPlayerDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  soldiers_.MergeFrom(from.soldiers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_alliance()) {
      mutable_alliance()->::slg::protocol::MarchAllianceDTO::MergeFrom(from.alliance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarchPlayerDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarchPlayerDTO::CopyFrom(const MarchPlayerDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarchPlayerDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < soldiers_size(); i++) {
    if (!this->soldiers(i).IsInitialized()) return false;
  }
  if (has_alliance()) {
    if (!this->alliance().IsInitialized()) return false;
  }
  return true;
}

void MarchPlayerDTO::Swap(MarchPlayerDTO* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(icon_, other->icon_);
    std::swap(name_, other->name_);
    soldiers_.Swap(&other->soldiers_);
    std::swap(alliance_, other->alliance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarchPlayerDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarchPlayerDTO_descriptor_;
  metadata.reflection = MarchPlayerDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarchAidDTO::kArrivedPlayersFieldNumber;
const int MarchAidDTO::kMarchingPlayersFieldNumber;
const int MarchAidDTO::kTroopLimitFieldNumber;
const int MarchAidDTO::kArmyLimitFieldNumber;
#endif  // !_MSC_VER

MarchAidDTO::MarchAidDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarchAidDTO::InitAsDefaultInstance() {
}

MarchAidDTO::MarchAidDTO(const MarchAidDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarchAidDTO::SharedCtor() {
  _cached_size_ = 0;
  trooplimit_ = 0;
  armylimit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarchAidDTO::~MarchAidDTO() {
  SharedDtor();
}

void MarchAidDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarchAidDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarchAidDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarchAidDTO_descriptor_;
}

const MarchAidDTO& MarchAidDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_march_2eproto();
  return *default_instance_;
}

MarchAidDTO* MarchAidDTO::default_instance_ = NULL;

MarchAidDTO* MarchAidDTO::New() const {
  return new MarchAidDTO;
}

void MarchAidDTO::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    trooplimit_ = 0;
    armylimit_ = 0;
  }
  arrivedplayers_.Clear();
  marchingplayers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarchAidDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.MarchPlayerDTO arrivedPlayers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arrivedPlayers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrivedplayers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_arrivedPlayers;
        if (input->ExpectTag(18)) goto parse_marchingPlayers;
        break;
      }

      // repeated .slg.protocol.MarchPlayerDTO marchingPlayers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_marchingPlayers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_marchingplayers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_marchingPlayers;
        if (input->ExpectTag(24)) goto parse_troopLimit;
        break;
      }

      // required int32 troopLimit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_troopLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trooplimit_)));
          set_has_trooplimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_armyLimit;
        break;
      }

      // required int32 armyLimit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_armyLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armylimit_)));
          set_has_armylimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarchAidDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.MarchPlayerDTO arrivedPlayers = 1;
  for (int i = 0; i < this->arrivedplayers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrivedplayers(i), output);
  }

  // repeated .slg.protocol.MarchPlayerDTO marchingPlayers = 2;
  for (int i = 0; i < this->marchingplayers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->marchingplayers(i), output);
  }

  // required int32 troopLimit = 3;
  if (has_trooplimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->trooplimit(), output);
  }

  // required int32 armyLimit = 4;
  if (has_armylimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->armylimit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarchAidDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.MarchPlayerDTO arrivedPlayers = 1;
  for (int i = 0; i < this->arrivedplayers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrivedplayers(i), target);
  }

  // repeated .slg.protocol.MarchPlayerDTO marchingPlayers = 2;
  for (int i = 0; i < this->marchingplayers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->marchingplayers(i), target);
  }

  // required int32 troopLimit = 3;
  if (has_trooplimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->trooplimit(), target);
  }

  // required int32 armyLimit = 4;
  if (has_armylimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->armylimit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarchAidDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required int32 troopLimit = 3;
    if (has_trooplimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trooplimit());
    }

    // required int32 armyLimit = 4;
    if (has_armylimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armylimit());
    }

  }
  // repeated .slg.protocol.MarchPlayerDTO arrivedPlayers = 1;
  total_size += 1 * this->arrivedplayers_size();
  for (int i = 0; i < this->arrivedplayers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrivedplayers(i));
  }

  // repeated .slg.protocol.MarchPlayerDTO marchingPlayers = 2;
  total_size += 1 * this->marchingplayers_size();
  for (int i = 0; i < this->marchingplayers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->marchingplayers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarchAidDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarchAidDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarchAidDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarchAidDTO::MergeFrom(const MarchAidDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrivedplayers_.MergeFrom(from.arrivedplayers_);
  marchingplayers_.MergeFrom(from.marchingplayers_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_trooplimit()) {
      set_trooplimit(from.trooplimit());
    }
    if (from.has_armylimit()) {
      set_armylimit(from.armylimit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarchAidDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarchAidDTO::CopyFrom(const MarchAidDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarchAidDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;

  for (int i = 0; i < arrivedplayers_size(); i++) {
    if (!this->arrivedplayers(i).IsInitialized()) return false;
  }
  for (int i = 0; i < marchingplayers_size(); i++) {
    if (!this->marchingplayers(i).IsInitialized()) return false;
  }
  return true;
}

void MarchAidDTO::Swap(MarchAidDTO* other) {
  if (other != this) {
    arrivedplayers_.Swap(&other->arrivedplayers_);
    marchingplayers_.Swap(&other->marchingplayers_);
    std::swap(trooplimit_, other->trooplimit_);
    std::swap(armylimit_, other->armylimit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarchAidDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarchAidDTO_descriptor_;
  metadata.reflection = MarchAidDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarchDetailDTO::kStartPosFieldNumber;
const int MarchDetailDTO::kEndPosFieldNumber;
const int MarchDetailDTO::kAttackerFieldNumber;
const int MarchDetailDTO::kDefenderFieldNumber;
const int MarchDetailDTO::kAttackerAidFieldNumber;
#endif  // !_MSC_VER

MarchDetailDTO::MarchDetailDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarchDetailDTO::InitAsDefaultInstance() {
  startpos_ = const_cast< ::slg::protocol::PositionDTO*>(&::slg::protocol::PositionDTO::default_instance());
  endpos_ = const_cast< ::slg::protocol::PositionDTO*>(&::slg::protocol::PositionDTO::default_instance());
  attacker_ = const_cast< ::slg::protocol::MarchPlayerDTO*>(&::slg::protocol::MarchPlayerDTO::default_instance());
  defender_ = const_cast< ::slg::protocol::MarchPlayerDTO*>(&::slg::protocol::MarchPlayerDTO::default_instance());
  attackeraid_ = const_cast< ::slg::protocol::MarchAidDTO*>(&::slg::protocol::MarchAidDTO::default_instance());
}

MarchDetailDTO::MarchDetailDTO(const MarchDetailDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarchDetailDTO::SharedCtor() {
  _cached_size_ = 0;
  startpos_ = NULL;
  endpos_ = NULL;
  attacker_ = NULL;
  defender_ = NULL;
  attackeraid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarchDetailDTO::~MarchDetailDTO() {
  SharedDtor();
}

void MarchDetailDTO::SharedDtor() {
  if (this != default_instance_) {
    delete startpos_;
    delete endpos_;
    delete attacker_;
    delete defender_;
    delete attackeraid_;
  }
}

void MarchDetailDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarchDetailDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarchDetailDTO_descriptor_;
}

const MarchDetailDTO& MarchDetailDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_march_2eproto();
  return *default_instance_;
}

MarchDetailDTO* MarchDetailDTO::default_instance_ = NULL;

MarchDetailDTO* MarchDetailDTO::New() const {
  return new MarchDetailDTO;
}

void MarchDetailDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_startpos()) {
      if (startpos_ != NULL) startpos_->::slg::protocol::PositionDTO::Clear();
    }
    if (has_endpos()) {
      if (endpos_ != NULL) endpos_->::slg::protocol::PositionDTO::Clear();
    }
    if (has_attacker()) {
      if (attacker_ != NULL) attacker_->::slg::protocol::MarchPlayerDTO::Clear();
    }
    if (has_defender()) {
      if (defender_ != NULL) defender_->::slg::protocol::MarchPlayerDTO::Clear();
    }
    if (has_attackeraid()) {
      if (attackeraid_ != NULL) attackeraid_->::slg::protocol::MarchAidDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarchDetailDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .slg.protocol.PositionDTO startPos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_startpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_endPos;
        break;
      }

      // required .slg.protocol.PositionDTO endPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attacker;
        break;
      }

      // required .slg.protocol.MarchPlayerDTO attacker = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attacker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attacker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_defender;
        break;
      }

      // required .slg.protocol.MarchPlayerDTO defender = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defender()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attackerAid;
        break;
      }

      // optional .slg.protocol.MarchAidDTO attackerAid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attackerAid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attackeraid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarchDetailDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .slg.protocol.PositionDTO startPos = 1;
  if (has_startpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->startpos(), output);
  }

  // required .slg.protocol.PositionDTO endPos = 2;
  if (has_endpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->endpos(), output);
  }

  // required .slg.protocol.MarchPlayerDTO attacker = 3;
  if (has_attacker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attacker(), output);
  }

  // required .slg.protocol.MarchPlayerDTO defender = 4;
  if (has_defender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->defender(), output);
  }

  // optional .slg.protocol.MarchAidDTO attackerAid = 5;
  if (has_attackeraid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->attackeraid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarchDetailDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .slg.protocol.PositionDTO startPos = 1;
  if (has_startpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->startpos(), target);
  }

  // required .slg.protocol.PositionDTO endPos = 2;
  if (has_endpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->endpos(), target);
  }

  // required .slg.protocol.MarchPlayerDTO attacker = 3;
  if (has_attacker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attacker(), target);
  }

  // required .slg.protocol.MarchPlayerDTO defender = 4;
  if (has_defender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->defender(), target);
  }

  // optional .slg.protocol.MarchAidDTO attackerAid = 5;
  if (has_attackeraid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->attackeraid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarchDetailDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .slg.protocol.PositionDTO startPos = 1;
    if (has_startpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->startpos());
    }

    // required .slg.protocol.PositionDTO endPos = 2;
    if (has_endpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->endpos());
    }

    // required .slg.protocol.MarchPlayerDTO attacker = 3;
    if (has_attacker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attacker());
    }

    // required .slg.protocol.MarchPlayerDTO defender = 4;
    if (has_defender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defender());
    }

    // optional .slg.protocol.MarchAidDTO attackerAid = 5;
    if (has_attackeraid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attackeraid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarchDetailDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarchDetailDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarchDetailDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarchDetailDTO::MergeFrom(const MarchDetailDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startpos()) {
      mutable_startpos()->::slg::protocol::PositionDTO::MergeFrom(from.startpos());
    }
    if (from.has_endpos()) {
      mutable_endpos()->::slg::protocol::PositionDTO::MergeFrom(from.endpos());
    }
    if (from.has_attacker()) {
      mutable_attacker()->::slg::protocol::MarchPlayerDTO::MergeFrom(from.attacker());
    }
    if (from.has_defender()) {
      mutable_defender()->::slg::protocol::MarchPlayerDTO::MergeFrom(from.defender());
    }
    if (from.has_attackeraid()) {
      mutable_attackeraid()->::slg::protocol::MarchAidDTO::MergeFrom(from.attackeraid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarchDetailDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarchDetailDTO::CopyFrom(const MarchDetailDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarchDetailDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_startpos()) {
    if (!this->startpos().IsInitialized()) return false;
  }
  if (has_endpos()) {
    if (!this->endpos().IsInitialized()) return false;
  }
  if (has_attacker()) {
    if (!this->attacker().IsInitialized()) return false;
  }
  if (has_defender()) {
    if (!this->defender().IsInitialized()) return false;
  }
  if (has_attackeraid()) {
    if (!this->attackeraid().IsInitialized()) return false;
  }
  return true;
}

void MarchDetailDTO::Swap(MarchDetailDTO* other) {
  if (other != this) {
    std::swap(startpos_, other->startpos_);
    std::swap(endpos_, other->endpos_);
    std::swap(attacker_, other->attacker_);
    std::swap(defender_, other->defender_);
    std::swap(attackeraid_, other->attackeraid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarchDetailDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarchDetailDTO_descriptor_;
  metadata.reflection = MarchDetailDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarchTimerDTO::kStartTimeFieldNumber;
const int MarchTimerDTO::kEndTimeFieldNumber;
const int MarchTimerDTO::kSpeedUpNumFieldNumber;
const int MarchTimerDTO::kOriginalTimeFieldNumber;
#endif  // !_MSC_VER

MarchTimerDTO::MarchTimerDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarchTimerDTO::InitAsDefaultInstance() {
}

MarchTimerDTO::MarchTimerDTO(const MarchTimerDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarchTimerDTO::SharedCtor() {
  _cached_size_ = 0;
  starttime_ = 0;
  endtime_ = 0;
  speedupnum_ = 0;
  originaltime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarchTimerDTO::~MarchTimerDTO() {
  SharedDtor();
}

void MarchTimerDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarchTimerDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarchTimerDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarchTimerDTO_descriptor_;
}

const MarchTimerDTO& MarchTimerDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_march_2eproto();
  return *default_instance_;
}

MarchTimerDTO* MarchTimerDTO::default_instance_ = NULL;

MarchTimerDTO* MarchTimerDTO::New() const {
  return new MarchTimerDTO;
}

void MarchTimerDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    starttime_ = 0;
    endtime_ = 0;
    speedupnum_ = 0;
    originaltime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarchTimerDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 startTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_endTime;
        break;
      }

      // required int32 endTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_speedUpNum;
        break;
      }

      // required int32 speedUpNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speedUpNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speedupnum_)));
          set_has_speedupnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_originalTime;
        break;
      }

      // required int32 originalTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_originalTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &originaltime_)));
          set_has_originaltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarchTimerDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 startTime = 1;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->starttime(), output);
  }

  // required int32 endTime = 2;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->endtime(), output);
  }

  // required int32 speedUpNum = 3;
  if (has_speedupnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->speedupnum(), output);
  }

  // required int32 originalTime = 4;
  if (has_originaltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->originaltime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarchTimerDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 startTime = 1;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->starttime(), target);
  }

  // required int32 endTime = 2;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->endtime(), target);
  }

  // required int32 speedUpNum = 3;
  if (has_speedupnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->speedupnum(), target);
  }

  // required int32 originalTime = 4;
  if (has_originaltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->originaltime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarchTimerDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 startTime = 1;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starttime());
    }

    // required int32 endTime = 2;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endtime());
    }

    // required int32 speedUpNum = 3;
    if (has_speedupnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speedupnum());
    }

    // required int32 originalTime = 4;
    if (has_originaltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->originaltime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarchTimerDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarchTimerDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarchTimerDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarchTimerDTO::MergeFrom(const MarchTimerDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_speedupnum()) {
      set_speedupnum(from.speedupnum());
    }
    if (from.has_originaltime()) {
      set_originaltime(from.originaltime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarchTimerDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarchTimerDTO::CopyFrom(const MarchTimerDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarchTimerDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MarchTimerDTO::Swap(MarchTimerDTO* other) {
  if (other != this) {
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(speedupnum_, other->speedupnum_);
    std::swap(originaltime_, other->originaltime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarchTimerDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarchTimerDTO_descriptor_;
  metadata.reflection = MarchTimerDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarchInfoDTO::kMarchIdFieldNumber;
const int MarchInfoDTO::kTypeFieldNumber;
const int MarchInfoDTO::kDetailFieldNumber;
const int MarchInfoDTO::kTimerFieldNumber;
const int MarchInfoDTO::kStateFieldNumber;
#endif  // !_MSC_VER

MarchInfoDTO::MarchInfoDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarchInfoDTO::InitAsDefaultInstance() {
  detail_ = const_cast< ::slg::protocol::MarchDetailDTO*>(&::slg::protocol::MarchDetailDTO::default_instance());
  timer_ = const_cast< ::slg::protocol::MarchTimerDTO*>(&::slg::protocol::MarchTimerDTO::default_instance());
}

MarchInfoDTO::MarchInfoDTO(const MarchInfoDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarchInfoDTO::SharedCtor() {
  _cached_size_ = 0;
  marchid_ = GOOGLE_LONGLONG(0);
  type_ = 1;
  detail_ = NULL;
  timer_ = NULL;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarchInfoDTO::~MarchInfoDTO() {
  SharedDtor();
}

void MarchInfoDTO::SharedDtor() {
  if (this != default_instance_) {
    delete detail_;
    delete timer_;
  }
}

void MarchInfoDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarchInfoDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarchInfoDTO_descriptor_;
}

const MarchInfoDTO& MarchInfoDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_march_2eproto();
  return *default_instance_;
}

MarchInfoDTO* MarchInfoDTO::default_instance_ = NULL;

MarchInfoDTO* MarchInfoDTO::New() const {
  return new MarchInfoDTO;
}

void MarchInfoDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    marchid_ = GOOGLE_LONGLONG(0);
    type_ = 1;
    if (has_detail()) {
      if (detail_ != NULL) detail_->::slg::protocol::MarchDetailDTO::Clear();
    }
    if (has_timer()) {
      if (timer_ != NULL) timer_->::slg::protocol::MarchTimerDTO::Clear();
    }
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarchInfoDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 marchId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &marchid_)));
          set_has_marchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .slg.protocol.MarchType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::slg::protocol::MarchType_IsValid(value)) {
            set_type(static_cast< ::slg::protocol::MarchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_detail;
        break;
      }

      // required .slg.protocol.MarchDetailDTO detail = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_timer;
        break;
      }

      // required .slg.protocol.MarchTimerDTO timer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }

      // required .slg.protocol.MarchState state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::slg::protocol::MarchState_IsValid(value)) {
            set_state(static_cast< ::slg::protocol::MarchState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarchInfoDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 marchId = 1;
  if (has_marchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->marchid(), output);
  }

  // required .slg.protocol.MarchType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required .slg.protocol.MarchDetailDTO detail = 3;
  if (has_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->detail(), output);
  }

  // required .slg.protocol.MarchTimerDTO timer = 4;
  if (has_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->timer(), output);
  }

  // required .slg.protocol.MarchState state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarchInfoDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 marchId = 1;
  if (has_marchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->marchid(), target);
  }

  // required .slg.protocol.MarchType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required .slg.protocol.MarchDetailDTO detail = 3;
  if (has_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->detail(), target);
  }

  // required .slg.protocol.MarchTimerDTO timer = 4;
  if (has_timer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->timer(), target);
  }

  // required .slg.protocol.MarchState state = 5;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarchInfoDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 marchId = 1;
    if (has_marchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->marchid());
    }

    // required .slg.protocol.MarchType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .slg.protocol.MarchDetailDTO detail = 3;
    if (has_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detail());
    }

    // required .slg.protocol.MarchTimerDTO timer = 4;
    if (has_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timer());
    }

    // required .slg.protocol.MarchState state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarchInfoDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarchInfoDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarchInfoDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarchInfoDTO::MergeFrom(const MarchInfoDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_marchid()) {
      set_marchid(from.marchid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_detail()) {
      mutable_detail()->::slg::protocol::MarchDetailDTO::MergeFrom(from.detail());
    }
    if (from.has_timer()) {
      mutable_timer()->::slg::protocol::MarchTimerDTO::MergeFrom(from.timer());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarchInfoDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarchInfoDTO::CopyFrom(const MarchInfoDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarchInfoDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_detail()) {
    if (!this->detail().IsInitialized()) return false;
  }
  if (has_timer()) {
    if (!this->timer().IsInitialized()) return false;
  }
  return true;
}

void MarchInfoDTO::Swap(MarchInfoDTO* other) {
  if (other != this) {
    std::swap(marchid_, other->marchid_);
    std::swap(type_, other->type_);
    std::swap(detail_, other->detail_);
    std::swap(timer_, other->timer_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarchInfoDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarchInfoDTO_descriptor_;
  metadata.reflection = MarchInfoDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarchStartRequest::kPositionFieldNumber;
const int MarchStartRequest::kObjIdFieldNumber;
const int MarchStartRequest::kSoldiersFieldNumber;
const int MarchStartRequest::kTypeFieldNumber;
const int MarchStartRequest::kMassTimeFieldNumber;
const int MarchStartRequest::kJoinIdFieldNumber;
#endif  // !_MSC_VER

MarchStartRequest::MarchStartRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarchStartRequest::InitAsDefaultInstance() {
  position_ = const_cast< ::slg::protocol::PositionDTO*>(&::slg::protocol::PositionDTO::default_instance());
}

MarchStartRequest::MarchStartRequest(const MarchStartRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarchStartRequest::SharedCtor() {
  _cached_size_ = 0;
  position_ = NULL;
  objid_ = GOOGLE_LONGLONG(0);
  type_ = 1;
  masstime_ = 0;
  joinid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarchStartRequest::~MarchStartRequest() {
  SharedDtor();
}

void MarchStartRequest::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void MarchStartRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarchStartRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarchStartRequest_descriptor_;
}

const MarchStartRequest& MarchStartRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_march_2eproto();
  return *default_instance_;
}

MarchStartRequest* MarchStartRequest::default_instance_ = NULL;

MarchStartRequest* MarchStartRequest::New() const {
  return new MarchStartRequest;
}

void MarchStartRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_position()) {
      if (position_ != NULL) position_->::slg::protocol::PositionDTO::Clear();
    }
    objid_ = GOOGLE_LONGLONG(0);
    type_ = 1;
    masstime_ = 0;
    joinid_ = GOOGLE_LONGLONG(0);
  }
  soldiers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarchStartRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .slg.protocol.PositionDTO position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_objId;
        break;
      }

      // required int64 objId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_soldiers;
        break;
      }

      // repeated .slg.protocol.SoldierDTO soldiers = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soldiers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_soldiers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_soldiers;
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required .slg.protocol.MarchType type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::slg::protocol::MarchType_IsValid(value)) {
            set_type(static_cast< ::slg::protocol::MarchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_massTime;
        break;
      }

      // optional int32 massTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_massTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &masstime_)));
          set_has_masstime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_joinId;
        break;
      }

      // optional int64 joinId = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_joinId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &joinid_)));
          set_has_joinid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarchStartRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .slg.protocol.PositionDTO position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->position(), output);
  }

  // required int64 objId = 2;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->objid(), output);
  }

  // repeated .slg.protocol.SoldierDTO soldiers = 3;
  for (int i = 0; i < this->soldiers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->soldiers(i), output);
  }

  // required .slg.protocol.MarchType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional int32 massTime = 10;
  if (has_masstime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->masstime(), output);
  }

  // optional int64 joinId = 11;
  if (has_joinid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->joinid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarchStartRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .slg.protocol.PositionDTO position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->position(), target);
  }

  // required int64 objId = 2;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->objid(), target);
  }

  // repeated .slg.protocol.SoldierDTO soldiers = 3;
  for (int i = 0; i < this->soldiers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->soldiers(i), target);
  }

  // required .slg.protocol.MarchType type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional int32 massTime = 10;
  if (has_masstime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->masstime(), target);
  }

  // optional int64 joinId = 11;
  if (has_joinid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->joinid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarchStartRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .slg.protocol.PositionDTO position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // required int64 objId = 2;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objid());
    }

    // required .slg.protocol.MarchType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 massTime = 10;
    if (has_masstime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->masstime());
    }

    // optional int64 joinId = 11;
    if (has_joinid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->joinid());
    }

  }
  // repeated .slg.protocol.SoldierDTO soldiers = 3;
  total_size += 1 * this->soldiers_size();
  for (int i = 0; i < this->soldiers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->soldiers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarchStartRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarchStartRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarchStartRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarchStartRequest::MergeFrom(const MarchStartRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  soldiers_.MergeFrom(from.soldiers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      mutable_position()->::slg::protocol::PositionDTO::MergeFrom(from.position());
    }
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_masstime()) {
      set_masstime(from.masstime());
    }
    if (from.has_joinid()) {
      set_joinid(from.joinid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarchStartRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarchStartRequest::CopyFrom(const MarchStartRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarchStartRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  for (int i = 0; i < soldiers_size(); i++) {
    if (!this->soldiers(i).IsInitialized()) return false;
  }
  return true;
}

void MarchStartRequest::Swap(MarchStartRequest* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(objid_, other->objid_);
    soldiers_.Swap(&other->soldiers_);
    std::swap(type_, other->type_);
    std::swap(masstime_, other->masstime_);
    std::swap(joinid_, other->joinid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarchStartRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarchStartRequest_descriptor_;
  metadata.reflection = MarchStartRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarchStartResponse::kMarchIdFieldNumber;
#endif  // !_MSC_VER

MarchStartResponse::MarchStartResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarchStartResponse::InitAsDefaultInstance() {
}

MarchStartResponse::MarchStartResponse(const MarchStartResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarchStartResponse::SharedCtor() {
  _cached_size_ = 0;
  marchid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarchStartResponse::~MarchStartResponse() {
  SharedDtor();
}

void MarchStartResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarchStartResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarchStartResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarchStartResponse_descriptor_;
}

const MarchStartResponse& MarchStartResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_march_2eproto();
  return *default_instance_;
}

MarchStartResponse* MarchStartResponse::default_instance_ = NULL;

MarchStartResponse* MarchStartResponse::New() const {
  return new MarchStartResponse;
}

void MarchStartResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    marchid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarchStartResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 marchId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &marchid_)));
          set_has_marchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarchStartResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 marchId = 1;
  if (has_marchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->marchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarchStartResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 marchId = 1;
  if (has_marchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->marchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarchStartResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 marchId = 1;
    if (has_marchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->marchid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarchStartResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarchStartResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarchStartResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarchStartResponse::MergeFrom(const MarchStartResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_marchid()) {
      set_marchid(from.marchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarchStartResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarchStartResponse::CopyFrom(const MarchStartResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarchStartResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MarchStartResponse::Swap(MarchStartResponse* other) {
  if (other != this) {
    std::swap(marchid_, other->marchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarchStartResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarchStartResponse_descriptor_;
  metadata.reflection = MarchStartResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarchSpeedUpRequest::kMarchIdFieldNumber;
#endif  // !_MSC_VER

MarchSpeedUpRequest::MarchSpeedUpRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarchSpeedUpRequest::InitAsDefaultInstance() {
}

MarchSpeedUpRequest::MarchSpeedUpRequest(const MarchSpeedUpRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarchSpeedUpRequest::SharedCtor() {
  _cached_size_ = 0;
  marchid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarchSpeedUpRequest::~MarchSpeedUpRequest() {
  SharedDtor();
}

void MarchSpeedUpRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarchSpeedUpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarchSpeedUpRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarchSpeedUpRequest_descriptor_;
}

const MarchSpeedUpRequest& MarchSpeedUpRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_march_2eproto();
  return *default_instance_;
}

MarchSpeedUpRequest* MarchSpeedUpRequest::default_instance_ = NULL;

MarchSpeedUpRequest* MarchSpeedUpRequest::New() const {
  return new MarchSpeedUpRequest;
}

void MarchSpeedUpRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    marchid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarchSpeedUpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 marchId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &marchid_)));
          set_has_marchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarchSpeedUpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 marchId = 1;
  if (has_marchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->marchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarchSpeedUpRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 marchId = 1;
  if (has_marchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->marchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarchSpeedUpRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 marchId = 1;
    if (has_marchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->marchid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarchSpeedUpRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarchSpeedUpRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarchSpeedUpRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarchSpeedUpRequest::MergeFrom(const MarchSpeedUpRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_marchid()) {
      set_marchid(from.marchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarchSpeedUpRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarchSpeedUpRequest::CopyFrom(const MarchSpeedUpRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarchSpeedUpRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MarchSpeedUpRequest::Swap(MarchSpeedUpRequest* other) {
  if (other != this) {
    std::swap(marchid_, other->marchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarchSpeedUpRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarchSpeedUpRequest_descriptor_;
  metadata.reflection = MarchSpeedUpRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarchSpeedUpResponse::kMarchIdFieldNumber;
#endif  // !_MSC_VER

MarchSpeedUpResponse::MarchSpeedUpResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarchSpeedUpResponse::InitAsDefaultInstance() {
}

MarchSpeedUpResponse::MarchSpeedUpResponse(const MarchSpeedUpResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarchSpeedUpResponse::SharedCtor() {
  _cached_size_ = 0;
  marchid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarchSpeedUpResponse::~MarchSpeedUpResponse() {
  SharedDtor();
}

void MarchSpeedUpResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarchSpeedUpResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarchSpeedUpResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarchSpeedUpResponse_descriptor_;
}

const MarchSpeedUpResponse& MarchSpeedUpResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_march_2eproto();
  return *default_instance_;
}

MarchSpeedUpResponse* MarchSpeedUpResponse::default_instance_ = NULL;

MarchSpeedUpResponse* MarchSpeedUpResponse::New() const {
  return new MarchSpeedUpResponse;
}

void MarchSpeedUpResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    marchid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarchSpeedUpResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 marchId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &marchid_)));
          set_has_marchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarchSpeedUpResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 marchId = 1;
  if (has_marchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->marchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarchSpeedUpResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 marchId = 1;
  if (has_marchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->marchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarchSpeedUpResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 marchId = 1;
    if (has_marchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->marchid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarchSpeedUpResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarchSpeedUpResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarchSpeedUpResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarchSpeedUpResponse::MergeFrom(const MarchSpeedUpResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_marchid()) {
      set_marchid(from.marchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarchSpeedUpResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarchSpeedUpResponse::CopyFrom(const MarchSpeedUpResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarchSpeedUpResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MarchSpeedUpResponse::Swap(MarchSpeedUpResponse* other) {
  if (other != this) {
    std::swap(marchid_, other->marchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarchSpeedUpResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarchSpeedUpResponse_descriptor_;
  metadata.reflection = MarchSpeedUpResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarchRecallRequest::kMarchIdFieldNumber;
#endif  // !_MSC_VER

MarchRecallRequest::MarchRecallRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarchRecallRequest::InitAsDefaultInstance() {
}

MarchRecallRequest::MarchRecallRequest(const MarchRecallRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarchRecallRequest::SharedCtor() {
  _cached_size_ = 0;
  marchid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarchRecallRequest::~MarchRecallRequest() {
  SharedDtor();
}

void MarchRecallRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarchRecallRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarchRecallRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarchRecallRequest_descriptor_;
}

const MarchRecallRequest& MarchRecallRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_march_2eproto();
  return *default_instance_;
}

MarchRecallRequest* MarchRecallRequest::default_instance_ = NULL;

MarchRecallRequest* MarchRecallRequest::New() const {
  return new MarchRecallRequest;
}

void MarchRecallRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    marchid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarchRecallRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 marchId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &marchid_)));
          set_has_marchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarchRecallRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 marchId = 1;
  if (has_marchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->marchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarchRecallRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 marchId = 1;
  if (has_marchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->marchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarchRecallRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 marchId = 1;
    if (has_marchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->marchid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarchRecallRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarchRecallRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarchRecallRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarchRecallRequest::MergeFrom(const MarchRecallRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_marchid()) {
      set_marchid(from.marchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarchRecallRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarchRecallRequest::CopyFrom(const MarchRecallRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarchRecallRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MarchRecallRequest::Swap(MarchRecallRequest* other) {
  if (other != this) {
    std::swap(marchid_, other->marchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarchRecallRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarchRecallRequest_descriptor_;
  metadata.reflection = MarchRecallRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarchRecallResponse::kMarchIdFieldNumber;
#endif  // !_MSC_VER

MarchRecallResponse::MarchRecallResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarchRecallResponse::InitAsDefaultInstance() {
}

MarchRecallResponse::MarchRecallResponse(const MarchRecallResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarchRecallResponse::SharedCtor() {
  _cached_size_ = 0;
  marchid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarchRecallResponse::~MarchRecallResponse() {
  SharedDtor();
}

void MarchRecallResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarchRecallResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarchRecallResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarchRecallResponse_descriptor_;
}

const MarchRecallResponse& MarchRecallResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_march_2eproto();
  return *default_instance_;
}

MarchRecallResponse* MarchRecallResponse::default_instance_ = NULL;

MarchRecallResponse* MarchRecallResponse::New() const {
  return new MarchRecallResponse;
}

void MarchRecallResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    marchid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarchRecallResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 marchId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &marchid_)));
          set_has_marchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarchRecallResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 marchId = 1;
  if (has_marchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->marchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarchRecallResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 marchId = 1;
  if (has_marchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->marchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarchRecallResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 marchId = 1;
    if (has_marchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->marchid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarchRecallResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarchRecallResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarchRecallResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarchRecallResponse::MergeFrom(const MarchRecallResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_marchid()) {
      set_marchid(from.marchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarchRecallResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarchRecallResponse::CopyFrom(const MarchRecallResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarchRecallResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MarchRecallResponse::Swap(MarchRecallResponse* other) {
  if (other != this) {
    std::swap(marchid_, other->marchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarchRecallResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarchRecallResponse_descriptor_;
  metadata.reflection = MarchRecallResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarchDismissRequest::kMarchIdFieldNumber;
#endif  // !_MSC_VER

MarchDismissRequest::MarchDismissRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarchDismissRequest::InitAsDefaultInstance() {
}

MarchDismissRequest::MarchDismissRequest(const MarchDismissRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarchDismissRequest::SharedCtor() {
  _cached_size_ = 0;
  marchid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarchDismissRequest::~MarchDismissRequest() {
  SharedDtor();
}

void MarchDismissRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarchDismissRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarchDismissRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarchDismissRequest_descriptor_;
}

const MarchDismissRequest& MarchDismissRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_march_2eproto();
  return *default_instance_;
}

MarchDismissRequest* MarchDismissRequest::default_instance_ = NULL;

MarchDismissRequest* MarchDismissRequest::New() const {
  return new MarchDismissRequest;
}

void MarchDismissRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    marchid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarchDismissRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 marchId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &marchid_)));
          set_has_marchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarchDismissRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 marchId = 1;
  if (has_marchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->marchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarchDismissRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 marchId = 1;
  if (has_marchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->marchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarchDismissRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 marchId = 1;
    if (has_marchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->marchid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarchDismissRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarchDismissRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarchDismissRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarchDismissRequest::MergeFrom(const MarchDismissRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_marchid()) {
      set_marchid(from.marchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarchDismissRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarchDismissRequest::CopyFrom(const MarchDismissRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarchDismissRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MarchDismissRequest::Swap(MarchDismissRequest* other) {
  if (other != this) {
    std::swap(marchid_, other->marchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarchDismissRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarchDismissRequest_descriptor_;
  metadata.reflection = MarchDismissRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarchDismissResponse::kMarchIdFieldNumber;
#endif  // !_MSC_VER

MarchDismissResponse::MarchDismissResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarchDismissResponse::InitAsDefaultInstance() {
}

MarchDismissResponse::MarchDismissResponse(const MarchDismissResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarchDismissResponse::SharedCtor() {
  _cached_size_ = 0;
  marchid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarchDismissResponse::~MarchDismissResponse() {
  SharedDtor();
}

void MarchDismissResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarchDismissResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarchDismissResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarchDismissResponse_descriptor_;
}

const MarchDismissResponse& MarchDismissResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_march_2eproto();
  return *default_instance_;
}

MarchDismissResponse* MarchDismissResponse::default_instance_ = NULL;

MarchDismissResponse* MarchDismissResponse::New() const {
  return new MarchDismissResponse;
}

void MarchDismissResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    marchid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarchDismissResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 marchId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &marchid_)));
          set_has_marchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarchDismissResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 marchId = 1;
  if (has_marchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->marchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarchDismissResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 marchId = 1;
  if (has_marchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->marchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarchDismissResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 marchId = 1;
    if (has_marchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->marchid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarchDismissResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarchDismissResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarchDismissResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarchDismissResponse::MergeFrom(const MarchDismissResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_marchid()) {
      set_marchid(from.marchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarchDismissResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarchDismissResponse::CopyFrom(const MarchDismissResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarchDismissResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MarchDismissResponse::Swap(MarchDismissResponse* other) {
  if (other != this) {
    std::swap(marchid_, other->marchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarchDismissResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarchDismissResponse_descriptor_;
  metadata.reflection = MarchDismissResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarchKickRequest::kMarchIdFieldNumber;
const int MarchKickRequest::kTargetMarchIdFieldNumber;
#endif  // !_MSC_VER

MarchKickRequest::MarchKickRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarchKickRequest::InitAsDefaultInstance() {
}

MarchKickRequest::MarchKickRequest(const MarchKickRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarchKickRequest::SharedCtor() {
  _cached_size_ = 0;
  marchid_ = GOOGLE_LONGLONG(0);
  targetmarchid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarchKickRequest::~MarchKickRequest() {
  SharedDtor();
}

void MarchKickRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarchKickRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarchKickRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarchKickRequest_descriptor_;
}

const MarchKickRequest& MarchKickRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_march_2eproto();
  return *default_instance_;
}

MarchKickRequest* MarchKickRequest::default_instance_ = NULL;

MarchKickRequest* MarchKickRequest::New() const {
  return new MarchKickRequest;
}

void MarchKickRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    marchid_ = GOOGLE_LONGLONG(0);
    targetmarchid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarchKickRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 marchId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &marchid_)));
          set_has_marchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetMarchId;
        break;
      }

      // required int64 targetMarchId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetMarchId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &targetmarchid_)));
          set_has_targetmarchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarchKickRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 marchId = 1;
  if (has_marchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->marchid(), output);
  }

  // required int64 targetMarchId = 2;
  if (has_targetmarchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->targetmarchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarchKickRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 marchId = 1;
  if (has_marchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->marchid(), target);
  }

  // required int64 targetMarchId = 2;
  if (has_targetmarchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->targetmarchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarchKickRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 marchId = 1;
    if (has_marchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->marchid());
    }

    // required int64 targetMarchId = 2;
    if (has_targetmarchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->targetmarchid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarchKickRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarchKickRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarchKickRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarchKickRequest::MergeFrom(const MarchKickRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_marchid()) {
      set_marchid(from.marchid());
    }
    if (from.has_targetmarchid()) {
      set_targetmarchid(from.targetmarchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarchKickRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarchKickRequest::CopyFrom(const MarchKickRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarchKickRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MarchKickRequest::Swap(MarchKickRequest* other) {
  if (other != this) {
    std::swap(marchid_, other->marchid_);
    std::swap(targetmarchid_, other->targetmarchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarchKickRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarchKickRequest_descriptor_;
  metadata.reflection = MarchKickRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarchKickResponse::kMarchIdFieldNumber;
#endif  // !_MSC_VER

MarchKickResponse::MarchKickResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarchKickResponse::InitAsDefaultInstance() {
}

MarchKickResponse::MarchKickResponse(const MarchKickResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarchKickResponse::SharedCtor() {
  _cached_size_ = 0;
  marchid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarchKickResponse::~MarchKickResponse() {
  SharedDtor();
}

void MarchKickResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarchKickResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarchKickResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarchKickResponse_descriptor_;
}

const MarchKickResponse& MarchKickResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_march_2eproto();
  return *default_instance_;
}

MarchKickResponse* MarchKickResponse::default_instance_ = NULL;

MarchKickResponse* MarchKickResponse::New() const {
  return new MarchKickResponse;
}

void MarchKickResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    marchid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarchKickResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 marchId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &marchid_)));
          set_has_marchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarchKickResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 marchId = 1;
  if (has_marchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->marchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarchKickResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 marchId = 1;
  if (has_marchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->marchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarchKickResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 marchId = 1;
    if (has_marchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->marchid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarchKickResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarchKickResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarchKickResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarchKickResponse::MergeFrom(const MarchKickResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_marchid()) {
      set_marchid(from.marchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarchKickResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarchKickResponse::CopyFrom(const MarchKickResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarchKickResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MarchKickResponse::Swap(MarchKickResponse* other) {
  if (other != this) {
    std::swap(marchid_, other->marchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarchKickResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarchKickResponse_descriptor_;
  metadata.reflection = MarchKickResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarchInfoPush::kInfosFieldNumber;
#endif  // !_MSC_VER

MarchInfoPush::MarchInfoPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarchInfoPush::InitAsDefaultInstance() {
}

MarchInfoPush::MarchInfoPush(const MarchInfoPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarchInfoPush::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarchInfoPush::~MarchInfoPush() {
  SharedDtor();
}

void MarchInfoPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarchInfoPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarchInfoPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarchInfoPush_descriptor_;
}

const MarchInfoPush& MarchInfoPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_march_2eproto();
  return *default_instance_;
}

MarchInfoPush* MarchInfoPush::default_instance_ = NULL;

MarchInfoPush* MarchInfoPush::New() const {
  return new MarchInfoPush;
}

void MarchInfoPush::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarchInfoPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.MarchInfoDTO infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarchInfoPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.MarchInfoDTO infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarchInfoPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.MarchInfoDTO infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarchInfoPush::ByteSize() const {
  int total_size = 0;

  // repeated .slg.protocol.MarchInfoDTO infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarchInfoPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarchInfoPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarchInfoPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarchInfoPush::MergeFrom(const MarchInfoPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarchInfoPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarchInfoPush::CopyFrom(const MarchInfoPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarchInfoPush::IsInitialized() const {

  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void MarchInfoPush::Swap(MarchInfoPush* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarchInfoPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarchInfoPush_descriptor_;
  metadata.reflection = MarchInfoPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarchRemovePush::kMarchIdFieldNumber;
#endif  // !_MSC_VER

MarchRemovePush::MarchRemovePush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarchRemovePush::InitAsDefaultInstance() {
}

MarchRemovePush::MarchRemovePush(const MarchRemovePush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarchRemovePush::SharedCtor() {
  _cached_size_ = 0;
  marchid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarchRemovePush::~MarchRemovePush() {
  SharedDtor();
}

void MarchRemovePush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarchRemovePush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarchRemovePush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarchRemovePush_descriptor_;
}

const MarchRemovePush& MarchRemovePush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_march_2eproto();
  return *default_instance_;
}

MarchRemovePush* MarchRemovePush::default_instance_ = NULL;

MarchRemovePush* MarchRemovePush::New() const {
  return new MarchRemovePush;
}

void MarchRemovePush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    marchid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarchRemovePush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 marchId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &marchid_)));
          set_has_marchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarchRemovePush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 marchId = 1;
  if (has_marchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->marchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarchRemovePush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 marchId = 1;
  if (has_marchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->marchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarchRemovePush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 marchId = 1;
    if (has_marchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->marchid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarchRemovePush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarchRemovePush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarchRemovePush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarchRemovePush::MergeFrom(const MarchRemovePush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_marchid()) {
      set_marchid(from.marchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarchRemovePush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarchRemovePush::CopyFrom(const MarchRemovePush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarchRemovePush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MarchRemovePush::Swap(MarchRemovePush* other) {
  if (other != this) {
    std::swap(marchid_, other->marchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarchRemovePush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarchRemovePush_descriptor_;
  metadata.reflection = MarchRemovePush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarchResultPush::kMarchIdFieldNumber;
const int MarchResultPush::kTypeFieldNumber;
const int MarchResultPush::kAttackerFieldNumber;
const int MarchResultPush::kDefencerFieldNumber;
const int MarchResultPush::kSoldiersFieldNumber;
const int MarchResultPush::kWonFieldNumber;
#endif  // !_MSC_VER

MarchResultPush::MarchResultPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarchResultPush::InitAsDefaultInstance() {
  attacker_ = const_cast< ::slg::protocol::PositionDTO*>(&::slg::protocol::PositionDTO::default_instance());
  defencer_ = const_cast< ::slg::protocol::PositionDTO*>(&::slg::protocol::PositionDTO::default_instance());
}

MarchResultPush::MarchResultPush(const MarchResultPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarchResultPush::SharedCtor() {
  _cached_size_ = 0;
  marchid_ = GOOGLE_LONGLONG(0);
  type_ = 1;
  attacker_ = NULL;
  defencer_ = NULL;
  won_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarchResultPush::~MarchResultPush() {
  SharedDtor();
}

void MarchResultPush::SharedDtor() {
  if (this != default_instance_) {
    delete attacker_;
    delete defencer_;
  }
}

void MarchResultPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarchResultPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarchResultPush_descriptor_;
}

const MarchResultPush& MarchResultPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_march_2eproto();
  return *default_instance_;
}

MarchResultPush* MarchResultPush::default_instance_ = NULL;

MarchResultPush* MarchResultPush::New() const {
  return new MarchResultPush;
}

void MarchResultPush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    marchid_ = GOOGLE_LONGLONG(0);
    type_ = 1;
    if (has_attacker()) {
      if (attacker_ != NULL) attacker_->::slg::protocol::PositionDTO::Clear();
    }
    if (has_defencer()) {
      if (defencer_ != NULL) defencer_->::slg::protocol::PositionDTO::Clear();
    }
    won_ = false;
  }
  soldiers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarchResultPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 marchId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &marchid_)));
          set_has_marchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .slg.protocol.MarchType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::slg::protocol::MarchType_IsValid(value)) {
            set_type(static_cast< ::slg::protocol::MarchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attacker;
        break;
      }

      // required .slg.protocol.PositionDTO attacker = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attacker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attacker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_defencer;
        break;
      }

      // required .slg.protocol.PositionDTO defencer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defencer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defencer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_soldiers;
        break;
      }

      // repeated .slg.protocol.SoldierDTO soldiers = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soldiers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_soldiers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_soldiers;
        if (input->ExpectTag(48)) goto parse_won;
        break;
      }

      // required bool won = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_won:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &won_)));
          set_has_won();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarchResultPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 marchId = 1;
  if (has_marchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->marchid(), output);
  }

  // required .slg.protocol.MarchType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required .slg.protocol.PositionDTO attacker = 3;
  if (has_attacker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attacker(), output);
  }

  // required .slg.protocol.PositionDTO defencer = 4;
  if (has_defencer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->defencer(), output);
  }

  // repeated .slg.protocol.SoldierDTO soldiers = 5;
  for (int i = 0; i < this->soldiers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->soldiers(i), output);
  }

  // required bool won = 6;
  if (has_won()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->won(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarchResultPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 marchId = 1;
  if (has_marchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->marchid(), target);
  }

  // required .slg.protocol.MarchType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required .slg.protocol.PositionDTO attacker = 3;
  if (has_attacker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attacker(), target);
  }

  // required .slg.protocol.PositionDTO defencer = 4;
  if (has_defencer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->defencer(), target);
  }

  // repeated .slg.protocol.SoldierDTO soldiers = 5;
  for (int i = 0; i < this->soldiers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->soldiers(i), target);
  }

  // required bool won = 6;
  if (has_won()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->won(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarchResultPush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 marchId = 1;
    if (has_marchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->marchid());
    }

    // required .slg.protocol.MarchType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .slg.protocol.PositionDTO attacker = 3;
    if (has_attacker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attacker());
    }

    // required .slg.protocol.PositionDTO defencer = 4;
    if (has_defencer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defencer());
    }

    // required bool won = 6;
    if (has_won()) {
      total_size += 1 + 1;
    }

  }
  // repeated .slg.protocol.SoldierDTO soldiers = 5;
  total_size += 1 * this->soldiers_size();
  for (int i = 0; i < this->soldiers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->soldiers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarchResultPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarchResultPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarchResultPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarchResultPush::MergeFrom(const MarchResultPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  soldiers_.MergeFrom(from.soldiers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_marchid()) {
      set_marchid(from.marchid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_attacker()) {
      mutable_attacker()->::slg::protocol::PositionDTO::MergeFrom(from.attacker());
    }
    if (from.has_defencer()) {
      mutable_defencer()->::slg::protocol::PositionDTO::MergeFrom(from.defencer());
    }
    if (from.has_won()) {
      set_won(from.won());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarchResultPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarchResultPush::CopyFrom(const MarchResultPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarchResultPush::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002f) != 0x0000002f) return false;

  if (has_attacker()) {
    if (!this->attacker().IsInitialized()) return false;
  }
  if (has_defencer()) {
    if (!this->defencer().IsInitialized()) return false;
  }
  for (int i = 0; i < soldiers_size(); i++) {
    if (!this->soldiers(i).IsInitialized()) return false;
  }
  return true;
}

void MarchResultPush::Swap(MarchResultPush* other) {
  if (other != this) {
    std::swap(marchid_, other->marchid_);
    std::swap(type_, other->type_);
    std::swap(attacker_, other->attacker_);
    std::swap(defencer_, other->defencer_);
    soldiers_.Swap(&other->soldiers_);
    std::swap(won_, other->won_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarchResultPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarchResultPush_descriptor_;
  metadata.reflection = MarchResultPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarchTimerPush::kMarchIdFieldNumber;
const int MarchTimerPush::kTimerFieldNumber;
#endif  // !_MSC_VER

MarchTimerPush::MarchTimerPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarchTimerPush::InitAsDefaultInstance() {
  timer_ = const_cast< ::slg::protocol::MarchTimerDTO*>(&::slg::protocol::MarchTimerDTO::default_instance());
}

MarchTimerPush::MarchTimerPush(const MarchTimerPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarchTimerPush::SharedCtor() {
  _cached_size_ = 0;
  marchid_ = GOOGLE_LONGLONG(0);
  timer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarchTimerPush::~MarchTimerPush() {
  SharedDtor();
}

void MarchTimerPush::SharedDtor() {
  if (this != default_instance_) {
    delete timer_;
  }
}

void MarchTimerPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarchTimerPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarchTimerPush_descriptor_;
}

const MarchTimerPush& MarchTimerPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_march_2eproto();
  return *default_instance_;
}

MarchTimerPush* MarchTimerPush::default_instance_ = NULL;

MarchTimerPush* MarchTimerPush::New() const {
  return new MarchTimerPush;
}

void MarchTimerPush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    marchid_ = GOOGLE_LONGLONG(0);
    if (has_timer()) {
      if (timer_ != NULL) timer_->::slg::protocol::MarchTimerDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarchTimerPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 marchId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &marchid_)));
          set_has_marchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_timer;
        break;
      }

      // required .slg.protocol.MarchTimerDTO timer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarchTimerPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 marchId = 1;
  if (has_marchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->marchid(), output);
  }

  // required .slg.protocol.MarchTimerDTO timer = 2;
  if (has_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->timer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarchTimerPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 marchId = 1;
  if (has_marchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->marchid(), target);
  }

  // required .slg.protocol.MarchTimerDTO timer = 2;
  if (has_timer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->timer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarchTimerPush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 marchId = 1;
    if (has_marchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->marchid());
    }

    // required .slg.protocol.MarchTimerDTO timer = 2;
    if (has_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarchTimerPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarchTimerPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarchTimerPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarchTimerPush::MergeFrom(const MarchTimerPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_marchid()) {
      set_marchid(from.marchid());
    }
    if (from.has_timer()) {
      mutable_timer()->::slg::protocol::MarchTimerDTO::MergeFrom(from.timer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarchTimerPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarchTimerPush::CopyFrom(const MarchTimerPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarchTimerPush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_timer()) {
    if (!this->timer().IsInitialized()) return false;
  }
  return true;
}

void MarchTimerPush::Swap(MarchTimerPush* other) {
  if (other != this) {
    std::swap(marchid_, other->marchid_);
    std::swap(timer_, other->timer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarchTimerPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarchTimerPush_descriptor_;
  metadata.reflection = MarchTimerPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MilitaryDTO::kMarchFieldNumber;
const int MilitaryDTO::kDefenderAidFieldNumber;
#endif  // !_MSC_VER

MilitaryDTO::MilitaryDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MilitaryDTO::InitAsDefaultInstance() {
  march_ = const_cast< ::slg::protocol::MarchInfoDTO*>(&::slg::protocol::MarchInfoDTO::default_instance());
  defenderaid_ = const_cast< ::slg::protocol::MarchAidDTO*>(&::slg::protocol::MarchAidDTO::default_instance());
}

MilitaryDTO::MilitaryDTO(const MilitaryDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MilitaryDTO::SharedCtor() {
  _cached_size_ = 0;
  march_ = NULL;
  defenderaid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MilitaryDTO::~MilitaryDTO() {
  SharedDtor();
}

void MilitaryDTO::SharedDtor() {
  if (this != default_instance_) {
    delete march_;
    delete defenderaid_;
  }
}

void MilitaryDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MilitaryDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MilitaryDTO_descriptor_;
}

const MilitaryDTO& MilitaryDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_march_2eproto();
  return *default_instance_;
}

MilitaryDTO* MilitaryDTO::default_instance_ = NULL;

MilitaryDTO* MilitaryDTO::New() const {
  return new MilitaryDTO;
}

void MilitaryDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_march()) {
      if (march_ != NULL) march_->::slg::protocol::MarchInfoDTO::Clear();
    }
    if (has_defenderaid()) {
      if (defenderaid_ != NULL) defenderaid_->::slg::protocol::MarchAidDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MilitaryDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .slg.protocol.MarchInfoDTO march = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_march()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_defenderAid;
        break;
      }

      // optional .slg.protocol.MarchAidDTO defenderAid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defenderAid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defenderaid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MilitaryDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .slg.protocol.MarchInfoDTO march = 1;
  if (has_march()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->march(), output);
  }

  // optional .slg.protocol.MarchAidDTO defenderAid = 2;
  if (has_defenderaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->defenderaid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MilitaryDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .slg.protocol.MarchInfoDTO march = 1;
  if (has_march()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->march(), target);
  }

  // optional .slg.protocol.MarchAidDTO defenderAid = 2;
  if (has_defenderaid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->defenderaid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MilitaryDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .slg.protocol.MarchInfoDTO march = 1;
    if (has_march()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->march());
    }

    // optional .slg.protocol.MarchAidDTO defenderAid = 2;
    if (has_defenderaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defenderaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MilitaryDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MilitaryDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MilitaryDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MilitaryDTO::MergeFrom(const MilitaryDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_march()) {
      mutable_march()->::slg::protocol::MarchInfoDTO::MergeFrom(from.march());
    }
    if (from.has_defenderaid()) {
      mutable_defenderaid()->::slg::protocol::MarchAidDTO::MergeFrom(from.defenderaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MilitaryDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MilitaryDTO::CopyFrom(const MilitaryDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MilitaryDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_march()) {
    if (!this->march().IsInitialized()) return false;
  }
  if (has_defenderaid()) {
    if (!this->defenderaid().IsInitialized()) return false;
  }
  return true;
}

void MilitaryDTO::Swap(MilitaryDTO* other) {
  if (other != this) {
    std::swap(march_, other->march_);
    std::swap(defenderaid_, other->defenderaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MilitaryDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MilitaryDTO_descriptor_;
  metadata.reflection = MilitaryDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MilitaryPush::kMilitariesFieldNumber;
#endif  // !_MSC_VER

MilitaryPush::MilitaryPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MilitaryPush::InitAsDefaultInstance() {
}

MilitaryPush::MilitaryPush(const MilitaryPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MilitaryPush::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MilitaryPush::~MilitaryPush() {
  SharedDtor();
}

void MilitaryPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MilitaryPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MilitaryPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MilitaryPush_descriptor_;
}

const MilitaryPush& MilitaryPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_march_2eproto();
  return *default_instance_;
}

MilitaryPush* MilitaryPush::default_instance_ = NULL;

MilitaryPush* MilitaryPush::New() const {
  return new MilitaryPush;
}

void MilitaryPush::Clear() {
  militaries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MilitaryPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.MilitaryDTO militaries = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_militaries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_militaries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_militaries;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MilitaryPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.MilitaryDTO militaries = 1;
  for (int i = 0; i < this->militaries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->militaries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MilitaryPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.MilitaryDTO militaries = 1;
  for (int i = 0; i < this->militaries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->militaries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MilitaryPush::ByteSize() const {
  int total_size = 0;

  // repeated .slg.protocol.MilitaryDTO militaries = 1;
  total_size += 1 * this->militaries_size();
  for (int i = 0; i < this->militaries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->militaries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MilitaryPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MilitaryPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MilitaryPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MilitaryPush::MergeFrom(const MilitaryPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  militaries_.MergeFrom(from.militaries_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MilitaryPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MilitaryPush::CopyFrom(const MilitaryPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MilitaryPush::IsInitialized() const {

  for (int i = 0; i < militaries_size(); i++) {
    if (!this->militaries(i).IsInitialized()) return false;
  }
  return true;
}

void MilitaryPush::Swap(MilitaryPush* other) {
  if (other != this) {
    militaries_.Swap(&other->militaries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MilitaryPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MilitaryPush_descriptor_;
  metadata.reflection = MilitaryPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MilitaryDeletePush::kMarchIdFieldNumber;
#endif  // !_MSC_VER

MilitaryDeletePush::MilitaryDeletePush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MilitaryDeletePush::InitAsDefaultInstance() {
}

MilitaryDeletePush::MilitaryDeletePush(const MilitaryDeletePush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MilitaryDeletePush::SharedCtor() {
  _cached_size_ = 0;
  marchid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MilitaryDeletePush::~MilitaryDeletePush() {
  SharedDtor();
}

void MilitaryDeletePush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MilitaryDeletePush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MilitaryDeletePush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MilitaryDeletePush_descriptor_;
}

const MilitaryDeletePush& MilitaryDeletePush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_march_2eproto();
  return *default_instance_;
}

MilitaryDeletePush* MilitaryDeletePush::default_instance_ = NULL;

MilitaryDeletePush* MilitaryDeletePush::New() const {
  return new MilitaryDeletePush;
}

void MilitaryDeletePush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    marchid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MilitaryDeletePush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 marchId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &marchid_)));
          set_has_marchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MilitaryDeletePush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 marchId = 1;
  if (has_marchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->marchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MilitaryDeletePush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 marchId = 1;
  if (has_marchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->marchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MilitaryDeletePush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 marchId = 1;
    if (has_marchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->marchid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MilitaryDeletePush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MilitaryDeletePush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MilitaryDeletePush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MilitaryDeletePush::MergeFrom(const MilitaryDeletePush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_marchid()) {
      set_marchid(from.marchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MilitaryDeletePush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MilitaryDeletePush::CopyFrom(const MilitaryDeletePush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MilitaryDeletePush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MilitaryDeletePush::Swap(MilitaryDeletePush* other) {
  if (other != this) {
    std::swap(marchid_, other->marchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MilitaryDeletePush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MilitaryDeletePush_descriptor_;
  metadata.reflection = MilitaryDeletePush_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace slg

// @@protoc_insertion_point(global_scope)
