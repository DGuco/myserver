// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rank.proto

#ifndef PROTOBUF_rank_2eproto__INCLUDED
#define PROTOBUF_rank_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace slg {
namespace protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rank_2eproto();
void protobuf_AssignDesc_rank_2eproto();
void protobuf_ShutdownFile_rank_2eproto();

class PlayerRankDTO;
class AllianceRankDTO;
class RankRequest;
class RankResponse;
class LikeRequest;
class LikeResponse;
class RankLikePush;

enum RankCommandId {
  RANK_LIST = 1901,
  RANK_LIKE = 1903
};
bool RankCommandId_IsValid(int value);
const RankCommandId RankCommandId_MIN = RANK_LIST;
const RankCommandId RankCommandId_MAX = RANK_LIKE;
const int RankCommandId_ARRAYSIZE = RankCommandId_MAX + 1;

const ::google::protobuf::EnumDescriptor* RankCommandId_descriptor();
inline const ::std::string& RankCommandId_Name(RankCommandId value) {
  return ::google::protobuf::internal::NameOfEnum(
    RankCommandId_descriptor(), value);
}
inline bool RankCommandId_Parse(
    const ::std::string& name, RankCommandId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RankCommandId>(
    RankCommandId_descriptor(), name, value);
}
enum RankPushId {
  LIKE_TIMES_PUSH = 51901
};
bool RankPushId_IsValid(int value);
const RankPushId RankPushId_MIN = LIKE_TIMES_PUSH;
const RankPushId RankPushId_MAX = LIKE_TIMES_PUSH;
const int RankPushId_ARRAYSIZE = RankPushId_MAX + 1;

const ::google::protobuf::EnumDescriptor* RankPushId_descriptor();
inline const ::std::string& RankPushId_Name(RankPushId value) {
  return ::google::protobuf::internal::NameOfEnum(
    RankPushId_descriptor(), value);
}
inline bool RankPushId_Parse(
    const ::std::string& name, RankPushId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RankPushId>(
    RankPushId_descriptor(), name, value);
}
// ===================================================================

class PlayerRankDTO : public ::google::protobuf::Message {
 public:
  PlayerRankDTO();
  virtual ~PlayerRankDTO();

  PlayerRankDTO(const PlayerRankDTO& from);

  inline PlayerRankDTO& operator=(const PlayerRankDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerRankDTO& default_instance();

  void Swap(PlayerRankDTO* other);

  // implements Message ----------------------------------------------

  PlayerRankDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerRankDTO& from);
  void MergeFrom(const PlayerRankDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // required string icon = 2;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 2;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // required int32 rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // required int32 battle = 4;
  inline bool has_battle() const;
  inline void clear_battle();
  static const int kBattleFieldNumber = 4;
  inline ::google::protobuf::int32 battle() const;
  inline void set_battle(::google::protobuf::int32 value);

  // required bool praise = 5;
  inline bool has_praise() const;
  inline void clear_praise();
  static const int kPraiseFieldNumber = 5;
  inline bool praise() const;
  inline void set_praise(bool value);

  // required int32 lastRank = 6;
  inline bool has_lastrank() const;
  inline void clear_lastrank();
  static const int kLastRankFieldNumber = 6;
  inline ::google::protobuf::int32 lastrank() const;
  inline void set_lastrank(::google::protobuf::int32 value);

  // required string nickname = 7;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 7;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // required int32 aid = 8;
  inline bool has_aid() const;
  inline void clear_aid();
  static const int kAidFieldNumber = 8;
  inline ::google::protobuf::int32 aid() const;
  inline void set_aid(::google::protobuf::int32 value);

  // optional string aname = 9;
  inline bool has_aname() const;
  inline void clear_aname();
  static const int kAnameFieldNumber = 9;
  inline const ::std::string& aname() const;
  inline void set_aname(const ::std::string& value);
  inline void set_aname(const char* value);
  inline void set_aname(const char* value, size_t size);
  inline ::std::string* mutable_aname();
  inline ::std::string* release_aname();
  inline void set_allocated_aname(::std::string* aname);

  // @@protoc_insertion_point(class_scope:slg.protocol.PlayerRankDTO)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_battle();
  inline void clear_has_battle();
  inline void set_has_praise();
  inline void clear_has_praise();
  inline void set_has_lastrank();
  inline void clear_has_lastrank();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_aid();
  inline void clear_has_aid();
  inline void set_has_aname();
  inline void clear_has_aname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 playerid_;
  ::std::string* icon_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 battle_;
  bool praise_;
  ::google::protobuf::int32 lastrank_;
  ::std::string* nickname_;
  ::std::string* aname_;
  ::google::protobuf::int32 aid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_rank_2eproto();
  friend void protobuf_AssignDesc_rank_2eproto();
  friend void protobuf_ShutdownFile_rank_2eproto();

  void InitAsDefaultInstance();
  static PlayerRankDTO* default_instance_;
};
// -------------------------------------------------------------------

class AllianceRankDTO : public ::google::protobuf::Message {
 public:
  AllianceRankDTO();
  virtual ~AllianceRankDTO();

  AllianceRankDTO(const AllianceRankDTO& from);

  inline AllianceRankDTO& operator=(const AllianceRankDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceRankDTO& default_instance();

  void Swap(AllianceRankDTO* other);

  // implements Message ----------------------------------------------

  AllianceRankDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceRankDTO& from);
  void MergeFrom(const AllianceRankDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 aid = 1;
  inline bool has_aid() const;
  inline void clear_aid();
  static const int kAidFieldNumber = 1;
  inline ::google::protobuf::int32 aid() const;
  inline void set_aid(::google::protobuf::int32 value);

  // required string aname = 2;
  inline bool has_aname() const;
  inline void clear_aname();
  static const int kAnameFieldNumber = 2;
  inline const ::std::string& aname() const;
  inline void set_aname(const ::std::string& value);
  inline void set_aname(const char* value);
  inline void set_aname(const char* value, size_t size);
  inline ::std::string* mutable_aname();
  inline ::std::string* release_aname();
  inline void set_allocated_aname(::std::string* aname);

  // required int32 icon = 3;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 3;
  inline ::google::protobuf::int32 icon() const;
  inline void set_icon(::google::protobuf::int32 value);

  // required int32 current = 4;
  inline bool has_current() const;
  inline void clear_current();
  static const int kCurrentFieldNumber = 4;
  inline ::google::protobuf::int32 current() const;
  inline void set_current(::google::protobuf::int32 value);

  // required int32 limit = 5;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 5;
  inline ::google::protobuf::int32 limit() const;
  inline void set_limit(::google::protobuf::int32 value);

  // required int32 honor = 6;
  inline bool has_honor() const;
  inline void clear_honor();
  static const int kHonorFieldNumber = 6;
  inline ::google::protobuf::int32 honor() const;
  inline void set_honor(::google::protobuf::int32 value);

  // required int32 lastRank = 7;
  inline bool has_lastrank() const;
  inline void clear_lastrank();
  static const int kLastRankFieldNumber = 7;
  inline ::google::protobuf::int32 lastrank() const;
  inline void set_lastrank(::google::protobuf::int32 value);

  // required int32 rank = 8;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 8;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // required string nickname = 9;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 9;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // @@protoc_insertion_point(class_scope:slg.protocol.AllianceRankDTO)
 private:
  inline void set_has_aid();
  inline void clear_has_aid();
  inline void set_has_aname();
  inline void clear_has_aname();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_current();
  inline void clear_has_current();
  inline void set_has_limit();
  inline void clear_has_limit();
  inline void set_has_honor();
  inline void clear_has_honor();
  inline void set_has_lastrank();
  inline void clear_has_lastrank();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_nickname();
  inline void clear_has_nickname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* aname_;
  ::google::protobuf::int32 aid_;
  ::google::protobuf::int32 icon_;
  ::google::protobuf::int32 current_;
  ::google::protobuf::int32 limit_;
  ::google::protobuf::int32 honor_;
  ::google::protobuf::int32 lastrank_;
  ::std::string* nickname_;
  ::google::protobuf::int32 rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_rank_2eproto();
  friend void protobuf_AssignDesc_rank_2eproto();
  friend void protobuf_ShutdownFile_rank_2eproto();

  void InitAsDefaultInstance();
  static AllianceRankDTO* default_instance_;
};
// -------------------------------------------------------------------

class RankRequest : public ::google::protobuf::Message {
 public:
  RankRequest();
  virtual ~RankRequest();

  RankRequest(const RankRequest& from);

  inline RankRequest& operator=(const RankRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankRequest& default_instance();

  void Swap(RankRequest* other);

  // implements Message ----------------------------------------------

  RankRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankRequest& from);
  void MergeFrom(const RankRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:slg.protocol.RankRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_rank_2eproto();
  friend void protobuf_AssignDesc_rank_2eproto();
  friend void protobuf_ShutdownFile_rank_2eproto();

  void InitAsDefaultInstance();
  static RankRequest* default_instance_;
};
// -------------------------------------------------------------------

class RankResponse : public ::google::protobuf::Message {
 public:
  RankResponse();
  virtual ~RankResponse();

  RankResponse(const RankResponse& from);

  inline RankResponse& operator=(const RankResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankResponse& default_instance();

  void Swap(RankResponse* other);

  // implements Message ----------------------------------------------

  RankResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankResponse& from);
  void MergeFrom(const RankResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .slg.protocol.PlayerRankDTO players = 1;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 1;
  inline const ::slg::protocol::PlayerRankDTO& players(int index) const;
  inline ::slg::protocol::PlayerRankDTO* mutable_players(int index);
  inline ::slg::protocol::PlayerRankDTO* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::PlayerRankDTO >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::PlayerRankDTO >*
      mutable_players();

  // required int32 playerRank = 2;
  inline bool has_playerrank() const;
  inline void clear_playerrank();
  static const int kPlayerRankFieldNumber = 2;
  inline ::google::protobuf::int32 playerrank() const;
  inline void set_playerrank(::google::protobuf::int32 value);

  // required int32 playerLast = 3;
  inline bool has_playerlast() const;
  inline void clear_playerlast();
  static const int kPlayerLastFieldNumber = 3;
  inline ::google::protobuf::int32 playerlast() const;
  inline void set_playerlast(::google::protobuf::int32 value);

  // repeated .slg.protocol.AllianceRankDTO alliances = 4;
  inline int alliances_size() const;
  inline void clear_alliances();
  static const int kAlliancesFieldNumber = 4;
  inline const ::slg::protocol::AllianceRankDTO& alliances(int index) const;
  inline ::slg::protocol::AllianceRankDTO* mutable_alliances(int index);
  inline ::slg::protocol::AllianceRankDTO* add_alliances();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceRankDTO >&
      alliances() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceRankDTO >*
      mutable_alliances();

  // optional int32 allianceRank = 5;
  inline bool has_alliancerank() const;
  inline void clear_alliancerank();
  static const int kAllianceRankFieldNumber = 5;
  inline ::google::protobuf::int32 alliancerank() const;
  inline void set_alliancerank(::google::protobuf::int32 value);

  // optional int32 allianceLast = 6;
  inline bool has_alliancelast() const;
  inline void clear_alliancelast();
  static const int kAllianceLastFieldNumber = 6;
  inline ::google::protobuf::int32 alliancelast() const;
  inline void set_alliancelast(::google::protobuf::int32 value);

  // optional int32 allianceHonor = 7;
  inline bool has_alliancehonor() const;
  inline void clear_alliancehonor();
  static const int kAllianceHonorFieldNumber = 7;
  inline ::google::protobuf::int32 alliancehonor() const;
  inline void set_alliancehonor(::google::protobuf::int32 value);

  // optional int32 allianceLimit = 8;
  inline bool has_alliancelimit() const;
  inline void clear_alliancelimit();
  static const int kAllianceLimitFieldNumber = 8;
  inline ::google::protobuf::int32 alliancelimit() const;
  inline void set_alliancelimit(::google::protobuf::int32 value);

  // optional int32 allianceNum = 9;
  inline bool has_alliancenum() const;
  inline void clear_alliancenum();
  static const int kAllianceNumFieldNumber = 9;
  inline ::google::protobuf::int32 alliancenum() const;
  inline void set_alliancenum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.RankResponse)
 private:
  inline void set_has_playerrank();
  inline void clear_has_playerrank();
  inline void set_has_playerlast();
  inline void clear_has_playerlast();
  inline void set_has_alliancerank();
  inline void clear_has_alliancerank();
  inline void set_has_alliancelast();
  inline void clear_has_alliancelast();
  inline void set_has_alliancehonor();
  inline void clear_has_alliancehonor();
  inline void set_has_alliancelimit();
  inline void clear_has_alliancelimit();
  inline void set_has_alliancenum();
  inline void clear_has_alliancenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::slg::protocol::PlayerRankDTO > players_;
  ::google::protobuf::int32 playerrank_;
  ::google::protobuf::int32 playerlast_;
  ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceRankDTO > alliances_;
  ::google::protobuf::int32 alliancerank_;
  ::google::protobuf::int32 alliancelast_;
  ::google::protobuf::int32 alliancehonor_;
  ::google::protobuf::int32 alliancelimit_;
  ::google::protobuf::int32 alliancenum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_rank_2eproto();
  friend void protobuf_AssignDesc_rank_2eproto();
  friend void protobuf_ShutdownFile_rank_2eproto();

  void InitAsDefaultInstance();
  static RankResponse* default_instance_;
};
// -------------------------------------------------------------------

class LikeRequest : public ::google::protobuf::Message {
 public:
  LikeRequest();
  virtual ~LikeRequest();

  LikeRequest(const LikeRequest& from);

  inline LikeRequest& operator=(const LikeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LikeRequest& default_instance();

  void Swap(LikeRequest* other);

  // implements Message ----------------------------------------------

  LikeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LikeRequest& from);
  void MergeFrom(const LikeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ranking = 1;
  inline bool has_ranking() const;
  inline void clear_ranking();
  static const int kRankingFieldNumber = 1;
  inline ::google::protobuf::int32 ranking() const;
  inline void set_ranking(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.LikeRequest)
 private:
  inline void set_has_ranking();
  inline void clear_has_ranking();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ranking_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_rank_2eproto();
  friend void protobuf_AssignDesc_rank_2eproto();
  friend void protobuf_ShutdownFile_rank_2eproto();

  void InitAsDefaultInstance();
  static LikeRequest* default_instance_;
};
// -------------------------------------------------------------------

class LikeResponse : public ::google::protobuf::Message {
 public:
  LikeResponse();
  virtual ~LikeResponse();

  LikeResponse(const LikeResponse& from);

  inline LikeResponse& operator=(const LikeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LikeResponse& default_instance();

  void Swap(LikeResponse* other);

  // implements Message ----------------------------------------------

  LikeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LikeResponse& from);
  void MergeFrom(const LikeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ranking = 1;
  inline bool has_ranking() const;
  inline void clear_ranking();
  static const int kRankingFieldNumber = 1;
  inline ::google::protobuf::int32 ranking() const;
  inline void set_ranking(::google::protobuf::int32 value);

  // required .slg.protocol.PropertyDTO reward = 2;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 2;
  inline const ::slg::protocol::PropertyDTO& reward() const;
  inline ::slg::protocol::PropertyDTO* mutable_reward();
  inline ::slg::protocol::PropertyDTO* release_reward();
  inline void set_allocated_reward(::slg::protocol::PropertyDTO* reward);

  // @@protoc_insertion_point(class_scope:slg.protocol.LikeResponse)
 private:
  inline void set_has_ranking();
  inline void clear_has_ranking();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::slg::protocol::PropertyDTO* reward_;
  ::google::protobuf::int32 ranking_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_rank_2eproto();
  friend void protobuf_AssignDesc_rank_2eproto();
  friend void protobuf_ShutdownFile_rank_2eproto();

  void InitAsDefaultInstance();
  static LikeResponse* default_instance_;
};
// -------------------------------------------------------------------

class RankLikePush : public ::google::protobuf::Message {
 public:
  RankLikePush();
  virtual ~RankLikePush();

  RankLikePush(const RankLikePush& from);

  inline RankLikePush& operator=(const RankLikePush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankLikePush& default_instance();

  void Swap(RankLikePush* other);

  // implements Message ----------------------------------------------

  RankLikePush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankLikePush& from);
  void MergeFrom(const RankLikePush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 likeTimes = 1;
  inline bool has_liketimes() const;
  inline void clear_liketimes();
  static const int kLikeTimesFieldNumber = 1;
  inline ::google::protobuf::int32 liketimes() const;
  inline void set_liketimes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.RankLikePush)
 private:
  inline void set_has_liketimes();
  inline void clear_has_liketimes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 liketimes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_rank_2eproto();
  friend void protobuf_AssignDesc_rank_2eproto();
  friend void protobuf_ShutdownFile_rank_2eproto();

  void InitAsDefaultInstance();
  static RankLikePush* default_instance_;
};
// ===================================================================


// ===================================================================

// PlayerRankDTO

// required int64 playerId = 1;
inline bool PlayerRankDTO::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerRankDTO::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerRankDTO::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerRankDTO::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 PlayerRankDTO::playerid() const {
  return playerid_;
}
inline void PlayerRankDTO::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// required string icon = 2;
inline bool PlayerRankDTO::has_icon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerRankDTO::set_has_icon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerRankDTO::clear_has_icon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerRankDTO::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& PlayerRankDTO::icon() const {
  return *icon_;
}
inline void PlayerRankDTO::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void PlayerRankDTO::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void PlayerRankDTO::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerRankDTO::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* PlayerRankDTO::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerRankDTO::set_allocated_icon(::std::string* icon) {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 rank = 3;
inline bool PlayerRankDTO::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerRankDTO::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerRankDTO::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerRankDTO::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 PlayerRankDTO::rank() const {
  return rank_;
}
inline void PlayerRankDTO::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// required int32 battle = 4;
inline bool PlayerRankDTO::has_battle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerRankDTO::set_has_battle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerRankDTO::clear_has_battle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerRankDTO::clear_battle() {
  battle_ = 0;
  clear_has_battle();
}
inline ::google::protobuf::int32 PlayerRankDTO::battle() const {
  return battle_;
}
inline void PlayerRankDTO::set_battle(::google::protobuf::int32 value) {
  set_has_battle();
  battle_ = value;
}

// required bool praise = 5;
inline bool PlayerRankDTO::has_praise() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerRankDTO::set_has_praise() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerRankDTO::clear_has_praise() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerRankDTO::clear_praise() {
  praise_ = false;
  clear_has_praise();
}
inline bool PlayerRankDTO::praise() const {
  return praise_;
}
inline void PlayerRankDTO::set_praise(bool value) {
  set_has_praise();
  praise_ = value;
}

// required int32 lastRank = 6;
inline bool PlayerRankDTO::has_lastrank() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerRankDTO::set_has_lastrank() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerRankDTO::clear_has_lastrank() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerRankDTO::clear_lastrank() {
  lastrank_ = 0;
  clear_has_lastrank();
}
inline ::google::protobuf::int32 PlayerRankDTO::lastrank() const {
  return lastrank_;
}
inline void PlayerRankDTO::set_lastrank(::google::protobuf::int32 value) {
  set_has_lastrank();
  lastrank_ = value;
}

// required string nickname = 7;
inline bool PlayerRankDTO::has_nickname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerRankDTO::set_has_nickname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerRankDTO::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerRankDTO::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& PlayerRankDTO::nickname() const {
  return *nickname_;
}
inline void PlayerRankDTO::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void PlayerRankDTO::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void PlayerRankDTO::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerRankDTO::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* PlayerRankDTO::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerRankDTO::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 aid = 8;
inline bool PlayerRankDTO::has_aid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerRankDTO::set_has_aid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerRankDTO::clear_has_aid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerRankDTO::clear_aid() {
  aid_ = 0;
  clear_has_aid();
}
inline ::google::protobuf::int32 PlayerRankDTO::aid() const {
  return aid_;
}
inline void PlayerRankDTO::set_aid(::google::protobuf::int32 value) {
  set_has_aid();
  aid_ = value;
}

// optional string aname = 9;
inline bool PlayerRankDTO::has_aname() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlayerRankDTO::set_has_aname() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlayerRankDTO::clear_has_aname() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlayerRankDTO::clear_aname() {
  if (aname_ != &::google::protobuf::internal::kEmptyString) {
    aname_->clear();
  }
  clear_has_aname();
}
inline const ::std::string& PlayerRankDTO::aname() const {
  return *aname_;
}
inline void PlayerRankDTO::set_aname(const ::std::string& value) {
  set_has_aname();
  if (aname_ == &::google::protobuf::internal::kEmptyString) {
    aname_ = new ::std::string;
  }
  aname_->assign(value);
}
inline void PlayerRankDTO::set_aname(const char* value) {
  set_has_aname();
  if (aname_ == &::google::protobuf::internal::kEmptyString) {
    aname_ = new ::std::string;
  }
  aname_->assign(value);
}
inline void PlayerRankDTO::set_aname(const char* value, size_t size) {
  set_has_aname();
  if (aname_ == &::google::protobuf::internal::kEmptyString) {
    aname_ = new ::std::string;
  }
  aname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerRankDTO::mutable_aname() {
  set_has_aname();
  if (aname_ == &::google::protobuf::internal::kEmptyString) {
    aname_ = new ::std::string;
  }
  return aname_;
}
inline ::std::string* PlayerRankDTO::release_aname() {
  clear_has_aname();
  if (aname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = aname_;
    aname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerRankDTO::set_allocated_aname(::std::string* aname) {
  if (aname_ != &::google::protobuf::internal::kEmptyString) {
    delete aname_;
  }
  if (aname) {
    set_has_aname();
    aname_ = aname;
  } else {
    clear_has_aname();
    aname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AllianceRankDTO

// required int32 aid = 1;
inline bool AllianceRankDTO::has_aid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllianceRankDTO::set_has_aid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllianceRankDTO::clear_has_aid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllianceRankDTO::clear_aid() {
  aid_ = 0;
  clear_has_aid();
}
inline ::google::protobuf::int32 AllianceRankDTO::aid() const {
  return aid_;
}
inline void AllianceRankDTO::set_aid(::google::protobuf::int32 value) {
  set_has_aid();
  aid_ = value;
}

// required string aname = 2;
inline bool AllianceRankDTO::has_aname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllianceRankDTO::set_has_aname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllianceRankDTO::clear_has_aname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllianceRankDTO::clear_aname() {
  if (aname_ != &::google::protobuf::internal::kEmptyString) {
    aname_->clear();
  }
  clear_has_aname();
}
inline const ::std::string& AllianceRankDTO::aname() const {
  return *aname_;
}
inline void AllianceRankDTO::set_aname(const ::std::string& value) {
  set_has_aname();
  if (aname_ == &::google::protobuf::internal::kEmptyString) {
    aname_ = new ::std::string;
  }
  aname_->assign(value);
}
inline void AllianceRankDTO::set_aname(const char* value) {
  set_has_aname();
  if (aname_ == &::google::protobuf::internal::kEmptyString) {
    aname_ = new ::std::string;
  }
  aname_->assign(value);
}
inline void AllianceRankDTO::set_aname(const char* value, size_t size) {
  set_has_aname();
  if (aname_ == &::google::protobuf::internal::kEmptyString) {
    aname_ = new ::std::string;
  }
  aname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllianceRankDTO::mutable_aname() {
  set_has_aname();
  if (aname_ == &::google::protobuf::internal::kEmptyString) {
    aname_ = new ::std::string;
  }
  return aname_;
}
inline ::std::string* AllianceRankDTO::release_aname() {
  clear_has_aname();
  if (aname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = aname_;
    aname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AllianceRankDTO::set_allocated_aname(::std::string* aname) {
  if (aname_ != &::google::protobuf::internal::kEmptyString) {
    delete aname_;
  }
  if (aname) {
    set_has_aname();
    aname_ = aname;
  } else {
    clear_has_aname();
    aname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 icon = 3;
inline bool AllianceRankDTO::has_icon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AllianceRankDTO::set_has_icon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AllianceRankDTO::clear_has_icon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AllianceRankDTO::clear_icon() {
  icon_ = 0;
  clear_has_icon();
}
inline ::google::protobuf::int32 AllianceRankDTO::icon() const {
  return icon_;
}
inline void AllianceRankDTO::set_icon(::google::protobuf::int32 value) {
  set_has_icon();
  icon_ = value;
}

// required int32 current = 4;
inline bool AllianceRankDTO::has_current() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AllianceRankDTO::set_has_current() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AllianceRankDTO::clear_has_current() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AllianceRankDTO::clear_current() {
  current_ = 0;
  clear_has_current();
}
inline ::google::protobuf::int32 AllianceRankDTO::current() const {
  return current_;
}
inline void AllianceRankDTO::set_current(::google::protobuf::int32 value) {
  set_has_current();
  current_ = value;
}

// required int32 limit = 5;
inline bool AllianceRankDTO::has_limit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AllianceRankDTO::set_has_limit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AllianceRankDTO::clear_has_limit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AllianceRankDTO::clear_limit() {
  limit_ = 0;
  clear_has_limit();
}
inline ::google::protobuf::int32 AllianceRankDTO::limit() const {
  return limit_;
}
inline void AllianceRankDTO::set_limit(::google::protobuf::int32 value) {
  set_has_limit();
  limit_ = value;
}

// required int32 honor = 6;
inline bool AllianceRankDTO::has_honor() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AllianceRankDTO::set_has_honor() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AllianceRankDTO::clear_has_honor() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AllianceRankDTO::clear_honor() {
  honor_ = 0;
  clear_has_honor();
}
inline ::google::protobuf::int32 AllianceRankDTO::honor() const {
  return honor_;
}
inline void AllianceRankDTO::set_honor(::google::protobuf::int32 value) {
  set_has_honor();
  honor_ = value;
}

// required int32 lastRank = 7;
inline bool AllianceRankDTO::has_lastrank() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AllianceRankDTO::set_has_lastrank() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AllianceRankDTO::clear_has_lastrank() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AllianceRankDTO::clear_lastrank() {
  lastrank_ = 0;
  clear_has_lastrank();
}
inline ::google::protobuf::int32 AllianceRankDTO::lastrank() const {
  return lastrank_;
}
inline void AllianceRankDTO::set_lastrank(::google::protobuf::int32 value) {
  set_has_lastrank();
  lastrank_ = value;
}

// required int32 rank = 8;
inline bool AllianceRankDTO::has_rank() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AllianceRankDTO::set_has_rank() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AllianceRankDTO::clear_has_rank() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AllianceRankDTO::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 AllianceRankDTO::rank() const {
  return rank_;
}
inline void AllianceRankDTO::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// required string nickname = 9;
inline bool AllianceRankDTO::has_nickname() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AllianceRankDTO::set_has_nickname() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AllianceRankDTO::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AllianceRankDTO::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& AllianceRankDTO::nickname() const {
  return *nickname_;
}
inline void AllianceRankDTO::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void AllianceRankDTO::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void AllianceRankDTO::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllianceRankDTO::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* AllianceRankDTO::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AllianceRankDTO::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RankRequest

// -------------------------------------------------------------------

// RankResponse

// repeated .slg.protocol.PlayerRankDTO players = 1;
inline int RankResponse::players_size() const {
  return players_.size();
}
inline void RankResponse::clear_players() {
  players_.Clear();
}
inline const ::slg::protocol::PlayerRankDTO& RankResponse::players(int index) const {
  return players_.Get(index);
}
inline ::slg::protocol::PlayerRankDTO* RankResponse::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::slg::protocol::PlayerRankDTO* RankResponse::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::PlayerRankDTO >&
RankResponse::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::PlayerRankDTO >*
RankResponse::mutable_players() {
  return &players_;
}

// required int32 playerRank = 2;
inline bool RankResponse::has_playerrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankResponse::set_has_playerrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankResponse::clear_has_playerrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankResponse::clear_playerrank() {
  playerrank_ = 0;
  clear_has_playerrank();
}
inline ::google::protobuf::int32 RankResponse::playerrank() const {
  return playerrank_;
}
inline void RankResponse::set_playerrank(::google::protobuf::int32 value) {
  set_has_playerrank();
  playerrank_ = value;
}

// required int32 playerLast = 3;
inline bool RankResponse::has_playerlast() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RankResponse::set_has_playerlast() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RankResponse::clear_has_playerlast() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RankResponse::clear_playerlast() {
  playerlast_ = 0;
  clear_has_playerlast();
}
inline ::google::protobuf::int32 RankResponse::playerlast() const {
  return playerlast_;
}
inline void RankResponse::set_playerlast(::google::protobuf::int32 value) {
  set_has_playerlast();
  playerlast_ = value;
}

// repeated .slg.protocol.AllianceRankDTO alliances = 4;
inline int RankResponse::alliances_size() const {
  return alliances_.size();
}
inline void RankResponse::clear_alliances() {
  alliances_.Clear();
}
inline const ::slg::protocol::AllianceRankDTO& RankResponse::alliances(int index) const {
  return alliances_.Get(index);
}
inline ::slg::protocol::AllianceRankDTO* RankResponse::mutable_alliances(int index) {
  return alliances_.Mutable(index);
}
inline ::slg::protocol::AllianceRankDTO* RankResponse::add_alliances() {
  return alliances_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceRankDTO >&
RankResponse::alliances() const {
  return alliances_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::AllianceRankDTO >*
RankResponse::mutable_alliances() {
  return &alliances_;
}

// optional int32 allianceRank = 5;
inline bool RankResponse::has_alliancerank() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RankResponse::set_has_alliancerank() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RankResponse::clear_has_alliancerank() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RankResponse::clear_alliancerank() {
  alliancerank_ = 0;
  clear_has_alliancerank();
}
inline ::google::protobuf::int32 RankResponse::alliancerank() const {
  return alliancerank_;
}
inline void RankResponse::set_alliancerank(::google::protobuf::int32 value) {
  set_has_alliancerank();
  alliancerank_ = value;
}

// optional int32 allianceLast = 6;
inline bool RankResponse::has_alliancelast() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RankResponse::set_has_alliancelast() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RankResponse::clear_has_alliancelast() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RankResponse::clear_alliancelast() {
  alliancelast_ = 0;
  clear_has_alliancelast();
}
inline ::google::protobuf::int32 RankResponse::alliancelast() const {
  return alliancelast_;
}
inline void RankResponse::set_alliancelast(::google::protobuf::int32 value) {
  set_has_alliancelast();
  alliancelast_ = value;
}

// optional int32 allianceHonor = 7;
inline bool RankResponse::has_alliancehonor() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RankResponse::set_has_alliancehonor() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RankResponse::clear_has_alliancehonor() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RankResponse::clear_alliancehonor() {
  alliancehonor_ = 0;
  clear_has_alliancehonor();
}
inline ::google::protobuf::int32 RankResponse::alliancehonor() const {
  return alliancehonor_;
}
inline void RankResponse::set_alliancehonor(::google::protobuf::int32 value) {
  set_has_alliancehonor();
  alliancehonor_ = value;
}

// optional int32 allianceLimit = 8;
inline bool RankResponse::has_alliancelimit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RankResponse::set_has_alliancelimit() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RankResponse::clear_has_alliancelimit() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RankResponse::clear_alliancelimit() {
  alliancelimit_ = 0;
  clear_has_alliancelimit();
}
inline ::google::protobuf::int32 RankResponse::alliancelimit() const {
  return alliancelimit_;
}
inline void RankResponse::set_alliancelimit(::google::protobuf::int32 value) {
  set_has_alliancelimit();
  alliancelimit_ = value;
}

// optional int32 allianceNum = 9;
inline bool RankResponse::has_alliancenum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RankResponse::set_has_alliancenum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RankResponse::clear_has_alliancenum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RankResponse::clear_alliancenum() {
  alliancenum_ = 0;
  clear_has_alliancenum();
}
inline ::google::protobuf::int32 RankResponse::alliancenum() const {
  return alliancenum_;
}
inline void RankResponse::set_alliancenum(::google::protobuf::int32 value) {
  set_has_alliancenum();
  alliancenum_ = value;
}

// -------------------------------------------------------------------

// LikeRequest

// required int32 ranking = 1;
inline bool LikeRequest::has_ranking() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LikeRequest::set_has_ranking() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LikeRequest::clear_has_ranking() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LikeRequest::clear_ranking() {
  ranking_ = 0;
  clear_has_ranking();
}
inline ::google::protobuf::int32 LikeRequest::ranking() const {
  return ranking_;
}
inline void LikeRequest::set_ranking(::google::protobuf::int32 value) {
  set_has_ranking();
  ranking_ = value;
}

// -------------------------------------------------------------------

// LikeResponse

// required int32 ranking = 1;
inline bool LikeResponse::has_ranking() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LikeResponse::set_has_ranking() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LikeResponse::clear_has_ranking() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LikeResponse::clear_ranking() {
  ranking_ = 0;
  clear_has_ranking();
}
inline ::google::protobuf::int32 LikeResponse::ranking() const {
  return ranking_;
}
inline void LikeResponse::set_ranking(::google::protobuf::int32 value) {
  set_has_ranking();
  ranking_ = value;
}

// required .slg.protocol.PropertyDTO reward = 2;
inline bool LikeResponse::has_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LikeResponse::set_has_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LikeResponse::clear_has_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LikeResponse::clear_reward() {
  if (reward_ != NULL) reward_->::slg::protocol::PropertyDTO::Clear();
  clear_has_reward();
}
inline const ::slg::protocol::PropertyDTO& LikeResponse::reward() const {
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::slg::protocol::PropertyDTO* LikeResponse::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::slg::protocol::PropertyDTO;
  return reward_;
}
inline ::slg::protocol::PropertyDTO* LikeResponse::release_reward() {
  clear_has_reward();
  ::slg::protocol::PropertyDTO* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void LikeResponse::set_allocated_reward(::slg::protocol::PropertyDTO* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
}

// -------------------------------------------------------------------

// RankLikePush

// required int32 likeTimes = 1;
inline bool RankLikePush::has_liketimes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankLikePush::set_has_liketimes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankLikePush::clear_has_liketimes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankLikePush::clear_liketimes() {
  liketimes_ = 0;
  clear_has_liketimes();
}
inline ::google::protobuf::int32 RankLikePush::liketimes() const {
  return liketimes_;
}
inline void RankLikePush::set_liketimes(::google::protobuf::int32 value) {
  set_has_liketimes();
  liketimes_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace slg

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::slg::protocol::RankCommandId>() {
  return ::slg::protocol::RankCommandId_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::slg::protocol::RankPushId>() {
  return ::slg::protocol::RankPushId_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rank_2eproto__INCLUDED
