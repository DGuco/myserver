// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: market.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "market.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace slg {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* MarketPlayerDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketPlayerDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* TradeTargetDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TradeTargetDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* TradeInfoDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TradeInfoDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerMarketInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerMarketInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerMarketInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerMarketInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddMarketTargetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddMarketTargetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddMarketTargetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddMarketTargetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TradeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TradeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyMarketTraderRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyMarketTraderRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyMarketTraderResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyMarketTraderResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TradeInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TradeInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TradeInfoReponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TradeInfoReponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TradeTimePush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TradeTimePush_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MarketCommandId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MarketPushId_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_market_2eproto() {
  protobuf_AddDesc_market_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "market.proto");
  GOOGLE_CHECK(file != NULL);
  MarketPlayerDTO_descriptor_ = file->message_type(0);
  static const int MarketPlayerDTO_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketPlayerDTO, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketPlayerDTO, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketPlayerDTO, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketPlayerDTO, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketPlayerDTO, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketPlayerDTO, traderid_),
  };
  MarketPlayerDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketPlayerDTO_descriptor_,
      MarketPlayerDTO::default_instance_,
      MarketPlayerDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketPlayerDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketPlayerDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketPlayerDTO));
  TradeTargetDTO_descriptor_ = file->message_type(1);
  static const int TradeTargetDTO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeTargetDTO, taregetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeTargetDTO, taregetpos_),
  };
  TradeTargetDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TradeTargetDTO_descriptor_,
      TradeTargetDTO::default_instance_,
      TradeTargetDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeTargetDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeTargetDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TradeTargetDTO));
  TradeInfoDTO_descriptor_ = file->message_type(2);
  static const int TradeInfoDTO_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeInfoDTO, targetname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeInfoDTO, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeInfoDTO, rewards_),
  };
  TradeInfoDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TradeInfoDTO_descriptor_,
      TradeInfoDTO::default_instance_,
      TradeInfoDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeInfoDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeInfoDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TradeInfoDTO));
  PlayerMarketInfoRequest_descriptor_ = file->message_type(3);
  static const int PlayerMarketInfoRequest_offsets_[1] = {
  };
  PlayerMarketInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerMarketInfoRequest_descriptor_,
      PlayerMarketInfoRequest::default_instance_,
      PlayerMarketInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMarketInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMarketInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerMarketInfoRequest));
  PlayerMarketInfoResponse_descriptor_ = file->message_type(4);
  static const int PlayerMarketInfoResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMarketInfoResponse, trader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMarketInfoResponse, traderlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMarketInfoResponse, playerlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMarketInfoResponse, selectlist_),
  };
  PlayerMarketInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerMarketInfoResponse_descriptor_,
      PlayerMarketInfoResponse::default_instance_,
      PlayerMarketInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMarketInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMarketInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerMarketInfoResponse));
  AddMarketTargetRequest_descriptor_ = file->message_type(5);
  static const int AddMarketTargetRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMarketTargetRequest, playerlist_),
  };
  AddMarketTargetRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddMarketTargetRequest_descriptor_,
      AddMarketTargetRequest::default_instance_,
      AddMarketTargetRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMarketTargetRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMarketTargetRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddMarketTargetRequest));
  AddMarketTargetResponse_descriptor_ = file->message_type(6);
  static const int AddMarketTargetResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMarketTargetResponse, playerlist_),
  };
  AddMarketTargetResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddMarketTargetResponse_descriptor_,
      AddMarketTargetResponse::default_instance_,
      AddMarketTargetResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMarketTargetResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMarketTargetResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddMarketTargetResponse));
  TradeRequest_descriptor_ = file->message_type(7);
  static const int TradeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeRequest, traderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeRequest, targetlist_),
  };
  TradeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TradeRequest_descriptor_,
      TradeRequest::default_instance_,
      TradeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TradeRequest));
  BuyMarketTraderRequest_descriptor_ = file->message_type(8);
  static const int BuyMarketTraderRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyMarketTraderRequest, trader_),
  };
  BuyMarketTraderRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyMarketTraderRequest_descriptor_,
      BuyMarketTraderRequest::default_instance_,
      BuyMarketTraderRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyMarketTraderRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyMarketTraderRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyMarketTraderRequest));
  BuyMarketTraderResponse_descriptor_ = file->message_type(9);
  static const int BuyMarketTraderResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyMarketTraderResponse, trader_),
  };
  BuyMarketTraderResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyMarketTraderResponse_descriptor_,
      BuyMarketTraderResponse::default_instance_,
      BuyMarketTraderResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyMarketTraderResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyMarketTraderResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyMarketTraderResponse));
  TradeInfoRequest_descriptor_ = file->message_type(10);
  static const int TradeInfoRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeInfoRequest, uid_),
  };
  TradeInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TradeInfoRequest_descriptor_,
      TradeInfoRequest::default_instance_,
      TradeInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TradeInfoRequest));
  TradeInfoReponse_descriptor_ = file->message_type(11);
  static const int TradeInfoReponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeInfoReponse, tadelist_),
  };
  TradeInfoReponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TradeInfoReponse_descriptor_,
      TradeInfoReponse::default_instance_,
      TradeInfoReponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeInfoReponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeInfoReponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TradeInfoReponse));
  TradeTimePush_descriptor_ = file->message_type(12);
  static const int TradeTimePush_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeTimePush, totaltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeTimePush, lasttime_),
  };
  TradeTimePush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TradeTimePush_descriptor_,
      TradeTimePush::default_instance_,
      TradeTimePush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeTimePush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeTimePush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TradeTimePush));
  MarketCommandId_descriptor_ = file->enum_type(0);
  MarketPushId_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_market_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketPlayerDTO_descriptor_, &MarketPlayerDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TradeTargetDTO_descriptor_, &TradeTargetDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TradeInfoDTO_descriptor_, &TradeInfoDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerMarketInfoRequest_descriptor_, &PlayerMarketInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerMarketInfoResponse_descriptor_, &PlayerMarketInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddMarketTargetRequest_descriptor_, &AddMarketTargetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddMarketTargetResponse_descriptor_, &AddMarketTargetResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TradeRequest_descriptor_, &TradeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyMarketTraderRequest_descriptor_, &BuyMarketTraderRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyMarketTraderResponse_descriptor_, &BuyMarketTraderResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TradeInfoRequest_descriptor_, &TradeInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TradeInfoReponse_descriptor_, &TradeInfoReponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TradeTimePush_descriptor_, &TradeTimePush::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_market_2eproto() {
  delete MarketPlayerDTO::default_instance_;
  delete MarketPlayerDTO_reflection_;
  delete TradeTargetDTO::default_instance_;
  delete TradeTargetDTO_reflection_;
  delete TradeInfoDTO::default_instance_;
  delete TradeInfoDTO_reflection_;
  delete PlayerMarketInfoRequest::default_instance_;
  delete PlayerMarketInfoRequest_reflection_;
  delete PlayerMarketInfoResponse::default_instance_;
  delete PlayerMarketInfoResponse_reflection_;
  delete AddMarketTargetRequest::default_instance_;
  delete AddMarketTargetRequest_reflection_;
  delete AddMarketTargetResponse::default_instance_;
  delete AddMarketTargetResponse_reflection_;
  delete TradeRequest::default_instance_;
  delete TradeRequest_reflection_;
  delete BuyMarketTraderRequest::default_instance_;
  delete BuyMarketTraderRequest_reflection_;
  delete BuyMarketTraderResponse::default_instance_;
  delete BuyMarketTraderResponse_reflection_;
  delete TradeInfoRequest::default_instance_;
  delete TradeInfoRequest_reflection_;
  delete TradeInfoReponse::default_instance_;
  delete TradeInfoReponse_reflection_;
  delete TradeTimePush::default_instance_;
  delete TradeTimePush_reflection_;
}

void protobuf_AddDesc_market_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::slg::protocol::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014market.proto\022\014slg.protocol\032\014common.pro"
    "to\"\216\001\n\017MarketPlayerDTO\022\020\n\010playerId\030\001 \002(\003"
    "\022\014\n\004icon\030\002 \002(\t\022\r\n\005level\030\003 \002(\005\022\022\n\nplayerN"
    "ame\030\004 \002(\t\022&\n\003pos\030\005 \002(\0132\031.slg.protocol.Po"
    "sitionDTO\022\020\n\010traderId\030\006 \002(\005\"R\n\016TradeTarg"
    "etDTO\022\021\n\ttaregetId\030\001 \002(\003\022-\n\ntaregetPos\030\002"
    " \002(\0132\031.slg.protocol.PositionDTO\"]\n\014Trade"
    "InfoDTO\022\022\n\ntargetName\030\001 \002(\t\022\r\n\005event\030\002 \002"
    "(\005\022*\n\007rewards\030\003 \003(\0132\031.slg.protocol.Prope"
    "rtyDTO\"\031\n\027PlayerMarketInfoRequest\"\205\001\n\030Pl"
    "ayerMarketInfoResponse\022\016\n\006trader\030\001 \002(\005\022\022"
    "\n\ntraderList\030\002 \003(\005\0221\n\nplayerList\030\003 \003(\0132\035"
    ".slg.protocol.MarketPlayerDTO\022\022\n\nselectL"
    "ist\030\004 \003(\003\",\n\026AddMarketTargetRequest\022\022\n\np"
    "layerList\030\001 \003(\003\"-\n\027AddMarketTargetRespon"
    "se\022\022\n\nplayerList\030\001 \003(\003\"R\n\014TradeRequest\022\020"
    "\n\010traderId\030\001 \003(\005\0220\n\ntargetList\030\002 \003(\0132\034.s"
    "lg.protocol.TradeTargetDTO\"(\n\026BuyMarketT"
    "raderRequest\022\016\n\006trader\030\001 \002(\005\")\n\027BuyMarke"
    "tTraderResponse\022\016\n\006trader\030\001 \002(\005\"\037\n\020Trade"
    "InfoRequest\022\013\n\003uid\030\001 \002(\003\"@\n\020TradeInfoRep"
    "onse\022,\n\010tadeList\030\001 \003(\0132\032.slg.protocol.Tr"
    "adeInfoDTO\"4\n\rTradeTimePush\022\021\n\ttotalTime"
    "\030\001 \002(\005\022\020\n\010lastTime\030\002 \002(\005*\210\001\n\017MarketComma"
    "ndId\022\024\n\017MARKET_INFO_REQ\020\265\020\022\026\n\021MARKET_ADD"
    "_TARGET\020\266\020\022\027\n\022MARKET_TRADE_START\020\267\020\022\026\n\021M"
    "ARKET_BUY_TRADER\020\270\020\022\026\n\021MARGET_TRADE_INFO"
    "\020\271\020*,\n\014MarketPushId\022\034\n\026MARKET_TRADE_TIME"
    "_PUSH\020\205\227\003B+\n\034com.bonusstudio.slg.protoco"
    "lB\013MarketProto", 1174);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "market.proto", &protobuf_RegisterTypes);
  MarketPlayerDTO::default_instance_ = new MarketPlayerDTO();
  TradeTargetDTO::default_instance_ = new TradeTargetDTO();
  TradeInfoDTO::default_instance_ = new TradeInfoDTO();
  PlayerMarketInfoRequest::default_instance_ = new PlayerMarketInfoRequest();
  PlayerMarketInfoResponse::default_instance_ = new PlayerMarketInfoResponse();
  AddMarketTargetRequest::default_instance_ = new AddMarketTargetRequest();
  AddMarketTargetResponse::default_instance_ = new AddMarketTargetResponse();
  TradeRequest::default_instance_ = new TradeRequest();
  BuyMarketTraderRequest::default_instance_ = new BuyMarketTraderRequest();
  BuyMarketTraderResponse::default_instance_ = new BuyMarketTraderResponse();
  TradeInfoRequest::default_instance_ = new TradeInfoRequest();
  TradeInfoReponse::default_instance_ = new TradeInfoReponse();
  TradeTimePush::default_instance_ = new TradeTimePush();
  MarketPlayerDTO::default_instance_->InitAsDefaultInstance();
  TradeTargetDTO::default_instance_->InitAsDefaultInstance();
  TradeInfoDTO::default_instance_->InitAsDefaultInstance();
  PlayerMarketInfoRequest::default_instance_->InitAsDefaultInstance();
  PlayerMarketInfoResponse::default_instance_->InitAsDefaultInstance();
  AddMarketTargetRequest::default_instance_->InitAsDefaultInstance();
  AddMarketTargetResponse::default_instance_->InitAsDefaultInstance();
  TradeRequest::default_instance_->InitAsDefaultInstance();
  BuyMarketTraderRequest::default_instance_->InitAsDefaultInstance();
  BuyMarketTraderResponse::default_instance_->InitAsDefaultInstance();
  TradeInfoRequest::default_instance_->InitAsDefaultInstance();
  TradeInfoReponse::default_instance_->InitAsDefaultInstance();
  TradeTimePush::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_market_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_market_2eproto {
  StaticDescriptorInitializer_market_2eproto() {
    protobuf_AddDesc_market_2eproto();
  }
} static_descriptor_initializer_market_2eproto_;
const ::google::protobuf::EnumDescriptor* MarketCommandId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketCommandId_descriptor_;
}
bool MarketCommandId_IsValid(int value) {
  switch(value) {
    case 2101:
    case 2102:
    case 2103:
    case 2104:
    case 2105:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MarketPushId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketPushId_descriptor_;
}
bool MarketPushId_IsValid(int value) {
  switch(value) {
    case 52101:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MarketPlayerDTO::kPlayerIdFieldNumber;
const int MarketPlayerDTO::kIconFieldNumber;
const int MarketPlayerDTO::kLevelFieldNumber;
const int MarketPlayerDTO::kPlayerNameFieldNumber;
const int MarketPlayerDTO::kPosFieldNumber;
const int MarketPlayerDTO::kTraderIdFieldNumber;
#endif  // !_MSC_VER

MarketPlayerDTO::MarketPlayerDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketPlayerDTO::InitAsDefaultInstance() {
  pos_ = const_cast< ::slg::protocol::PositionDTO*>(&::slg::protocol::PositionDTO::default_instance());
}

MarketPlayerDTO::MarketPlayerDTO(const MarketPlayerDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketPlayerDTO::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pos_ = NULL;
  traderid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketPlayerDTO::~MarketPlayerDTO() {
  SharedDtor();
}

void MarketPlayerDTO::SharedDtor() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
    delete pos_;
  }
}

void MarketPlayerDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketPlayerDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketPlayerDTO_descriptor_;
}

const MarketPlayerDTO& MarketPlayerDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_market_2eproto();
  return *default_instance_;
}

MarketPlayerDTO* MarketPlayerDTO::default_instance_ = NULL;

MarketPlayerDTO* MarketPlayerDTO::New() const {
  return new MarketPlayerDTO;
}

void MarketPlayerDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    level_ = 0;
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    if (has_pos()) {
      if (pos_ != NULL) pos_->::slg::protocol::PositionDTO::Clear();
    }
    traderid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketPlayerDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_icon;
        break;
      }

      // required string icon = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_playerName;
        break;
      }

      // required string playerName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pos;
        break;
      }

      // required .slg.protocol.PositionDTO pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_traderId;
        break;
      }

      // required int32 traderId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_traderId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &traderid_)));
          set_has_traderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarketPlayerDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // required string icon = 2;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->icon(), output);
  }

  // required int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // required string playerName = 4;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->playername(), output);
  }

  // required .slg.protocol.PositionDTO pos = 5;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pos(), output);
  }

  // required int32 traderId = 6;
  if (has_traderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->traderid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketPlayerDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // required string icon = 2;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->icon(), target);
  }

  // required int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // required string playerName = 4;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->playername(), target);
  }

  // required .slg.protocol.PositionDTO pos = 5;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pos(), target);
  }

  // required int32 traderId = 6;
  if (has_traderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->traderid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketPlayerDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // required string icon = 2;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // required int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required string playerName = 4;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // required .slg.protocol.PositionDTO pos = 5;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // required int32 traderId = 6;
    if (has_traderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->traderid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketPlayerDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketPlayerDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketPlayerDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketPlayerDTO::MergeFrom(const MarketPlayerDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_pos()) {
      mutable_pos()->::slg::protocol::PositionDTO::MergeFrom(from.pos());
    }
    if (from.has_traderid()) {
      set_traderid(from.traderid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketPlayerDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketPlayerDTO::CopyFrom(const MarketPlayerDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketPlayerDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void MarketPlayerDTO::Swap(MarketPlayerDTO* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(icon_, other->icon_);
    std::swap(level_, other->level_);
    std::swap(playername_, other->playername_);
    std::swap(pos_, other->pos_);
    std::swap(traderid_, other->traderid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketPlayerDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketPlayerDTO_descriptor_;
  metadata.reflection = MarketPlayerDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TradeTargetDTO::kTaregetIdFieldNumber;
const int TradeTargetDTO::kTaregetPosFieldNumber;
#endif  // !_MSC_VER

TradeTargetDTO::TradeTargetDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TradeTargetDTO::InitAsDefaultInstance() {
  taregetpos_ = const_cast< ::slg::protocol::PositionDTO*>(&::slg::protocol::PositionDTO::default_instance());
}

TradeTargetDTO::TradeTargetDTO(const TradeTargetDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TradeTargetDTO::SharedCtor() {
  _cached_size_ = 0;
  taregetid_ = GOOGLE_LONGLONG(0);
  taregetpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TradeTargetDTO::~TradeTargetDTO() {
  SharedDtor();
}

void TradeTargetDTO::SharedDtor() {
  if (this != default_instance_) {
    delete taregetpos_;
  }
}

void TradeTargetDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeTargetDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradeTargetDTO_descriptor_;
}

const TradeTargetDTO& TradeTargetDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_market_2eproto();
  return *default_instance_;
}

TradeTargetDTO* TradeTargetDTO::default_instance_ = NULL;

TradeTargetDTO* TradeTargetDTO::New() const {
  return new TradeTargetDTO;
}

void TradeTargetDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taregetid_ = GOOGLE_LONGLONG(0);
    if (has_taregetpos()) {
      if (taregetpos_ != NULL) taregetpos_->::slg::protocol::PositionDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TradeTargetDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 taregetId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &taregetid_)));
          set_has_taregetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_taregetPos;
        break;
      }

      // required .slg.protocol.PositionDTO taregetPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taregetPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_taregetpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TradeTargetDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 taregetId = 1;
  if (has_taregetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->taregetid(), output);
  }

  // required .slg.protocol.PositionDTO taregetPos = 2;
  if (has_taregetpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->taregetpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TradeTargetDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 taregetId = 1;
  if (has_taregetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->taregetid(), target);
  }

  // required .slg.protocol.PositionDTO taregetPos = 2;
  if (has_taregetpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->taregetpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TradeTargetDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 taregetId = 1;
    if (has_taregetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->taregetid());
    }

    // required .slg.protocol.PositionDTO taregetPos = 2;
    if (has_taregetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->taregetpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeTargetDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TradeTargetDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TradeTargetDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TradeTargetDTO::MergeFrom(const TradeTargetDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taregetid()) {
      set_taregetid(from.taregetid());
    }
    if (from.has_taregetpos()) {
      mutable_taregetpos()->::slg::protocol::PositionDTO::MergeFrom(from.taregetpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TradeTargetDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeTargetDTO::CopyFrom(const TradeTargetDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeTargetDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_taregetpos()) {
    if (!this->taregetpos().IsInitialized()) return false;
  }
  return true;
}

void TradeTargetDTO::Swap(TradeTargetDTO* other) {
  if (other != this) {
    std::swap(taregetid_, other->taregetid_);
    std::swap(taregetpos_, other->taregetpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TradeTargetDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TradeTargetDTO_descriptor_;
  metadata.reflection = TradeTargetDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TradeInfoDTO::kTargetNameFieldNumber;
const int TradeInfoDTO::kEventFieldNumber;
const int TradeInfoDTO::kRewardsFieldNumber;
#endif  // !_MSC_VER

TradeInfoDTO::TradeInfoDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TradeInfoDTO::InitAsDefaultInstance() {
}

TradeInfoDTO::TradeInfoDTO(const TradeInfoDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TradeInfoDTO::SharedCtor() {
  _cached_size_ = 0;
  targetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  event_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TradeInfoDTO::~TradeInfoDTO() {
  SharedDtor();
}

void TradeInfoDTO::SharedDtor() {
  if (targetname_ != &::google::protobuf::internal::kEmptyString) {
    delete targetname_;
  }
  if (this != default_instance_) {
  }
}

void TradeInfoDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeInfoDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradeInfoDTO_descriptor_;
}

const TradeInfoDTO& TradeInfoDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_market_2eproto();
  return *default_instance_;
}

TradeInfoDTO* TradeInfoDTO::default_instance_ = NULL;

TradeInfoDTO* TradeInfoDTO::New() const {
  return new TradeInfoDTO;
}

void TradeInfoDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_targetname()) {
      if (targetname_ != &::google::protobuf::internal::kEmptyString) {
        targetname_->clear();
      }
    }
    event_ = 0;
  }
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TradeInfoDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string targetName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->targetname().data(), this->targetname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_event;
        break;
      }

      // required int32 event = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_)));
          set_has_event();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rewards;
        break;
      }

      // repeated .slg.protocol.PropertyDTO rewards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rewards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TradeInfoDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string targetName = 1;
  if (has_targetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetname().data(), this->targetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->targetname(), output);
  }

  // required int32 event = 2;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->event(), output);
  }

  // repeated .slg.protocol.PropertyDTO rewards = 3;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TradeInfoDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string targetName = 1;
  if (has_targetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetname().data(), this->targetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->targetname(), target);
  }

  // required int32 event = 2;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->event(), target);
  }

  // repeated .slg.protocol.PropertyDTO rewards = 3;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TradeInfoDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string targetName = 1;
    if (has_targetname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->targetname());
    }

    // required int32 event = 2;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event());
    }

  }
  // repeated .slg.protocol.PropertyDTO rewards = 3;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeInfoDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TradeInfoDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TradeInfoDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TradeInfoDTO::MergeFrom(const TradeInfoDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetname()) {
      set_targetname(from.targetname());
    }
    if (from.has_event()) {
      set_event(from.event());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TradeInfoDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeInfoDTO::CopyFrom(const TradeInfoDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeInfoDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < rewards_size(); i++) {
    if (!this->rewards(i).IsInitialized()) return false;
  }
  return true;
}

void TradeInfoDTO::Swap(TradeInfoDTO* other) {
  if (other != this) {
    std::swap(targetname_, other->targetname_);
    std::swap(event_, other->event_);
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TradeInfoDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TradeInfoDTO_descriptor_;
  metadata.reflection = TradeInfoDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PlayerMarketInfoRequest::PlayerMarketInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerMarketInfoRequest::InitAsDefaultInstance() {
}

PlayerMarketInfoRequest::PlayerMarketInfoRequest(const PlayerMarketInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerMarketInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerMarketInfoRequest::~PlayerMarketInfoRequest() {
  SharedDtor();
}

void PlayerMarketInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerMarketInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerMarketInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerMarketInfoRequest_descriptor_;
}

const PlayerMarketInfoRequest& PlayerMarketInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_market_2eproto();
  return *default_instance_;
}

PlayerMarketInfoRequest* PlayerMarketInfoRequest::default_instance_ = NULL;

PlayerMarketInfoRequest* PlayerMarketInfoRequest::New() const {
  return new PlayerMarketInfoRequest;
}

void PlayerMarketInfoRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerMarketInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PlayerMarketInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerMarketInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerMarketInfoRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerMarketInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerMarketInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerMarketInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerMarketInfoRequest::MergeFrom(const PlayerMarketInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerMarketInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerMarketInfoRequest::CopyFrom(const PlayerMarketInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerMarketInfoRequest::IsInitialized() const {

  return true;
}

void PlayerMarketInfoRequest::Swap(PlayerMarketInfoRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerMarketInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerMarketInfoRequest_descriptor_;
  metadata.reflection = PlayerMarketInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerMarketInfoResponse::kTraderFieldNumber;
const int PlayerMarketInfoResponse::kTraderListFieldNumber;
const int PlayerMarketInfoResponse::kPlayerListFieldNumber;
const int PlayerMarketInfoResponse::kSelectListFieldNumber;
#endif  // !_MSC_VER

PlayerMarketInfoResponse::PlayerMarketInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerMarketInfoResponse::InitAsDefaultInstance() {
}

PlayerMarketInfoResponse::PlayerMarketInfoResponse(const PlayerMarketInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerMarketInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  trader_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerMarketInfoResponse::~PlayerMarketInfoResponse() {
  SharedDtor();
}

void PlayerMarketInfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerMarketInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerMarketInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerMarketInfoResponse_descriptor_;
}

const PlayerMarketInfoResponse& PlayerMarketInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_market_2eproto();
  return *default_instance_;
}

PlayerMarketInfoResponse* PlayerMarketInfoResponse::default_instance_ = NULL;

PlayerMarketInfoResponse* PlayerMarketInfoResponse::New() const {
  return new PlayerMarketInfoResponse;
}

void PlayerMarketInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    trader_ = 0;
  }
  traderlist_.Clear();
  playerlist_.Clear();
  selectlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerMarketInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 trader = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trader_)));
          set_has_trader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_traderList;
        break;
      }

      // repeated int32 traderList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_traderList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_traderlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_traderlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_traderList;
        if (input->ExpectTag(26)) goto parse_playerList;
        break;
      }

      // repeated .slg.protocol.MarketPlayerDTO playerList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_playerList;
        if (input->ExpectTag(32)) goto parse_selectList;
        break;
      }

      // repeated int64 selectList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selectList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 32, input, this->mutable_selectlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_selectlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_selectList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerMarketInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 trader = 1;
  if (has_trader()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trader(), output);
  }

  // repeated int32 traderList = 2;
  for (int i = 0; i < this->traderlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->traderlist(i), output);
  }

  // repeated .slg.protocol.MarketPlayerDTO playerList = 3;
  for (int i = 0; i < this->playerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->playerlist(i), output);
  }

  // repeated int64 selectList = 4;
  for (int i = 0; i < this->selectlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      4, this->selectlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerMarketInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 trader = 1;
  if (has_trader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trader(), target);
  }

  // repeated int32 traderList = 2;
  for (int i = 0; i < this->traderlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->traderlist(i), target);
  }

  // repeated .slg.protocol.MarketPlayerDTO playerList = 3;
  for (int i = 0; i < this->playerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->playerlist(i), target);
  }

  // repeated int64 selectList = 4;
  for (int i = 0; i < this->selectlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(4, this->selectlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerMarketInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 trader = 1;
    if (has_trader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trader());
    }

  }
  // repeated int32 traderList = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->traderlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->traderlist(i));
    }
    total_size += 1 * this->traderlist_size() + data_size;
  }

  // repeated .slg.protocol.MarketPlayerDTO playerList = 3;
  total_size += 1 * this->playerlist_size();
  for (int i = 0; i < this->playerlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerlist(i));
  }

  // repeated int64 selectList = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->selectlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->selectlist(i));
    }
    total_size += 1 * this->selectlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerMarketInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerMarketInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerMarketInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerMarketInfoResponse::MergeFrom(const PlayerMarketInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  traderlist_.MergeFrom(from.traderlist_);
  playerlist_.MergeFrom(from.playerlist_);
  selectlist_.MergeFrom(from.selectlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trader()) {
      set_trader(from.trader());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerMarketInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerMarketInfoResponse::CopyFrom(const PlayerMarketInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerMarketInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < playerlist_size(); i++) {
    if (!this->playerlist(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerMarketInfoResponse::Swap(PlayerMarketInfoResponse* other) {
  if (other != this) {
    std::swap(trader_, other->trader_);
    traderlist_.Swap(&other->traderlist_);
    playerlist_.Swap(&other->playerlist_);
    selectlist_.Swap(&other->selectlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerMarketInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerMarketInfoResponse_descriptor_;
  metadata.reflection = PlayerMarketInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddMarketTargetRequest::kPlayerListFieldNumber;
#endif  // !_MSC_VER

AddMarketTargetRequest::AddMarketTargetRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddMarketTargetRequest::InitAsDefaultInstance() {
}

AddMarketTargetRequest::AddMarketTargetRequest(const AddMarketTargetRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddMarketTargetRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddMarketTargetRequest::~AddMarketTargetRequest() {
  SharedDtor();
}

void AddMarketTargetRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddMarketTargetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddMarketTargetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddMarketTargetRequest_descriptor_;
}

const AddMarketTargetRequest& AddMarketTargetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_market_2eproto();
  return *default_instance_;
}

AddMarketTargetRequest* AddMarketTargetRequest::default_instance_ = NULL;

AddMarketTargetRequest* AddMarketTargetRequest::New() const {
  return new AddMarketTargetRequest;
}

void AddMarketTargetRequest::Clear() {
  playerlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddMarketTargetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 playerList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_playerlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_playerlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_playerList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddMarketTargetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 playerList = 1;
  for (int i = 0; i < this->playerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->playerlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddMarketTargetRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 playerList = 1;
  for (int i = 0; i < this->playerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->playerlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddMarketTargetRequest::ByteSize() const {
  int total_size = 0;

  // repeated int64 playerList = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->playerlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->playerlist(i));
    }
    total_size += 1 * this->playerlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddMarketTargetRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddMarketTargetRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddMarketTargetRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddMarketTargetRequest::MergeFrom(const AddMarketTargetRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerlist_.MergeFrom(from.playerlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddMarketTargetRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddMarketTargetRequest::CopyFrom(const AddMarketTargetRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddMarketTargetRequest::IsInitialized() const {

  return true;
}

void AddMarketTargetRequest::Swap(AddMarketTargetRequest* other) {
  if (other != this) {
    playerlist_.Swap(&other->playerlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddMarketTargetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddMarketTargetRequest_descriptor_;
  metadata.reflection = AddMarketTargetRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddMarketTargetResponse::kPlayerListFieldNumber;
#endif  // !_MSC_VER

AddMarketTargetResponse::AddMarketTargetResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddMarketTargetResponse::InitAsDefaultInstance() {
}

AddMarketTargetResponse::AddMarketTargetResponse(const AddMarketTargetResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddMarketTargetResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddMarketTargetResponse::~AddMarketTargetResponse() {
  SharedDtor();
}

void AddMarketTargetResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddMarketTargetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddMarketTargetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddMarketTargetResponse_descriptor_;
}

const AddMarketTargetResponse& AddMarketTargetResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_market_2eproto();
  return *default_instance_;
}

AddMarketTargetResponse* AddMarketTargetResponse::default_instance_ = NULL;

AddMarketTargetResponse* AddMarketTargetResponse::New() const {
  return new AddMarketTargetResponse;
}

void AddMarketTargetResponse::Clear() {
  playerlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddMarketTargetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 playerList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_playerlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_playerlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_playerList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddMarketTargetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 playerList = 1;
  for (int i = 0; i < this->playerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->playerlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddMarketTargetResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 playerList = 1;
  for (int i = 0; i < this->playerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->playerlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddMarketTargetResponse::ByteSize() const {
  int total_size = 0;

  // repeated int64 playerList = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->playerlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->playerlist(i));
    }
    total_size += 1 * this->playerlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddMarketTargetResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddMarketTargetResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddMarketTargetResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddMarketTargetResponse::MergeFrom(const AddMarketTargetResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerlist_.MergeFrom(from.playerlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddMarketTargetResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddMarketTargetResponse::CopyFrom(const AddMarketTargetResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddMarketTargetResponse::IsInitialized() const {

  return true;
}

void AddMarketTargetResponse::Swap(AddMarketTargetResponse* other) {
  if (other != this) {
    playerlist_.Swap(&other->playerlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddMarketTargetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddMarketTargetResponse_descriptor_;
  metadata.reflection = AddMarketTargetResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TradeRequest::kTraderIdFieldNumber;
const int TradeRequest::kTargetListFieldNumber;
#endif  // !_MSC_VER

TradeRequest::TradeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TradeRequest::InitAsDefaultInstance() {
}

TradeRequest::TradeRequest(const TradeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TradeRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TradeRequest::~TradeRequest() {
  SharedDtor();
}

void TradeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TradeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradeRequest_descriptor_;
}

const TradeRequest& TradeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_market_2eproto();
  return *default_instance_;
}

TradeRequest* TradeRequest::default_instance_ = NULL;

TradeRequest* TradeRequest::New() const {
  return new TradeRequest;
}

void TradeRequest::Clear() {
  traderid_.Clear();
  targetlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TradeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 traderId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_traderId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_traderid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_traderid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_traderId;
        if (input->ExpectTag(18)) goto parse_targetList;
        break;
      }

      // repeated .slg.protocol.TradeTargetDTO targetList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_targetlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_targetList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TradeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 traderId = 1;
  for (int i = 0; i < this->traderid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->traderid(i), output);
  }

  // repeated .slg.protocol.TradeTargetDTO targetList = 2;
  for (int i = 0; i < this->targetlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->targetlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TradeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 traderId = 1;
  for (int i = 0; i < this->traderid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->traderid(i), target);
  }

  // repeated .slg.protocol.TradeTargetDTO targetList = 2;
  for (int i = 0; i < this->targetlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->targetlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TradeRequest::ByteSize() const {
  int total_size = 0;

  // repeated int32 traderId = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->traderid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->traderid(i));
    }
    total_size += 1 * this->traderid_size() + data_size;
  }

  // repeated .slg.protocol.TradeTargetDTO targetList = 2;
  total_size += 1 * this->targetlist_size();
  for (int i = 0; i < this->targetlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->targetlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TradeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TradeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TradeRequest::MergeFrom(const TradeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  traderid_.MergeFrom(from.traderid_);
  targetlist_.MergeFrom(from.targetlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TradeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeRequest::CopyFrom(const TradeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeRequest::IsInitialized() const {

  for (int i = 0; i < targetlist_size(); i++) {
    if (!this->targetlist(i).IsInitialized()) return false;
  }
  return true;
}

void TradeRequest::Swap(TradeRequest* other) {
  if (other != this) {
    traderid_.Swap(&other->traderid_);
    targetlist_.Swap(&other->targetlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TradeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TradeRequest_descriptor_;
  metadata.reflection = TradeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyMarketTraderRequest::kTraderFieldNumber;
#endif  // !_MSC_VER

BuyMarketTraderRequest::BuyMarketTraderRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuyMarketTraderRequest::InitAsDefaultInstance() {
}

BuyMarketTraderRequest::BuyMarketTraderRequest(const BuyMarketTraderRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuyMarketTraderRequest::SharedCtor() {
  _cached_size_ = 0;
  trader_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyMarketTraderRequest::~BuyMarketTraderRequest() {
  SharedDtor();
}

void BuyMarketTraderRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyMarketTraderRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyMarketTraderRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyMarketTraderRequest_descriptor_;
}

const BuyMarketTraderRequest& BuyMarketTraderRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_market_2eproto();
  return *default_instance_;
}

BuyMarketTraderRequest* BuyMarketTraderRequest::default_instance_ = NULL;

BuyMarketTraderRequest* BuyMarketTraderRequest::New() const {
  return new BuyMarketTraderRequest;
}

void BuyMarketTraderRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    trader_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyMarketTraderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 trader = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trader_)));
          set_has_trader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuyMarketTraderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 trader = 1;
  if (has_trader()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trader(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuyMarketTraderRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 trader = 1;
  if (has_trader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trader(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuyMarketTraderRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 trader = 1;
    if (has_trader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trader());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyMarketTraderRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyMarketTraderRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyMarketTraderRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyMarketTraderRequest::MergeFrom(const BuyMarketTraderRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trader()) {
      set_trader(from.trader());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyMarketTraderRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyMarketTraderRequest::CopyFrom(const BuyMarketTraderRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyMarketTraderRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BuyMarketTraderRequest::Swap(BuyMarketTraderRequest* other) {
  if (other != this) {
    std::swap(trader_, other->trader_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyMarketTraderRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyMarketTraderRequest_descriptor_;
  metadata.reflection = BuyMarketTraderRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyMarketTraderResponse::kTraderFieldNumber;
#endif  // !_MSC_VER

BuyMarketTraderResponse::BuyMarketTraderResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuyMarketTraderResponse::InitAsDefaultInstance() {
}

BuyMarketTraderResponse::BuyMarketTraderResponse(const BuyMarketTraderResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuyMarketTraderResponse::SharedCtor() {
  _cached_size_ = 0;
  trader_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyMarketTraderResponse::~BuyMarketTraderResponse() {
  SharedDtor();
}

void BuyMarketTraderResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyMarketTraderResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyMarketTraderResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyMarketTraderResponse_descriptor_;
}

const BuyMarketTraderResponse& BuyMarketTraderResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_market_2eproto();
  return *default_instance_;
}

BuyMarketTraderResponse* BuyMarketTraderResponse::default_instance_ = NULL;

BuyMarketTraderResponse* BuyMarketTraderResponse::New() const {
  return new BuyMarketTraderResponse;
}

void BuyMarketTraderResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    trader_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyMarketTraderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 trader = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trader_)));
          set_has_trader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuyMarketTraderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 trader = 1;
  if (has_trader()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trader(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuyMarketTraderResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 trader = 1;
  if (has_trader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trader(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuyMarketTraderResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 trader = 1;
    if (has_trader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trader());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyMarketTraderResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyMarketTraderResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyMarketTraderResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyMarketTraderResponse::MergeFrom(const BuyMarketTraderResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trader()) {
      set_trader(from.trader());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyMarketTraderResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyMarketTraderResponse::CopyFrom(const BuyMarketTraderResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyMarketTraderResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BuyMarketTraderResponse::Swap(BuyMarketTraderResponse* other) {
  if (other != this) {
    std::swap(trader_, other->trader_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyMarketTraderResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyMarketTraderResponse_descriptor_;
  metadata.reflection = BuyMarketTraderResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TradeInfoRequest::kUidFieldNumber;
#endif  // !_MSC_VER

TradeInfoRequest::TradeInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TradeInfoRequest::InitAsDefaultInstance() {
}

TradeInfoRequest::TradeInfoRequest(const TradeInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TradeInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TradeInfoRequest::~TradeInfoRequest() {
  SharedDtor();
}

void TradeInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TradeInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradeInfoRequest_descriptor_;
}

const TradeInfoRequest& TradeInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_market_2eproto();
  return *default_instance_;
}

TradeInfoRequest* TradeInfoRequest::default_instance_ = NULL;

TradeInfoRequest* TradeInfoRequest::New() const {
  return new TradeInfoRequest;
}

void TradeInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TradeInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TradeInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TradeInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TradeInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TradeInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TradeInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TradeInfoRequest::MergeFrom(const TradeInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TradeInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeInfoRequest::CopyFrom(const TradeInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TradeInfoRequest::Swap(TradeInfoRequest* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TradeInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TradeInfoRequest_descriptor_;
  metadata.reflection = TradeInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TradeInfoReponse::kTadeListFieldNumber;
#endif  // !_MSC_VER

TradeInfoReponse::TradeInfoReponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TradeInfoReponse::InitAsDefaultInstance() {
}

TradeInfoReponse::TradeInfoReponse(const TradeInfoReponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TradeInfoReponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TradeInfoReponse::~TradeInfoReponse() {
  SharedDtor();
}

void TradeInfoReponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TradeInfoReponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeInfoReponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradeInfoReponse_descriptor_;
}

const TradeInfoReponse& TradeInfoReponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_market_2eproto();
  return *default_instance_;
}

TradeInfoReponse* TradeInfoReponse::default_instance_ = NULL;

TradeInfoReponse* TradeInfoReponse::New() const {
  return new TradeInfoReponse;
}

void TradeInfoReponse::Clear() {
  tadelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TradeInfoReponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.TradeInfoDTO tadeList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tadeList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tadelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tadeList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TradeInfoReponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.TradeInfoDTO tadeList = 1;
  for (int i = 0; i < this->tadelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tadelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TradeInfoReponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.TradeInfoDTO tadeList = 1;
  for (int i = 0; i < this->tadelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tadelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TradeInfoReponse::ByteSize() const {
  int total_size = 0;

  // repeated .slg.protocol.TradeInfoDTO tadeList = 1;
  total_size += 1 * this->tadelist_size();
  for (int i = 0; i < this->tadelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tadelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeInfoReponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TradeInfoReponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TradeInfoReponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TradeInfoReponse::MergeFrom(const TradeInfoReponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  tadelist_.MergeFrom(from.tadelist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TradeInfoReponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeInfoReponse::CopyFrom(const TradeInfoReponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeInfoReponse::IsInitialized() const {

  for (int i = 0; i < tadelist_size(); i++) {
    if (!this->tadelist(i).IsInitialized()) return false;
  }
  return true;
}

void TradeInfoReponse::Swap(TradeInfoReponse* other) {
  if (other != this) {
    tadelist_.Swap(&other->tadelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TradeInfoReponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TradeInfoReponse_descriptor_;
  metadata.reflection = TradeInfoReponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TradeTimePush::kTotalTimeFieldNumber;
const int TradeTimePush::kLastTimeFieldNumber;
#endif  // !_MSC_VER

TradeTimePush::TradeTimePush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TradeTimePush::InitAsDefaultInstance() {
}

TradeTimePush::TradeTimePush(const TradeTimePush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TradeTimePush::SharedCtor() {
  _cached_size_ = 0;
  totaltime_ = 0;
  lasttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TradeTimePush::~TradeTimePush() {
  SharedDtor();
}

void TradeTimePush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TradeTimePush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeTimePush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradeTimePush_descriptor_;
}

const TradeTimePush& TradeTimePush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_market_2eproto();
  return *default_instance_;
}

TradeTimePush* TradeTimePush::default_instance_ = NULL;

TradeTimePush* TradeTimePush::New() const {
  return new TradeTimePush;
}

void TradeTimePush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    totaltime_ = 0;
    lasttime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TradeTimePush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 totalTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totaltime_)));
          set_has_totaltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lastTime;
        break;
      }

      // required int32 lastTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TradeTimePush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 totalTime = 1;
  if (has_totaltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->totaltime(), output);
  }

  // required int32 lastTime = 2;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lasttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TradeTimePush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 totalTime = 1;
  if (has_totaltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->totaltime(), target);
  }

  // required int32 lastTime = 2;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lasttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TradeTimePush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 totalTime = 1;
    if (has_totaltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totaltime());
    }

    // required int32 lastTime = 2;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeTimePush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TradeTimePush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TradeTimePush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TradeTimePush::MergeFrom(const TradeTimePush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totaltime()) {
      set_totaltime(from.totaltime());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TradeTimePush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeTimePush::CopyFrom(const TradeTimePush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeTimePush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TradeTimePush::Swap(TradeTimePush* other) {
  if (other != this) {
    std::swap(totaltime_, other->totaltime_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TradeTimePush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TradeTimePush_descriptor_;
  metadata.reflection = TradeTimePush_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace slg

// @@protoc_insertion_point(global_scope)
