// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pray.proto

#ifndef PROTOBUF_pray_2eproto__INCLUDED
#define PROTOBUF_pray_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace slg {
namespace protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pray_2eproto();
void protobuf_AssignDesc_pray_2eproto();
void protobuf_ShutdownFile_pray_2eproto();

class PrayDTO;
class MakePrayRequest;
class MakePrayResponse;
class PrayPush;

enum PrayCommandId {
  PRAY_MAKE_PRAY = 1101
};
bool PrayCommandId_IsValid(int value);
const PrayCommandId PrayCommandId_MIN = PRAY_MAKE_PRAY;
const PrayCommandId PrayCommandId_MAX = PRAY_MAKE_PRAY;
const int PrayCommandId_ARRAYSIZE = PrayCommandId_MAX + 1;

const ::google::protobuf::EnumDescriptor* PrayCommandId_descriptor();
inline const ::std::string& PrayCommandId_Name(PrayCommandId value) {
  return ::google::protobuf::internal::NameOfEnum(
    PrayCommandId_descriptor(), value);
}
inline bool PrayCommandId_Parse(
    const ::std::string& name, PrayCommandId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PrayCommandId>(
    PrayCommandId_descriptor(), name, value);
}
enum PrayPushId {
  PRAY_INFO_PUSH = 51101
};
bool PrayPushId_IsValid(int value);
const PrayPushId PrayPushId_MIN = PRAY_INFO_PUSH;
const PrayPushId PrayPushId_MAX = PRAY_INFO_PUSH;
const int PrayPushId_ARRAYSIZE = PrayPushId_MAX + 1;

const ::google::protobuf::EnumDescriptor* PrayPushId_descriptor();
inline const ::std::string& PrayPushId_Name(PrayPushId value) {
  return ::google::protobuf::internal::NameOfEnum(
    PrayPushId_descriptor(), value);
}
inline bool PrayPushId_Parse(
    const ::std::string& name, PrayPushId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PrayPushId>(
    PrayPushId_descriptor(), name, value);
}
// ===================================================================

class PrayDTO : public ::google::protobuf::Message {
 public:
  PrayDTO();
  virtual ~PrayDTO();

  PrayDTO(const PrayDTO& from);

  inline PrayDTO& operator=(const PrayDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PrayDTO& default_instance();

  void Swap(PrayDTO* other);

  // implements Message ----------------------------------------------

  PrayDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PrayDTO& from);
  void MergeFrom(const PrayDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 freetimes = 1;
  inline bool has_freetimes() const;
  inline void clear_freetimes();
  static const int kFreetimesFieldNumber = 1;
  inline ::google::protobuf::int32 freetimes() const;
  inline void set_freetimes(::google::protobuf::int32 value);

  // optional int32 itemtimes = 2;
  inline bool has_itemtimes() const;
  inline void clear_itemtimes();
  static const int kItemtimesFieldNumber = 2;
  inline ::google::protobuf::int32 itemtimes() const;
  inline void set_itemtimes(::google::protobuf::int32 value);

  // optional int32 cointimes = 3;
  inline bool has_cointimes() const;
  inline void clear_cointimes();
  static const int kCointimesFieldNumber = 3;
  inline ::google::protobuf::int32 cointimes() const;
  inline void set_cointimes(::google::protobuf::int32 value);

  // optional int32 woodtimes = 4;
  inline bool has_woodtimes() const;
  inline void clear_woodtimes();
  static const int kWoodtimesFieldNumber = 4;
  inline ::google::protobuf::int32 woodtimes() const;
  inline void set_woodtimes(::google::protobuf::int32 value);

  // optional int32 stonetimes = 5;
  inline bool has_stonetimes() const;
  inline void clear_stonetimes();
  static const int kStonetimesFieldNumber = 5;
  inline ::google::protobuf::int32 stonetimes() const;
  inline void set_stonetimes(::google::protobuf::int32 value);

  // optional int32 steeltimes = 6;
  inline bool has_steeltimes() const;
  inline void clear_steeltimes();
  static const int kSteeltimesFieldNumber = 6;
  inline ::google::protobuf::int32 steeltimes() const;
  inline void set_steeltimes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.PrayDTO)
 private:
  inline void set_has_freetimes();
  inline void clear_has_freetimes();
  inline void set_has_itemtimes();
  inline void clear_has_itemtimes();
  inline void set_has_cointimes();
  inline void clear_has_cointimes();
  inline void set_has_woodtimes();
  inline void clear_has_woodtimes();
  inline void set_has_stonetimes();
  inline void clear_has_stonetimes();
  inline void set_has_steeltimes();
  inline void clear_has_steeltimes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 freetimes_;
  ::google::protobuf::int32 itemtimes_;
  ::google::protobuf::int32 cointimes_;
  ::google::protobuf::int32 woodtimes_;
  ::google::protobuf::int32 stonetimes_;
  ::google::protobuf::int32 steeltimes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_pray_2eproto();
  friend void protobuf_AssignDesc_pray_2eproto();
  friend void protobuf_ShutdownFile_pray_2eproto();

  void InitAsDefaultInstance();
  static PrayDTO* default_instance_;
};
// -------------------------------------------------------------------

class MakePrayRequest : public ::google::protobuf::Message {
 public:
  MakePrayRequest();
  virtual ~MakePrayRequest();

  MakePrayRequest(const MakePrayRequest& from);

  inline MakePrayRequest& operator=(const MakePrayRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MakePrayRequest& default_instance();

  void Swap(MakePrayRequest* other);

  // implements Message ----------------------------------------------

  MakePrayRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MakePrayRequest& from);
  void MergeFrom(const MakePrayRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.MakePrayRequest)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_pray_2eproto();
  friend void protobuf_AssignDesc_pray_2eproto();
  friend void protobuf_ShutdownFile_pray_2eproto();

  void InitAsDefaultInstance();
  static MakePrayRequest* default_instance_;
};
// -------------------------------------------------------------------

class MakePrayResponse : public ::google::protobuf::Message {
 public:
  MakePrayResponse();
  virtual ~MakePrayResponse();

  MakePrayResponse(const MakePrayResponse& from);

  inline MakePrayResponse& operator=(const MakePrayResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MakePrayResponse& default_instance();

  void Swap(MakePrayResponse* other);

  // implements Message ----------------------------------------------

  MakePrayResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MakePrayResponse& from);
  void MergeFrom(const MakePrayResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 buyTimes = 2;
  inline bool has_buytimes() const;
  inline void clear_buytimes();
  static const int kBuyTimesFieldNumber = 2;
  inline ::google::protobuf::int32 buytimes() const;
  inline void set_buytimes(::google::protobuf::int32 value);

  // required int32 resourceNum = 3;
  inline bool has_resourcenum() const;
  inline void clear_resourcenum();
  static const int kResourceNumFieldNumber = 3;
  inline ::google::protobuf::int32 resourcenum() const;
  inline void set_resourcenum(::google::protobuf::int32 value);

  // required int32 critvalue = 4;
  inline bool has_critvalue() const;
  inline void clear_critvalue();
  static const int kCritvalueFieldNumber = 4;
  inline ::google::protobuf::int32 critvalue() const;
  inline void set_critvalue(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.MakePrayResponse)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_buytimes();
  inline void clear_has_buytimes();
  inline void set_has_resourcenum();
  inline void clear_has_resourcenum();
  inline void set_has_critvalue();
  inline void clear_has_critvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 buytimes_;
  ::google::protobuf::int32 resourcenum_;
  ::google::protobuf::int32 critvalue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_pray_2eproto();
  friend void protobuf_AssignDesc_pray_2eproto();
  friend void protobuf_ShutdownFile_pray_2eproto();

  void InitAsDefaultInstance();
  static MakePrayResponse* default_instance_;
};
// -------------------------------------------------------------------

class PrayPush : public ::google::protobuf::Message {
 public:
  PrayPush();
  virtual ~PrayPush();

  PrayPush(const PrayPush& from);

  inline PrayPush& operator=(const PrayPush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PrayPush& default_instance();

  void Swap(PrayPush* other);

  // implements Message ----------------------------------------------

  PrayPush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PrayPush& from);
  void MergeFrom(const PrayPush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .slg.protocol.PrayDTO prayInfo = 1;
  inline bool has_prayinfo() const;
  inline void clear_prayinfo();
  static const int kPrayInfoFieldNumber = 1;
  inline const ::slg::protocol::PrayDTO& prayinfo() const;
  inline ::slg::protocol::PrayDTO* mutable_prayinfo();
  inline ::slg::protocol::PrayDTO* release_prayinfo();
  inline void set_allocated_prayinfo(::slg::protocol::PrayDTO* prayinfo);

  // @@protoc_insertion_point(class_scope:slg.protocol.PrayPush)
 private:
  inline void set_has_prayinfo();
  inline void clear_has_prayinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::slg::protocol::PrayDTO* prayinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_pray_2eproto();
  friend void protobuf_AssignDesc_pray_2eproto();
  friend void protobuf_ShutdownFile_pray_2eproto();

  void InitAsDefaultInstance();
  static PrayPush* default_instance_;
};
// ===================================================================


// ===================================================================

// PrayDTO

// optional int32 freetimes = 1;
inline bool PrayDTO::has_freetimes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrayDTO::set_has_freetimes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrayDTO::clear_has_freetimes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrayDTO::clear_freetimes() {
  freetimes_ = 0;
  clear_has_freetimes();
}
inline ::google::protobuf::int32 PrayDTO::freetimes() const {
  return freetimes_;
}
inline void PrayDTO::set_freetimes(::google::protobuf::int32 value) {
  set_has_freetimes();
  freetimes_ = value;
}

// optional int32 itemtimes = 2;
inline bool PrayDTO::has_itemtimes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrayDTO::set_has_itemtimes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrayDTO::clear_has_itemtimes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrayDTO::clear_itemtimes() {
  itemtimes_ = 0;
  clear_has_itemtimes();
}
inline ::google::protobuf::int32 PrayDTO::itemtimes() const {
  return itemtimes_;
}
inline void PrayDTO::set_itemtimes(::google::protobuf::int32 value) {
  set_has_itemtimes();
  itemtimes_ = value;
}

// optional int32 cointimes = 3;
inline bool PrayDTO::has_cointimes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrayDTO::set_has_cointimes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrayDTO::clear_has_cointimes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrayDTO::clear_cointimes() {
  cointimes_ = 0;
  clear_has_cointimes();
}
inline ::google::protobuf::int32 PrayDTO::cointimes() const {
  return cointimes_;
}
inline void PrayDTO::set_cointimes(::google::protobuf::int32 value) {
  set_has_cointimes();
  cointimes_ = value;
}

// optional int32 woodtimes = 4;
inline bool PrayDTO::has_woodtimes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrayDTO::set_has_woodtimes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrayDTO::clear_has_woodtimes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrayDTO::clear_woodtimes() {
  woodtimes_ = 0;
  clear_has_woodtimes();
}
inline ::google::protobuf::int32 PrayDTO::woodtimes() const {
  return woodtimes_;
}
inline void PrayDTO::set_woodtimes(::google::protobuf::int32 value) {
  set_has_woodtimes();
  woodtimes_ = value;
}

// optional int32 stonetimes = 5;
inline bool PrayDTO::has_stonetimes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrayDTO::set_has_stonetimes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrayDTO::clear_has_stonetimes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrayDTO::clear_stonetimes() {
  stonetimes_ = 0;
  clear_has_stonetimes();
}
inline ::google::protobuf::int32 PrayDTO::stonetimes() const {
  return stonetimes_;
}
inline void PrayDTO::set_stonetimes(::google::protobuf::int32 value) {
  set_has_stonetimes();
  stonetimes_ = value;
}

// optional int32 steeltimes = 6;
inline bool PrayDTO::has_steeltimes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PrayDTO::set_has_steeltimes() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PrayDTO::clear_has_steeltimes() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PrayDTO::clear_steeltimes() {
  steeltimes_ = 0;
  clear_has_steeltimes();
}
inline ::google::protobuf::int32 PrayDTO::steeltimes() const {
  return steeltimes_;
}
inline void PrayDTO::set_steeltimes(::google::protobuf::int32 value) {
  set_has_steeltimes();
  steeltimes_ = value;
}

// -------------------------------------------------------------------

// MakePrayRequest

// required int32 type = 1;
inline bool MakePrayRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MakePrayRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MakePrayRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MakePrayRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 MakePrayRequest::type() const {
  return type_;
}
inline void MakePrayRequest::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// MakePrayResponse

// required int32 type = 1;
inline bool MakePrayResponse::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MakePrayResponse::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MakePrayResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MakePrayResponse::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 MakePrayResponse::type() const {
  return type_;
}
inline void MakePrayResponse::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 buyTimes = 2;
inline bool MakePrayResponse::has_buytimes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MakePrayResponse::set_has_buytimes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MakePrayResponse::clear_has_buytimes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MakePrayResponse::clear_buytimes() {
  buytimes_ = 0;
  clear_has_buytimes();
}
inline ::google::protobuf::int32 MakePrayResponse::buytimes() const {
  return buytimes_;
}
inline void MakePrayResponse::set_buytimes(::google::protobuf::int32 value) {
  set_has_buytimes();
  buytimes_ = value;
}

// required int32 resourceNum = 3;
inline bool MakePrayResponse::has_resourcenum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MakePrayResponse::set_has_resourcenum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MakePrayResponse::clear_has_resourcenum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MakePrayResponse::clear_resourcenum() {
  resourcenum_ = 0;
  clear_has_resourcenum();
}
inline ::google::protobuf::int32 MakePrayResponse::resourcenum() const {
  return resourcenum_;
}
inline void MakePrayResponse::set_resourcenum(::google::protobuf::int32 value) {
  set_has_resourcenum();
  resourcenum_ = value;
}

// required int32 critvalue = 4;
inline bool MakePrayResponse::has_critvalue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MakePrayResponse::set_has_critvalue() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MakePrayResponse::clear_has_critvalue() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MakePrayResponse::clear_critvalue() {
  critvalue_ = 0;
  clear_has_critvalue();
}
inline ::google::protobuf::int32 MakePrayResponse::critvalue() const {
  return critvalue_;
}
inline void MakePrayResponse::set_critvalue(::google::protobuf::int32 value) {
  set_has_critvalue();
  critvalue_ = value;
}

// -------------------------------------------------------------------

// PrayPush

// required .slg.protocol.PrayDTO prayInfo = 1;
inline bool PrayPush::has_prayinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrayPush::set_has_prayinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrayPush::clear_has_prayinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrayPush::clear_prayinfo() {
  if (prayinfo_ != NULL) prayinfo_->::slg::protocol::PrayDTO::Clear();
  clear_has_prayinfo();
}
inline const ::slg::protocol::PrayDTO& PrayPush::prayinfo() const {
  return prayinfo_ != NULL ? *prayinfo_ : *default_instance_->prayinfo_;
}
inline ::slg::protocol::PrayDTO* PrayPush::mutable_prayinfo() {
  set_has_prayinfo();
  if (prayinfo_ == NULL) prayinfo_ = new ::slg::protocol::PrayDTO;
  return prayinfo_;
}
inline ::slg::protocol::PrayDTO* PrayPush::release_prayinfo() {
  clear_has_prayinfo();
  ::slg::protocol::PrayDTO* temp = prayinfo_;
  prayinfo_ = NULL;
  return temp;
}
inline void PrayPush::set_allocated_prayinfo(::slg::protocol::PrayDTO* prayinfo) {
  delete prayinfo_;
  prayinfo_ = prayinfo;
  if (prayinfo) {
    set_has_prayinfo();
  } else {
    clear_has_prayinfo();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace slg

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::slg::protocol::PrayCommandId>() {
  return ::slg::protocol::PrayCommandId_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::slg::protocol::PrayPushId>() {
  return ::slg::protocol::PrayPushId_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pray_2eproto__INCLUDED
