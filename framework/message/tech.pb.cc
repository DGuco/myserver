// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tech.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tech.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace slg {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* SkillDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* TechDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TechDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* TechUpgradeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TechUpgradeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TechUpgradeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TechUpgradeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseSkillRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseSkillRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseSkillResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseSkillResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TechPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TechPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillPush_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TechCommandId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TechPushId_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_tech_2eproto() {
  protobuf_AddDesc_tech_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tech.proto");
  GOOGLE_CHECK(file != NULL);
  SkillDTO_descriptor_ = file->message_type(0);
  static const int SkillDTO_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDTO, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDTO, lastcanusetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDTO, keepend_),
  };
  SkillDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillDTO_descriptor_,
      SkillDTO::default_instance_,
      SkillDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillDTO));
  TechDTO_descriptor_ = file->message_type(1);
  static const int TechDTO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechDTO, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechDTO, level_),
  };
  TechDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TechDTO_descriptor_,
      TechDTO::default_instance_,
      TechDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TechDTO));
  TechUpgradeRequest_descriptor_ = file->message_type(2);
  static const int TechUpgradeRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechUpgradeRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechUpgradeRequest, oper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechUpgradeRequest, quick_),
  };
  TechUpgradeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TechUpgradeRequest_descriptor_,
      TechUpgradeRequest::default_instance_,
      TechUpgradeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechUpgradeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechUpgradeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TechUpgradeRequest));
  TechUpgradeResponse_descriptor_ = file->message_type(3);
  static const int TechUpgradeResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechUpgradeResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechUpgradeResponse, quick_),
  };
  TechUpgradeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TechUpgradeResponse_descriptor_,
      TechUpgradeResponse::default_instance_,
      TechUpgradeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechUpgradeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechUpgradeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TechUpgradeResponse));
  UseSkillRequest_descriptor_ = file->message_type(4);
  static const int UseSkillRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillRequest, type_),
  };
  UseSkillRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseSkillRequest_descriptor_,
      UseSkillRequest::default_instance_,
      UseSkillRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseSkillRequest));
  UseSkillResponse_descriptor_ = file->message_type(5);
  static const int UseSkillResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillResponse, properties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillResponse, position_),
  };
  UseSkillResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseSkillResponse_descriptor_,
      UseSkillResponse::default_instance_,
      UseSkillResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseSkillResponse));
  TechPush_descriptor_ = file->message_type(6);
  static const int TechPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechPush, techs_),
  };
  TechPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TechPush_descriptor_,
      TechPush::default_instance_,
      TechPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TechPush));
  SkillPush_descriptor_ = file->message_type(7);
  static const int SkillPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPush, skills_),
  };
  SkillPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillPush_descriptor_,
      SkillPush::default_instance_,
      SkillPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillPush));
  TechCommandId_descriptor_ = file->enum_type(0);
  TechPushId_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tech_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillDTO_descriptor_, &SkillDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TechDTO_descriptor_, &TechDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TechUpgradeRequest_descriptor_, &TechUpgradeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TechUpgradeResponse_descriptor_, &TechUpgradeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseSkillRequest_descriptor_, &UseSkillRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseSkillResponse_descriptor_, &UseSkillResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TechPush_descriptor_, &TechPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillPush_descriptor_, &SkillPush::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tech_2eproto() {
  delete SkillDTO::default_instance_;
  delete SkillDTO_reflection_;
  delete TechDTO::default_instance_;
  delete TechDTO_reflection_;
  delete TechUpgradeRequest::default_instance_;
  delete TechUpgradeRequest_reflection_;
  delete TechUpgradeResponse::default_instance_;
  delete TechUpgradeResponse_reflection_;
  delete UseSkillRequest::default_instance_;
  delete UseSkillRequest_reflection_;
  delete UseSkillResponse::default_instance_;
  delete UseSkillResponse_reflection_;
  delete TechPush::default_instance_;
  delete TechPush_reflection_;
  delete SkillPush::default_instance_;
  delete SkillPush_reflection_;
}

void protobuf_AddDesc_tech_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::slg::protocol::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ntech.proto\022\014slg.protocol\032\014common.proto"
    "\"A\n\010SkillDTO\022\014\n\004type\030\001 \002(\005\022\026\n\016lastCanUse"
    "Time\030\002 \002(\005\022\017\n\007keepEnd\030\003 \002(\005\"&\n\007TechDTO\022\014"
    "\n\004type\030\001 \002(\005\022\r\n\005level\030\002 \002(\005\"\?\n\022TechUpgra"
    "deRequest\022\014\n\004type\030\001 \002(\005\022\014\n\004oper\030\002 \002(\010\022\r\n"
    "\005quick\030\003 \002(\010\"2\n\023TechUpgradeResponse\022\014\n\004t"
    "ype\030\001 \002(\005\022\r\n\005quick\030\002 \002(\010\"\037\n\017UseSkillRequ"
    "est\022\014\n\004type\030\001 \002(\005\"|\n\020UseSkillResponse\022\014\n"
    "\004type\030\001 \002(\005\022-\n\nproperties\030\002 \003(\0132\031.slg.pr"
    "otocol.PropertyDTO\022+\n\010position\030\003 \001(\0132\031.s"
    "lg.protocol.PositionDTO\"0\n\010TechPush\022$\n\005t"
    "echs\030\001 \003(\0132\025.slg.protocol.TechDTO\"3\n\tSki"
    "llPush\022&\n\006skills\030\001 \003(\0132\026.slg.protocol.Sk"
    "illDTO*9\n\rTechCommandId\022\021\n\014TECH_UPGRADE\020"
    "\351\007\022\025\n\020PLAYER_USE_SKILL\020\352\007*9\n\nTechPushId\022"
    "\024\n\016TECH_LIST_PUSH\020\271\216\003\022\025\n\017TECH_SKILL_PUSH"
    "\020\272\216\003B)\n\034com.bonusstudio.slg.protocolB\tTe"
    "chProto", 687);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tech.proto", &protobuf_RegisterTypes);
  SkillDTO::default_instance_ = new SkillDTO();
  TechDTO::default_instance_ = new TechDTO();
  TechUpgradeRequest::default_instance_ = new TechUpgradeRequest();
  TechUpgradeResponse::default_instance_ = new TechUpgradeResponse();
  UseSkillRequest::default_instance_ = new UseSkillRequest();
  UseSkillResponse::default_instance_ = new UseSkillResponse();
  TechPush::default_instance_ = new TechPush();
  SkillPush::default_instance_ = new SkillPush();
  SkillDTO::default_instance_->InitAsDefaultInstance();
  TechDTO::default_instance_->InitAsDefaultInstance();
  TechUpgradeRequest::default_instance_->InitAsDefaultInstance();
  TechUpgradeResponse::default_instance_->InitAsDefaultInstance();
  UseSkillRequest::default_instance_->InitAsDefaultInstance();
  UseSkillResponse::default_instance_->InitAsDefaultInstance();
  TechPush::default_instance_->InitAsDefaultInstance();
  SkillPush::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tech_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tech_2eproto {
  StaticDescriptorInitializer_tech_2eproto() {
    protobuf_AddDesc_tech_2eproto();
  }
} static_descriptor_initializer_tech_2eproto_;
const ::google::protobuf::EnumDescriptor* TechCommandId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TechCommandId_descriptor_;
}
bool TechCommandId_IsValid(int value) {
  switch(value) {
    case 1001:
    case 1002:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TechPushId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TechPushId_descriptor_;
}
bool TechPushId_IsValid(int value) {
  switch(value) {
    case 51001:
    case 51002:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SkillDTO::kTypeFieldNumber;
const int SkillDTO::kLastCanUseTimeFieldNumber;
const int SkillDTO::kKeepEndFieldNumber;
#endif  // !_MSC_VER

SkillDTO::SkillDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillDTO::InitAsDefaultInstance() {
}

SkillDTO::SkillDTO(const SkillDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillDTO::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  lastcanusetime_ = 0;
  keepend_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillDTO::~SkillDTO() {
  SharedDtor();
}

void SkillDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillDTO_descriptor_;
}

const SkillDTO& SkillDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tech_2eproto();
  return *default_instance_;
}

SkillDTO* SkillDTO::default_instance_ = NULL;

SkillDTO* SkillDTO::New() const {
  return new SkillDTO;
}

void SkillDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    lastcanusetime_ = 0;
    keepend_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lastCanUseTime;
        break;
      }

      // required int32 lastCanUseTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastCanUseTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastcanusetime_)));
          set_has_lastcanusetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_keepEnd;
        break;
      }

      // required int32 keepEnd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keepEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &keepend_)));
          set_has_keepend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 lastCanUseTime = 2;
  if (has_lastcanusetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lastcanusetime(), output);
  }

  // required int32 keepEnd = 3;
  if (has_keepend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->keepend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 lastCanUseTime = 2;
  if (has_lastcanusetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lastcanusetime(), target);
  }

  // required int32 keepEnd = 3;
  if (has_keepend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->keepend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 lastCanUseTime = 2;
    if (has_lastcanusetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastcanusetime());
    }

    // required int32 keepEnd = 3;
    if (has_keepend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->keepend());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillDTO::MergeFrom(const SkillDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_lastcanusetime()) {
      set_lastcanusetime(from.lastcanusetime());
    }
    if (from.has_keepend()) {
      set_keepend(from.keepend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillDTO::CopyFrom(const SkillDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SkillDTO::Swap(SkillDTO* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(lastcanusetime_, other->lastcanusetime_);
    std::swap(keepend_, other->keepend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillDTO_descriptor_;
  metadata.reflection = SkillDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TechDTO::kTypeFieldNumber;
const int TechDTO::kLevelFieldNumber;
#endif  // !_MSC_VER

TechDTO::TechDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TechDTO::InitAsDefaultInstance() {
}

TechDTO::TechDTO(const TechDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TechDTO::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TechDTO::~TechDTO() {
  SharedDtor();
}

void TechDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TechDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TechDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TechDTO_descriptor_;
}

const TechDTO& TechDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tech_2eproto();
  return *default_instance_;
}

TechDTO* TechDTO::default_instance_ = NULL;

TechDTO* TechDTO::New() const {
  return new TechDTO;
}

void TechDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TechDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TechDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TechDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TechDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TechDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TechDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TechDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TechDTO::MergeFrom(const TechDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TechDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TechDTO::CopyFrom(const TechDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TechDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TechDTO::Swap(TechDTO* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TechDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TechDTO_descriptor_;
  metadata.reflection = TechDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TechUpgradeRequest::kTypeFieldNumber;
const int TechUpgradeRequest::kOperFieldNumber;
const int TechUpgradeRequest::kQuickFieldNumber;
#endif  // !_MSC_VER

TechUpgradeRequest::TechUpgradeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TechUpgradeRequest::InitAsDefaultInstance() {
}

TechUpgradeRequest::TechUpgradeRequest(const TechUpgradeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TechUpgradeRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  oper_ = false;
  quick_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TechUpgradeRequest::~TechUpgradeRequest() {
  SharedDtor();
}

void TechUpgradeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TechUpgradeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TechUpgradeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TechUpgradeRequest_descriptor_;
}

const TechUpgradeRequest& TechUpgradeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tech_2eproto();
  return *default_instance_;
}

TechUpgradeRequest* TechUpgradeRequest::default_instance_ = NULL;

TechUpgradeRequest* TechUpgradeRequest::New() const {
  return new TechUpgradeRequest;
}

void TechUpgradeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    oper_ = false;
    quick_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TechUpgradeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_oper;
        break;
      }

      // required bool oper = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &oper_)));
          set_has_oper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_quick;
        break;
      }

      // required bool quick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &quick_)));
          set_has_quick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TechUpgradeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required bool oper = 2;
  if (has_oper()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->oper(), output);
  }

  // required bool quick = 3;
  if (has_quick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->quick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TechUpgradeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required bool oper = 2;
  if (has_oper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->oper(), target);
  }

  // required bool quick = 3;
  if (has_quick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->quick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TechUpgradeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required bool oper = 2;
    if (has_oper()) {
      total_size += 1 + 1;
    }

    // required bool quick = 3;
    if (has_quick()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TechUpgradeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TechUpgradeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TechUpgradeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TechUpgradeRequest::MergeFrom(const TechUpgradeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_oper()) {
      set_oper(from.oper());
    }
    if (from.has_quick()) {
      set_quick(from.quick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TechUpgradeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TechUpgradeRequest::CopyFrom(const TechUpgradeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TechUpgradeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TechUpgradeRequest::Swap(TechUpgradeRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(oper_, other->oper_);
    std::swap(quick_, other->quick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TechUpgradeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TechUpgradeRequest_descriptor_;
  metadata.reflection = TechUpgradeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TechUpgradeResponse::kTypeFieldNumber;
const int TechUpgradeResponse::kQuickFieldNumber;
#endif  // !_MSC_VER

TechUpgradeResponse::TechUpgradeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TechUpgradeResponse::InitAsDefaultInstance() {
}

TechUpgradeResponse::TechUpgradeResponse(const TechUpgradeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TechUpgradeResponse::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  quick_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TechUpgradeResponse::~TechUpgradeResponse() {
  SharedDtor();
}

void TechUpgradeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TechUpgradeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TechUpgradeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TechUpgradeResponse_descriptor_;
}

const TechUpgradeResponse& TechUpgradeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tech_2eproto();
  return *default_instance_;
}

TechUpgradeResponse* TechUpgradeResponse::default_instance_ = NULL;

TechUpgradeResponse* TechUpgradeResponse::New() const {
  return new TechUpgradeResponse;
}

void TechUpgradeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    quick_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TechUpgradeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quick;
        break;
      }

      // required bool quick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &quick_)));
          set_has_quick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TechUpgradeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required bool quick = 2;
  if (has_quick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->quick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TechUpgradeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required bool quick = 2;
  if (has_quick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->quick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TechUpgradeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required bool quick = 2;
    if (has_quick()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TechUpgradeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TechUpgradeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TechUpgradeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TechUpgradeResponse::MergeFrom(const TechUpgradeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_quick()) {
      set_quick(from.quick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TechUpgradeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TechUpgradeResponse::CopyFrom(const TechUpgradeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TechUpgradeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TechUpgradeResponse::Swap(TechUpgradeResponse* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(quick_, other->quick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TechUpgradeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TechUpgradeResponse_descriptor_;
  metadata.reflection = TechUpgradeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UseSkillRequest::kTypeFieldNumber;
#endif  // !_MSC_VER

UseSkillRequest::UseSkillRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UseSkillRequest::InitAsDefaultInstance() {
}

UseSkillRequest::UseSkillRequest(const UseSkillRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UseSkillRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseSkillRequest::~UseSkillRequest() {
  SharedDtor();
}

void UseSkillRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UseSkillRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseSkillRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseSkillRequest_descriptor_;
}

const UseSkillRequest& UseSkillRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tech_2eproto();
  return *default_instance_;
}

UseSkillRequest* UseSkillRequest::default_instance_ = NULL;

UseSkillRequest* UseSkillRequest::New() const {
  return new UseSkillRequest;
}

void UseSkillRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseSkillRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UseSkillRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UseSkillRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UseSkillRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseSkillRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseSkillRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseSkillRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseSkillRequest::MergeFrom(const UseSkillRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseSkillRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseSkillRequest::CopyFrom(const UseSkillRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseSkillRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UseSkillRequest::Swap(UseSkillRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseSkillRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseSkillRequest_descriptor_;
  metadata.reflection = UseSkillRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UseSkillResponse::kTypeFieldNumber;
const int UseSkillResponse::kPropertiesFieldNumber;
const int UseSkillResponse::kPositionFieldNumber;
#endif  // !_MSC_VER

UseSkillResponse::UseSkillResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UseSkillResponse::InitAsDefaultInstance() {
  position_ = const_cast< ::slg::protocol::PositionDTO*>(&::slg::protocol::PositionDTO::default_instance());
}

UseSkillResponse::UseSkillResponse(const UseSkillResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UseSkillResponse::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseSkillResponse::~UseSkillResponse() {
  SharedDtor();
}

void UseSkillResponse::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void UseSkillResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseSkillResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseSkillResponse_descriptor_;
}

const UseSkillResponse& UseSkillResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tech_2eproto();
  return *default_instance_;
}

UseSkillResponse* UseSkillResponse::default_instance_ = NULL;

UseSkillResponse* UseSkillResponse::New() const {
  return new UseSkillResponse;
}

void UseSkillResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_position()) {
      if (position_ != NULL) position_->::slg::protocol::PositionDTO::Clear();
    }
  }
  properties_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseSkillResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_properties;
        break;
      }

      // repeated .slg.protocol.PropertyDTO properties = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_properties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_properties;
        if (input->ExpectTag(26)) goto parse_position;
        break;
      }

      // optional .slg.protocol.PositionDTO position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UseSkillResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated .slg.protocol.PropertyDTO properties = 2;
  for (int i = 0; i < this->properties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->properties(i), output);
  }

  // optional .slg.protocol.PositionDTO position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UseSkillResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated .slg.protocol.PropertyDTO properties = 2;
  for (int i = 0; i < this->properties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->properties(i), target);
  }

  // optional .slg.protocol.PositionDTO position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UseSkillResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional .slg.protocol.PositionDTO position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

  }
  // repeated .slg.protocol.PropertyDTO properties = 2;
  total_size += 1 * this->properties_size();
  for (int i = 0; i < this->properties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->properties(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseSkillResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseSkillResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseSkillResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseSkillResponse::MergeFrom(const UseSkillResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  properties_.MergeFrom(from.properties_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_position()) {
      mutable_position()->::slg::protocol::PositionDTO::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseSkillResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseSkillResponse::CopyFrom(const UseSkillResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseSkillResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < properties_size(); i++) {
    if (!this->properties(i).IsInitialized()) return false;
  }
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void UseSkillResponse::Swap(UseSkillResponse* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    properties_.Swap(&other->properties_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseSkillResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseSkillResponse_descriptor_;
  metadata.reflection = UseSkillResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TechPush::kTechsFieldNumber;
#endif  // !_MSC_VER

TechPush::TechPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TechPush::InitAsDefaultInstance() {
}

TechPush::TechPush(const TechPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TechPush::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TechPush::~TechPush() {
  SharedDtor();
}

void TechPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TechPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TechPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TechPush_descriptor_;
}

const TechPush& TechPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tech_2eproto();
  return *default_instance_;
}

TechPush* TechPush::default_instance_ = NULL;

TechPush* TechPush::New() const {
  return new TechPush;
}

void TechPush::Clear() {
  techs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TechPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.TechDTO techs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_techs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_techs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_techs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TechPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.TechDTO techs = 1;
  for (int i = 0; i < this->techs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->techs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TechPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.TechDTO techs = 1;
  for (int i = 0; i < this->techs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->techs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TechPush::ByteSize() const {
  int total_size = 0;

  // repeated .slg.protocol.TechDTO techs = 1;
  total_size += 1 * this->techs_size();
  for (int i = 0; i < this->techs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->techs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TechPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TechPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TechPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TechPush::MergeFrom(const TechPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  techs_.MergeFrom(from.techs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TechPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TechPush::CopyFrom(const TechPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TechPush::IsInitialized() const {

  for (int i = 0; i < techs_size(); i++) {
    if (!this->techs(i).IsInitialized()) return false;
  }
  return true;
}

void TechPush::Swap(TechPush* other) {
  if (other != this) {
    techs_.Swap(&other->techs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TechPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TechPush_descriptor_;
  metadata.reflection = TechPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillPush::kSkillsFieldNumber;
#endif  // !_MSC_VER

SkillPush::SkillPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillPush::InitAsDefaultInstance() {
}

SkillPush::SkillPush(const SkillPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillPush::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillPush::~SkillPush() {
  SharedDtor();
}

void SkillPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillPush_descriptor_;
}

const SkillPush& SkillPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tech_2eproto();
  return *default_instance_;
}

SkillPush* SkillPush::default_instance_ = NULL;

SkillPush* SkillPush::New() const {
  return new SkillPush;
}

void SkillPush::Clear() {
  skills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.SkillDTO skills = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_skills;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.SkillDTO skills = 1;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skills(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.SkillDTO skills = 1;
  for (int i = 0; i < this->skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skills(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillPush::ByteSize() const {
  int total_size = 0;

  // repeated .slg.protocol.SkillDTO skills = 1;
  total_size += 1 * this->skills_size();
  for (int i = 0; i < this->skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skills(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillPush::MergeFrom(const SkillPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  skills_.MergeFrom(from.skills_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillPush::CopyFrom(const SkillPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillPush::IsInitialized() const {

  for (int i = 0; i < skills_size(); i++) {
    if (!this->skills(i).IsInitialized()) return false;
  }
  return true;
}

void SkillPush::Swap(SkillPush* other) {
  if (other != this) {
    skills_.Swap(&other->skills_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillPush_descriptor_;
  metadata.reflection = SkillPush_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace slg

// @@protoc_insertion_point(global_scope)
