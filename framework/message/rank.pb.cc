// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rank.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rank.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace slg {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* PlayerRankDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerRankDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceRankDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceRankDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* LikeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LikeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LikeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LikeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankLikePush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankLikePush_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RankCommandId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RankPushId_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_rank_2eproto() {
  protobuf_AddDesc_rank_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rank.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerRankDTO_descriptor_ = file->message_type(0);
  static const int PlayerRankDTO_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRankDTO, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRankDTO, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRankDTO, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRankDTO, battle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRankDTO, praise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRankDTO, lastrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRankDTO, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRankDTO, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRankDTO, aname_),
  };
  PlayerRankDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerRankDTO_descriptor_,
      PlayerRankDTO::default_instance_,
      PlayerRankDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRankDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRankDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerRankDTO));
  AllianceRankDTO_descriptor_ = file->message_type(1);
  static const int AllianceRankDTO_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRankDTO, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRankDTO, aname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRankDTO, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRankDTO, current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRankDTO, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRankDTO, honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRankDTO, lastrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRankDTO, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRankDTO, nickname_),
  };
  AllianceRankDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceRankDTO_descriptor_,
      AllianceRankDTO::default_instance_,
      AllianceRankDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRankDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRankDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceRankDTO));
  RankRequest_descriptor_ = file->message_type(2);
  static const int RankRequest_offsets_[1] = {
  };
  RankRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankRequest_descriptor_,
      RankRequest::default_instance_,
      RankRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankRequest));
  RankResponse_descriptor_ = file->message_type(3);
  static const int RankResponse_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankResponse, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankResponse, playerrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankResponse, playerlast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankResponse, alliances_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankResponse, alliancerank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankResponse, alliancelast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankResponse, alliancehonor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankResponse, alliancelimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankResponse, alliancenum_),
  };
  RankResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankResponse_descriptor_,
      RankResponse::default_instance_,
      RankResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankResponse));
  LikeRequest_descriptor_ = file->message_type(4);
  static const int LikeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LikeRequest, ranking_),
  };
  LikeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LikeRequest_descriptor_,
      LikeRequest::default_instance_,
      LikeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LikeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LikeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LikeRequest));
  LikeResponse_descriptor_ = file->message_type(5);
  static const int LikeResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LikeResponse, ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LikeResponse, reward_),
  };
  LikeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LikeResponse_descriptor_,
      LikeResponse::default_instance_,
      LikeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LikeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LikeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LikeResponse));
  RankLikePush_descriptor_ = file->message_type(6);
  static const int RankLikePush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankLikePush, liketimes_),
  };
  RankLikePush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankLikePush_descriptor_,
      RankLikePush::default_instance_,
      RankLikePush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankLikePush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankLikePush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankLikePush));
  RankCommandId_descriptor_ = file->enum_type(0);
  RankPushId_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rank_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerRankDTO_descriptor_, &PlayerRankDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceRankDTO_descriptor_, &AllianceRankDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankRequest_descriptor_, &RankRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankResponse_descriptor_, &RankResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LikeRequest_descriptor_, &LikeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LikeResponse_descriptor_, &LikeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankLikePush_descriptor_, &RankLikePush::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rank_2eproto() {
  delete PlayerRankDTO::default_instance_;
  delete PlayerRankDTO_reflection_;
  delete AllianceRankDTO::default_instance_;
  delete AllianceRankDTO_reflection_;
  delete RankRequest::default_instance_;
  delete RankRequest_reflection_;
  delete RankResponse::default_instance_;
  delete RankResponse_reflection_;
  delete LikeRequest::default_instance_;
  delete LikeRequest_reflection_;
  delete LikeResponse::default_instance_;
  delete LikeResponse_reflection_;
  delete RankLikePush::default_instance_;
  delete RankLikePush_reflection_;
}

void protobuf_AddDesc_rank_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::slg::protocol::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nrank.proto\022\014slg.protocol\032\014common.proto"
    "\"\235\001\n\rPlayerRankDTO\022\020\n\010playerId\030\001 \002(\003\022\014\n\004"
    "icon\030\002 \002(\t\022\014\n\004rank\030\003 \002(\005\022\016\n\006battle\030\004 \002(\005"
    "\022\016\n\006praise\030\005 \002(\010\022\020\n\010lastRank\030\006 \002(\005\022\020\n\010ni"
    "ckname\030\007 \002(\t\022\013\n\003aid\030\010 \002(\005\022\r\n\005aname\030\t \001(\t"
    "\"\234\001\n\017AllianceRankDTO\022\013\n\003aid\030\001 \002(\005\022\r\n\005ana"
    "me\030\002 \002(\t\022\014\n\004icon\030\003 \002(\005\022\017\n\007current\030\004 \002(\005\022"
    "\r\n\005limit\030\005 \002(\005\022\r\n\005honor\030\006 \002(\005\022\020\n\010lastRan"
    "k\030\007 \002(\005\022\014\n\004rank\030\010 \002(\005\022\020\n\010nickname\030\t \002(\t\""
    "\r\n\013RankRequest\"\205\002\n\014RankResponse\022,\n\007playe"
    "rs\030\001 \003(\0132\033.slg.protocol.PlayerRankDTO\022\022\n"
    "\nplayerRank\030\002 \002(\005\022\022\n\nplayerLast\030\003 \002(\005\0220\n"
    "\talliances\030\004 \003(\0132\035.slg.protocol.Alliance"
    "RankDTO\022\024\n\014allianceRank\030\005 \001(\005\022\024\n\014allianc"
    "eLast\030\006 \001(\005\022\025\n\rallianceHonor\030\007 \001(\005\022\025\n\ral"
    "lianceLimit\030\010 \001(\005\022\023\n\013allianceNum\030\t \001(\005\"\036"
    "\n\013LikeRequest\022\017\n\007ranking\030\001 \002(\005\"J\n\014LikeRe"
    "sponse\022\017\n\007ranking\030\001 \002(\005\022)\n\006reward\030\002 \002(\0132"
    "\031.slg.protocol.PropertyDTO\"!\n\014RankLikePu"
    "sh\022\021\n\tlikeTimes\030\001 \002(\005*/\n\rRankCommandId\022\016"
    "\n\tRANK_LIST\020\355\016\022\016\n\tRANK_LIKE\020\357\016*#\n\nRankPu"
    "shId\022\025\n\017LIKE_TIMES_PUSH\020\275\225\003B)\n\034com.bonus"
    "studio.slg.protocolB\tRankProto", 910);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rank.proto", &protobuf_RegisterTypes);
  PlayerRankDTO::default_instance_ = new PlayerRankDTO();
  AllianceRankDTO::default_instance_ = new AllianceRankDTO();
  RankRequest::default_instance_ = new RankRequest();
  RankResponse::default_instance_ = new RankResponse();
  LikeRequest::default_instance_ = new LikeRequest();
  LikeResponse::default_instance_ = new LikeResponse();
  RankLikePush::default_instance_ = new RankLikePush();
  PlayerRankDTO::default_instance_->InitAsDefaultInstance();
  AllianceRankDTO::default_instance_->InitAsDefaultInstance();
  RankRequest::default_instance_->InitAsDefaultInstance();
  RankResponse::default_instance_->InitAsDefaultInstance();
  LikeRequest::default_instance_->InitAsDefaultInstance();
  LikeResponse::default_instance_->InitAsDefaultInstance();
  RankLikePush::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rank_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rank_2eproto {
  StaticDescriptorInitializer_rank_2eproto() {
    protobuf_AddDesc_rank_2eproto();
  }
} static_descriptor_initializer_rank_2eproto_;
const ::google::protobuf::EnumDescriptor* RankCommandId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankCommandId_descriptor_;
}
bool RankCommandId_IsValid(int value) {
  switch(value) {
    case 1901:
    case 1903:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RankPushId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankPushId_descriptor_;
}
bool RankPushId_IsValid(int value) {
  switch(value) {
    case 51901:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerRankDTO::kPlayerIdFieldNumber;
const int PlayerRankDTO::kIconFieldNumber;
const int PlayerRankDTO::kRankFieldNumber;
const int PlayerRankDTO::kBattleFieldNumber;
const int PlayerRankDTO::kPraiseFieldNumber;
const int PlayerRankDTO::kLastRankFieldNumber;
const int PlayerRankDTO::kNicknameFieldNumber;
const int PlayerRankDTO::kAidFieldNumber;
const int PlayerRankDTO::kAnameFieldNumber;
#endif  // !_MSC_VER

PlayerRankDTO::PlayerRankDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerRankDTO::InitAsDefaultInstance() {
}

PlayerRankDTO::PlayerRankDTO(const PlayerRankDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerRankDTO::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rank_ = 0;
  battle_ = 0;
  praise_ = false;
  lastrank_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  aid_ = 0;
  aname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerRankDTO::~PlayerRankDTO() {
  SharedDtor();
}

void PlayerRankDTO::SharedDtor() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (aname_ != &::google::protobuf::internal::kEmptyString) {
    delete aname_;
  }
  if (this != default_instance_) {
  }
}

void PlayerRankDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRankDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerRankDTO_descriptor_;
}

const PlayerRankDTO& PlayerRankDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rank_2eproto();
  return *default_instance_;
}

PlayerRankDTO* PlayerRankDTO::default_instance_ = NULL;

PlayerRankDTO* PlayerRankDTO::New() const {
  return new PlayerRankDTO;
}

void PlayerRankDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    rank_ = 0;
    battle_ = 0;
    praise_ = false;
    lastrank_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    aid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_aname()) {
      if (aname_ != &::google::protobuf::internal::kEmptyString) {
        aname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerRankDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_icon;
        break;
      }

      // required string icon = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }

      // required int32 rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_battle;
        break;
      }

      // required int32 battle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_)));
          set_has_battle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_praise;
        break;
      }

      // required bool praise = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_praise:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &praise_)));
          set_has_praise();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lastRank;
        break;
      }

      // required int32 lastRank = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastrank_)));
          set_has_lastrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_nickname;
        break;
      }

      // required string nickname = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_aid;
        break;
      }

      // required int32 aid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_aname;
        break;
      }

      // optional string aname = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->aname().data(), this->aname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerRankDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // required string icon = 2;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->icon(), output);
  }

  // required int32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank(), output);
  }

  // required int32 battle = 4;
  if (has_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->battle(), output);
  }

  // required bool praise = 5;
  if (has_praise()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->praise(), output);
  }

  // required int32 lastRank = 6;
  if (has_lastrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lastrank(), output);
  }

  // required string nickname = 7;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->nickname(), output);
  }

  // required int32 aid = 8;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->aid(), output);
  }

  // optional string aname = 9;
  if (has_aname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aname().data(), this->aname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->aname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerRankDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // required string icon = 2;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->icon(), target);
  }

  // required int32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank(), target);
  }

  // required int32 battle = 4;
  if (has_battle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->battle(), target);
  }

  // required bool praise = 5;
  if (has_praise()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->praise(), target);
  }

  // required int32 lastRank = 6;
  if (has_lastrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lastrank(), target);
  }

  // required string nickname = 7;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->nickname(), target);
  }

  // required int32 aid = 8;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->aid(), target);
  }

  // optional string aname = 9;
  if (has_aname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aname().data(), this->aname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->aname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerRankDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // required string icon = 2;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // required int32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // required int32 battle = 4;
    if (has_battle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle());
    }

    // required bool praise = 5;
    if (has_praise()) {
      total_size += 1 + 1;
    }

    // required int32 lastRank = 6;
    if (has_lastrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastrank());
    }

    // required string nickname = 7;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // required int32 aid = 8;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->aid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string aname = 9;
    if (has_aname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRankDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerRankDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerRankDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerRankDTO::MergeFrom(const PlayerRankDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_battle()) {
      set_battle(from.battle());
    }
    if (from.has_praise()) {
      set_praise(from.praise());
    }
    if (from.has_lastrank()) {
      set_lastrank(from.lastrank());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_aid()) {
      set_aid(from.aid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_aname()) {
      set_aname(from.aname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerRankDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRankDTO::CopyFrom(const PlayerRankDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRankDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void PlayerRankDTO::Swap(PlayerRankDTO* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(icon_, other->icon_);
    std::swap(rank_, other->rank_);
    std::swap(battle_, other->battle_);
    std::swap(praise_, other->praise_);
    std::swap(lastrank_, other->lastrank_);
    std::swap(nickname_, other->nickname_);
    std::swap(aid_, other->aid_);
    std::swap(aname_, other->aname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerRankDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerRankDTO_descriptor_;
  metadata.reflection = PlayerRankDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceRankDTO::kAidFieldNumber;
const int AllianceRankDTO::kAnameFieldNumber;
const int AllianceRankDTO::kIconFieldNumber;
const int AllianceRankDTO::kCurrentFieldNumber;
const int AllianceRankDTO::kLimitFieldNumber;
const int AllianceRankDTO::kHonorFieldNumber;
const int AllianceRankDTO::kLastRankFieldNumber;
const int AllianceRankDTO::kRankFieldNumber;
const int AllianceRankDTO::kNicknameFieldNumber;
#endif  // !_MSC_VER

AllianceRankDTO::AllianceRankDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceRankDTO::InitAsDefaultInstance() {
}

AllianceRankDTO::AllianceRankDTO(const AllianceRankDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceRankDTO::SharedCtor() {
  _cached_size_ = 0;
  aid_ = 0;
  aname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = 0;
  current_ = 0;
  limit_ = 0;
  honor_ = 0;
  lastrank_ = 0;
  rank_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceRankDTO::~AllianceRankDTO() {
  SharedDtor();
}

void AllianceRankDTO::SharedDtor() {
  if (aname_ != &::google::protobuf::internal::kEmptyString) {
    delete aname_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void AllianceRankDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceRankDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceRankDTO_descriptor_;
}

const AllianceRankDTO& AllianceRankDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rank_2eproto();
  return *default_instance_;
}

AllianceRankDTO* AllianceRankDTO::default_instance_ = NULL;

AllianceRankDTO* AllianceRankDTO::New() const {
  return new AllianceRankDTO;
}

void AllianceRankDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    aid_ = 0;
    if (has_aname()) {
      if (aname_ != &::google::protobuf::internal::kEmptyString) {
        aname_->clear();
      }
    }
    icon_ = 0;
    current_ = 0;
    limit_ = 0;
    honor_ = 0;
    lastrank_ = 0;
    rank_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceRankDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 aid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_aname;
        break;
      }

      // required string aname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->aname().data(), this->aname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_icon;
        break;
      }

      // required int32 icon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_icon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icon_)));
          set_has_icon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_current;
        break;
      }

      // required int32 current = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_)));
          set_has_current();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_limit;
        break;
      }

      // required int32 limit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_honor;
        break;
      }

      // required int32 honor = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_honor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &honor_)));
          set_has_honor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lastRank;
        break;
      }

      // required int32 lastRank = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastrank_)));
          set_has_lastrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_rank;
        break;
      }

      // required int32 rank = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_nickname;
        break;
      }

      // required string nickname = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllianceRankDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->aid(), output);
  }

  // required string aname = 2;
  if (has_aname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aname().data(), this->aname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->aname(), output);
  }

  // required int32 icon = 3;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->icon(), output);
  }

  // required int32 current = 4;
  if (has_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->current(), output);
  }

  // required int32 limit = 5;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->limit(), output);
  }

  // required int32 honor = 6;
  if (has_honor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->honor(), output);
  }

  // required int32 lastRank = 7;
  if (has_lastrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lastrank(), output);
  }

  // required int32 rank = 8;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->rank(), output);
  }

  // required string nickname = 9;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->nickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceRankDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->aid(), target);
  }

  // required string aname = 2;
  if (has_aname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aname().data(), this->aname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->aname(), target);
  }

  // required int32 icon = 3;
  if (has_icon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->icon(), target);
  }

  // required int32 current = 4;
  if (has_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->current(), target);
  }

  // required int32 limit = 5;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->limit(), target);
  }

  // required int32 honor = 6;
  if (has_honor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->honor(), target);
  }

  // required int32 lastRank = 7;
  if (has_lastrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lastrank(), target);
  }

  // required int32 rank = 8;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->rank(), target);
  }

  // required string nickname = 9;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->nickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceRankDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->aid());
    }

    // required string aname = 2;
    if (has_aname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aname());
    }

    // required int32 icon = 3;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icon());
    }

    // required int32 current = 4;
    if (has_current()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current());
    }

    // required int32 limit = 5;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit());
    }

    // required int32 honor = 6;
    if (has_honor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->honor());
    }

    // required int32 lastRank = 7;
    if (has_lastrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastrank());
    }

    // required int32 rank = 8;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string nickname = 9;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceRankDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceRankDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceRankDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceRankDTO::MergeFrom(const AllianceRankDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_aname()) {
      set_aname(from.aname());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_current()) {
      set_current(from.current());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_honor()) {
      set_honor(from.honor());
    }
    if (from.has_lastrank()) {
      set_lastrank(from.lastrank());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceRankDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceRankDTO::CopyFrom(const AllianceRankDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceRankDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void AllianceRankDTO::Swap(AllianceRankDTO* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(aname_, other->aname_);
    std::swap(icon_, other->icon_);
    std::swap(current_, other->current_);
    std::swap(limit_, other->limit_);
    std::swap(honor_, other->honor_);
    std::swap(lastrank_, other->lastrank_);
    std::swap(rank_, other->rank_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceRankDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceRankDTO_descriptor_;
  metadata.reflection = AllianceRankDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RankRequest::RankRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RankRequest::InitAsDefaultInstance() {
}

RankRequest::RankRequest(const RankRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RankRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankRequest::~RankRequest() {
  SharedDtor();
}

void RankRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RankRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankRequest_descriptor_;
}

const RankRequest& RankRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rank_2eproto();
  return *default_instance_;
}

RankRequest* RankRequest::default_instance_ = NULL;

RankRequest* RankRequest::New() const {
  return new RankRequest;
}

void RankRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RankRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RankRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RankRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankRequest::MergeFrom(const RankRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankRequest::CopyFrom(const RankRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankRequest::IsInitialized() const {

  return true;
}

void RankRequest::Swap(RankRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankRequest_descriptor_;
  metadata.reflection = RankRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankResponse::kPlayersFieldNumber;
const int RankResponse::kPlayerRankFieldNumber;
const int RankResponse::kPlayerLastFieldNumber;
const int RankResponse::kAlliancesFieldNumber;
const int RankResponse::kAllianceRankFieldNumber;
const int RankResponse::kAllianceLastFieldNumber;
const int RankResponse::kAllianceHonorFieldNumber;
const int RankResponse::kAllianceLimitFieldNumber;
const int RankResponse::kAllianceNumFieldNumber;
#endif  // !_MSC_VER

RankResponse::RankResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RankResponse::InitAsDefaultInstance() {
}

RankResponse::RankResponse(const RankResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RankResponse::SharedCtor() {
  _cached_size_ = 0;
  playerrank_ = 0;
  playerlast_ = 0;
  alliancerank_ = 0;
  alliancelast_ = 0;
  alliancehonor_ = 0;
  alliancelimit_ = 0;
  alliancenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankResponse::~RankResponse() {
  SharedDtor();
}

void RankResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RankResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankResponse_descriptor_;
}

const RankResponse& RankResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rank_2eproto();
  return *default_instance_;
}

RankResponse* RankResponse::default_instance_ = NULL;

RankResponse* RankResponse::New() const {
  return new RankResponse;
}

void RankResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    playerrank_ = 0;
    playerlast_ = 0;
    alliancerank_ = 0;
    alliancelast_ = 0;
    alliancehonor_ = 0;
    alliancelimit_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    alliancenum_ = 0;
  }
  players_.Clear();
  alliances_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.PlayerRankDTO players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectTag(16)) goto parse_playerRank;
        break;
      }

      // required int32 playerRank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerrank_)));
          set_has_playerrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerLast;
        break;
      }

      // required int32 playerLast = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerLast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerlast_)));
          set_has_playerlast();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_alliances;
        break;
      }

      // repeated .slg.protocol.AllianceRankDTO alliances = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alliances:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_alliances()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_alliances;
        if (input->ExpectTag(40)) goto parse_allianceRank;
        break;
      }

      // optional int32 allianceRank = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allianceRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alliancerank_)));
          set_has_alliancerank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_allianceLast;
        break;
      }

      // optional int32 allianceLast = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allianceLast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alliancelast_)));
          set_has_alliancelast();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_allianceHonor;
        break;
      }

      // optional int32 allianceHonor = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allianceHonor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alliancehonor_)));
          set_has_alliancehonor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_allianceLimit;
        break;
      }

      // optional int32 allianceLimit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allianceLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alliancelimit_)));
          set_has_alliancelimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_allianceNum;
        break;
      }

      // optional int32 allianceNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allianceNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alliancenum_)));
          set_has_alliancenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.PlayerRankDTO players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  // required int32 playerRank = 2;
  if (has_playerrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playerrank(), output);
  }

  // required int32 playerLast = 3;
  if (has_playerlast()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playerlast(), output);
  }

  // repeated .slg.protocol.AllianceRankDTO alliances = 4;
  for (int i = 0; i < this->alliances_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->alliances(i), output);
  }

  // optional int32 allianceRank = 5;
  if (has_alliancerank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->alliancerank(), output);
  }

  // optional int32 allianceLast = 6;
  if (has_alliancelast()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->alliancelast(), output);
  }

  // optional int32 allianceHonor = 7;
  if (has_alliancehonor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->alliancehonor(), output);
  }

  // optional int32 allianceLimit = 8;
  if (has_alliancelimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->alliancelimit(), output);
  }

  // optional int32 allianceNum = 9;
  if (has_alliancenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->alliancenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RankResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.PlayerRankDTO players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }

  // required int32 playerRank = 2;
  if (has_playerrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playerrank(), target);
  }

  // required int32 playerLast = 3;
  if (has_playerlast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playerlast(), target);
  }

  // repeated .slg.protocol.AllianceRankDTO alliances = 4;
  for (int i = 0; i < this->alliances_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->alliances(i), target);
  }

  // optional int32 allianceRank = 5;
  if (has_alliancerank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->alliancerank(), target);
  }

  // optional int32 allianceLast = 6;
  if (has_alliancelast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->alliancelast(), target);
  }

  // optional int32 allianceHonor = 7;
  if (has_alliancehonor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->alliancehonor(), target);
  }

  // optional int32 allianceLimit = 8;
  if (has_alliancelimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->alliancelimit(), target);
  }

  // optional int32 allianceNum = 9;
  if (has_alliancenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->alliancenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RankResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 playerRank = 2;
    if (has_playerrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerrank());
    }

    // required int32 playerLast = 3;
    if (has_playerlast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerlast());
    }

    // optional int32 allianceRank = 5;
    if (has_alliancerank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alliancerank());
    }

    // optional int32 allianceLast = 6;
    if (has_alliancelast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alliancelast());
    }

    // optional int32 allianceHonor = 7;
    if (has_alliancehonor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alliancehonor());
    }

    // optional int32 allianceLimit = 8;
    if (has_alliancelimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alliancelimit());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 allianceNum = 9;
    if (has_alliancenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alliancenum());
    }

  }
  // repeated .slg.protocol.PlayerRankDTO players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  // repeated .slg.protocol.AllianceRankDTO alliances = 4;
  total_size += 1 * this->alliances_size();
  for (int i = 0; i < this->alliances_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->alliances(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankResponse::MergeFrom(const RankResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  alliances_.MergeFrom(from.alliances_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_playerrank()) {
      set_playerrank(from.playerrank());
    }
    if (from.has_playerlast()) {
      set_playerlast(from.playerlast());
    }
    if (from.has_alliancerank()) {
      set_alliancerank(from.alliancerank());
    }
    if (from.has_alliancelast()) {
      set_alliancelast(from.alliancelast());
    }
    if (from.has_alliancehonor()) {
      set_alliancehonor(from.alliancehonor());
    }
    if (from.has_alliancelimit()) {
      set_alliancelimit(from.alliancelimit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_alliancenum()) {
      set_alliancenum(from.alliancenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankResponse::CopyFrom(const RankResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  for (int i = 0; i < players_size(); i++) {
    if (!this->players(i).IsInitialized()) return false;
  }
  for (int i = 0; i < alliances_size(); i++) {
    if (!this->alliances(i).IsInitialized()) return false;
  }
  return true;
}

void RankResponse::Swap(RankResponse* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(playerrank_, other->playerrank_);
    std::swap(playerlast_, other->playerlast_);
    alliances_.Swap(&other->alliances_);
    std::swap(alliancerank_, other->alliancerank_);
    std::swap(alliancelast_, other->alliancelast_);
    std::swap(alliancehonor_, other->alliancehonor_);
    std::swap(alliancelimit_, other->alliancelimit_);
    std::swap(alliancenum_, other->alliancenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankResponse_descriptor_;
  metadata.reflection = RankResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LikeRequest::kRankingFieldNumber;
#endif  // !_MSC_VER

LikeRequest::LikeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LikeRequest::InitAsDefaultInstance() {
}

LikeRequest::LikeRequest(const LikeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LikeRequest::SharedCtor() {
  _cached_size_ = 0;
  ranking_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LikeRequest::~LikeRequest() {
  SharedDtor();
}

void LikeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LikeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LikeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LikeRequest_descriptor_;
}

const LikeRequest& LikeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rank_2eproto();
  return *default_instance_;
}

LikeRequest* LikeRequest::default_instance_ = NULL;

LikeRequest* LikeRequest::New() const {
  return new LikeRequest;
}

void LikeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ranking_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LikeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ranking = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LikeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ranking = 1;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ranking(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LikeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ranking = 1;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ranking(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LikeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ranking = 1;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LikeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LikeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LikeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LikeRequest::MergeFrom(const LikeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LikeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LikeRequest::CopyFrom(const LikeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LikeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LikeRequest::Swap(LikeRequest* other) {
  if (other != this) {
    std::swap(ranking_, other->ranking_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LikeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LikeRequest_descriptor_;
  metadata.reflection = LikeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LikeResponse::kRankingFieldNumber;
const int LikeResponse::kRewardFieldNumber;
#endif  // !_MSC_VER

LikeResponse::LikeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LikeResponse::InitAsDefaultInstance() {
  reward_ = const_cast< ::slg::protocol::PropertyDTO*>(&::slg::protocol::PropertyDTO::default_instance());
}

LikeResponse::LikeResponse(const LikeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LikeResponse::SharedCtor() {
  _cached_size_ = 0;
  ranking_ = 0;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LikeResponse::~LikeResponse() {
  SharedDtor();
}

void LikeResponse::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void LikeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LikeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LikeResponse_descriptor_;
}

const LikeResponse& LikeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rank_2eproto();
  return *default_instance_;
}

LikeResponse* LikeResponse::default_instance_ = NULL;

LikeResponse* LikeResponse::New() const {
  return new LikeResponse;
}

void LikeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ranking_ = 0;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::slg::protocol::PropertyDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LikeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ranking = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // required .slg.protocol.PropertyDTO reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LikeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ranking = 1;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ranking(), output);
  }

  // required .slg.protocol.PropertyDTO reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LikeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ranking = 1;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ranking(), target);
  }

  // required .slg.protocol.PropertyDTO reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LikeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ranking = 1;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking());
    }

    // required .slg.protocol.PropertyDTO reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LikeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LikeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LikeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LikeResponse::MergeFrom(const LikeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
    if (from.has_reward()) {
      mutable_reward()->::slg::protocol::PropertyDTO::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LikeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LikeResponse::CopyFrom(const LikeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LikeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void LikeResponse::Swap(LikeResponse* other) {
  if (other != this) {
    std::swap(ranking_, other->ranking_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LikeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LikeResponse_descriptor_;
  metadata.reflection = LikeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankLikePush::kLikeTimesFieldNumber;
#endif  // !_MSC_VER

RankLikePush::RankLikePush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RankLikePush::InitAsDefaultInstance() {
}

RankLikePush::RankLikePush(const RankLikePush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RankLikePush::SharedCtor() {
  _cached_size_ = 0;
  liketimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankLikePush::~RankLikePush() {
  SharedDtor();
}

void RankLikePush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RankLikePush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankLikePush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankLikePush_descriptor_;
}

const RankLikePush& RankLikePush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rank_2eproto();
  return *default_instance_;
}

RankLikePush* RankLikePush::default_instance_ = NULL;

RankLikePush* RankLikePush::New() const {
  return new RankLikePush;
}

void RankLikePush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    liketimes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankLikePush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 likeTimes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &liketimes_)));
          set_has_liketimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankLikePush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 likeTimes = 1;
  if (has_liketimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->liketimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RankLikePush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 likeTimes = 1;
  if (has_liketimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->liketimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RankLikePush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 likeTimes = 1;
    if (has_liketimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->liketimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankLikePush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankLikePush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankLikePush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankLikePush::MergeFrom(const RankLikePush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_liketimes()) {
      set_liketimes(from.liketimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankLikePush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankLikePush::CopyFrom(const RankLikePush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankLikePush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RankLikePush::Swap(RankLikePush* other) {
  if (other != this) {
    std::swap(liketimes_, other->liketimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankLikePush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankLikePush_descriptor_;
  metadata.reflection = RankLikePush_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace slg

// @@protoc_insertion_point(global_scope)
