// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace slg {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* ChatContent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatContent_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatGroupCreateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatGroupCreateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatGroupCreateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatGroupCreateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatGroupLeaveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatGroupLeaveRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatSendRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatSendRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatSendResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatSendResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatGroupSnapshot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatGroupSnapshot_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatPullRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatPullRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatMessagePush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatMessagePush_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatGroupPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatGroupPush_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChatContentType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ChatCommandId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ChatChannel_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ChatPushId_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_chat_2eproto() {
  protobuf_AddDesc_chat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "chat.proto");
  GOOGLE_CHECK(file != NULL);
  ChatContent_descriptor_ = file->message_type(0);
  static const int ChatContent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatContent, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatContent, text_),
  };
  ChatContent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatContent_descriptor_,
      ChatContent::default_instance_,
      ChatContent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatContent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatContent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatContent));
  ChatPlayer_descriptor_ = file->message_type(1);
  static const int ChatPlayer_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatPlayer, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatPlayer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatPlayer, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatPlayer, allianceshortname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatPlayer, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatPlayer, valid_),
  };
  ChatPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatPlayer_descriptor_,
      ChatPlayer::default_instance_,
      ChatPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatPlayer));
  ChatMessage_descriptor_ = file->message_type(2);
  static const int ChatMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, senderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, sender_),
  };
  ChatMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatMessage_descriptor_,
      ChatMessage::default_instance_,
      ChatMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatMessage));
  ChatGroupCreateRequest_descriptor_ = file->message_type(3);
  static const int ChatGroupCreateRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatGroupCreateRequest, playerids_),
  };
  ChatGroupCreateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatGroupCreateRequest_descriptor_,
      ChatGroupCreateRequest::default_instance_,
      ChatGroupCreateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatGroupCreateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatGroupCreateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatGroupCreateRequest));
  ChatGroupCreateResponse_descriptor_ = file->message_type(4);
  static const int ChatGroupCreateResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatGroupCreateResponse, groupid_),
  };
  ChatGroupCreateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatGroupCreateResponse_descriptor_,
      ChatGroupCreateResponse::default_instance_,
      ChatGroupCreateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatGroupCreateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatGroupCreateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatGroupCreateResponse));
  ChatGroupLeaveRequest_descriptor_ = file->message_type(5);
  static const int ChatGroupLeaveRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatGroupLeaveRequest, groupid_),
  };
  ChatGroupLeaveRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatGroupLeaveRequest_descriptor_,
      ChatGroupLeaveRequest::default_instance_,
      ChatGroupLeaveRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatGroupLeaveRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatGroupLeaveRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatGroupLeaveRequest));
  ChatSendRequest_descriptor_ = file->message_type(6);
  static const int ChatSendRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSendRequest, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSendRequest, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSendRequest, targetid_),
  };
  ChatSendRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatSendRequest_descriptor_,
      ChatSendRequest::default_instance_,
      ChatSendRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSendRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSendRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatSendRequest));
  ChatSendResponse_descriptor_ = file->message_type(7);
  static const int ChatSendResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSendResponse, messageid_),
  };
  ChatSendResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatSendResponse_descriptor_,
      ChatSendResponse::default_instance_,
      ChatSendResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSendResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSendResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatSendResponse));
  ChatGroupSnapshot_descriptor_ = file->message_type(8);
  static const int ChatGroupSnapshot_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatGroupSnapshot, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatGroupSnapshot, messageid_),
  };
  ChatGroupSnapshot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatGroupSnapshot_descriptor_,
      ChatGroupSnapshot::default_instance_,
      ChatGroupSnapshot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatGroupSnapshot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatGroupSnapshot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatGroupSnapshot));
  ChatPullRequest_descriptor_ = file->message_type(9);
  static const int ChatPullRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatPullRequest, snapshots_),
  };
  ChatPullRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatPullRequest_descriptor_,
      ChatPullRequest::default_instance_,
      ChatPullRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatPullRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatPullRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatPullRequest));
  ChatMessagePush_descriptor_ = file->message_type(10);
  static const int ChatMessagePush_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessagePush, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessagePush, messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessagePush, groupid_),
  };
  ChatMessagePush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatMessagePush_descriptor_,
      ChatMessagePush::default_instance_,
      ChatMessagePush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessagePush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessagePush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatMessagePush));
  ChatGroup_descriptor_ = file->message_type(11);
  static const int ChatGroup_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatGroup, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatGroup, ownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatGroup, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatGroup, p2p_),
  };
  ChatGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatGroup_descriptor_,
      ChatGroup::default_instance_,
      ChatGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatGroup));
  ChatGroupPush_descriptor_ = file->message_type(12);
  static const int ChatGroupPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatGroupPush, groups_),
  };
  ChatGroupPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatGroupPush_descriptor_,
      ChatGroupPush::default_instance_,
      ChatGroupPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatGroupPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatGroupPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatGroupPush));
  ChatContentType_descriptor_ = file->enum_type(0);
  ChatCommandId_descriptor_ = file->enum_type(1);
  ChatChannel_descriptor_ = file->enum_type(2);
  ChatPushId_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_chat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatContent_descriptor_, &ChatContent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatPlayer_descriptor_, &ChatPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatMessage_descriptor_, &ChatMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatGroupCreateRequest_descriptor_, &ChatGroupCreateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatGroupCreateResponse_descriptor_, &ChatGroupCreateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatGroupLeaveRequest_descriptor_, &ChatGroupLeaveRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatSendRequest_descriptor_, &ChatSendRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatSendResponse_descriptor_, &ChatSendResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatGroupSnapshot_descriptor_, &ChatGroupSnapshot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatPullRequest_descriptor_, &ChatPullRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatMessagePush_descriptor_, &ChatMessagePush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatGroup_descriptor_, &ChatGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatGroupPush_descriptor_, &ChatGroupPush::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_chat_2eproto() {
  delete ChatContent::default_instance_;
  delete ChatContent_reflection_;
  delete ChatPlayer::default_instance_;
  delete ChatPlayer_reflection_;
  delete ChatMessage::default_instance_;
  delete ChatMessage_reflection_;
  delete ChatGroupCreateRequest::default_instance_;
  delete ChatGroupCreateRequest_reflection_;
  delete ChatGroupCreateResponse::default_instance_;
  delete ChatGroupCreateResponse_reflection_;
  delete ChatGroupLeaveRequest::default_instance_;
  delete ChatGroupLeaveRequest_reflection_;
  delete ChatSendRequest::default_instance_;
  delete ChatSendRequest_reflection_;
  delete ChatSendResponse::default_instance_;
  delete ChatSendResponse_reflection_;
  delete ChatGroupSnapshot::default_instance_;
  delete ChatGroupSnapshot_reflection_;
  delete ChatPullRequest::default_instance_;
  delete ChatPullRequest_reflection_;
  delete ChatMessagePush::default_instance_;
  delete ChatMessagePush_reflection_;
  delete ChatGroup::default_instance_;
  delete ChatGroup_reflection_;
  delete ChatGroupPush::default_instance_;
  delete ChatGroupPush_reflection_;
}

void protobuf_AddDesc_chat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::slg::protocol::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nchat.proto\022\014slg.protocol\032\014common.proto"
    "\"H\n\013ChatContent\022+\n\004type\030\001 \002(\0162\035.slg.prot"
    "ocol.ChatContentType\022\014\n\004text\030\n \001(\t\"\207\001\n\nC"
    "hatPlayer\022\020\n\010playerId\030\001 \002(\003\022\014\n\004name\030\002 \002("
    "\t\022\014\n\004icon\030\003 \001(\t\022\031\n\021allianceShortName\030\004 \001"
    "(\t\022!\n\003vip\030\005 \001(\0132\024.slg.protocol.VipDTO\022\r\n"
    "\005valid\030\006 \001(\010\"\233\001\n\013ChatMessage\022\021\n\tmessageI"
    "d\030\001 \002(\003\022*\n\007content\030\002 \002(\0132\031.slg.protocol."
    "ChatContent\022\021\n\ttimestamp\030\003 \002(\005\022\020\n\010sender"
    "Id\030\n \002(\003\022(\n\006sender\030\013 \001(\0132\030.slg.protocol."
    "ChatPlayer\"+\n\026ChatGroupCreateRequest\022\021\n\t"
    "playerIds\030\001 \003(\003\"*\n\027ChatGroupCreateRespon"
    "se\022\017\n\007groupId\030\001 \002(\003\"(\n\025ChatGroupLeaveReq"
    "uest\022\017\n\007groupId\030\001 \002(\003\"{\n\017ChatSendRequest"
    "\022*\n\007channel\030\001 \002(\0162\031.slg.protocol.ChatCha"
    "nnel\022*\n\007content\030\002 \002(\0132\031.slg.protocol.Cha"
    "tContent\022\020\n\010targetId\030\003 \001(\003\"%\n\020ChatSendRe"
    "sponse\022\021\n\tmessageId\030\001 \002(\003\"7\n\021ChatGroupSn"
    "apshot\022\017\n\007groupId\030\001 \002(\003\022\021\n\tmessageId\030\002 \002"
    "(\003\"E\n\017ChatPullRequest\0222\n\tsnapshots\030\001 \003(\013"
    "2\037.slg.protocol.ChatGroupSnapshot\"{\n\017Cha"
    "tMessagePush\022*\n\007channel\030\001 \002(\0162\031.slg.prot"
    "ocol.ChatChannel\022+\n\010messages\030\002 \003(\0132\031.slg"
    ".protocol.ChatMessage\022\017\n\007groupId\030\003 \001(\003\"e"
    "\n\tChatGroup\022\017\n\007groupId\030\001 \002(\003\022\017\n\007ownerId\030"
    "\002 \001(\003\022)\n\007members\030\003 \003(\0132\030.slg.protocol.Ch"
    "atPlayer\022\013\n\003p2p\030\004 \002(\010\"8\n\rChatGroupPush\022\'"
    "\n\006groups\030\001 \003(\0132\027.slg.protocol.ChatGroup*"
    "(\n\017ChatContentType\022\025\n\021CHAT_CONTENT_TEXT\020"
    "\001*^\n\rChatCommandId\022\016\n\tCHAT_SEND\020\231\021\022\026\n\021CH"
    "AT_GROUP_CREATE\020\232\021\022\025\n\020CHAT_GROUP_LEAVE\020\233"
    "\021\022\016\n\tCHAT_PULL\020\234\021*N\n\013ChatChannel\022\014\n\010CHAT"
    "_P2P\020\001\022\016\n\nCHAT_GROUP\020\002\022\021\n\rCHAT_ALLIANCE\020"
    "\003\022\016\n\nCHAT_WORLD\020\004*<\n\nChatPushId\022\027\n\021CHAT_"
    "MESSAGE_PUSH\020\351\227\003\022\025\n\017CHAT_GROUP_PUSH\020\352\227\003B"
    ")\n\034com.bonusstudio.slg.protocolB\tChatPro"
    "to", 1442);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chat.proto", &protobuf_RegisterTypes);
  ChatContent::default_instance_ = new ChatContent();
  ChatPlayer::default_instance_ = new ChatPlayer();
  ChatMessage::default_instance_ = new ChatMessage();
  ChatGroupCreateRequest::default_instance_ = new ChatGroupCreateRequest();
  ChatGroupCreateResponse::default_instance_ = new ChatGroupCreateResponse();
  ChatGroupLeaveRequest::default_instance_ = new ChatGroupLeaveRequest();
  ChatSendRequest::default_instance_ = new ChatSendRequest();
  ChatSendResponse::default_instance_ = new ChatSendResponse();
  ChatGroupSnapshot::default_instance_ = new ChatGroupSnapshot();
  ChatPullRequest::default_instance_ = new ChatPullRequest();
  ChatMessagePush::default_instance_ = new ChatMessagePush();
  ChatGroup::default_instance_ = new ChatGroup();
  ChatGroupPush::default_instance_ = new ChatGroupPush();
  ChatContent::default_instance_->InitAsDefaultInstance();
  ChatPlayer::default_instance_->InitAsDefaultInstance();
  ChatMessage::default_instance_->InitAsDefaultInstance();
  ChatGroupCreateRequest::default_instance_->InitAsDefaultInstance();
  ChatGroupCreateResponse::default_instance_->InitAsDefaultInstance();
  ChatGroupLeaveRequest::default_instance_->InitAsDefaultInstance();
  ChatSendRequest::default_instance_->InitAsDefaultInstance();
  ChatSendResponse::default_instance_->InitAsDefaultInstance();
  ChatGroupSnapshot::default_instance_->InitAsDefaultInstance();
  ChatPullRequest::default_instance_->InitAsDefaultInstance();
  ChatMessagePush::default_instance_->InitAsDefaultInstance();
  ChatGroup::default_instance_->InitAsDefaultInstance();
  ChatGroupPush::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_chat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_chat_2eproto {
  StaticDescriptorInitializer_chat_2eproto() {
    protobuf_AddDesc_chat_2eproto();
  }
} static_descriptor_initializer_chat_2eproto_;
const ::google::protobuf::EnumDescriptor* ChatContentType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatContentType_descriptor_;
}
bool ChatContentType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ChatCommandId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatCommandId_descriptor_;
}
bool ChatCommandId_IsValid(int value) {
  switch(value) {
    case 2201:
    case 2202:
    case 2203:
    case 2204:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ChatChannel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatChannel_descriptor_;
}
bool ChatChannel_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ChatPushId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatPushId_descriptor_;
}
bool ChatPushId_IsValid(int value) {
  switch(value) {
    case 52201:
    case 52202:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ChatContent::kTypeFieldNumber;
const int ChatContent::kTextFieldNumber;
#endif  // !_MSC_VER

ChatContent::ChatContent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatContent::InitAsDefaultInstance() {
}

ChatContent::ChatContent(const ChatContent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatContent::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatContent::~ChatContent() {
  SharedDtor();
}

void ChatContent::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void ChatContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatContent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatContent_descriptor_;
}

const ChatContent& ChatContent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

ChatContent* ChatContent::default_instance_ = NULL;

ChatContent* ChatContent::New() const {
  return new ChatContent;
}

void ChatContent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .slg.protocol.ChatContentType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::slg::protocol::ChatContentType_IsValid(value)) {
            set_type(static_cast< ::slg::protocol::ChatContentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_text;
        break;
      }

      // optional string text = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .slg.protocol.ChatContentType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string text = 10;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatContent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .slg.protocol.ChatContentType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string text = 10;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatContent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .slg.protocol.ChatContentType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string text = 10;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatContent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatContent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatContent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatContent::MergeFrom(const ChatContent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatContent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatContent::CopyFrom(const ChatContent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatContent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ChatContent::Swap(ChatContent* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatContent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatContent_descriptor_;
  metadata.reflection = ChatContent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatPlayer::kPlayerIdFieldNumber;
const int ChatPlayer::kNameFieldNumber;
const int ChatPlayer::kIconFieldNumber;
const int ChatPlayer::kAllianceShortNameFieldNumber;
const int ChatPlayer::kVipFieldNumber;
const int ChatPlayer::kValidFieldNumber;
#endif  // !_MSC_VER

ChatPlayer::ChatPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatPlayer::InitAsDefaultInstance() {
  vip_ = const_cast< ::slg::protocol::VipDTO*>(&::slg::protocol::VipDTO::default_instance());
}

ChatPlayer::ChatPlayer(const ChatPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatPlayer::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  allianceshortname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vip_ = NULL;
  valid_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatPlayer::~ChatPlayer() {
  SharedDtor();
}

void ChatPlayer::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (allianceshortname_ != &::google::protobuf::internal::kEmptyString) {
    delete allianceshortname_;
  }
  if (this != default_instance_) {
    delete vip_;
  }
}

void ChatPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatPlayer_descriptor_;
}

const ChatPlayer& ChatPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

ChatPlayer* ChatPlayer::default_instance_ = NULL;

ChatPlayer* ChatPlayer::New() const {
  return new ChatPlayer;
}

void ChatPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    if (has_allianceshortname()) {
      if (allianceshortname_ != &::google::protobuf::internal::kEmptyString) {
        allianceshortname_->clear();
      }
    }
    if (has_vip()) {
      if (vip_ != NULL) vip_->::slg::protocol::VipDTO::Clear();
    }
    valid_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_icon;
        break;
      }

      // optional string icon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_allianceShortName;
        break;
      }

      // optional string allianceShortName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allianceShortName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_allianceshortname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->allianceshortname().data(), this->allianceshortname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_vip;
        break;
      }

      // optional .slg.protocol.VipDTO vip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_valid;
        break;
      }

      // optional bool valid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
          set_has_valid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string icon = 3;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->icon(), output);
  }

  // optional string allianceShortName = 4;
  if (has_allianceshortname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->allianceshortname().data(), this->allianceshortname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->allianceshortname(), output);
  }

  // optional .slg.protocol.VipDTO vip = 5;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->vip(), output);
  }

  // optional bool valid = 6;
  if (has_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->valid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string icon = 3;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->icon(), target);
  }

  // optional string allianceShortName = 4;
  if (has_allianceshortname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->allianceshortname().data(), this->allianceshortname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->allianceshortname(), target);
  }

  // optional .slg.protocol.VipDTO vip = 5;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->vip(), target);
  }

  // optional bool valid = 6;
  if (has_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->valid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string icon = 3;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // optional string allianceShortName = 4;
    if (has_allianceshortname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->allianceshortname());
    }

    // optional .slg.protocol.VipDTO vip = 5;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vip());
    }

    // optional bool valid = 6;
    if (has_valid()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatPlayer::MergeFrom(const ChatPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_allianceshortname()) {
      set_allianceshortname(from.allianceshortname());
    }
    if (from.has_vip()) {
      mutable_vip()->::slg::protocol::VipDTO::MergeFrom(from.vip());
    }
    if (from.has_valid()) {
      set_valid(from.valid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatPlayer::CopyFrom(const ChatPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_vip()) {
    if (!this->vip().IsInitialized()) return false;
  }
  return true;
}

void ChatPlayer::Swap(ChatPlayer* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(name_, other->name_);
    std::swap(icon_, other->icon_);
    std::swap(allianceshortname_, other->allianceshortname_);
    std::swap(vip_, other->vip_);
    std::swap(valid_, other->valid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatPlayer_descriptor_;
  metadata.reflection = ChatPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatMessage::kMessageIdFieldNumber;
const int ChatMessage::kContentFieldNumber;
const int ChatMessage::kTimestampFieldNumber;
const int ChatMessage::kSenderIdFieldNumber;
const int ChatMessage::kSenderFieldNumber;
#endif  // !_MSC_VER

ChatMessage::ChatMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatMessage::InitAsDefaultInstance() {
  content_ = const_cast< ::slg::protocol::ChatContent*>(&::slg::protocol::ChatContent::default_instance());
  sender_ = const_cast< ::slg::protocol::ChatPlayer*>(&::slg::protocol::ChatPlayer::default_instance());
}

ChatMessage::ChatMessage(const ChatMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatMessage::SharedCtor() {
  _cached_size_ = 0;
  messageid_ = GOOGLE_LONGLONG(0);
  content_ = NULL;
  timestamp_ = 0;
  senderid_ = GOOGLE_LONGLONG(0);
  sender_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatMessage::~ChatMessage() {
  SharedDtor();
}

void ChatMessage::SharedDtor() {
  if (this != default_instance_) {
    delete content_;
    delete sender_;
  }
}

void ChatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatMessage_descriptor_;
}

const ChatMessage& ChatMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

ChatMessage* ChatMessage::default_instance_ = NULL;

ChatMessage* ChatMessage::New() const {
  return new ChatMessage;
}

void ChatMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    messageid_ = GOOGLE_LONGLONG(0);
    if (has_content()) {
      if (content_ != NULL) content_->::slg::protocol::ChatContent::Clear();
    }
    timestamp_ = 0;
    senderid_ = GOOGLE_LONGLONG(0);
    if (has_sender()) {
      if (sender_ != NULL) sender_->::slg::protocol::ChatPlayer::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 messageId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &messageid_)));
          set_has_messageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // required .slg.protocol.ChatContent content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }

      // required int32 timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_senderId;
        break;
      }

      // required int64 senderId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_senderId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &senderid_)));
          set_has_senderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_sender;
        break;
      }

      // optional .slg.protocol.ChatPlayer sender = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sender()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 messageId = 1;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->messageid(), output);
  }

  // required .slg.protocol.ChatContent content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->content(), output);
  }

  // required int32 timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->timestamp(), output);
  }

  // required int64 senderId = 10;
  if (has_senderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->senderid(), output);
  }

  // optional .slg.protocol.ChatPlayer sender = 11;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->sender(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 messageId = 1;
  if (has_messageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->messageid(), target);
  }

  // required .slg.protocol.ChatContent content = 2;
  if (has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->content(), target);
  }

  // required int32 timestamp = 3;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->timestamp(), target);
  }

  // required int64 senderId = 10;
  if (has_senderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->senderid(), target);
  }

  // optional .slg.protocol.ChatPlayer sender = 11;
  if (has_sender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->sender(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 messageId = 1;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->messageid());
    }

    // required .slg.protocol.ChatContent content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->content());
    }

    // required int32 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }

    // required int64 senderId = 10;
    if (has_senderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->senderid());
    }

    // optional .slg.protocol.ChatPlayer sender = 11;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sender());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatMessage::MergeFrom(const ChatMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_content()) {
      mutable_content()->::slg::protocol::ChatContent::MergeFrom(from.content());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_senderid()) {
      set_senderid(from.senderid());
    }
    if (from.has_sender()) {
      mutable_sender()->::slg::protocol::ChatPlayer::MergeFrom(from.sender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMessage::CopyFrom(const ChatMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_content()) {
    if (!this->content().IsInitialized()) return false;
  }
  if (has_sender()) {
    if (!this->sender().IsInitialized()) return false;
  }
  return true;
}

void ChatMessage::Swap(ChatMessage* other) {
  if (other != this) {
    std::swap(messageid_, other->messageid_);
    std::swap(content_, other->content_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(senderid_, other->senderid_);
    std::swap(sender_, other->sender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatMessage_descriptor_;
  metadata.reflection = ChatMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatGroupCreateRequest::kPlayerIdsFieldNumber;
#endif  // !_MSC_VER

ChatGroupCreateRequest::ChatGroupCreateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatGroupCreateRequest::InitAsDefaultInstance() {
}

ChatGroupCreateRequest::ChatGroupCreateRequest(const ChatGroupCreateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatGroupCreateRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatGroupCreateRequest::~ChatGroupCreateRequest() {
  SharedDtor();
}

void ChatGroupCreateRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChatGroupCreateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatGroupCreateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatGroupCreateRequest_descriptor_;
}

const ChatGroupCreateRequest& ChatGroupCreateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

ChatGroupCreateRequest* ChatGroupCreateRequest::default_instance_ = NULL;

ChatGroupCreateRequest* ChatGroupCreateRequest::New() const {
  return new ChatGroupCreateRequest;
}

void ChatGroupCreateRequest::Clear() {
  playerids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatGroupCreateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 playerIds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_playerids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_playerids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_playerIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatGroupCreateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 playerIds = 1;
  for (int i = 0; i < this->playerids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->playerids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatGroupCreateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 playerIds = 1;
  for (int i = 0; i < this->playerids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->playerids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatGroupCreateRequest::ByteSize() const {
  int total_size = 0;

  // repeated int64 playerIds = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->playerids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->playerids(i));
    }
    total_size += 1 * this->playerids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatGroupCreateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatGroupCreateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatGroupCreateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatGroupCreateRequest::MergeFrom(const ChatGroupCreateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerids_.MergeFrom(from.playerids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatGroupCreateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatGroupCreateRequest::CopyFrom(const ChatGroupCreateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatGroupCreateRequest::IsInitialized() const {

  return true;
}

void ChatGroupCreateRequest::Swap(ChatGroupCreateRequest* other) {
  if (other != this) {
    playerids_.Swap(&other->playerids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatGroupCreateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatGroupCreateRequest_descriptor_;
  metadata.reflection = ChatGroupCreateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatGroupCreateResponse::kGroupIdFieldNumber;
#endif  // !_MSC_VER

ChatGroupCreateResponse::ChatGroupCreateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatGroupCreateResponse::InitAsDefaultInstance() {
}

ChatGroupCreateResponse::ChatGroupCreateResponse(const ChatGroupCreateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatGroupCreateResponse::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatGroupCreateResponse::~ChatGroupCreateResponse() {
  SharedDtor();
}

void ChatGroupCreateResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChatGroupCreateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatGroupCreateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatGroupCreateResponse_descriptor_;
}

const ChatGroupCreateResponse& ChatGroupCreateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

ChatGroupCreateResponse* ChatGroupCreateResponse::default_instance_ = NULL;

ChatGroupCreateResponse* ChatGroupCreateResponse::New() const {
  return new ChatGroupCreateResponse;
}

void ChatGroupCreateResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatGroupCreateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 groupId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatGroupCreateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 groupId = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatGroupCreateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 groupId = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatGroupCreateResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 groupId = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatGroupCreateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatGroupCreateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatGroupCreateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatGroupCreateResponse::MergeFrom(const ChatGroupCreateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatGroupCreateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatGroupCreateResponse::CopyFrom(const ChatGroupCreateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatGroupCreateResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ChatGroupCreateResponse::Swap(ChatGroupCreateResponse* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatGroupCreateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatGroupCreateResponse_descriptor_;
  metadata.reflection = ChatGroupCreateResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatGroupLeaveRequest::kGroupIdFieldNumber;
#endif  // !_MSC_VER

ChatGroupLeaveRequest::ChatGroupLeaveRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatGroupLeaveRequest::InitAsDefaultInstance() {
}

ChatGroupLeaveRequest::ChatGroupLeaveRequest(const ChatGroupLeaveRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatGroupLeaveRequest::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatGroupLeaveRequest::~ChatGroupLeaveRequest() {
  SharedDtor();
}

void ChatGroupLeaveRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChatGroupLeaveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatGroupLeaveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatGroupLeaveRequest_descriptor_;
}

const ChatGroupLeaveRequest& ChatGroupLeaveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

ChatGroupLeaveRequest* ChatGroupLeaveRequest::default_instance_ = NULL;

ChatGroupLeaveRequest* ChatGroupLeaveRequest::New() const {
  return new ChatGroupLeaveRequest;
}

void ChatGroupLeaveRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatGroupLeaveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 groupId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatGroupLeaveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 groupId = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatGroupLeaveRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 groupId = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatGroupLeaveRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 groupId = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatGroupLeaveRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatGroupLeaveRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatGroupLeaveRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatGroupLeaveRequest::MergeFrom(const ChatGroupLeaveRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatGroupLeaveRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatGroupLeaveRequest::CopyFrom(const ChatGroupLeaveRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatGroupLeaveRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ChatGroupLeaveRequest::Swap(ChatGroupLeaveRequest* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatGroupLeaveRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatGroupLeaveRequest_descriptor_;
  metadata.reflection = ChatGroupLeaveRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatSendRequest::kChannelFieldNumber;
const int ChatSendRequest::kContentFieldNumber;
const int ChatSendRequest::kTargetIdFieldNumber;
#endif  // !_MSC_VER

ChatSendRequest::ChatSendRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatSendRequest::InitAsDefaultInstance() {
  content_ = const_cast< ::slg::protocol::ChatContent*>(&::slg::protocol::ChatContent::default_instance());
}

ChatSendRequest::ChatSendRequest(const ChatSendRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatSendRequest::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 1;
  content_ = NULL;
  targetid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatSendRequest::~ChatSendRequest() {
  SharedDtor();
}

void ChatSendRequest::SharedDtor() {
  if (this != default_instance_) {
    delete content_;
  }
}

void ChatSendRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatSendRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatSendRequest_descriptor_;
}

const ChatSendRequest& ChatSendRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

ChatSendRequest* ChatSendRequest::default_instance_ = NULL;

ChatSendRequest* ChatSendRequest::New() const {
  return new ChatSendRequest;
}

void ChatSendRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_ = 1;
    if (has_content()) {
      if (content_ != NULL) content_->::slg::protocol::ChatContent::Clear();
    }
    targetid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatSendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .slg.protocol.ChatChannel channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::slg::protocol::ChatChannel_IsValid(value)) {
            set_channel(static_cast< ::slg::protocol::ChatChannel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // required .slg.protocol.ChatContent content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_targetId;
        break;
      }

      // optional int64 targetId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatSendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .slg.protocol.ChatChannel channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->channel(), output);
  }

  // required .slg.protocol.ChatContent content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->content(), output);
  }

  // optional int64 targetId = 3;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->targetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatSendRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .slg.protocol.ChatChannel channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->channel(), target);
  }

  // required .slg.protocol.ChatContent content = 2;
  if (has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->content(), target);
  }

  // optional int64 targetId = 3;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->targetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatSendRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .slg.protocol.ChatChannel channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel());
    }

    // required .slg.protocol.ChatContent content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->content());
    }

    // optional int64 targetId = 3;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->targetid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatSendRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatSendRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatSendRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatSendRequest::MergeFrom(const ChatSendRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_content()) {
      mutable_content()->::slg::protocol::ChatContent::MergeFrom(from.content());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatSendRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatSendRequest::CopyFrom(const ChatSendRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatSendRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_content()) {
    if (!this->content().IsInitialized()) return false;
  }
  return true;
}

void ChatSendRequest::Swap(ChatSendRequest* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(content_, other->content_);
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatSendRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatSendRequest_descriptor_;
  metadata.reflection = ChatSendRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatSendResponse::kMessageIdFieldNumber;
#endif  // !_MSC_VER

ChatSendResponse::ChatSendResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatSendResponse::InitAsDefaultInstance() {
}

ChatSendResponse::ChatSendResponse(const ChatSendResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatSendResponse::SharedCtor() {
  _cached_size_ = 0;
  messageid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatSendResponse::~ChatSendResponse() {
  SharedDtor();
}

void ChatSendResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChatSendResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatSendResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatSendResponse_descriptor_;
}

const ChatSendResponse& ChatSendResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

ChatSendResponse* ChatSendResponse::default_instance_ = NULL;

ChatSendResponse* ChatSendResponse::New() const {
  return new ChatSendResponse;
}

void ChatSendResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    messageid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatSendResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 messageId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &messageid_)));
          set_has_messageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatSendResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 messageId = 1;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->messageid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatSendResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 messageId = 1;
  if (has_messageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->messageid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatSendResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 messageId = 1;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->messageid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatSendResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatSendResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatSendResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatSendResponse::MergeFrom(const ChatSendResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatSendResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatSendResponse::CopyFrom(const ChatSendResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatSendResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ChatSendResponse::Swap(ChatSendResponse* other) {
  if (other != this) {
    std::swap(messageid_, other->messageid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatSendResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatSendResponse_descriptor_;
  metadata.reflection = ChatSendResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatGroupSnapshot::kGroupIdFieldNumber;
const int ChatGroupSnapshot::kMessageIdFieldNumber;
#endif  // !_MSC_VER

ChatGroupSnapshot::ChatGroupSnapshot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatGroupSnapshot::InitAsDefaultInstance() {
}

ChatGroupSnapshot::ChatGroupSnapshot(const ChatGroupSnapshot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatGroupSnapshot::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_LONGLONG(0);
  messageid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatGroupSnapshot::~ChatGroupSnapshot() {
  SharedDtor();
}

void ChatGroupSnapshot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChatGroupSnapshot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatGroupSnapshot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatGroupSnapshot_descriptor_;
}

const ChatGroupSnapshot& ChatGroupSnapshot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

ChatGroupSnapshot* ChatGroupSnapshot::default_instance_ = NULL;

ChatGroupSnapshot* ChatGroupSnapshot::New() const {
  return new ChatGroupSnapshot;
}

void ChatGroupSnapshot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_LONGLONG(0);
    messageid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatGroupSnapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 groupId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_messageId;
        break;
      }

      // required int64 messageId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_messageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &messageid_)));
          set_has_messageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatGroupSnapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 groupId = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->groupid(), output);
  }

  // required int64 messageId = 2;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->messageid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatGroupSnapshot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 groupId = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->groupid(), target);
  }

  // required int64 messageId = 2;
  if (has_messageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->messageid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatGroupSnapshot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 groupId = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->groupid());
    }

    // required int64 messageId = 2;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->messageid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatGroupSnapshot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatGroupSnapshot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatGroupSnapshot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatGroupSnapshot::MergeFrom(const ChatGroupSnapshot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatGroupSnapshot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatGroupSnapshot::CopyFrom(const ChatGroupSnapshot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatGroupSnapshot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ChatGroupSnapshot::Swap(ChatGroupSnapshot* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(messageid_, other->messageid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatGroupSnapshot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatGroupSnapshot_descriptor_;
  metadata.reflection = ChatGroupSnapshot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatPullRequest::kSnapshotsFieldNumber;
#endif  // !_MSC_VER

ChatPullRequest::ChatPullRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatPullRequest::InitAsDefaultInstance() {
}

ChatPullRequest::ChatPullRequest(const ChatPullRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatPullRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatPullRequest::~ChatPullRequest() {
  SharedDtor();
}

void ChatPullRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChatPullRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatPullRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatPullRequest_descriptor_;
}

const ChatPullRequest& ChatPullRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

ChatPullRequest* ChatPullRequest::default_instance_ = NULL;

ChatPullRequest* ChatPullRequest::New() const {
  return new ChatPullRequest;
}

void ChatPullRequest::Clear() {
  snapshots_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatPullRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.ChatGroupSnapshot snapshots = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_snapshots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_snapshots()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_snapshots;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatPullRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.ChatGroupSnapshot snapshots = 1;
  for (int i = 0; i < this->snapshots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->snapshots(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatPullRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.ChatGroupSnapshot snapshots = 1;
  for (int i = 0; i < this->snapshots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->snapshots(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatPullRequest::ByteSize() const {
  int total_size = 0;

  // repeated .slg.protocol.ChatGroupSnapshot snapshots = 1;
  total_size += 1 * this->snapshots_size();
  for (int i = 0; i < this->snapshots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->snapshots(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatPullRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatPullRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatPullRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatPullRequest::MergeFrom(const ChatPullRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  snapshots_.MergeFrom(from.snapshots_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatPullRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatPullRequest::CopyFrom(const ChatPullRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatPullRequest::IsInitialized() const {

  for (int i = 0; i < snapshots_size(); i++) {
    if (!this->snapshots(i).IsInitialized()) return false;
  }
  return true;
}

void ChatPullRequest::Swap(ChatPullRequest* other) {
  if (other != this) {
    snapshots_.Swap(&other->snapshots_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatPullRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatPullRequest_descriptor_;
  metadata.reflection = ChatPullRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatMessagePush::kChannelFieldNumber;
const int ChatMessagePush::kMessagesFieldNumber;
const int ChatMessagePush::kGroupIdFieldNumber;
#endif  // !_MSC_VER

ChatMessagePush::ChatMessagePush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatMessagePush::InitAsDefaultInstance() {
}

ChatMessagePush::ChatMessagePush(const ChatMessagePush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatMessagePush::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 1;
  groupid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatMessagePush::~ChatMessagePush() {
  SharedDtor();
}

void ChatMessagePush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChatMessagePush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatMessagePush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatMessagePush_descriptor_;
}

const ChatMessagePush& ChatMessagePush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

ChatMessagePush* ChatMessagePush::default_instance_ = NULL;

ChatMessagePush* ChatMessagePush::New() const {
  return new ChatMessagePush;
}

void ChatMessagePush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_ = 1;
    groupid_ = GOOGLE_LONGLONG(0);
  }
  messages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatMessagePush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .slg.protocol.ChatChannel channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::slg::protocol::ChatChannel_IsValid(value)) {
            set_channel(static_cast< ::slg::protocol::ChatChannel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_messages;
        break;
      }

      // repeated .slg.protocol.ChatMessage messages = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_messages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_messages;
        if (input->ExpectTag(24)) goto parse_groupId;
        break;
      }

      // optional int64 groupId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatMessagePush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .slg.protocol.ChatChannel channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->channel(), output);
  }

  // repeated .slg.protocol.ChatMessage messages = 2;
  for (int i = 0; i < this->messages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->messages(i), output);
  }

  // optional int64 groupId = 3;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatMessagePush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .slg.protocol.ChatChannel channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->channel(), target);
  }

  // repeated .slg.protocol.ChatMessage messages = 2;
  for (int i = 0; i < this->messages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->messages(i), target);
  }

  // optional int64 groupId = 3;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatMessagePush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .slg.protocol.ChatChannel channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel());
    }

    // optional int64 groupId = 3;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->groupid());
    }

  }
  // repeated .slg.protocol.ChatMessage messages = 2;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messages(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatMessagePush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatMessagePush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatMessagePush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatMessagePush::MergeFrom(const ChatMessagePush& from) {
  GOOGLE_CHECK_NE(&from, this);
  messages_.MergeFrom(from.messages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatMessagePush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMessagePush::CopyFrom(const ChatMessagePush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessagePush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < messages_size(); i++) {
    if (!this->messages(i).IsInitialized()) return false;
  }
  return true;
}

void ChatMessagePush::Swap(ChatMessagePush* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    messages_.Swap(&other->messages_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatMessagePush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatMessagePush_descriptor_;
  metadata.reflection = ChatMessagePush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatGroup::kGroupIdFieldNumber;
const int ChatGroup::kOwnerIdFieldNumber;
const int ChatGroup::kMembersFieldNumber;
const int ChatGroup::kP2PFieldNumber;
#endif  // !_MSC_VER

ChatGroup::ChatGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatGroup::InitAsDefaultInstance() {
}

ChatGroup::ChatGroup(const ChatGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatGroup::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_LONGLONG(0);
  ownerid_ = GOOGLE_LONGLONG(0);
  p2p_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatGroup::~ChatGroup() {
  SharedDtor();
}

void ChatGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChatGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatGroup_descriptor_;
}

const ChatGroup& ChatGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

ChatGroup* ChatGroup::default_instance_ = NULL;

ChatGroup* ChatGroup::New() const {
  return new ChatGroup;
}

void ChatGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_LONGLONG(0);
    ownerid_ = GOOGLE_LONGLONG(0);
    p2p_ = false;
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 groupId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ownerId;
        break;
      }

      // optional int64 ownerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ownerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_members;
        break;
      }

      // repeated .slg.protocol.ChatPlayer members = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_members;
        if (input->ExpectTag(32)) goto parse_p2p;
        break;
      }

      // required bool p2p = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_p2p:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &p2p_)));
          set_has_p2p();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 groupId = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->groupid(), output);
  }

  // optional int64 ownerId = 2;
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ownerid(), output);
  }

  // repeated .slg.protocol.ChatPlayer members = 3;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->members(i), output);
  }

  // required bool p2p = 4;
  if (has_p2p()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->p2p(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 groupId = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->groupid(), target);
  }

  // optional int64 ownerId = 2;
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ownerid(), target);
  }

  // repeated .slg.protocol.ChatPlayer members = 3;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->members(i), target);
  }

  // required bool p2p = 4;
  if (has_p2p()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->p2p(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 groupId = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->groupid());
    }

    // optional int64 ownerId = 2;
    if (has_ownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ownerid());
    }

    // required bool p2p = 4;
    if (has_p2p()) {
      total_size += 1 + 1;
    }

  }
  // repeated .slg.protocol.ChatPlayer members = 3;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatGroup::MergeFrom(const ChatGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
    if (from.has_p2p()) {
      set_p2p(from.p2p());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatGroup::CopyFrom(const ChatGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  for (int i = 0; i < members_size(); i++) {
    if (!this->members(i).IsInitialized()) return false;
  }
  return true;
}

void ChatGroup::Swap(ChatGroup* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(ownerid_, other->ownerid_);
    members_.Swap(&other->members_);
    std::swap(p2p_, other->p2p_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatGroup_descriptor_;
  metadata.reflection = ChatGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatGroupPush::kGroupsFieldNumber;
#endif  // !_MSC_VER

ChatGroupPush::ChatGroupPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatGroupPush::InitAsDefaultInstance() {
}

ChatGroupPush::ChatGroupPush(const ChatGroupPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatGroupPush::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatGroupPush::~ChatGroupPush() {
  SharedDtor();
}

void ChatGroupPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChatGroupPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatGroupPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatGroupPush_descriptor_;
}

const ChatGroupPush& ChatGroupPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

ChatGroupPush* ChatGroupPush::default_instance_ = NULL;

ChatGroupPush* ChatGroupPush::New() const {
  return new ChatGroupPush;
}

void ChatGroupPush::Clear() {
  groups_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatGroupPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.ChatGroup groups = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_groups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_groups;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatGroupPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.ChatGroup groups = 1;
  for (int i = 0; i < this->groups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->groups(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatGroupPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.ChatGroup groups = 1;
  for (int i = 0; i < this->groups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->groups(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatGroupPush::ByteSize() const {
  int total_size = 0;

  // repeated .slg.protocol.ChatGroup groups = 1;
  total_size += 1 * this->groups_size();
  for (int i = 0; i < this->groups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->groups(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatGroupPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatGroupPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatGroupPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatGroupPush::MergeFrom(const ChatGroupPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  groups_.MergeFrom(from.groups_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatGroupPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatGroupPush::CopyFrom(const ChatGroupPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatGroupPush::IsInitialized() const {

  for (int i = 0; i < groups_size(); i++) {
    if (!this->groups(i).IsInitialized()) return false;
  }
  return true;
}

void ChatGroupPush::Swap(ChatGroupPush* other) {
  if (other != this) {
    groups_.Swap(&other->groups_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatGroupPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatGroupPush_descriptor_;
  metadata.reflection = ChatGroupPush_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace slg

// @@protoc_insertion_point(global_scope)
