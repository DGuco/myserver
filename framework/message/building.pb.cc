// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: building.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "building.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace slg {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* BuildingDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildingDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildingQueueDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildingQueueDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildingBuildRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildingBuildRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildingBuildResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildingBuildResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildingUpgradeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildingUpgradeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildingUpgradeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildingUpgradeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildingRemoveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildingRemoveRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildingRemoveResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildingRemoveResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildingSwapRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildingSwapRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildingSwapResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildingSwapResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildingListPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildingListPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildingQueuePush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildingQueuePush_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildingRemovePush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildingRemovePush_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildingCompletePush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildingCompletePush_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnlockedAreaPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnlockedAreaPush_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BuildingState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BuildingQueueType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BuildingCommandId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BuildingPushId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BuildingCompleteType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_building_2eproto() {
  protobuf_AddDesc_building_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "building.proto");
  GOOGLE_CHECK(file != NULL);
  BuildingDTO_descriptor_ = file->message_type(0);
  static const int BuildingDTO_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingDTO, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingDTO, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingDTO, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingDTO, gridid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingDTO, state_),
  };
  BuildingDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildingDTO_descriptor_,
      BuildingDTO::default_instance_,
      BuildingDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildingDTO));
  BuildingQueueDTO_descriptor_ = file->message_type(1);
  static const int BuildingQueueDTO_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingQueueDTO, timertaskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingQueueDTO, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingQueueDTO, endtime_),
  };
  BuildingQueueDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildingQueueDTO_descriptor_,
      BuildingQueueDTO::default_instance_,
      BuildingQueueDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingQueueDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingQueueDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildingQueueDTO));
  BuildingBuildRequest_descriptor_ = file->message_type(2);
  static const int BuildingBuildRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingBuildRequest, buildingtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingBuildRequest, gridid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingBuildRequest, oper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingBuildRequest, quick_),
  };
  BuildingBuildRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildingBuildRequest_descriptor_,
      BuildingBuildRequest::default_instance_,
      BuildingBuildRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingBuildRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingBuildRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildingBuildRequest));
  BuildingBuildResponse_descriptor_ = file->message_type(3);
  static const int BuildingBuildResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingBuildResponse, buildingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingBuildResponse, quick_),
  };
  BuildingBuildResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildingBuildResponse_descriptor_,
      BuildingBuildResponse::default_instance_,
      BuildingBuildResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingBuildResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingBuildResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildingBuildResponse));
  BuildingUpgradeRequest_descriptor_ = file->message_type(4);
  static const int BuildingUpgradeRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpgradeRequest, buildingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpgradeRequest, oper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpgradeRequest, quick_),
  };
  BuildingUpgradeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildingUpgradeRequest_descriptor_,
      BuildingUpgradeRequest::default_instance_,
      BuildingUpgradeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpgradeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpgradeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildingUpgradeRequest));
  BuildingUpgradeResponse_descriptor_ = file->message_type(5);
  static const int BuildingUpgradeResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpgradeResponse, buildingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpgradeResponse, quick_),
  };
  BuildingUpgradeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildingUpgradeResponse_descriptor_,
      BuildingUpgradeResponse::default_instance_,
      BuildingUpgradeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpgradeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpgradeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildingUpgradeResponse));
  BuildingRemoveRequest_descriptor_ = file->message_type(6);
  static const int BuildingRemoveRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingRemoveRequest, buildingid_),
  };
  BuildingRemoveRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildingRemoveRequest_descriptor_,
      BuildingRemoveRequest::default_instance_,
      BuildingRemoveRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingRemoveRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingRemoveRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildingRemoveRequest));
  BuildingRemoveResponse_descriptor_ = file->message_type(7);
  static const int BuildingRemoveResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingRemoveResponse, buildingid_),
  };
  BuildingRemoveResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildingRemoveResponse_descriptor_,
      BuildingRemoveResponse::default_instance_,
      BuildingRemoveResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingRemoveResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingRemoveResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildingRemoveResponse));
  BuildingSwapRequest_descriptor_ = file->message_type(8);
  static const int BuildingSwapRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingSwapRequest, buildingidfrom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingSwapRequest, buildingidto_),
  };
  BuildingSwapRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildingSwapRequest_descriptor_,
      BuildingSwapRequest::default_instance_,
      BuildingSwapRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingSwapRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingSwapRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildingSwapRequest));
  BuildingSwapResponse_descriptor_ = file->message_type(9);
  static const int BuildingSwapResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingSwapResponse, buildingidfrom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingSwapResponse, buildingidto_),
  };
  BuildingSwapResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildingSwapResponse_descriptor_,
      BuildingSwapResponse::default_instance_,
      BuildingSwapResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingSwapResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingSwapResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildingSwapResponse));
  BuildingListPush_descriptor_ = file->message_type(10);
  static const int BuildingListPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingListPush, buildings_),
  };
  BuildingListPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildingListPush_descriptor_,
      BuildingListPush::default_instance_,
      BuildingListPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingListPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingListPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildingListPush));
  BuildingQueuePush_descriptor_ = file->message_type(11);
  static const int BuildingQueuePush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingQueuePush, buildingqueues_),
  };
  BuildingQueuePush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildingQueuePush_descriptor_,
      BuildingQueuePush::default_instance_,
      BuildingQueuePush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingQueuePush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingQueuePush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildingQueuePush));
  BuildingRemovePush_descriptor_ = file->message_type(12);
  static const int BuildingRemovePush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingRemovePush, buildingid_),
  };
  BuildingRemovePush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildingRemovePush_descriptor_,
      BuildingRemovePush::default_instance_,
      BuildingRemovePush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingRemovePush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingRemovePush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildingRemovePush));
  BuildingCompletePush_descriptor_ = file->message_type(13);
  static const int BuildingCompletePush_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingCompletePush, building_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingCompletePush, type_),
  };
  BuildingCompletePush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildingCompletePush_descriptor_,
      BuildingCompletePush::default_instance_,
      BuildingCompletePush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingCompletePush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingCompletePush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildingCompletePush));
  UnlockedAreaPush_descriptor_ = file->message_type(14);
  static const int UnlockedAreaPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockedAreaPush, areaid_),
  };
  UnlockedAreaPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnlockedAreaPush_descriptor_,
      UnlockedAreaPush::default_instance_,
      UnlockedAreaPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockedAreaPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockedAreaPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnlockedAreaPush));
  BuildingState_descriptor_ = file->enum_type(0);
  BuildingQueueType_descriptor_ = file->enum_type(1);
  BuildingCommandId_descriptor_ = file->enum_type(2);
  BuildingPushId_descriptor_ = file->enum_type(3);
  BuildingCompleteType_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_building_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildingDTO_descriptor_, &BuildingDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildingQueueDTO_descriptor_, &BuildingQueueDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildingBuildRequest_descriptor_, &BuildingBuildRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildingBuildResponse_descriptor_, &BuildingBuildResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildingUpgradeRequest_descriptor_, &BuildingUpgradeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildingUpgradeResponse_descriptor_, &BuildingUpgradeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildingRemoveRequest_descriptor_, &BuildingRemoveRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildingRemoveResponse_descriptor_, &BuildingRemoveResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildingSwapRequest_descriptor_, &BuildingSwapRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildingSwapResponse_descriptor_, &BuildingSwapResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildingListPush_descriptor_, &BuildingListPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildingQueuePush_descriptor_, &BuildingQueuePush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildingRemovePush_descriptor_, &BuildingRemovePush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildingCompletePush_descriptor_, &BuildingCompletePush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnlockedAreaPush_descriptor_, &UnlockedAreaPush::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_building_2eproto() {
  delete BuildingDTO::default_instance_;
  delete BuildingDTO_reflection_;
  delete BuildingQueueDTO::default_instance_;
  delete BuildingQueueDTO_reflection_;
  delete BuildingBuildRequest::default_instance_;
  delete BuildingBuildRequest_reflection_;
  delete BuildingBuildResponse::default_instance_;
  delete BuildingBuildResponse_reflection_;
  delete BuildingUpgradeRequest::default_instance_;
  delete BuildingUpgradeRequest_reflection_;
  delete BuildingUpgradeResponse::default_instance_;
  delete BuildingUpgradeResponse_reflection_;
  delete BuildingRemoveRequest::default_instance_;
  delete BuildingRemoveRequest_reflection_;
  delete BuildingRemoveResponse::default_instance_;
  delete BuildingRemoveResponse_reflection_;
  delete BuildingSwapRequest::default_instance_;
  delete BuildingSwapRequest_reflection_;
  delete BuildingSwapResponse::default_instance_;
  delete BuildingSwapResponse_reflection_;
  delete BuildingListPush::default_instance_;
  delete BuildingListPush_reflection_;
  delete BuildingQueuePush::default_instance_;
  delete BuildingQueuePush_reflection_;
  delete BuildingRemovePush::default_instance_;
  delete BuildingRemovePush_reflection_;
  delete BuildingCompletePush::default_instance_;
  delete BuildingCompletePush_reflection_;
  delete UnlockedAreaPush::default_instance_;
  delete UnlockedAreaPush_reflection_;
}

void protobuf_AddDesc_building_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016building.proto\022\014slg.protocol\"r\n\013Buildi"
    "ngDTO\022\n\n\002id\030\001 \002(\005\022\014\n\004type\030\002 \002(\005\022\r\n\005level"
    "\030\003 \002(\005\022\016\n\006gridId\030\004 \002(\005\022*\n\005state\030\005 \002(\0162\033."
    "slg.protocol.BuildingState\"g\n\020BuildingQu"
    "eueDTO\022\023\n\013timerTaskId\030\001 \001(\005\022-\n\004type\030\002 \002("
    "\0162\037.slg.protocol.BuildingQueueType\022\017\n\007en"
    "dTime\030\003 \001(\005\"Y\n\024BuildingBuildRequest\022\024\n\014b"
    "uildingType\030\001 \002(\005\022\016\n\006gridId\030\002 \002(\005\022\014\n\004ope"
    "r\030\003 \002(\010\022\r\n\005quick\030\004 \002(\010\":\n\025BuildingBuildR"
    "esponse\022\022\n\nbuildingId\030\001 \002(\005\022\r\n\005quick\030\002 \002"
    "(\010\"I\n\026BuildingUpgradeRequest\022\022\n\nbuilding"
    "Id\030\001 \002(\005\022\014\n\004oper\030\002 \002(\010\022\r\n\005quick\030\003 \002(\010\"<\n"
    "\027BuildingUpgradeResponse\022\022\n\nbuildingId\030\001"
    " \002(\005\022\r\n\005quick\030\002 \002(\010\"+\n\025BuildingRemoveReq"
    "uest\022\022\n\nbuildingId\030\001 \002(\005\",\n\026BuildingRemo"
    "veResponse\022\022\n\nbuildingId\030\001 \002(\005\"C\n\023Buildi"
    "ngSwapRequest\022\026\n\016buildingIdFrom\030\001 \002(\005\022\024\n"
    "\014buildingIdTo\030\002 \002(\005\"D\n\024BuildingSwapRespo"
    "nse\022\026\n\016buildingIdFrom\030\001 \002(\005\022\024\n\014buildingI"
    "dTo\030\002 \002(\005\"@\n\020BuildingListPush\022,\n\tbuildin"
    "gs\030\001 \003(\0132\031.slg.protocol.BuildingDTO\"K\n\021B"
    "uildingQueuePush\0226\n\016buildingQueues\030\001 \003(\013"
    "2\036.slg.protocol.BuildingQueueDTO\"(\n\022Buil"
    "dingRemovePush\022\022\n\nbuildingId\030\001 \002(\005\"u\n\024Bu"
    "ildingCompletePush\022+\n\010building\030\001 \003(\0132\031.s"
    "lg.protocol.BuildingDTO\0220\n\004type\030\002 \002(\0162\"."
    "slg.protocol.BuildingCompleteType\"\"\n\020Unl"
    "ockedAreaPush\022\016\n\006areaId\030\001 \003(\005*\234\001\n\rBuildi"
    "ngState\022\027\n\023BUILDING_STATE_IDLE\020\000\022\033\n\027BUIL"
    "DING_STATE_BUILDING\020\001\022\034\n\030BUILDING_STATE_"
    "UPGRADING\020\002\022\033\n\027BUILDING_STATE_REMOVING\020\003"
    "\022\032\n\026BUILDING_STATE_WORKING\020\004*P\n\021Building"
    "QueueType\022\036\n\032BUILDING_QUEUE_TYPE_NORMAL\020"
    "\001\022\033\n\027BUILDING_QUEUE_TYPE_VIP\020\002*i\n\021Buildi"
    "ngCommandId\022\023\n\016BUILDING_BUILD\020\311\001\022\025\n\020BUIL"
    "DING_UPGRADE\020\312\001\022\024\n\017BUILDING_REMOVE\020\313\001\022\022\n"
    "\rBUILDING_SWAP\020\314\001*\231\001\n\016BuildingPushId\022\031\n\023"
    "BUILDING_QUEUE_PUSH\020\230\210\003\022\030\n\022BUILDING_LIST"
    "_PUSH\020\231\210\003\022\032\n\024BUILDING_REMOVE_PUSH\020\232\210\003\022\030\n"
    "\022UNLOCKED_AREA_PUSH\020\233\210\003\022\034\n\026BUILDING_COMP"
    "LETE_PUSH\020\234\210\003*n\n\024BuildingCompleteType\022\033\n"
    "\027BUILDING_COMPLETE_BUILD\020\001\022\035\n\031BUILDING_C"
    "OMPLETE_UPGRADE\020\002\022\032\n\026BUILDING_COMPLETE_S"
    "WAP\020\003B-\n\034com.bonusstudio.slg.protocolB\rB"
    "uildingProto", 1772);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "building.proto", &protobuf_RegisterTypes);
  BuildingDTO::default_instance_ = new BuildingDTO();
  BuildingQueueDTO::default_instance_ = new BuildingQueueDTO();
  BuildingBuildRequest::default_instance_ = new BuildingBuildRequest();
  BuildingBuildResponse::default_instance_ = new BuildingBuildResponse();
  BuildingUpgradeRequest::default_instance_ = new BuildingUpgradeRequest();
  BuildingUpgradeResponse::default_instance_ = new BuildingUpgradeResponse();
  BuildingRemoveRequest::default_instance_ = new BuildingRemoveRequest();
  BuildingRemoveResponse::default_instance_ = new BuildingRemoveResponse();
  BuildingSwapRequest::default_instance_ = new BuildingSwapRequest();
  BuildingSwapResponse::default_instance_ = new BuildingSwapResponse();
  BuildingListPush::default_instance_ = new BuildingListPush();
  BuildingQueuePush::default_instance_ = new BuildingQueuePush();
  BuildingRemovePush::default_instance_ = new BuildingRemovePush();
  BuildingCompletePush::default_instance_ = new BuildingCompletePush();
  UnlockedAreaPush::default_instance_ = new UnlockedAreaPush();
  BuildingDTO::default_instance_->InitAsDefaultInstance();
  BuildingQueueDTO::default_instance_->InitAsDefaultInstance();
  BuildingBuildRequest::default_instance_->InitAsDefaultInstance();
  BuildingBuildResponse::default_instance_->InitAsDefaultInstance();
  BuildingUpgradeRequest::default_instance_->InitAsDefaultInstance();
  BuildingUpgradeResponse::default_instance_->InitAsDefaultInstance();
  BuildingRemoveRequest::default_instance_->InitAsDefaultInstance();
  BuildingRemoveResponse::default_instance_->InitAsDefaultInstance();
  BuildingSwapRequest::default_instance_->InitAsDefaultInstance();
  BuildingSwapResponse::default_instance_->InitAsDefaultInstance();
  BuildingListPush::default_instance_->InitAsDefaultInstance();
  BuildingQueuePush::default_instance_->InitAsDefaultInstance();
  BuildingRemovePush::default_instance_->InitAsDefaultInstance();
  BuildingCompletePush::default_instance_->InitAsDefaultInstance();
  UnlockedAreaPush::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_building_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_building_2eproto {
  StaticDescriptorInitializer_building_2eproto() {
    protobuf_AddDesc_building_2eproto();
  }
} static_descriptor_initializer_building_2eproto_;
const ::google::protobuf::EnumDescriptor* BuildingState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingState_descriptor_;
}
bool BuildingState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BuildingQueueType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingQueueType_descriptor_;
}
bool BuildingQueueType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BuildingCommandId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingCommandId_descriptor_;
}
bool BuildingCommandId_IsValid(int value) {
  switch(value) {
    case 201:
    case 202:
    case 203:
    case 204:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BuildingPushId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingPushId_descriptor_;
}
bool BuildingPushId_IsValid(int value) {
  switch(value) {
    case 50200:
    case 50201:
    case 50202:
    case 50203:
    case 50204:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BuildingCompleteType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingCompleteType_descriptor_;
}
bool BuildingCompleteType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int BuildingDTO::kIdFieldNumber;
const int BuildingDTO::kTypeFieldNumber;
const int BuildingDTO::kLevelFieldNumber;
const int BuildingDTO::kGridIdFieldNumber;
const int BuildingDTO::kStateFieldNumber;
#endif  // !_MSC_VER

BuildingDTO::BuildingDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuildingDTO::InitAsDefaultInstance() {
}

BuildingDTO::BuildingDTO(const BuildingDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildingDTO::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  level_ = 0;
  gridid_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildingDTO::~BuildingDTO() {
  SharedDtor();
}

void BuildingDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildingDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildingDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingDTO_descriptor_;
}

const BuildingDTO& BuildingDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_building_2eproto();
  return *default_instance_;
}

BuildingDTO* BuildingDTO::default_instance_ = NULL;

BuildingDTO* BuildingDTO::New() const {
  return new BuildingDTO;
}

void BuildingDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    level_ = 0;
    gridid_ = 0;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildingDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gridId;
        break;
      }

      // required int32 gridId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gridId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gridid_)));
          set_has_gridid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }

      // required .slg.protocol.BuildingState state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::slg::protocol::BuildingState_IsValid(value)) {
            set_state(static_cast< ::slg::protocol::BuildingState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuildingDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // required int32 gridId = 4;
  if (has_gridid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gridid(), output);
  }

  // required .slg.protocol.BuildingState state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuildingDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // required int32 gridId = 4;
  if (has_gridid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gridid(), target);
  }

  // required .slg.protocol.BuildingState state = 5;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildingDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 gridId = 4;
    if (has_gridid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gridid());
    }

    // required .slg.protocol.BuildingState state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildingDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildingDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildingDTO::MergeFrom(const BuildingDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_gridid()) {
      set_gridid(from.gridid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildingDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingDTO::CopyFrom(const BuildingDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void BuildingDTO::Swap(BuildingDTO* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(gridid_, other->gridid_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildingDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildingDTO_descriptor_;
  metadata.reflection = BuildingDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildingQueueDTO::kTimerTaskIdFieldNumber;
const int BuildingQueueDTO::kTypeFieldNumber;
const int BuildingQueueDTO::kEndTimeFieldNumber;
#endif  // !_MSC_VER

BuildingQueueDTO::BuildingQueueDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuildingQueueDTO::InitAsDefaultInstance() {
}

BuildingQueueDTO::BuildingQueueDTO(const BuildingQueueDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildingQueueDTO::SharedCtor() {
  _cached_size_ = 0;
  timertaskid_ = 0;
  type_ = 1;
  endtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildingQueueDTO::~BuildingQueueDTO() {
  SharedDtor();
}

void BuildingQueueDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildingQueueDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildingQueueDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingQueueDTO_descriptor_;
}

const BuildingQueueDTO& BuildingQueueDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_building_2eproto();
  return *default_instance_;
}

BuildingQueueDTO* BuildingQueueDTO::default_instance_ = NULL;

BuildingQueueDTO* BuildingQueueDTO::New() const {
  return new BuildingQueueDTO;
}

void BuildingQueueDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timertaskid_ = 0;
    type_ = 1;
    endtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildingQueueDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 timerTaskId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timertaskid_)));
          set_has_timertaskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .slg.protocol.BuildingQueueType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::slg::protocol::BuildingQueueType_IsValid(value)) {
            set_type(static_cast< ::slg::protocol::BuildingQueueType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_endTime;
        break;
      }

      // optional int32 endTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuildingQueueDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 timerTaskId = 1;
  if (has_timertaskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timertaskid(), output);
  }

  // required .slg.protocol.BuildingQueueType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional int32 endTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuildingQueueDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 timerTaskId = 1;
  if (has_timertaskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->timertaskid(), target);
  }

  // required .slg.protocol.BuildingQueueType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional int32 endTime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildingQueueDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 timerTaskId = 1;
    if (has_timertaskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timertaskid());
    }

    // required .slg.protocol.BuildingQueueType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 endTime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingQueueDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildingQueueDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildingQueueDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildingQueueDTO::MergeFrom(const BuildingQueueDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timertaskid()) {
      set_timertaskid(from.timertaskid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildingQueueDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingQueueDTO::CopyFrom(const BuildingQueueDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingQueueDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void BuildingQueueDTO::Swap(BuildingQueueDTO* other) {
  if (other != this) {
    std::swap(timertaskid_, other->timertaskid_);
    std::swap(type_, other->type_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildingQueueDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildingQueueDTO_descriptor_;
  metadata.reflection = BuildingQueueDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildingBuildRequest::kBuildingTypeFieldNumber;
const int BuildingBuildRequest::kGridIdFieldNumber;
const int BuildingBuildRequest::kOperFieldNumber;
const int BuildingBuildRequest::kQuickFieldNumber;
#endif  // !_MSC_VER

BuildingBuildRequest::BuildingBuildRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuildingBuildRequest::InitAsDefaultInstance() {
}

BuildingBuildRequest::BuildingBuildRequest(const BuildingBuildRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildingBuildRequest::SharedCtor() {
  _cached_size_ = 0;
  buildingtype_ = 0;
  gridid_ = 0;
  oper_ = false;
  quick_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildingBuildRequest::~BuildingBuildRequest() {
  SharedDtor();
}

void BuildingBuildRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildingBuildRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildingBuildRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingBuildRequest_descriptor_;
}

const BuildingBuildRequest& BuildingBuildRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_building_2eproto();
  return *default_instance_;
}

BuildingBuildRequest* BuildingBuildRequest::default_instance_ = NULL;

BuildingBuildRequest* BuildingBuildRequest::New() const {
  return new BuildingBuildRequest;
}

void BuildingBuildRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buildingtype_ = 0;
    gridid_ = 0;
    oper_ = false;
    quick_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildingBuildRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 buildingType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buildingtype_)));
          set_has_buildingtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gridId;
        break;
      }

      // required int32 gridId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gridId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gridid_)));
          set_has_gridid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_oper;
        break;
      }

      // required bool oper = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &oper_)));
          set_has_oper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_quick;
        break;
      }

      // required bool quick = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &quick_)));
          set_has_quick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuildingBuildRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 buildingType = 1;
  if (has_buildingtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buildingtype(), output);
  }

  // required int32 gridId = 2;
  if (has_gridid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gridid(), output);
  }

  // required bool oper = 3;
  if (has_oper()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->oper(), output);
  }

  // required bool quick = 4;
  if (has_quick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->quick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuildingBuildRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 buildingType = 1;
  if (has_buildingtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buildingtype(), target);
  }

  // required int32 gridId = 2;
  if (has_gridid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gridid(), target);
  }

  // required bool oper = 3;
  if (has_oper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->oper(), target);
  }

  // required bool quick = 4;
  if (has_quick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->quick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildingBuildRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 buildingType = 1;
    if (has_buildingtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buildingtype());
    }

    // required int32 gridId = 2;
    if (has_gridid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gridid());
    }

    // required bool oper = 3;
    if (has_oper()) {
      total_size += 1 + 1;
    }

    // required bool quick = 4;
    if (has_quick()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingBuildRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildingBuildRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildingBuildRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildingBuildRequest::MergeFrom(const BuildingBuildRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buildingtype()) {
      set_buildingtype(from.buildingtype());
    }
    if (from.has_gridid()) {
      set_gridid(from.gridid());
    }
    if (from.has_oper()) {
      set_oper(from.oper());
    }
    if (from.has_quick()) {
      set_quick(from.quick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildingBuildRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingBuildRequest::CopyFrom(const BuildingBuildRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingBuildRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void BuildingBuildRequest::Swap(BuildingBuildRequest* other) {
  if (other != this) {
    std::swap(buildingtype_, other->buildingtype_);
    std::swap(gridid_, other->gridid_);
    std::swap(oper_, other->oper_);
    std::swap(quick_, other->quick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildingBuildRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildingBuildRequest_descriptor_;
  metadata.reflection = BuildingBuildRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildingBuildResponse::kBuildingIdFieldNumber;
const int BuildingBuildResponse::kQuickFieldNumber;
#endif  // !_MSC_VER

BuildingBuildResponse::BuildingBuildResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuildingBuildResponse::InitAsDefaultInstance() {
}

BuildingBuildResponse::BuildingBuildResponse(const BuildingBuildResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildingBuildResponse::SharedCtor() {
  _cached_size_ = 0;
  buildingid_ = 0;
  quick_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildingBuildResponse::~BuildingBuildResponse() {
  SharedDtor();
}

void BuildingBuildResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildingBuildResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildingBuildResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingBuildResponse_descriptor_;
}

const BuildingBuildResponse& BuildingBuildResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_building_2eproto();
  return *default_instance_;
}

BuildingBuildResponse* BuildingBuildResponse::default_instance_ = NULL;

BuildingBuildResponse* BuildingBuildResponse::New() const {
  return new BuildingBuildResponse;
}

void BuildingBuildResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buildingid_ = 0;
    quick_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildingBuildResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 buildingId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buildingid_)));
          set_has_buildingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quick;
        break;
      }

      // required bool quick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &quick_)));
          set_has_quick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuildingBuildResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 buildingId = 1;
  if (has_buildingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buildingid(), output);
  }

  // required bool quick = 2;
  if (has_quick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->quick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuildingBuildResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 buildingId = 1;
  if (has_buildingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buildingid(), target);
  }

  // required bool quick = 2;
  if (has_quick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->quick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildingBuildResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 buildingId = 1;
    if (has_buildingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buildingid());
    }

    // required bool quick = 2;
    if (has_quick()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingBuildResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildingBuildResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildingBuildResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildingBuildResponse::MergeFrom(const BuildingBuildResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buildingid()) {
      set_buildingid(from.buildingid());
    }
    if (from.has_quick()) {
      set_quick(from.quick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildingBuildResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingBuildResponse::CopyFrom(const BuildingBuildResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingBuildResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BuildingBuildResponse::Swap(BuildingBuildResponse* other) {
  if (other != this) {
    std::swap(buildingid_, other->buildingid_);
    std::swap(quick_, other->quick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildingBuildResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildingBuildResponse_descriptor_;
  metadata.reflection = BuildingBuildResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildingUpgradeRequest::kBuildingIdFieldNumber;
const int BuildingUpgradeRequest::kOperFieldNumber;
const int BuildingUpgradeRequest::kQuickFieldNumber;
#endif  // !_MSC_VER

BuildingUpgradeRequest::BuildingUpgradeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuildingUpgradeRequest::InitAsDefaultInstance() {
}

BuildingUpgradeRequest::BuildingUpgradeRequest(const BuildingUpgradeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildingUpgradeRequest::SharedCtor() {
  _cached_size_ = 0;
  buildingid_ = 0;
  oper_ = false;
  quick_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildingUpgradeRequest::~BuildingUpgradeRequest() {
  SharedDtor();
}

void BuildingUpgradeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildingUpgradeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildingUpgradeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingUpgradeRequest_descriptor_;
}

const BuildingUpgradeRequest& BuildingUpgradeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_building_2eproto();
  return *default_instance_;
}

BuildingUpgradeRequest* BuildingUpgradeRequest::default_instance_ = NULL;

BuildingUpgradeRequest* BuildingUpgradeRequest::New() const {
  return new BuildingUpgradeRequest;
}

void BuildingUpgradeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buildingid_ = 0;
    oper_ = false;
    quick_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildingUpgradeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 buildingId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buildingid_)));
          set_has_buildingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_oper;
        break;
      }

      // required bool oper = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &oper_)));
          set_has_oper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_quick;
        break;
      }

      // required bool quick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &quick_)));
          set_has_quick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuildingUpgradeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 buildingId = 1;
  if (has_buildingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buildingid(), output);
  }

  // required bool oper = 2;
  if (has_oper()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->oper(), output);
  }

  // required bool quick = 3;
  if (has_quick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->quick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuildingUpgradeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 buildingId = 1;
  if (has_buildingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buildingid(), target);
  }

  // required bool oper = 2;
  if (has_oper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->oper(), target);
  }

  // required bool quick = 3;
  if (has_quick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->quick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildingUpgradeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 buildingId = 1;
    if (has_buildingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buildingid());
    }

    // required bool oper = 2;
    if (has_oper()) {
      total_size += 1 + 1;
    }

    // required bool quick = 3;
    if (has_quick()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingUpgradeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildingUpgradeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildingUpgradeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildingUpgradeRequest::MergeFrom(const BuildingUpgradeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buildingid()) {
      set_buildingid(from.buildingid());
    }
    if (from.has_oper()) {
      set_oper(from.oper());
    }
    if (from.has_quick()) {
      set_quick(from.quick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildingUpgradeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingUpgradeRequest::CopyFrom(const BuildingUpgradeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingUpgradeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void BuildingUpgradeRequest::Swap(BuildingUpgradeRequest* other) {
  if (other != this) {
    std::swap(buildingid_, other->buildingid_);
    std::swap(oper_, other->oper_);
    std::swap(quick_, other->quick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildingUpgradeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildingUpgradeRequest_descriptor_;
  metadata.reflection = BuildingUpgradeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildingUpgradeResponse::kBuildingIdFieldNumber;
const int BuildingUpgradeResponse::kQuickFieldNumber;
#endif  // !_MSC_VER

BuildingUpgradeResponse::BuildingUpgradeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuildingUpgradeResponse::InitAsDefaultInstance() {
}

BuildingUpgradeResponse::BuildingUpgradeResponse(const BuildingUpgradeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildingUpgradeResponse::SharedCtor() {
  _cached_size_ = 0;
  buildingid_ = 0;
  quick_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildingUpgradeResponse::~BuildingUpgradeResponse() {
  SharedDtor();
}

void BuildingUpgradeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildingUpgradeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildingUpgradeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingUpgradeResponse_descriptor_;
}

const BuildingUpgradeResponse& BuildingUpgradeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_building_2eproto();
  return *default_instance_;
}

BuildingUpgradeResponse* BuildingUpgradeResponse::default_instance_ = NULL;

BuildingUpgradeResponse* BuildingUpgradeResponse::New() const {
  return new BuildingUpgradeResponse;
}

void BuildingUpgradeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buildingid_ = 0;
    quick_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildingUpgradeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 buildingId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buildingid_)));
          set_has_buildingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quick;
        break;
      }

      // required bool quick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &quick_)));
          set_has_quick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuildingUpgradeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 buildingId = 1;
  if (has_buildingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buildingid(), output);
  }

  // required bool quick = 2;
  if (has_quick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->quick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuildingUpgradeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 buildingId = 1;
  if (has_buildingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buildingid(), target);
  }

  // required bool quick = 2;
  if (has_quick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->quick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildingUpgradeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 buildingId = 1;
    if (has_buildingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buildingid());
    }

    // required bool quick = 2;
    if (has_quick()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingUpgradeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildingUpgradeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildingUpgradeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildingUpgradeResponse::MergeFrom(const BuildingUpgradeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buildingid()) {
      set_buildingid(from.buildingid());
    }
    if (from.has_quick()) {
      set_quick(from.quick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildingUpgradeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingUpgradeResponse::CopyFrom(const BuildingUpgradeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingUpgradeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BuildingUpgradeResponse::Swap(BuildingUpgradeResponse* other) {
  if (other != this) {
    std::swap(buildingid_, other->buildingid_);
    std::swap(quick_, other->quick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildingUpgradeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildingUpgradeResponse_descriptor_;
  metadata.reflection = BuildingUpgradeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildingRemoveRequest::kBuildingIdFieldNumber;
#endif  // !_MSC_VER

BuildingRemoveRequest::BuildingRemoveRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuildingRemoveRequest::InitAsDefaultInstance() {
}

BuildingRemoveRequest::BuildingRemoveRequest(const BuildingRemoveRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildingRemoveRequest::SharedCtor() {
  _cached_size_ = 0;
  buildingid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildingRemoveRequest::~BuildingRemoveRequest() {
  SharedDtor();
}

void BuildingRemoveRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildingRemoveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildingRemoveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingRemoveRequest_descriptor_;
}

const BuildingRemoveRequest& BuildingRemoveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_building_2eproto();
  return *default_instance_;
}

BuildingRemoveRequest* BuildingRemoveRequest::default_instance_ = NULL;

BuildingRemoveRequest* BuildingRemoveRequest::New() const {
  return new BuildingRemoveRequest;
}

void BuildingRemoveRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buildingid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildingRemoveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 buildingId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buildingid_)));
          set_has_buildingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuildingRemoveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 buildingId = 1;
  if (has_buildingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buildingid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuildingRemoveRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 buildingId = 1;
  if (has_buildingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buildingid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildingRemoveRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 buildingId = 1;
    if (has_buildingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buildingid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingRemoveRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildingRemoveRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildingRemoveRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildingRemoveRequest::MergeFrom(const BuildingRemoveRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buildingid()) {
      set_buildingid(from.buildingid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildingRemoveRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingRemoveRequest::CopyFrom(const BuildingRemoveRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingRemoveRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BuildingRemoveRequest::Swap(BuildingRemoveRequest* other) {
  if (other != this) {
    std::swap(buildingid_, other->buildingid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildingRemoveRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildingRemoveRequest_descriptor_;
  metadata.reflection = BuildingRemoveRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildingRemoveResponse::kBuildingIdFieldNumber;
#endif  // !_MSC_VER

BuildingRemoveResponse::BuildingRemoveResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuildingRemoveResponse::InitAsDefaultInstance() {
}

BuildingRemoveResponse::BuildingRemoveResponse(const BuildingRemoveResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildingRemoveResponse::SharedCtor() {
  _cached_size_ = 0;
  buildingid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildingRemoveResponse::~BuildingRemoveResponse() {
  SharedDtor();
}

void BuildingRemoveResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildingRemoveResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildingRemoveResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingRemoveResponse_descriptor_;
}

const BuildingRemoveResponse& BuildingRemoveResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_building_2eproto();
  return *default_instance_;
}

BuildingRemoveResponse* BuildingRemoveResponse::default_instance_ = NULL;

BuildingRemoveResponse* BuildingRemoveResponse::New() const {
  return new BuildingRemoveResponse;
}

void BuildingRemoveResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buildingid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildingRemoveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 buildingId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buildingid_)));
          set_has_buildingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuildingRemoveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 buildingId = 1;
  if (has_buildingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buildingid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuildingRemoveResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 buildingId = 1;
  if (has_buildingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buildingid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildingRemoveResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 buildingId = 1;
    if (has_buildingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buildingid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingRemoveResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildingRemoveResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildingRemoveResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildingRemoveResponse::MergeFrom(const BuildingRemoveResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buildingid()) {
      set_buildingid(from.buildingid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildingRemoveResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingRemoveResponse::CopyFrom(const BuildingRemoveResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingRemoveResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BuildingRemoveResponse::Swap(BuildingRemoveResponse* other) {
  if (other != this) {
    std::swap(buildingid_, other->buildingid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildingRemoveResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildingRemoveResponse_descriptor_;
  metadata.reflection = BuildingRemoveResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildingSwapRequest::kBuildingIdFromFieldNumber;
const int BuildingSwapRequest::kBuildingIdToFieldNumber;
#endif  // !_MSC_VER

BuildingSwapRequest::BuildingSwapRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuildingSwapRequest::InitAsDefaultInstance() {
}

BuildingSwapRequest::BuildingSwapRequest(const BuildingSwapRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildingSwapRequest::SharedCtor() {
  _cached_size_ = 0;
  buildingidfrom_ = 0;
  buildingidto_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildingSwapRequest::~BuildingSwapRequest() {
  SharedDtor();
}

void BuildingSwapRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildingSwapRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildingSwapRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingSwapRequest_descriptor_;
}

const BuildingSwapRequest& BuildingSwapRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_building_2eproto();
  return *default_instance_;
}

BuildingSwapRequest* BuildingSwapRequest::default_instance_ = NULL;

BuildingSwapRequest* BuildingSwapRequest::New() const {
  return new BuildingSwapRequest;
}

void BuildingSwapRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buildingidfrom_ = 0;
    buildingidto_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildingSwapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 buildingIdFrom = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buildingidfrom_)));
          set_has_buildingidfrom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buildingIdTo;
        break;
      }

      // required int32 buildingIdTo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buildingIdTo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buildingidto_)));
          set_has_buildingidto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuildingSwapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 buildingIdFrom = 1;
  if (has_buildingidfrom()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buildingidfrom(), output);
  }

  // required int32 buildingIdTo = 2;
  if (has_buildingidto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buildingidto(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuildingSwapRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 buildingIdFrom = 1;
  if (has_buildingidfrom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buildingidfrom(), target);
  }

  // required int32 buildingIdTo = 2;
  if (has_buildingidto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buildingidto(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildingSwapRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 buildingIdFrom = 1;
    if (has_buildingidfrom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buildingidfrom());
    }

    // required int32 buildingIdTo = 2;
    if (has_buildingidto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buildingidto());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingSwapRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildingSwapRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildingSwapRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildingSwapRequest::MergeFrom(const BuildingSwapRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buildingidfrom()) {
      set_buildingidfrom(from.buildingidfrom());
    }
    if (from.has_buildingidto()) {
      set_buildingidto(from.buildingidto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildingSwapRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingSwapRequest::CopyFrom(const BuildingSwapRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingSwapRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BuildingSwapRequest::Swap(BuildingSwapRequest* other) {
  if (other != this) {
    std::swap(buildingidfrom_, other->buildingidfrom_);
    std::swap(buildingidto_, other->buildingidto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildingSwapRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildingSwapRequest_descriptor_;
  metadata.reflection = BuildingSwapRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildingSwapResponse::kBuildingIdFromFieldNumber;
const int BuildingSwapResponse::kBuildingIdToFieldNumber;
#endif  // !_MSC_VER

BuildingSwapResponse::BuildingSwapResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuildingSwapResponse::InitAsDefaultInstance() {
}

BuildingSwapResponse::BuildingSwapResponse(const BuildingSwapResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildingSwapResponse::SharedCtor() {
  _cached_size_ = 0;
  buildingidfrom_ = 0;
  buildingidto_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildingSwapResponse::~BuildingSwapResponse() {
  SharedDtor();
}

void BuildingSwapResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildingSwapResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildingSwapResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingSwapResponse_descriptor_;
}

const BuildingSwapResponse& BuildingSwapResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_building_2eproto();
  return *default_instance_;
}

BuildingSwapResponse* BuildingSwapResponse::default_instance_ = NULL;

BuildingSwapResponse* BuildingSwapResponse::New() const {
  return new BuildingSwapResponse;
}

void BuildingSwapResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buildingidfrom_ = 0;
    buildingidto_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildingSwapResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 buildingIdFrom = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buildingidfrom_)));
          set_has_buildingidfrom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buildingIdTo;
        break;
      }

      // required int32 buildingIdTo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buildingIdTo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buildingidto_)));
          set_has_buildingidto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuildingSwapResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 buildingIdFrom = 1;
  if (has_buildingidfrom()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buildingidfrom(), output);
  }

  // required int32 buildingIdTo = 2;
  if (has_buildingidto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buildingidto(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuildingSwapResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 buildingIdFrom = 1;
  if (has_buildingidfrom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buildingidfrom(), target);
  }

  // required int32 buildingIdTo = 2;
  if (has_buildingidto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buildingidto(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildingSwapResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 buildingIdFrom = 1;
    if (has_buildingidfrom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buildingidfrom());
    }

    // required int32 buildingIdTo = 2;
    if (has_buildingidto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buildingidto());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingSwapResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildingSwapResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildingSwapResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildingSwapResponse::MergeFrom(const BuildingSwapResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buildingidfrom()) {
      set_buildingidfrom(from.buildingidfrom());
    }
    if (from.has_buildingidto()) {
      set_buildingidto(from.buildingidto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildingSwapResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingSwapResponse::CopyFrom(const BuildingSwapResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingSwapResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BuildingSwapResponse::Swap(BuildingSwapResponse* other) {
  if (other != this) {
    std::swap(buildingidfrom_, other->buildingidfrom_);
    std::swap(buildingidto_, other->buildingidto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildingSwapResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildingSwapResponse_descriptor_;
  metadata.reflection = BuildingSwapResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildingListPush::kBuildingsFieldNumber;
#endif  // !_MSC_VER

BuildingListPush::BuildingListPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuildingListPush::InitAsDefaultInstance() {
}

BuildingListPush::BuildingListPush(const BuildingListPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildingListPush::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildingListPush::~BuildingListPush() {
  SharedDtor();
}

void BuildingListPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildingListPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildingListPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingListPush_descriptor_;
}

const BuildingListPush& BuildingListPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_building_2eproto();
  return *default_instance_;
}

BuildingListPush* BuildingListPush::default_instance_ = NULL;

BuildingListPush* BuildingListPush::New() const {
  return new BuildingListPush;
}

void BuildingListPush::Clear() {
  buildings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildingListPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.BuildingDTO buildings = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buildings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buildings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_buildings;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuildingListPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.BuildingDTO buildings = 1;
  for (int i = 0; i < this->buildings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->buildings(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuildingListPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.BuildingDTO buildings = 1;
  for (int i = 0; i < this->buildings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->buildings(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildingListPush::ByteSize() const {
  int total_size = 0;

  // repeated .slg.protocol.BuildingDTO buildings = 1;
  total_size += 1 * this->buildings_size();
  for (int i = 0; i < this->buildings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buildings(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingListPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildingListPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildingListPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildingListPush::MergeFrom(const BuildingListPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  buildings_.MergeFrom(from.buildings_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildingListPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingListPush::CopyFrom(const BuildingListPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingListPush::IsInitialized() const {

  for (int i = 0; i < buildings_size(); i++) {
    if (!this->buildings(i).IsInitialized()) return false;
  }
  return true;
}

void BuildingListPush::Swap(BuildingListPush* other) {
  if (other != this) {
    buildings_.Swap(&other->buildings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildingListPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildingListPush_descriptor_;
  metadata.reflection = BuildingListPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildingQueuePush::kBuildingQueuesFieldNumber;
#endif  // !_MSC_VER

BuildingQueuePush::BuildingQueuePush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuildingQueuePush::InitAsDefaultInstance() {
}

BuildingQueuePush::BuildingQueuePush(const BuildingQueuePush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildingQueuePush::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildingQueuePush::~BuildingQueuePush() {
  SharedDtor();
}

void BuildingQueuePush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildingQueuePush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildingQueuePush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingQueuePush_descriptor_;
}

const BuildingQueuePush& BuildingQueuePush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_building_2eproto();
  return *default_instance_;
}

BuildingQueuePush* BuildingQueuePush::default_instance_ = NULL;

BuildingQueuePush* BuildingQueuePush::New() const {
  return new BuildingQueuePush;
}

void BuildingQueuePush::Clear() {
  buildingqueues_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildingQueuePush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.BuildingQueueDTO buildingQueues = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buildingQueues:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buildingqueues()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_buildingQueues;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuildingQueuePush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.BuildingQueueDTO buildingQueues = 1;
  for (int i = 0; i < this->buildingqueues_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->buildingqueues(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuildingQueuePush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.BuildingQueueDTO buildingQueues = 1;
  for (int i = 0; i < this->buildingqueues_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->buildingqueues(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildingQueuePush::ByteSize() const {
  int total_size = 0;

  // repeated .slg.protocol.BuildingQueueDTO buildingQueues = 1;
  total_size += 1 * this->buildingqueues_size();
  for (int i = 0; i < this->buildingqueues_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buildingqueues(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingQueuePush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildingQueuePush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildingQueuePush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildingQueuePush::MergeFrom(const BuildingQueuePush& from) {
  GOOGLE_CHECK_NE(&from, this);
  buildingqueues_.MergeFrom(from.buildingqueues_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildingQueuePush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingQueuePush::CopyFrom(const BuildingQueuePush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingQueuePush::IsInitialized() const {

  for (int i = 0; i < buildingqueues_size(); i++) {
    if (!this->buildingqueues(i).IsInitialized()) return false;
  }
  return true;
}

void BuildingQueuePush::Swap(BuildingQueuePush* other) {
  if (other != this) {
    buildingqueues_.Swap(&other->buildingqueues_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildingQueuePush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildingQueuePush_descriptor_;
  metadata.reflection = BuildingQueuePush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildingRemovePush::kBuildingIdFieldNumber;
#endif  // !_MSC_VER

BuildingRemovePush::BuildingRemovePush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuildingRemovePush::InitAsDefaultInstance() {
}

BuildingRemovePush::BuildingRemovePush(const BuildingRemovePush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildingRemovePush::SharedCtor() {
  _cached_size_ = 0;
  buildingid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildingRemovePush::~BuildingRemovePush() {
  SharedDtor();
}

void BuildingRemovePush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildingRemovePush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildingRemovePush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingRemovePush_descriptor_;
}

const BuildingRemovePush& BuildingRemovePush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_building_2eproto();
  return *default_instance_;
}

BuildingRemovePush* BuildingRemovePush::default_instance_ = NULL;

BuildingRemovePush* BuildingRemovePush::New() const {
  return new BuildingRemovePush;
}

void BuildingRemovePush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buildingid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildingRemovePush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 buildingId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buildingid_)));
          set_has_buildingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuildingRemovePush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 buildingId = 1;
  if (has_buildingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buildingid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuildingRemovePush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 buildingId = 1;
  if (has_buildingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buildingid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildingRemovePush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 buildingId = 1;
    if (has_buildingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buildingid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingRemovePush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildingRemovePush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildingRemovePush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildingRemovePush::MergeFrom(const BuildingRemovePush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buildingid()) {
      set_buildingid(from.buildingid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildingRemovePush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingRemovePush::CopyFrom(const BuildingRemovePush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingRemovePush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BuildingRemovePush::Swap(BuildingRemovePush* other) {
  if (other != this) {
    std::swap(buildingid_, other->buildingid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildingRemovePush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildingRemovePush_descriptor_;
  metadata.reflection = BuildingRemovePush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildingCompletePush::kBuildingFieldNumber;
const int BuildingCompletePush::kTypeFieldNumber;
#endif  // !_MSC_VER

BuildingCompletePush::BuildingCompletePush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuildingCompletePush::InitAsDefaultInstance() {
}

BuildingCompletePush::BuildingCompletePush(const BuildingCompletePush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildingCompletePush::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildingCompletePush::~BuildingCompletePush() {
  SharedDtor();
}

void BuildingCompletePush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildingCompletePush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildingCompletePush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingCompletePush_descriptor_;
}

const BuildingCompletePush& BuildingCompletePush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_building_2eproto();
  return *default_instance_;
}

BuildingCompletePush* BuildingCompletePush::default_instance_ = NULL;

BuildingCompletePush* BuildingCompletePush::New() const {
  return new BuildingCompletePush;
}

void BuildingCompletePush::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    type_ = 1;
  }
  building_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildingCompletePush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.BuildingDTO building = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_building:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_building()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_building;
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .slg.protocol.BuildingCompleteType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::slg::protocol::BuildingCompleteType_IsValid(value)) {
            set_type(static_cast< ::slg::protocol::BuildingCompleteType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuildingCompletePush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.BuildingDTO building = 1;
  for (int i = 0; i < this->building_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->building(i), output);
  }

  // required .slg.protocol.BuildingCompleteType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuildingCompletePush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.BuildingDTO building = 1;
  for (int i = 0; i < this->building_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->building(i), target);
  }

  // required .slg.protocol.BuildingCompleteType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildingCompletePush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .slg.protocol.BuildingCompleteType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .slg.protocol.BuildingDTO building = 1;
  total_size += 1 * this->building_size();
  for (int i = 0; i < this->building_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->building(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingCompletePush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildingCompletePush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildingCompletePush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildingCompletePush::MergeFrom(const BuildingCompletePush& from) {
  GOOGLE_CHECK_NE(&from, this);
  building_.MergeFrom(from.building_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildingCompletePush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingCompletePush::CopyFrom(const BuildingCompletePush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingCompletePush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < building_size(); i++) {
    if (!this->building(i).IsInitialized()) return false;
  }
  return true;
}

void BuildingCompletePush::Swap(BuildingCompletePush* other) {
  if (other != this) {
    building_.Swap(&other->building_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildingCompletePush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildingCompletePush_descriptor_;
  metadata.reflection = BuildingCompletePush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnlockedAreaPush::kAreaIdFieldNumber;
#endif  // !_MSC_VER

UnlockedAreaPush::UnlockedAreaPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnlockedAreaPush::InitAsDefaultInstance() {
}

UnlockedAreaPush::UnlockedAreaPush(const UnlockedAreaPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnlockedAreaPush::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnlockedAreaPush::~UnlockedAreaPush() {
  SharedDtor();
}

void UnlockedAreaPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnlockedAreaPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnlockedAreaPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnlockedAreaPush_descriptor_;
}

const UnlockedAreaPush& UnlockedAreaPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_building_2eproto();
  return *default_instance_;
}

UnlockedAreaPush* UnlockedAreaPush::default_instance_ = NULL;

UnlockedAreaPush* UnlockedAreaPush::New() const {
  return new UnlockedAreaPush;
}

void UnlockedAreaPush::Clear() {
  areaid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnlockedAreaPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 areaId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_areaid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_areaid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_areaId;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnlockedAreaPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 areaId = 1;
  for (int i = 0; i < this->areaid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->areaid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnlockedAreaPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 areaId = 1;
  for (int i = 0; i < this->areaid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->areaid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnlockedAreaPush::ByteSize() const {
  int total_size = 0;

  // repeated int32 areaId = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->areaid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->areaid(i));
    }
    total_size += 1 * this->areaid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnlockedAreaPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnlockedAreaPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnlockedAreaPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnlockedAreaPush::MergeFrom(const UnlockedAreaPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  areaid_.MergeFrom(from.areaid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnlockedAreaPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnlockedAreaPush::CopyFrom(const UnlockedAreaPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlockedAreaPush::IsInitialized() const {

  return true;
}

void UnlockedAreaPush::Swap(UnlockedAreaPush* other) {
  if (other != this) {
    areaid_.Swap(&other->areaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnlockedAreaPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnlockedAreaPush_descriptor_;
  metadata.reflection = UnlockedAreaPush_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace slg

// @@protoc_insertion_point(global_scope)
