// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dbmessage.proto

#include "dbmessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class CMsgExecuteSqlRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgExecuteSqlRequest> _instance;
} _CMsgExecuteSqlRequest_default_instance_;
class CMsgExecuteSqlResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgExecuteSqlResponse> _instance;
} _CMsgExecuteSqlResponse_default_instance_;
static void InitDefaultsscc_info_CMsgExecuteSqlRequest_dbmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgExecuteSqlRequest_default_instance_;
    new (ptr) ::CMsgExecuteSqlRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgExecuteSqlRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgExecuteSqlRequest_dbmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CMsgExecuteSqlRequest_dbmessage_2eproto}, {}};

static void InitDefaultsscc_info_CMsgExecuteSqlResponse_dbmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgExecuteSqlResponse_default_instance_;
    new (ptr) ::CMsgExecuteSqlResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgExecuteSqlResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgExecuteSqlResponse_dbmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CMsgExecuteSqlResponse_dbmessage_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dbmessage_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_dbmessage_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dbmessage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dbmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlRequest, logictype_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlRequest, sessionid_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlRequest, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlRequest, teamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlRequest, sqltype_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlRequest, callback_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlRequest, sql_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlRequest, bufsize_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlRequest, buffer_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlRequest, sqlwhere_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlRequest, outnumber_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlRequest, hasblob_),
  3,
  4,
  5,
  6,
  10,
  11,
  0,
  7,
  1,
  2,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlResponse, logictype_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlResponse, sessionid_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlResponse, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlResponse, teamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlResponse, resultcode_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlResponse, rowcount_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlResponse, colcount_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlResponse, fieldvalue_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlResponse, fieldvaluelen_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, sizeof(::CMsgExecuteSqlRequest)},
  { 29, 43, sizeof(::CMsgExecuteSqlResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgExecuteSqlRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgExecuteSqlResponse_default_instance_),
};

const char descriptor_table_protodef_dbmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017dbmessage.proto\"\273\002\n\025CMsgExecuteSqlRequ"
  "est\022\021\n\tLogicType\030\001 \001(\r\022\024\n\tSessionID\030\002 \001("
  "\r:\0010\022\024\n\tTimeStamp\030\003 \001(\004:\0010\022\021\n\006TeamID\030\004 \001"
  "(\004:\0010\022!\n\007SqlType\030\005 \001(\0162\010.SQLTYPE:\006SELECT"
  "\022)\n\010Callback\030\006 \001(\0162\t.CALLBACK:\014MUSTCALLB"
  "ACK\022\013\n\003Sql\030\007 \001(\t\022\022\n\007BufSize\030\010 \001(\r:\0010\022\016\n\006"
  "Buffer\030\t \001(\014\022\020\n\010SQLWhere\030\n \001(\t\022\024\n\tOutNum"
  "ber\030\013 \001(\r:\0010\022\026\n\007HasBlob\030\014 \001(\0162\005.BLOB\"\021\n\003"
  "Msg\022\n\n\005MsgID\020\221N\"\335\001\n\026CMsgExecuteSqlRespon"
  "se\022\021\n\tLogicType\030\001 \001(\r\022\021\n\tSessionID\030\002 \001(\r"
  "\022\021\n\tTimeStamp\030\003 \001(\004\022\016\n\006TeamID\030\004 \001(\004\022\022\n\nR"
  "esultCode\030\005 \001(\r\022\023\n\010RowCount\030\006 \001(\r:\0010\022\023\n\010"
  "ColCount\030\007 \001(\r:\0010\022\022\n\nFieldValue\030\010 \003(\014\022\025\n"
  "\rFieldValueLen\030\t \003(\r\"\021\n\003Msg\022\n\n\005MsgID\020\222N*"
  "C\n\007SQLTYPE\022\n\n\006SELECT\020\001\022\n\n\006INSERT\020\002\022\n\n\006UP"
  "DATE\020\003\022\n\n\006DELETE\020\004\022\010\n\004CALL\020\005*-\n\010CALLBACK"
  "\022\020\n\014MUSTCALLBACK\020\001\022\017\n\013NOTCALLBACK\020\002*!\n\004B"
  "LOB\022\013\n\007HASBLOB\020\001\022\014\n\010NONEBLOB\020\002B\002H\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dbmessage_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_dbmessage_2eproto_sccs[2] = {
  &scc_info_CMsgExecuteSqlRequest_dbmessage_2eproto.base,
  &scc_info_CMsgExecuteSqlResponse_dbmessage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dbmessage_2eproto_once;
static bool descriptor_table_dbmessage_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dbmessage_2eproto = {
  &descriptor_table_dbmessage_2eproto_initialized, descriptor_table_protodef_dbmessage_2eproto, "dbmessage.proto", 714,
  &descriptor_table_dbmessage_2eproto_once, descriptor_table_dbmessage_2eproto_sccs, descriptor_table_dbmessage_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_dbmessage_2eproto::offsets,
  file_level_metadata_dbmessage_2eproto, 2, file_level_enum_descriptors_dbmessage_2eproto, file_level_service_descriptors_dbmessage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_dbmessage_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_dbmessage_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgExecuteSqlRequest_Msg_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dbmessage_2eproto);
  return file_level_enum_descriptors_dbmessage_2eproto[0];
}
bool CMsgExecuteSqlRequest_Msg_IsValid(int value) {
  switch (value) {
    case 10001:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgExecuteSqlRequest_Msg CMsgExecuteSqlRequest::MsgID;
constexpr CMsgExecuteSqlRequest_Msg CMsgExecuteSqlRequest::Msg_MIN;
constexpr CMsgExecuteSqlRequest_Msg CMsgExecuteSqlRequest::Msg_MAX;
constexpr int CMsgExecuteSqlRequest::Msg_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgExecuteSqlResponse_Msg_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dbmessage_2eproto);
  return file_level_enum_descriptors_dbmessage_2eproto[1];
}
bool CMsgExecuteSqlResponse_Msg_IsValid(int value) {
  switch (value) {
    case 10002:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgExecuteSqlResponse_Msg CMsgExecuteSqlResponse::MsgID;
constexpr CMsgExecuteSqlResponse_Msg CMsgExecuteSqlResponse::Msg_MIN;
constexpr CMsgExecuteSqlResponse_Msg CMsgExecuteSqlResponse::Msg_MAX;
constexpr int CMsgExecuteSqlResponse::Msg_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SQLTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dbmessage_2eproto);
  return file_level_enum_descriptors_dbmessage_2eproto[2];
}
bool SQLTYPE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CALLBACK_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dbmessage_2eproto);
  return file_level_enum_descriptors_dbmessage_2eproto[3];
}
bool CALLBACK_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BLOB_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dbmessage_2eproto);
  return file_level_enum_descriptors_dbmessage_2eproto[4];
}
bool BLOB_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CMsgExecuteSqlRequest::InitAsDefaultInstance() {
}
class CMsgExecuteSqlRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgExecuteSqlRequest>()._has_bits_);
  static void set_has_logictype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sessionid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_teamid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sqltype(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_callback(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_sql(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bufsize(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sqlwhere(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_outnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_hasblob(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgExecuteSqlRequest::kLogicTypeFieldNumber;
const int CMsgExecuteSqlRequest::kSessionIDFieldNumber;
const int CMsgExecuteSqlRequest::kTimeStampFieldNumber;
const int CMsgExecuteSqlRequest::kTeamIDFieldNumber;
const int CMsgExecuteSqlRequest::kSqlTypeFieldNumber;
const int CMsgExecuteSqlRequest::kCallbackFieldNumber;
const int CMsgExecuteSqlRequest::kSqlFieldNumber;
const int CMsgExecuteSqlRequest::kBufSizeFieldNumber;
const int CMsgExecuteSqlRequest::kBufferFieldNumber;
const int CMsgExecuteSqlRequest::kSQLWhereFieldNumber;
const int CMsgExecuteSqlRequest::kOutNumberFieldNumber;
const int CMsgExecuteSqlRequest::kHasBlobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgExecuteSqlRequest::CMsgExecuteSqlRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgExecuteSqlRequest)
}
CMsgExecuteSqlRequest::CMsgExecuteSqlRequest(const CMsgExecuteSqlRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sql_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_sql()) {
    sql_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sql_);
  }
  buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_buffer()) {
    buffer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.buffer_);
  }
  sqlwhere_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_sqlwhere()) {
    sqlwhere_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sqlwhere_);
  }
  ::memcpy(&logictype_, &from.logictype_,
    static_cast<size_t>(reinterpret_cast<char*>(&callback_) -
    reinterpret_cast<char*>(&logictype_)) + sizeof(callback_));
  // @@protoc_insertion_point(copy_constructor:CMsgExecuteSqlRequest)
}

void CMsgExecuteSqlRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgExecuteSqlRequest_dbmessage_2eproto.base);
  sql_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sqlwhere_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&logictype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&outnumber_) -
      reinterpret_cast<char*>(&logictype_)) + sizeof(outnumber_));
  hasblob_ = 1;
  sqltype_ = 1;
  callback_ = 1;
}

CMsgExecuteSqlRequest::~CMsgExecuteSqlRequest() {
  // @@protoc_insertion_point(destructor:CMsgExecuteSqlRequest)
  SharedDtor();
}

void CMsgExecuteSqlRequest::SharedDtor() {
  sql_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buffer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sqlwhere_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgExecuteSqlRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgExecuteSqlRequest& CMsgExecuteSqlRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgExecuteSqlRequest_dbmessage_2eproto.base);
  return *internal_default_instance();
}


void CMsgExecuteSqlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgExecuteSqlRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      sql_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      buffer_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      sqlwhere_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&logictype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bufsize_) -
        reinterpret_cast<char*>(&logictype_)) + sizeof(bufsize_));
  }
  if (cached_has_bits & 0x00000f00u) {
    outnumber_ = 0u;
    hasblob_ = 1;
    sqltype_ = 1;
    callback_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgExecuteSqlRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 LogicType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_logictype(&has_bits);
          logictype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 SessionID = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_sessionid(&has_bits);
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 TimeStamp = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 TeamID = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_teamid(&has_bits);
          teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .SQLTYPE SqlType = 5 [default = SELECT];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SQLTYPE_IsValid(val))) {
            set_sqltype(static_cast<::SQLTYPE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .CALLBACK Callback = 6 [default = MUSTCALLBACK];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CALLBACK_IsValid(val))) {
            set_callback(static_cast<::CALLBACK>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string Sql = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_sql(), ptr, ctx, "CMsgExecuteSqlRequest.Sql");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 BufSize = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_bufsize(&has_bits);
          bufsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes Buffer = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_buffer(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string SQLWhere = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_sqlwhere(), ptr, ctx, "CMsgExecuteSqlRequest.SQLWhere");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 OutNumber = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_outnumber(&has_bits);
          outnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .BLOB HasBlob = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::BLOB_IsValid(val))) {
            set_hasblob(static_cast<::BLOB>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgExecuteSqlRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgExecuteSqlRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 LogicType = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_logictype(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logictype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SessionID = 2 [default = 0];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_sessionid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 TimeStamp = 3 [default = 0];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_timestamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 TeamID = 4 [default = 0];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_teamid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SQLTYPE SqlType = 5 [default = SELECT];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SQLTYPE_IsValid(value)) {
            set_sqltype(static_cast< ::SQLTYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CALLBACK Callback = 6 [default = MUSTCALLBACK];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CALLBACK_IsValid(value)) {
            set_callback(static_cast< ::CALLBACK >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Sql = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sql()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sql().data(), static_cast<int>(this->sql().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "CMsgExecuteSqlRequest.Sql");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 BufSize = 8 [default = 0];
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_bufsize(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bufsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes Buffer = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SQLWhere = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sqlwhere()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sqlwhere().data(), static_cast<int>(this->sqlwhere().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "CMsgExecuteSqlRequest.SQLWhere");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 OutNumber = 11 [default = 0];
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_outnumber(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &outnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .BLOB HasBlob = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BLOB_IsValid(value)) {
            set_hasblob(static_cast< ::BLOB >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                12, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgExecuteSqlRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgExecuteSqlRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgExecuteSqlRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgExecuteSqlRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 LogicType = 1;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->logictype(), output);
  }

  // optional uint32 SessionID = 2 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->sessionid(), output);
  }

  // optional uint64 TimeStamp = 3 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->timestamp(), output);
  }

  // optional uint64 TeamID = 4 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->teamid(), output);
  }

  // optional .SQLTYPE SqlType = 5 [default = SELECT];
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->sqltype(), output);
  }

  // optional .CALLBACK Callback = 6 [default = MUSTCALLBACK];
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->callback(), output);
  }

  // optional string Sql = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sql().data(), static_cast<int>(this->sql().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgExecuteSqlRequest.Sql");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->sql(), output);
  }

  // optional uint32 BufSize = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(8, this->bufsize(), output);
  }

  // optional bytes Buffer = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->buffer(), output);
  }

  // optional string SQLWhere = 10;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sqlwhere().data(), static_cast<int>(this->sqlwhere().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgExecuteSqlRequest.SQLWhere");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->sqlwhere(), output);
  }

  // optional uint32 OutNumber = 11 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(11, this->outnumber(), output);
  }

  // optional .BLOB HasBlob = 12;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      12, this->hasblob(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgExecuteSqlRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgExecuteSqlRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgExecuteSqlRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 LogicType = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->logictype(), target);
  }

  // optional uint32 SessionID = 2 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->sessionid(), target);
  }

  // optional uint64 TimeStamp = 3 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp(), target);
  }

  // optional uint64 TeamID = 4 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->teamid(), target);
  }

  // optional .SQLTYPE SqlType = 5 [default = SELECT];
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->sqltype(), target);
  }

  // optional .CALLBACK Callback = 6 [default = MUSTCALLBACK];
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->callback(), target);
  }

  // optional string Sql = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sql().data(), static_cast<int>(this->sql().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgExecuteSqlRequest.Sql");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->sql(), target);
  }

  // optional uint32 BufSize = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->bufsize(), target);
  }

  // optional bytes Buffer = 9;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        9, this->buffer(), target);
  }

  // optional string SQLWhere = 10;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sqlwhere().data(), static_cast<int>(this->sqlwhere().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgExecuteSqlRequest.SQLWhere");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        10, this->sqlwhere(), target);
  }

  // optional uint32 OutNumber = 11 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->outnumber(), target);
  }

  // optional .BLOB HasBlob = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->hasblob(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgExecuteSqlRequest)
  return target;
}

size_t CMsgExecuteSqlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgExecuteSqlRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string Sql = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->sql());
    }

    // optional bytes Buffer = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->buffer());
    }

    // optional string SQLWhere = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->sqlwhere());
    }

    // optional uint32 LogicType = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->logictype());
    }

    // optional uint32 SessionID = 2 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->sessionid());
    }

    // optional uint64 TimeStamp = 3 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional uint64 TeamID = 4 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint32 BufSize = 8 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->bufsize());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint32 OutNumber = 11 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->outnumber());
    }

    // optional .BLOB HasBlob = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->hasblob());
    }

    // optional .SQLTYPE SqlType = 5 [default = SELECT];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->sqltype());
    }

    // optional .CALLBACK Callback = 6 [default = MUSTCALLBACK];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->callback());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgExecuteSqlRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgExecuteSqlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgExecuteSqlRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgExecuteSqlRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgExecuteSqlRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgExecuteSqlRequest)
    MergeFrom(*source);
  }
}

void CMsgExecuteSqlRequest::MergeFrom(const CMsgExecuteSqlRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgExecuteSqlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      sql_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sql_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      buffer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.buffer_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      sqlwhere_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sqlwhere_);
    }
    if (cached_has_bits & 0x00000008u) {
      logictype_ = from.logictype_;
    }
    if (cached_has_bits & 0x00000010u) {
      sessionid_ = from.sessionid_;
    }
    if (cached_has_bits & 0x00000020u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      teamid_ = from.teamid_;
    }
    if (cached_has_bits & 0x00000080u) {
      bufsize_ = from.bufsize_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      outnumber_ = from.outnumber_;
    }
    if (cached_has_bits & 0x00000200u) {
      hasblob_ = from.hasblob_;
    }
    if (cached_has_bits & 0x00000400u) {
      sqltype_ = from.sqltype_;
    }
    if (cached_has_bits & 0x00000800u) {
      callback_ = from.callback_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgExecuteSqlRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgExecuteSqlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgExecuteSqlRequest::CopyFrom(const CMsgExecuteSqlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgExecuteSqlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgExecuteSqlRequest::IsInitialized() const {
  return true;
}

void CMsgExecuteSqlRequest::Swap(CMsgExecuteSqlRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgExecuteSqlRequest::InternalSwap(CMsgExecuteSqlRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sql_.Swap(&other->sql_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  buffer_.Swap(&other->buffer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sqlwhere_.Swap(&other->sqlwhere_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(logictype_, other->logictype_);
  swap(sessionid_, other->sessionid_);
  swap(timestamp_, other->timestamp_);
  swap(teamid_, other->teamid_);
  swap(bufsize_, other->bufsize_);
  swap(outnumber_, other->outnumber_);
  swap(hasblob_, other->hasblob_);
  swap(sqltype_, other->sqltype_);
  swap(callback_, other->callback_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgExecuteSqlRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgExecuteSqlResponse::InitAsDefaultInstance() {
}
class CMsgExecuteSqlResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgExecuteSqlResponse>()._has_bits_);
  static void set_has_logictype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sessionid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_teamid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_resultcode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rowcount(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_colcount(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgExecuteSqlResponse::kLogicTypeFieldNumber;
const int CMsgExecuteSqlResponse::kSessionIDFieldNumber;
const int CMsgExecuteSqlResponse::kTimeStampFieldNumber;
const int CMsgExecuteSqlResponse::kTeamIDFieldNumber;
const int CMsgExecuteSqlResponse::kResultCodeFieldNumber;
const int CMsgExecuteSqlResponse::kRowCountFieldNumber;
const int CMsgExecuteSqlResponse::kColCountFieldNumber;
const int CMsgExecuteSqlResponse::kFieldValueFieldNumber;
const int CMsgExecuteSqlResponse::kFieldValueLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgExecuteSqlResponse::CMsgExecuteSqlResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgExecuteSqlResponse)
}
CMsgExecuteSqlResponse::CMsgExecuteSqlResponse(const CMsgExecuteSqlResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      fieldvalue_(from.fieldvalue_),
      fieldvaluelen_(from.fieldvaluelen_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&logictype_, &from.logictype_,
    static_cast<size_t>(reinterpret_cast<char*>(&colcount_) -
    reinterpret_cast<char*>(&logictype_)) + sizeof(colcount_));
  // @@protoc_insertion_point(copy_constructor:CMsgExecuteSqlResponse)
}

void CMsgExecuteSqlResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgExecuteSqlResponse_dbmessage_2eproto.base);
  ::memset(&logictype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&colcount_) -
      reinterpret_cast<char*>(&logictype_)) + sizeof(colcount_));
}

CMsgExecuteSqlResponse::~CMsgExecuteSqlResponse() {
  // @@protoc_insertion_point(destructor:CMsgExecuteSqlResponse)
  SharedDtor();
}

void CMsgExecuteSqlResponse::SharedDtor() {
}

void CMsgExecuteSqlResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgExecuteSqlResponse& CMsgExecuteSqlResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgExecuteSqlResponse_dbmessage_2eproto.base);
  return *internal_default_instance();
}


void CMsgExecuteSqlResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgExecuteSqlResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fieldvalue_.Clear();
  fieldvaluelen_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&logictype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&colcount_) -
        reinterpret_cast<char*>(&logictype_)) + sizeof(colcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgExecuteSqlResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 LogicType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_logictype(&has_bits);
          logictype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 SessionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_sessionid(&has_bits);
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 TimeStamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 TeamID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_teamid(&has_bits);
          teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ResultCode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_resultcode(&has_bits);
          resultcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 RowCount = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_rowcount(&has_bits);
          rowcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ColCount = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_colcount(&has_bits);
          colcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes FieldValue = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_fieldvalue(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // repeated uint32 FieldValueLen = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_fieldvaluelen(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 72);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_fieldvaluelen(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgExecuteSqlResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgExecuteSqlResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 LogicType = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_logictype(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logictype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SessionID = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_sessionid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 TimeStamp = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_timestamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 TeamID = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_teamid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ResultCode = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_resultcode(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resultcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 RowCount = 6 [default = 0];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_rowcount(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rowcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ColCount = 7 [default = 0];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_colcount(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &colcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes FieldValue = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_fieldvalue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 FieldValueLen = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72u, input, this->mutable_fieldvaluelen())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_fieldvaluelen())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgExecuteSqlResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgExecuteSqlResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgExecuteSqlResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgExecuteSqlResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 LogicType = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->logictype(), output);
  }

  // optional uint32 SessionID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->sessionid(), output);
  }

  // optional uint64 TimeStamp = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->timestamp(), output);
  }

  // optional uint64 TeamID = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->teamid(), output);
  }

  // optional uint32 ResultCode = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->resultcode(), output);
  }

  // optional uint32 RowCount = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->rowcount(), output);
  }

  // optional uint32 ColCount = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->colcount(), output);
  }

  // repeated bytes FieldValue = 8;
  for (int i = 0, n = this->fieldvalue_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      8, this->fieldvalue(i), output);
  }

  // repeated uint32 FieldValueLen = 9;
  for (int i = 0, n = this->fieldvaluelen_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(
      9, this->fieldvaluelen(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgExecuteSqlResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgExecuteSqlResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgExecuteSqlResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 LogicType = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->logictype(), target);
  }

  // optional uint32 SessionID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->sessionid(), target);
  }

  // optional uint64 TimeStamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp(), target);
  }

  // optional uint64 TeamID = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->teamid(), target);
  }

  // optional uint32 ResultCode = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->resultcode(), target);
  }

  // optional uint32 RowCount = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->rowcount(), target);
  }

  // optional uint32 ColCount = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->colcount(), target);
  }

  // repeated bytes FieldValue = 8;
  for (int i = 0, n = this->fieldvalue_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(8, this->fieldvalue(i), target);
  }

  // repeated uint32 FieldValueLen = 9;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteUInt32ToArray(9, this->fieldvaluelen_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgExecuteSqlResponse)
  return target;
}

size_t CMsgExecuteSqlResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgExecuteSqlResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes FieldValue = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->fieldvalue_size());
  for (int i = 0, n = this->fieldvalue_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->fieldvalue(i));
  }

  // repeated uint32 FieldValueLen = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->fieldvaluelen_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->fieldvaluelen_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 LogicType = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->logictype());
    }

    // optional uint32 SessionID = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->sessionid());
    }

    // optional uint64 TimeStamp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional uint64 TeamID = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint32 ResultCode = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->resultcode());
    }

    // optional uint32 RowCount = 6 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->rowcount());
    }

    // optional uint32 ColCount = 7 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->colcount());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgExecuteSqlResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgExecuteSqlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgExecuteSqlResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgExecuteSqlResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgExecuteSqlResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgExecuteSqlResponse)
    MergeFrom(*source);
  }
}

void CMsgExecuteSqlResponse::MergeFrom(const CMsgExecuteSqlResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgExecuteSqlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fieldvalue_.MergeFrom(from.fieldvalue_);
  fieldvaluelen_.MergeFrom(from.fieldvaluelen_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      logictype_ = from.logictype_;
    }
    if (cached_has_bits & 0x00000002u) {
      sessionid_ = from.sessionid_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      teamid_ = from.teamid_;
    }
    if (cached_has_bits & 0x00000010u) {
      resultcode_ = from.resultcode_;
    }
    if (cached_has_bits & 0x00000020u) {
      rowcount_ = from.rowcount_;
    }
    if (cached_has_bits & 0x00000040u) {
      colcount_ = from.colcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgExecuteSqlResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgExecuteSqlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgExecuteSqlResponse::CopyFrom(const CMsgExecuteSqlResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgExecuteSqlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgExecuteSqlResponse::IsInitialized() const {
  return true;
}

void CMsgExecuteSqlResponse::Swap(CMsgExecuteSqlResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgExecuteSqlResponse::InternalSwap(CMsgExecuteSqlResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fieldvalue_.InternalSwap(CastToBase(&other->fieldvalue_));
  fieldvaluelen_.InternalSwap(&other->fieldvaluelen_);
  swap(logictype_, other->logictype_);
  swap(sessionid_, other->sessionid_);
  swap(timestamp_, other->timestamp_);
  swap(teamid_, other->teamid_);
  swap(resultcode_, other->resultcode_);
  swap(rowcount_, other->rowcount_);
  swap(colcount_, other->colcount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgExecuteSqlResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgExecuteSqlRequest* Arena::CreateMaybeMessage< ::CMsgExecuteSqlRequest >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgExecuteSqlRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgExecuteSqlResponse* Arena::CreateMaybeMessage< ::CMsgExecuteSqlResponse >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgExecuteSqlResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
