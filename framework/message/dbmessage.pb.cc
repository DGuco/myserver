// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dbmessage.proto

#include "dbmessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class CMsgExecuteSqlRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgExecuteSqlRequest>
      _instance;
} _CMsgExecuteSqlRequest_default_instance_;
class CMsgExecuteSqlResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgExecuteSqlResponse>
      _instance;
} _CMsgExecuteSqlResponse_default_instance_;
namespace protobuf_dbmessage_2eproto {
void InitDefaultsCMsgExecuteSqlRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgExecuteSqlRequest_default_instance_;
    new (ptr) ::CMsgExecuteSqlRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgExecuteSqlRequest::InitAsDefaultInstance();
}

void InitDefaultsCMsgExecuteSqlRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgExecuteSqlRequestImpl);
}

void InitDefaultsCMsgExecuteSqlResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgExecuteSqlResponse_default_instance_;
    new (ptr) ::CMsgExecuteSqlResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgExecuteSqlResponse::InitAsDefaultInstance();
}

void InitDefaultsCMsgExecuteSqlResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgExecuteSqlResponseImpl);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgExecuteSqlRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgExecuteSqlRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgExecuteSqlRequest, logictype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgExecuteSqlRequest, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgExecuteSqlRequest, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgExecuteSqlRequest, teamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgExecuteSqlRequest, sqltype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgExecuteSqlRequest, callback_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgExecuteSqlRequest, sql_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgExecuteSqlRequest, bufsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgExecuteSqlRequest, buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgExecuteSqlRequest, sqlwhere_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgExecuteSqlRequest, outnumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgExecuteSqlRequest, hasblob_),
  3,
  4,
  5,
  6,
  10,
  11,
  0,
  7,
  1,
  2,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgExecuteSqlResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgExecuteSqlResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgExecuteSqlResponse, logictype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgExecuteSqlResponse, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgExecuteSqlResponse, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgExecuteSqlResponse, teamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgExecuteSqlResponse, resultcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgExecuteSqlResponse, rowcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgExecuteSqlResponse, colcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgExecuteSqlResponse, fieldvalue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgExecuteSqlResponse, fieldvaluelen_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, sizeof(::CMsgExecuteSqlRequest)},
  { 29, 43, sizeof(::CMsgExecuteSqlResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgExecuteSqlRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgExecuteSqlResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dbmessage.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017dbmessage.proto\"\273\002\n\025CMsgExecuteSqlRequ"
      "est\022\021\n\tLogicType\030\001 \001(\r\022\024\n\tSessionID\030\002 \001("
      "\r:\0010\022\024\n\tTimeStamp\030\003 \001(\004:\0010\022\021\n\006TeamID\030\004 \001"
      "(\004:\0010\022!\n\007SqlType\030\005 \001(\0162\010.SQLTYPE:\006SELECT"
      "\022)\n\010Callback\030\006 \001(\0162\t.CALLBACK:\014MUSTCALLB"
      "ACK\022\013\n\003Sql\030\007 \001(\t\022\022\n\007BufSize\030\010 \001(\r:\0010\022\016\n\006"
      "Buffer\030\t \001(\014\022\020\n\010SQLWhere\030\n \001(\t\022\024\n\tOutNum"
      "ber\030\013 \001(\r:\0010\022\026\n\007HasBlob\030\014 \001(\0162\005.BLOB\"\021\n\003"
      "Msg\022\n\n\005MsgID\020\221N\"\335\001\n\026CMsgExecuteSqlRespon"
      "se\022\021\n\tLogicType\030\001 \001(\r\022\021\n\tSessionID\030\002 \001(\r"
      "\022\021\n\tTimeStamp\030\003 \001(\004\022\016\n\006TeamID\030\004 \001(\004\022\022\n\nR"
      "esultCode\030\005 \001(\r\022\023\n\010RowCount\030\006 \001(\r:\0010\022\023\n\010"
      "ColCount\030\007 \001(\r:\0010\022\022\n\nFieldValue\030\010 \003(\014\022\025\n"
      "\rFieldValueLen\030\t \003(\r\"\021\n\003Msg\022\n\n\005MsgID\020\222N*"
      "C\n\007SQLTYPE\022\n\n\006SELECT\020\001\022\n\n\006INSERT\020\002\022\n\n\006UP"
      "DATE\020\003\022\n\n\006DELETE\020\004\022\010\n\004CALL\020\005*-\n\010CALLBACK"
      "\022\020\n\014MUSTCALLBACK\020\001\022\017\n\013NOTCALLBACK\020\002*!\n\004B"
      "LOB\022\013\n\007HASBLOB\020\001\022\014\n\010NONEBLOB\020\002B\002H\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 714);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dbmessage.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_dbmessage_2eproto
const ::google::protobuf::EnumDescriptor* CMsgExecuteSqlRequest_Msg_descriptor() {
  protobuf_dbmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dbmessage_2eproto::file_level_enum_descriptors[0];
}
bool CMsgExecuteSqlRequest_Msg_IsValid(int value) {
  switch (value) {
    case 10001:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgExecuteSqlRequest_Msg CMsgExecuteSqlRequest::MsgID;
const CMsgExecuteSqlRequest_Msg CMsgExecuteSqlRequest::Msg_MIN;
const CMsgExecuteSqlRequest_Msg CMsgExecuteSqlRequest::Msg_MAX;
const int CMsgExecuteSqlRequest::Msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgExecuteSqlResponse_Msg_descriptor() {
  protobuf_dbmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dbmessage_2eproto::file_level_enum_descriptors[1];
}
bool CMsgExecuteSqlResponse_Msg_IsValid(int value) {
  switch (value) {
    case 10002:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgExecuteSqlResponse_Msg CMsgExecuteSqlResponse::MsgID;
const CMsgExecuteSqlResponse_Msg CMsgExecuteSqlResponse::Msg_MIN;
const CMsgExecuteSqlResponse_Msg CMsgExecuteSqlResponse::Msg_MAX;
const int CMsgExecuteSqlResponse::Msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SQLTYPE_descriptor() {
  protobuf_dbmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dbmessage_2eproto::file_level_enum_descriptors[2];
}
bool SQLTYPE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CALLBACK_descriptor() {
  protobuf_dbmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dbmessage_2eproto::file_level_enum_descriptors[3];
}
bool CALLBACK_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BLOB_descriptor() {
  protobuf_dbmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dbmessage_2eproto::file_level_enum_descriptors[4];
}
bool BLOB_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CMsgExecuteSqlRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgExecuteSqlRequest::kLogicTypeFieldNumber;
const int CMsgExecuteSqlRequest::kSessionIDFieldNumber;
const int CMsgExecuteSqlRequest::kTimeStampFieldNumber;
const int CMsgExecuteSqlRequest::kTeamIDFieldNumber;
const int CMsgExecuteSqlRequest::kSqlTypeFieldNumber;
const int CMsgExecuteSqlRequest::kCallbackFieldNumber;
const int CMsgExecuteSqlRequest::kSqlFieldNumber;
const int CMsgExecuteSqlRequest::kBufSizeFieldNumber;
const int CMsgExecuteSqlRequest::kBufferFieldNumber;
const int CMsgExecuteSqlRequest::kSQLWhereFieldNumber;
const int CMsgExecuteSqlRequest::kOutNumberFieldNumber;
const int CMsgExecuteSqlRequest::kHasBlobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgExecuteSqlRequest::CMsgExecuteSqlRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_dbmessage_2eproto::InitDefaultsCMsgExecuteSqlRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgExecuteSqlRequest)
}
CMsgExecuteSqlRequest::CMsgExecuteSqlRequest(const CMsgExecuteSqlRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sql_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sql()) {
    sql_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sql_);
  }
  buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_buffer()) {
    buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_);
  }
  sqlwhere_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sqlwhere()) {
    sqlwhere_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sqlwhere_);
  }
  ::memcpy(&logictype_, &from.logictype_,
    static_cast<size_t>(reinterpret_cast<char*>(&callback_) -
    reinterpret_cast<char*>(&logictype_)) + sizeof(callback_));
  // @@protoc_insertion_point(copy_constructor:CMsgExecuteSqlRequest)
}

void CMsgExecuteSqlRequest::SharedCtor() {
  _cached_size_ = 0;
  sql_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sqlwhere_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&logictype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&outnumber_) -
      reinterpret_cast<char*>(&logictype_)) + sizeof(outnumber_));
  hasblob_ = 1;
  sqltype_ = 1;
  callback_ = 1;
}

CMsgExecuteSqlRequest::~CMsgExecuteSqlRequest() {
  // @@protoc_insertion_point(destructor:CMsgExecuteSqlRequest)
  SharedDtor();
}

void CMsgExecuteSqlRequest::SharedDtor() {
  sql_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sqlwhere_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgExecuteSqlRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgExecuteSqlRequest::descriptor() {
  ::protobuf_dbmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgExecuteSqlRequest& CMsgExecuteSqlRequest::default_instance() {
  ::protobuf_dbmessage_2eproto::InitDefaultsCMsgExecuteSqlRequest();
  return *internal_default_instance();
}

CMsgExecuteSqlRequest* CMsgExecuteSqlRequest::New(::google::protobuf::Arena* arena) const {
  CMsgExecuteSqlRequest* n = new CMsgExecuteSqlRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgExecuteSqlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgExecuteSqlRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sql_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sql_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!buffer_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*buffer_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!sqlwhere_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sqlwhere_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&logictype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bufsize_) -
        reinterpret_cast<char*>(&logictype_)) + sizeof(bufsize_));
  }
  if (cached_has_bits & 3840u) {
    outnumber_ = 0u;
    hasblob_ = 1;
    sqltype_ = 1;
    callback_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgExecuteSqlRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgExecuteSqlRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 LogicType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_logictype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logictype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SessionID = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_sessionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 TimeStamp = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 TeamID = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_teamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SQLTYPE SqlType = 5 [default = SELECT];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SQLTYPE_IsValid(value)) {
            set_sqltype(static_cast< ::SQLTYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CALLBACK Callback = 6 [default = MUSTCALLBACK];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CALLBACK_IsValid(value)) {
            set_callback(static_cast< ::CALLBACK >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Sql = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sql()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sql().data(), static_cast<int>(this->sql().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgExecuteSqlRequest.Sql");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 BufSize = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_bufsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bufsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes Buffer = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SQLWhere = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sqlwhere()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sqlwhere().data(), static_cast<int>(this->sqlwhere().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgExecuteSqlRequest.SQLWhere");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 OutNumber = 11 [default = 0];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_outnumber();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &outnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .BLOB HasBlob = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BLOB_IsValid(value)) {
            set_hasblob(static_cast< ::BLOB >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                12, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgExecuteSqlRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgExecuteSqlRequest)
  return false;
#undef DO_
}

void CMsgExecuteSqlRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgExecuteSqlRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 LogicType = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->logictype(), output);
  }

  // optional uint32 SessionID = 2 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sessionid(), output);
  }

  // optional uint64 TimeStamp = 3 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp(), output);
  }

  // optional uint64 TeamID = 4 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->teamid(), output);
  }

  // optional .SQLTYPE SqlType = 5 [default = SELECT];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->sqltype(), output);
  }

  // optional .CALLBACK Callback = 6 [default = MUSTCALLBACK];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->callback(), output);
  }

  // optional string Sql = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sql().data(), static_cast<int>(this->sql().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgExecuteSqlRequest.Sql");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->sql(), output);
  }

  // optional uint32 BufSize = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->bufsize(), output);
  }

  // optional bytes Buffer = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->buffer(), output);
  }

  // optional string SQLWhere = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sqlwhere().data(), static_cast<int>(this->sqlwhere().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgExecuteSqlRequest.SQLWhere");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->sqlwhere(), output);
  }

  // optional uint32 OutNumber = 11 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->outnumber(), output);
  }

  // optional .BLOB HasBlob = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->hasblob(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgExecuteSqlRequest)
}

::google::protobuf::uint8* CMsgExecuteSqlRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgExecuteSqlRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 LogicType = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->logictype(), target);
  }

  // optional uint32 SessionID = 2 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sessionid(), target);
  }

  // optional uint64 TimeStamp = 3 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp(), target);
  }

  // optional uint64 TeamID = 4 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->teamid(), target);
  }

  // optional .SQLTYPE SqlType = 5 [default = SELECT];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->sqltype(), target);
  }

  // optional .CALLBACK Callback = 6 [default = MUSTCALLBACK];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->callback(), target);
  }

  // optional string Sql = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sql().data(), static_cast<int>(this->sql().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgExecuteSqlRequest.Sql");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sql(), target);
  }

  // optional uint32 BufSize = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->bufsize(), target);
  }

  // optional bytes Buffer = 9;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->buffer(), target);
  }

  // optional string SQLWhere = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sqlwhere().data(), static_cast<int>(this->sqlwhere().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgExecuteSqlRequest.SQLWhere");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->sqlwhere(), target);
  }

  // optional uint32 OutNumber = 11 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->outnumber(), target);
  }

  // optional .BLOB HasBlob = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->hasblob(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgExecuteSqlRequest)
  return target;
}

size_t CMsgExecuteSqlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgExecuteSqlRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string Sql = 7;
    if (has_sql()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sql());
    }

    // optional bytes Buffer = 9;
    if (has_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buffer());
    }

    // optional string SQLWhere = 10;
    if (has_sqlwhere()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sqlwhere());
    }

    // optional uint32 LogicType = 1;
    if (has_logictype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logictype());
    }

    // optional uint32 SessionID = 2 [default = 0];
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sessionid());
    }

    // optional uint64 TimeStamp = 3 [default = 0];
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional uint64 TeamID = 4 [default = 0];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint32 BufSize = 8 [default = 0];
    if (has_bufsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bufsize());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional uint32 OutNumber = 11 [default = 0];
    if (has_outnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->outnumber());
    }

    // optional .BLOB HasBlob = 12;
    if (has_hasblob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->hasblob());
    }

    // optional .SQLTYPE SqlType = 5 [default = SELECT];
    if (has_sqltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sqltype());
    }

    // optional .CALLBACK Callback = 6 [default = MUSTCALLBACK];
    if (has_callback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->callback());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgExecuteSqlRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgExecuteSqlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgExecuteSqlRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgExecuteSqlRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgExecuteSqlRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgExecuteSqlRequest)
    MergeFrom(*source);
  }
}

void CMsgExecuteSqlRequest::MergeFrom(const CMsgExecuteSqlRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgExecuteSqlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sql();
      sql_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sql_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_buffer();
      buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_sqlwhere();
      sqlwhere_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sqlwhere_);
    }
    if (cached_has_bits & 0x00000008u) {
      logictype_ = from.logictype_;
    }
    if (cached_has_bits & 0x00000010u) {
      sessionid_ = from.sessionid_;
    }
    if (cached_has_bits & 0x00000020u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      teamid_ = from.teamid_;
    }
    if (cached_has_bits & 0x00000080u) {
      bufsize_ = from.bufsize_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      outnumber_ = from.outnumber_;
    }
    if (cached_has_bits & 0x00000200u) {
      hasblob_ = from.hasblob_;
    }
    if (cached_has_bits & 0x00000400u) {
      sqltype_ = from.sqltype_;
    }
    if (cached_has_bits & 0x00000800u) {
      callback_ = from.callback_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgExecuteSqlRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgExecuteSqlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgExecuteSqlRequest::CopyFrom(const CMsgExecuteSqlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgExecuteSqlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgExecuteSqlRequest::IsInitialized() const {
  return true;
}

void CMsgExecuteSqlRequest::Swap(CMsgExecuteSqlRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgExecuteSqlRequest::InternalSwap(CMsgExecuteSqlRequest* other) {
  using std::swap;
  sql_.Swap(&other->sql_);
  buffer_.Swap(&other->buffer_);
  sqlwhere_.Swap(&other->sqlwhere_);
  swap(logictype_, other->logictype_);
  swap(sessionid_, other->sessionid_);
  swap(timestamp_, other->timestamp_);
  swap(teamid_, other->teamid_);
  swap(bufsize_, other->bufsize_);
  swap(outnumber_, other->outnumber_);
  swap(hasblob_, other->hasblob_);
  swap(sqltype_, other->sqltype_);
  swap(callback_, other->callback_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgExecuteSqlRequest::GetMetadata() const {
  protobuf_dbmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgExecuteSqlResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgExecuteSqlResponse::kLogicTypeFieldNumber;
const int CMsgExecuteSqlResponse::kSessionIDFieldNumber;
const int CMsgExecuteSqlResponse::kTimeStampFieldNumber;
const int CMsgExecuteSqlResponse::kTeamIDFieldNumber;
const int CMsgExecuteSqlResponse::kResultCodeFieldNumber;
const int CMsgExecuteSqlResponse::kRowCountFieldNumber;
const int CMsgExecuteSqlResponse::kColCountFieldNumber;
const int CMsgExecuteSqlResponse::kFieldValueFieldNumber;
const int CMsgExecuteSqlResponse::kFieldValueLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgExecuteSqlResponse::CMsgExecuteSqlResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_dbmessage_2eproto::InitDefaultsCMsgExecuteSqlResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgExecuteSqlResponse)
}
CMsgExecuteSqlResponse::CMsgExecuteSqlResponse(const CMsgExecuteSqlResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      fieldvalue_(from.fieldvalue_),
      fieldvaluelen_(from.fieldvaluelen_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&logictype_, &from.logictype_,
    static_cast<size_t>(reinterpret_cast<char*>(&colcount_) -
    reinterpret_cast<char*>(&logictype_)) + sizeof(colcount_));
  // @@protoc_insertion_point(copy_constructor:CMsgExecuteSqlResponse)
}

void CMsgExecuteSqlResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&logictype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&colcount_) -
      reinterpret_cast<char*>(&logictype_)) + sizeof(colcount_));
}

CMsgExecuteSqlResponse::~CMsgExecuteSqlResponse() {
  // @@protoc_insertion_point(destructor:CMsgExecuteSqlResponse)
  SharedDtor();
}

void CMsgExecuteSqlResponse::SharedDtor() {
}

void CMsgExecuteSqlResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgExecuteSqlResponse::descriptor() {
  ::protobuf_dbmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgExecuteSqlResponse& CMsgExecuteSqlResponse::default_instance() {
  ::protobuf_dbmessage_2eproto::InitDefaultsCMsgExecuteSqlResponse();
  return *internal_default_instance();
}

CMsgExecuteSqlResponse* CMsgExecuteSqlResponse::New(::google::protobuf::Arena* arena) const {
  CMsgExecuteSqlResponse* n = new CMsgExecuteSqlResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgExecuteSqlResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgExecuteSqlResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fieldvalue_.Clear();
  fieldvaluelen_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&logictype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&colcount_) -
        reinterpret_cast<char*>(&logictype_)) + sizeof(colcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgExecuteSqlResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgExecuteSqlResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 LogicType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_logictype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logictype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SessionID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_sessionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 TimeStamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 TeamID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_teamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ResultCode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_resultcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resultcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 RowCount = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_rowcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rowcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ColCount = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_colcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &colcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes FieldValue = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_fieldvalue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 FieldValueLen = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72u, input, this->mutable_fieldvaluelen())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_fieldvaluelen())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgExecuteSqlResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgExecuteSqlResponse)
  return false;
#undef DO_
}

void CMsgExecuteSqlResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgExecuteSqlResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 LogicType = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->logictype(), output);
  }

  // optional uint32 SessionID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sessionid(), output);
  }

  // optional uint64 TimeStamp = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp(), output);
  }

  // optional uint64 TeamID = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->teamid(), output);
  }

  // optional uint32 ResultCode = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->resultcode(), output);
  }

  // optional uint32 RowCount = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->rowcount(), output);
  }

  // optional uint32 ColCount = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->colcount(), output);
  }

  // repeated bytes FieldValue = 8;
  for (int i = 0, n = this->fieldvalue_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->fieldvalue(i), output);
  }

  // repeated uint32 FieldValueLen = 9;
  for (int i = 0, n = this->fieldvaluelen_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->fieldvaluelen(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgExecuteSqlResponse)
}

::google::protobuf::uint8* CMsgExecuteSqlResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgExecuteSqlResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 LogicType = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->logictype(), target);
  }

  // optional uint32 SessionID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sessionid(), target);
  }

  // optional uint64 TimeStamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp(), target);
  }

  // optional uint64 TeamID = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->teamid(), target);
  }

  // optional uint32 ResultCode = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->resultcode(), target);
  }

  // optional uint32 RowCount = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->rowcount(), target);
  }

  // optional uint32 ColCount = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->colcount(), target);
  }

  // repeated bytes FieldValue = 8;
  for (int i = 0, n = this->fieldvalue_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(8, this->fieldvalue(i), target);
  }

  // repeated uint32 FieldValueLen = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(9, this->fieldvaluelen_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgExecuteSqlResponse)
  return target;
}

size_t CMsgExecuteSqlResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgExecuteSqlResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated bytes FieldValue = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fieldvalue_size());
  for (int i = 0, n = this->fieldvalue_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->fieldvalue(i));
  }

  // repeated uint32 FieldValueLen = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->fieldvaluelen_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->fieldvaluelen_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional uint32 LogicType = 1;
    if (has_logictype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logictype());
    }

    // optional uint32 SessionID = 2;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sessionid());
    }

    // optional uint64 TimeStamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional uint64 TeamID = 4;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint32 ResultCode = 5;
    if (has_resultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resultcode());
    }

    // optional uint32 RowCount = 6 [default = 0];
    if (has_rowcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rowcount());
    }

    // optional uint32 ColCount = 7 [default = 0];
    if (has_colcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->colcount());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgExecuteSqlResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgExecuteSqlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgExecuteSqlResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgExecuteSqlResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgExecuteSqlResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgExecuteSqlResponse)
    MergeFrom(*source);
  }
}

void CMsgExecuteSqlResponse::MergeFrom(const CMsgExecuteSqlResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgExecuteSqlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fieldvalue_.MergeFrom(from.fieldvalue_);
  fieldvaluelen_.MergeFrom(from.fieldvaluelen_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      logictype_ = from.logictype_;
    }
    if (cached_has_bits & 0x00000002u) {
      sessionid_ = from.sessionid_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      teamid_ = from.teamid_;
    }
    if (cached_has_bits & 0x00000010u) {
      resultcode_ = from.resultcode_;
    }
    if (cached_has_bits & 0x00000020u) {
      rowcount_ = from.rowcount_;
    }
    if (cached_has_bits & 0x00000040u) {
      colcount_ = from.colcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgExecuteSqlResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgExecuteSqlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgExecuteSqlResponse::CopyFrom(const CMsgExecuteSqlResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgExecuteSqlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgExecuteSqlResponse::IsInitialized() const {
  return true;
}

void CMsgExecuteSqlResponse::Swap(CMsgExecuteSqlResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgExecuteSqlResponse::InternalSwap(CMsgExecuteSqlResponse* other) {
  using std::swap;
  fieldvalue_.InternalSwap(&other->fieldvalue_);
  fieldvaluelen_.InternalSwap(&other->fieldvaluelen_);
  swap(logictype_, other->logictype_);
  swap(sessionid_, other->sessionid_);
  swap(timestamp_, other->timestamp_);
  swap(teamid_, other->teamid_);
  swap(resultcode_, other->resultcode_);
  swap(rowcount_, other->rowcount_);
  swap(colcount_, other->colcount_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgExecuteSqlResponse::GetMetadata() const {
  protobuf_dbmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
