// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dbmessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dbmessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgExecuteSqlRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgExecuteSqlRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgExecuteSqlRequest_Msg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgExecuteSqlResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgExecuteSqlResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgExecuteSqlResponse_Msg_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SQLTYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CALLBACK_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BLOB_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dbmessage_2eproto() {
  protobuf_AddDesc_dbmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dbmessage.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgExecuteSqlRequest_descriptor_ = file->message_type(0);
  static const int CMsgExecuteSqlRequest_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExecuteSqlRequest, logictype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExecuteSqlRequest, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExecuteSqlRequest, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExecuteSqlRequest, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExecuteSqlRequest, sqltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExecuteSqlRequest, callback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExecuteSqlRequest, sql_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExecuteSqlRequest, bufsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExecuteSqlRequest, buffer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExecuteSqlRequest, sqlwhere_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExecuteSqlRequest, outnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExecuteSqlRequest, hasblob_),
  };
  CMsgExecuteSqlRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgExecuteSqlRequest_descriptor_,
      CMsgExecuteSqlRequest::default_instance_,
      CMsgExecuteSqlRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExecuteSqlRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExecuteSqlRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgExecuteSqlRequest));
  CMsgExecuteSqlRequest_Msg_descriptor_ = CMsgExecuteSqlRequest_descriptor_->enum_type(0);
  CMsgExecuteSqlResponse_descriptor_ = file->message_type(1);
  static const int CMsgExecuteSqlResponse_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExecuteSqlResponse, logictype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExecuteSqlResponse, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExecuteSqlResponse, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExecuteSqlResponse, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExecuteSqlResponse, resultcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExecuteSqlResponse, rowcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExecuteSqlResponse, colcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExecuteSqlResponse, fieldvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExecuteSqlResponse, fieldvaluelen_),
  };
  CMsgExecuteSqlResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgExecuteSqlResponse_descriptor_,
      CMsgExecuteSqlResponse::default_instance_,
      CMsgExecuteSqlResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExecuteSqlResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExecuteSqlResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgExecuteSqlResponse));
  CMsgExecuteSqlResponse_Msg_descriptor_ = CMsgExecuteSqlResponse_descriptor_->enum_type(0);
  SQLTYPE_descriptor_ = file->enum_type(0);
  CALLBACK_descriptor_ = file->enum_type(1);
  BLOB_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dbmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgExecuteSqlRequest_descriptor_, &CMsgExecuteSqlRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgExecuteSqlResponse_descriptor_, &CMsgExecuteSqlResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dbmessage_2eproto() {
  delete CMsgExecuteSqlRequest::default_instance_;
  delete CMsgExecuteSqlRequest_reflection_;
  delete CMsgExecuteSqlResponse::default_instance_;
  delete CMsgExecuteSqlResponse_reflection_;
}

void protobuf_AddDesc_dbmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017dbmessage.proto\"\274\002\n\025CMsgExecuteSqlRequ"
    "est\022\021\n\tLogicType\030\001 \001(\r\022\024\n\tSessionID\030\002 \001("
    "\r:\0010\022\024\n\tTimeStamp\030\003 \001(\004:\0010\022\021\n\006TeamID\030\004 \001"
    "(\004:\0010\022!\n\007SqlType\030\005 \001(\0162\010.SQLTYPE:\006SELECT"
    "\022)\n\010Callback\030\006 \001(\0162\t.CALLBACK:\014MUSTCALLB"
    "ACK\022\013\n\003Sql\030\007 \001(\t\022\022\n\007BufSize\030\010 \001(\r:\0010\022\016\n\006"
    "Buffer\030\t \001(\014\022\020\n\010SQLWhere\030\n \001(\t\022\024\n\tOutNum"
    "ber\030\013 \001(\r:\0010\022\026\n\007HasBlob\030\014 \001(\0162\005.BLOB\"\022\n\003"
    "Msg\022\013\n\005MsgID\020\201\200\004\"\336\001\n\026CMsgExecuteSqlRespo"
    "nse\022\021\n\tLogicType\030\001 \001(\r\022\021\n\tSessionID\030\002 \001("
    "\r\022\021\n\tTimeStamp\030\003 \001(\004\022\016\n\006TeamID\030\004 \001(\004\022\022\n\n"
    "ResultCode\030\005 \001(\r\022\023\n\010RowCount\030\006 \001(\r:\0010\022\023\n"
    "\010ColCount\030\007 \001(\r:\0010\022\022\n\nFieldValue\030\010 \003(\014\022\025"
    "\n\rFieldValueLen\030\t \003(\r\"\022\n\003Msg\022\013\n\005MsgID\020\202\200"
    "\004*C\n\007SQLTYPE\022\n\n\006SELECT\020\001\022\n\n\006INSERT\020\002\022\n\n\006"
    "UPDATE\020\003\022\n\n\006DELETE\020\004\022\010\n\004CALL\020\005*-\n\010CALLBA"
    "CK\022\020\n\014MUSTCALLBACK\020\001\022\017\n\013NOTCALLBACK\020\002*!\n"
    "\004BLOB\022\013\n\007HASBLOB\020\001\022\014\n\010NONEBLOB\020\002B\002H\001", 716);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dbmessage.proto", &protobuf_RegisterTypes);
  CMsgExecuteSqlRequest::default_instance_ = new CMsgExecuteSqlRequest();
  CMsgExecuteSqlResponse::default_instance_ = new CMsgExecuteSqlResponse();
  CMsgExecuteSqlRequest::default_instance_->InitAsDefaultInstance();
  CMsgExecuteSqlResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dbmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dbmessage_2eproto {
  StaticDescriptorInitializer_dbmessage_2eproto() {
    protobuf_AddDesc_dbmessage_2eproto();
  }
} static_descriptor_initializer_dbmessage_2eproto_;
const ::google::protobuf::EnumDescriptor* SQLTYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SQLTYPE_descriptor_;
}
bool SQLTYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CALLBACK_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CALLBACK_descriptor_;
}
bool CALLBACK_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BLOB_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BLOB_descriptor_;
}
bool BLOB_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgExecuteSqlRequest_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgExecuteSqlRequest_Msg_descriptor_;
}
bool CMsgExecuteSqlRequest_Msg_IsValid(int value) {
  switch(value) {
    case 65537:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgExecuteSqlRequest_Msg CMsgExecuteSqlRequest::MsgID;
const CMsgExecuteSqlRequest_Msg CMsgExecuteSqlRequest::Msg_MIN;
const CMsgExecuteSqlRequest_Msg CMsgExecuteSqlRequest::Msg_MAX;
const int CMsgExecuteSqlRequest::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgExecuteSqlRequest::kLogicTypeFieldNumber;
const int CMsgExecuteSqlRequest::kSessionIDFieldNumber;
const int CMsgExecuteSqlRequest::kTimeStampFieldNumber;
const int CMsgExecuteSqlRequest::kTeamIDFieldNumber;
const int CMsgExecuteSqlRequest::kSqlTypeFieldNumber;
const int CMsgExecuteSqlRequest::kCallbackFieldNumber;
const int CMsgExecuteSqlRequest::kSqlFieldNumber;
const int CMsgExecuteSqlRequest::kBufSizeFieldNumber;
const int CMsgExecuteSqlRequest::kBufferFieldNumber;
const int CMsgExecuteSqlRequest::kSQLWhereFieldNumber;
const int CMsgExecuteSqlRequest::kOutNumberFieldNumber;
const int CMsgExecuteSqlRequest::kHasBlobFieldNumber;
#endif  // !_MSC_VER

CMsgExecuteSqlRequest::CMsgExecuteSqlRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgExecuteSqlRequest::InitAsDefaultInstance() {
}

CMsgExecuteSqlRequest::CMsgExecuteSqlRequest(const CMsgExecuteSqlRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgExecuteSqlRequest::SharedCtor() {
  _cached_size_ = 0;
  logictype_ = 0u;
  sessionid_ = 0u;
  timestamp_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  sqltype_ = 1;
  callback_ = 1;
  sql_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bufsize_ = 0u;
  buffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sqlwhere_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  outnumber_ = 0u;
  hasblob_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgExecuteSqlRequest::~CMsgExecuteSqlRequest() {
  SharedDtor();
}

void CMsgExecuteSqlRequest::SharedDtor() {
  if (sql_ != &::google::protobuf::internal::kEmptyString) {
    delete sql_;
  }
  if (buffer_ != &::google::protobuf::internal::kEmptyString) {
    delete buffer_;
  }
  if (sqlwhere_ != &::google::protobuf::internal::kEmptyString) {
    delete sqlwhere_;
  }
  if (this != default_instance_) {
  }
}

void CMsgExecuteSqlRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgExecuteSqlRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgExecuteSqlRequest_descriptor_;
}

const CMsgExecuteSqlRequest& CMsgExecuteSqlRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbmessage_2eproto();
  return *default_instance_;
}

CMsgExecuteSqlRequest* CMsgExecuteSqlRequest::default_instance_ = NULL;

CMsgExecuteSqlRequest* CMsgExecuteSqlRequest::New() const {
  return new CMsgExecuteSqlRequest;
}

void CMsgExecuteSqlRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    logictype_ = 0u;
    sessionid_ = 0u;
    timestamp_ = GOOGLE_ULONGLONG(0);
    teamid_ = GOOGLE_ULONGLONG(0);
    sqltype_ = 1;
    callback_ = 1;
    if (has_sql()) {
      if (sql_ != &::google::protobuf::internal::kEmptyString) {
        sql_->clear();
      }
    }
    bufsize_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_buffer()) {
      if (buffer_ != &::google::protobuf::internal::kEmptyString) {
        buffer_->clear();
      }
    }
    if (has_sqlwhere()) {
      if (sqlwhere_ != &::google::protobuf::internal::kEmptyString) {
        sqlwhere_->clear();
      }
    }
    outnumber_ = 0u;
    hasblob_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgExecuteSqlRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 LogicType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logictype_)));
          set_has_logictype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SessionID;
        break;
      }

      // optional uint32 SessionID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SessionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TimeStamp;
        break;
      }

      // optional uint64 TimeStamp = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeStamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_TeamID;
        break;
      }

      // optional uint64 TeamID = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TeamID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_SqlType;
        break;
      }

      // optional .SQLTYPE SqlType = 5 [default = SELECT];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SqlType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SQLTYPE_IsValid(value)) {
            set_sqltype(static_cast< ::SQLTYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Callback;
        break;
      }

      // optional .CALLBACK Callback = 6 [default = MUSTCALLBACK];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Callback:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CALLBACK_IsValid(value)) {
            set_callback(static_cast< ::CALLBACK >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_Sql;
        break;
      }

      // optional string Sql = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Sql:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sql()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sql().data(), this->sql().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_BufSize;
        break;
      }

      // optional uint32 BufSize = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BufSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bufsize_)));
          set_has_bufsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_Buffer;
        break;
      }

      // optional bytes Buffer = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Buffer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_SQLWhere;
        break;
      }

      // optional string SQLWhere = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SQLWhere:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sqlwhere()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sqlwhere().data(), this->sqlwhere().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_OutNumber;
        break;
      }

      // optional uint32 OutNumber = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OutNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &outnumber_)));
          set_has_outnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_HasBlob;
        break;
      }

      // optional .BLOB HasBlob = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HasBlob:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BLOB_IsValid(value)) {
            set_hasblob(static_cast< ::BLOB >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgExecuteSqlRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 LogicType = 1;
  if (has_logictype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->logictype(), output);
  }

  // optional uint32 SessionID = 2 [default = 0];
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sessionid(), output);
  }

  // optional uint64 TimeStamp = 3 [default = 0];
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp(), output);
  }

  // optional uint64 TeamID = 4 [default = 0];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->teamid(), output);
  }

  // optional .SQLTYPE SqlType = 5 [default = SELECT];
  if (has_sqltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->sqltype(), output);
  }

  // optional .CALLBACK Callback = 6 [default = MUSTCALLBACK];
  if (has_callback()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->callback(), output);
  }

  // optional string Sql = 7;
  if (has_sql()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sql().data(), this->sql().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->sql(), output);
  }

  // optional uint32 BufSize = 8 [default = 0];
  if (has_bufsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->bufsize(), output);
  }

  // optional bytes Buffer = 9;
  if (has_buffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->buffer(), output);
  }

  // optional string SQLWhere = 10;
  if (has_sqlwhere()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sqlwhere().data(), this->sqlwhere().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->sqlwhere(), output);
  }

  // optional uint32 OutNumber = 11 [default = 0];
  if (has_outnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->outnumber(), output);
  }

  // optional .BLOB HasBlob = 12;
  if (has_hasblob()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->hasblob(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgExecuteSqlRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 LogicType = 1;
  if (has_logictype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->logictype(), target);
  }

  // optional uint32 SessionID = 2 [default = 0];
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sessionid(), target);
  }

  // optional uint64 TimeStamp = 3 [default = 0];
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp(), target);
  }

  // optional uint64 TeamID = 4 [default = 0];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->teamid(), target);
  }

  // optional .SQLTYPE SqlType = 5 [default = SELECT];
  if (has_sqltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->sqltype(), target);
  }

  // optional .CALLBACK Callback = 6 [default = MUSTCALLBACK];
  if (has_callback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->callback(), target);
  }

  // optional string Sql = 7;
  if (has_sql()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sql().data(), this->sql().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sql(), target);
  }

  // optional uint32 BufSize = 8 [default = 0];
  if (has_bufsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->bufsize(), target);
  }

  // optional bytes Buffer = 9;
  if (has_buffer()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->buffer(), target);
  }

  // optional string SQLWhere = 10;
  if (has_sqlwhere()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sqlwhere().data(), this->sqlwhere().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->sqlwhere(), target);
  }

  // optional uint32 OutNumber = 11 [default = 0];
  if (has_outnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->outnumber(), target);
  }

  // optional .BLOB HasBlob = 12;
  if (has_hasblob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->hasblob(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgExecuteSqlRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LogicType = 1;
    if (has_logictype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logictype());
    }

    // optional uint32 SessionID = 2 [default = 0];
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sessionid());
    }

    // optional uint64 TimeStamp = 3 [default = 0];
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional uint64 TeamID = 4 [default = 0];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional .SQLTYPE SqlType = 5 [default = SELECT];
    if (has_sqltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sqltype());
    }

    // optional .CALLBACK Callback = 6 [default = MUSTCALLBACK];
    if (has_callback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->callback());
    }

    // optional string Sql = 7;
    if (has_sql()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sql());
    }

    // optional uint32 BufSize = 8 [default = 0];
    if (has_bufsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bufsize());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes Buffer = 9;
    if (has_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buffer());
    }

    // optional string SQLWhere = 10;
    if (has_sqlwhere()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sqlwhere());
    }

    // optional uint32 OutNumber = 11 [default = 0];
    if (has_outnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->outnumber());
    }

    // optional .BLOB HasBlob = 12;
    if (has_hasblob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->hasblob());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgExecuteSqlRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgExecuteSqlRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgExecuteSqlRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgExecuteSqlRequest::MergeFrom(const CMsgExecuteSqlRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_logictype()) {
      set_logictype(from.logictype());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_sqltype()) {
      set_sqltype(from.sqltype());
    }
    if (from.has_callback()) {
      set_callback(from.callback());
    }
    if (from.has_sql()) {
      set_sql(from.sql());
    }
    if (from.has_bufsize()) {
      set_bufsize(from.bufsize());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_buffer()) {
      set_buffer(from.buffer());
    }
    if (from.has_sqlwhere()) {
      set_sqlwhere(from.sqlwhere());
    }
    if (from.has_outnumber()) {
      set_outnumber(from.outnumber());
    }
    if (from.has_hasblob()) {
      set_hasblob(from.hasblob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgExecuteSqlRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgExecuteSqlRequest::CopyFrom(const CMsgExecuteSqlRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgExecuteSqlRequest::IsInitialized() const {

  return true;
}

void CMsgExecuteSqlRequest::Swap(CMsgExecuteSqlRequest* other) {
  if (other != this) {
    std::swap(logictype_, other->logictype_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(teamid_, other->teamid_);
    std::swap(sqltype_, other->sqltype_);
    std::swap(callback_, other->callback_);
    std::swap(sql_, other->sql_);
    std::swap(bufsize_, other->bufsize_);
    std::swap(buffer_, other->buffer_);
    std::swap(sqlwhere_, other->sqlwhere_);
    std::swap(outnumber_, other->outnumber_);
    std::swap(hasblob_, other->hasblob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgExecuteSqlRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgExecuteSqlRequest_descriptor_;
  metadata.reflection = CMsgExecuteSqlRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgExecuteSqlResponse_Msg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgExecuteSqlResponse_Msg_descriptor_;
}
bool CMsgExecuteSqlResponse_Msg_IsValid(int value) {
  switch(value) {
    case 65538:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgExecuteSqlResponse_Msg CMsgExecuteSqlResponse::MsgID;
const CMsgExecuteSqlResponse_Msg CMsgExecuteSqlResponse::Msg_MIN;
const CMsgExecuteSqlResponse_Msg CMsgExecuteSqlResponse::Msg_MAX;
const int CMsgExecuteSqlResponse::Msg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgExecuteSqlResponse::kLogicTypeFieldNumber;
const int CMsgExecuteSqlResponse::kSessionIDFieldNumber;
const int CMsgExecuteSqlResponse::kTimeStampFieldNumber;
const int CMsgExecuteSqlResponse::kTeamIDFieldNumber;
const int CMsgExecuteSqlResponse::kResultCodeFieldNumber;
const int CMsgExecuteSqlResponse::kRowCountFieldNumber;
const int CMsgExecuteSqlResponse::kColCountFieldNumber;
const int CMsgExecuteSqlResponse::kFieldValueFieldNumber;
const int CMsgExecuteSqlResponse::kFieldValueLenFieldNumber;
#endif  // !_MSC_VER

CMsgExecuteSqlResponse::CMsgExecuteSqlResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgExecuteSqlResponse::InitAsDefaultInstance() {
}

CMsgExecuteSqlResponse::CMsgExecuteSqlResponse(const CMsgExecuteSqlResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgExecuteSqlResponse::SharedCtor() {
  _cached_size_ = 0;
  logictype_ = 0u;
  sessionid_ = 0u;
  timestamp_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  resultcode_ = 0u;
  rowcount_ = 0u;
  colcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgExecuteSqlResponse::~CMsgExecuteSqlResponse() {
  SharedDtor();
}

void CMsgExecuteSqlResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgExecuteSqlResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgExecuteSqlResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgExecuteSqlResponse_descriptor_;
}

const CMsgExecuteSqlResponse& CMsgExecuteSqlResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbmessage_2eproto();
  return *default_instance_;
}

CMsgExecuteSqlResponse* CMsgExecuteSqlResponse::default_instance_ = NULL;

CMsgExecuteSqlResponse* CMsgExecuteSqlResponse::New() const {
  return new CMsgExecuteSqlResponse;
}

void CMsgExecuteSqlResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    logictype_ = 0u;
    sessionid_ = 0u;
    timestamp_ = GOOGLE_ULONGLONG(0);
    teamid_ = GOOGLE_ULONGLONG(0);
    resultcode_ = 0u;
    rowcount_ = 0u;
    colcount_ = 0u;
  }
  fieldvalue_.Clear();
  fieldvaluelen_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgExecuteSqlResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 LogicType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logictype_)));
          set_has_logictype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SessionID;
        break;
      }

      // optional uint32 SessionID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SessionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TimeStamp;
        break;
      }

      // optional uint64 TimeStamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeStamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_TeamID;
        break;
      }

      // optional uint64 TeamID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TeamID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ResultCode;
        break;
      }

      // optional uint32 ResultCode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ResultCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resultcode_)));
          set_has_resultcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_RowCount;
        break;
      }

      // optional uint32 RowCount = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RowCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rowcount_)));
          set_has_rowcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ColCount;
        break;
      }

      // optional uint32 ColCount = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ColCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &colcount_)));
          set_has_colcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_FieldValue;
        break;
      }

      // repeated bytes FieldValue = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FieldValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_fieldvalue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_FieldValue;
        if (input->ExpectTag(72)) goto parse_FieldValueLen;
        break;
      }

      // repeated uint32 FieldValueLen = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FieldValueLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_fieldvaluelen())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_fieldvaluelen())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_FieldValueLen;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgExecuteSqlResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 LogicType = 1;
  if (has_logictype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->logictype(), output);
  }

  // optional uint32 SessionID = 2;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sessionid(), output);
  }

  // optional uint64 TimeStamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp(), output);
  }

  // optional uint64 TeamID = 4;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->teamid(), output);
  }

  // optional uint32 ResultCode = 5;
  if (has_resultcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->resultcode(), output);
  }

  // optional uint32 RowCount = 6 [default = 0];
  if (has_rowcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->rowcount(), output);
  }

  // optional uint32 ColCount = 7 [default = 0];
  if (has_colcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->colcount(), output);
  }

  // repeated bytes FieldValue = 8;
  for (int i = 0; i < this->fieldvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->fieldvalue(i), output);
  }

  // repeated uint32 FieldValueLen = 9;
  for (int i = 0; i < this->fieldvaluelen_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->fieldvaluelen(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgExecuteSqlResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 LogicType = 1;
  if (has_logictype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->logictype(), target);
  }

  // optional uint32 SessionID = 2;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sessionid(), target);
  }

  // optional uint64 TimeStamp = 3;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp(), target);
  }

  // optional uint64 TeamID = 4;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->teamid(), target);
  }

  // optional uint32 ResultCode = 5;
  if (has_resultcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->resultcode(), target);
  }

  // optional uint32 RowCount = 6 [default = 0];
  if (has_rowcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->rowcount(), target);
  }

  // optional uint32 ColCount = 7 [default = 0];
  if (has_colcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->colcount(), target);
  }

  // repeated bytes FieldValue = 8;
  for (int i = 0; i < this->fieldvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(8, this->fieldvalue(i), target);
  }

  // repeated uint32 FieldValueLen = 9;
  for (int i = 0; i < this->fieldvaluelen_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->fieldvaluelen(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgExecuteSqlResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LogicType = 1;
    if (has_logictype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logictype());
    }

    // optional uint32 SessionID = 2;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sessionid());
    }

    // optional uint64 TimeStamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional uint64 TeamID = 4;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint32 ResultCode = 5;
    if (has_resultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resultcode());
    }

    // optional uint32 RowCount = 6 [default = 0];
    if (has_rowcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rowcount());
    }

    // optional uint32 ColCount = 7 [default = 0];
    if (has_colcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->colcount());
    }

  }
  // repeated bytes FieldValue = 8;
  total_size += 1 * this->fieldvalue_size();
  for (int i = 0; i < this->fieldvalue_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->fieldvalue(i));
  }

  // repeated uint32 FieldValueLen = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->fieldvaluelen_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->fieldvaluelen(i));
    }
    total_size += 1 * this->fieldvaluelen_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgExecuteSqlResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgExecuteSqlResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgExecuteSqlResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgExecuteSqlResponse::MergeFrom(const CMsgExecuteSqlResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  fieldvalue_.MergeFrom(from.fieldvalue_);
  fieldvaluelen_.MergeFrom(from.fieldvaluelen_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_logictype()) {
      set_logictype(from.logictype());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_resultcode()) {
      set_resultcode(from.resultcode());
    }
    if (from.has_rowcount()) {
      set_rowcount(from.rowcount());
    }
    if (from.has_colcount()) {
      set_colcount(from.colcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgExecuteSqlResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgExecuteSqlResponse::CopyFrom(const CMsgExecuteSqlResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgExecuteSqlResponse::IsInitialized() const {

  return true;
}

void CMsgExecuteSqlResponse::Swap(CMsgExecuteSqlResponse* other) {
  if (other != this) {
    std::swap(logictype_, other->logictype_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(teamid_, other->teamid_);
    std::swap(resultcode_, other->resultcode_);
    std::swap(rowcount_, other->rowcount_);
    std::swap(colcount_, other->colcount_);
    fieldvalue_.Swap(&other->fieldvalue_);
    fieldvaluelen_.Swap(&other->fieldvaluelen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgExecuteSqlResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgExecuteSqlResponse_descriptor_;
  metadata.reflection = CMsgExecuteSqlResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
