// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dbmessage.proto

#include "dbmessage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CMsgExecuteSqlRequest::CMsgExecuteSqlRequest(
    ::_pbi::ConstantInitialized)
  : sql_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , buffer_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , sqlwhere_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , logictype_(0u)
  , sessionid_(0u)
  , timestamp_(uint64_t{0u})
  , teamid_(uint64_t{0u})
  , bufsize_(0u)
  , outnumber_(0u)
  , hasblob_(1)

  , sqltype_(1)

  , callback_(1)
{}
struct CMsgExecuteSqlRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgExecuteSqlRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgExecuteSqlRequestDefaultTypeInternal() {}
  union {
    CMsgExecuteSqlRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgExecuteSqlRequestDefaultTypeInternal _CMsgExecuteSqlRequest_default_instance_;
PROTOBUF_CONSTEXPR CMsgExecuteSqlResponse::CMsgExecuteSqlResponse(
    ::_pbi::ConstantInitialized)
  : fieldvalue_()
  , fieldvaluelen_()
  , logictype_(0u)
  , sessionid_(0u)
  , timestamp_(uint64_t{0u})
  , teamid_(uint64_t{0u})
  , resultcode_(0u)
  , rowcount_(0u)
  , colcount_(0u){}
struct CMsgExecuteSqlResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgExecuteSqlResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgExecuteSqlResponseDefaultTypeInternal() {}
  union {
    CMsgExecuteSqlResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgExecuteSqlResponseDefaultTypeInternal _CMsgExecuteSqlResponse_default_instance_;
static ::_pb::Metadata file_level_metadata_dbmessage_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_dbmessage_2eproto[5];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dbmessage_2eproto = nullptr;

const uint32_t TableStruct_dbmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlRequest, logictype_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlRequest, sessionid_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlRequest, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlRequest, teamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlRequest, sqltype_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlRequest, callback_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlRequest, sql_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlRequest, bufsize_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlRequest, buffer_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlRequest, sqlwhere_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlRequest, outnumber_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlRequest, hasblob_),
  3,
  4,
  5,
  6,
  10,
  11,
  0,
  7,
  1,
  2,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlResponse, logictype_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlResponse, sessionid_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlResponse, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlResponse, teamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlResponse, resultcode_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlResponse, rowcount_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlResponse, colcount_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlResponse, fieldvalue_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteSqlResponse, fieldvaluelen_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, -1, sizeof(::CMsgExecuteSqlRequest)},
  { 30, 45, -1, sizeof(::CMsgExecuteSqlResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CMsgExecuteSqlRequest_default_instance_._instance,
  &::_CMsgExecuteSqlResponse_default_instance_._instance,
};

const char descriptor_table_protodef_dbmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017dbmessage.proto\"\273\002\n\025CMsgExecuteSqlRequ"
  "est\022\021\n\tLogicType\030\001 \001(\r\022\024\n\tSessionID\030\002 \001("
  "\r:\0010\022\024\n\tTimeStamp\030\003 \001(\004:\0010\022\021\n\006TeamID\030\004 \001"
  "(\004:\0010\022!\n\007SqlType\030\005 \001(\0162\010.SQLTYPE:\006SELECT"
  "\022)\n\010Callback\030\006 \001(\0162\t.CALLBACK:\014MUSTCALLB"
  "ACK\022\013\n\003Sql\030\007 \001(\t\022\022\n\007BufSize\030\010 \001(\r:\0010\022\016\n\006"
  "Buffer\030\t \001(\014\022\020\n\010SQLWhere\030\n \001(\t\022\024\n\tOutNum"
  "ber\030\013 \001(\r:\0010\022\026\n\007HasBlob\030\014 \001(\0162\005.BLOB\"\021\n\003"
  "Msg\022\n\n\005MsgID\020\221N\"\335\001\n\026CMsgExecuteSqlRespon"
  "se\022\021\n\tLogicType\030\001 \001(\r\022\021\n\tSessionID\030\002 \001(\r"
  "\022\021\n\tTimeStamp\030\003 \001(\004\022\016\n\006TeamID\030\004 \001(\004\022\022\n\nR"
  "esultCode\030\005 \001(\r\022\023\n\010RowCount\030\006 \001(\r:\0010\022\023\n\010"
  "ColCount\030\007 \001(\r:\0010\022\022\n\nFieldValue\030\010 \003(\014\022\025\n"
  "\rFieldValueLen\030\t \003(\r\"\021\n\003Msg\022\n\n\005MsgID\020\222N*"
  "C\n\007SQLTYPE\022\n\n\006SELECT\020\001\022\n\n\006INSERT\020\002\022\n\n\006UP"
  "DATE\020\003\022\n\n\006DELETE\020\004\022\010\n\004CALL\020\005*-\n\010CALLBACK"
  "\022\020\n\014MUSTCALLBACK\020\001\022\017\n\013NOTCALLBACK\020\002*!\n\004B"
  "LOB\022\013\n\007HASBLOB\020\001\022\014\n\010NONEBLOB\020\002B\002H\001"
  ;
static ::_pbi::once_flag descriptor_table_dbmessage_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dbmessage_2eproto = {
    false, false, 714, descriptor_table_protodef_dbmessage_2eproto,
    "dbmessage.proto",
    &descriptor_table_dbmessage_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_dbmessage_2eproto::offsets,
    file_level_metadata_dbmessage_2eproto, file_level_enum_descriptors_dbmessage_2eproto,
    file_level_service_descriptors_dbmessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dbmessage_2eproto_getter() {
  return &descriptor_table_dbmessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dbmessage_2eproto(&descriptor_table_dbmessage_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgExecuteSqlRequest_Msg_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dbmessage_2eproto);
  return file_level_enum_descriptors_dbmessage_2eproto[0];
}
bool CMsgExecuteSqlRequest_Msg_IsValid(int value) {
  switch (value) {
    case 10001:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgExecuteSqlRequest_Msg CMsgExecuteSqlRequest::MsgID;
constexpr CMsgExecuteSqlRequest_Msg CMsgExecuteSqlRequest::Msg_MIN;
constexpr CMsgExecuteSqlRequest_Msg CMsgExecuteSqlRequest::Msg_MAX;
constexpr int CMsgExecuteSqlRequest::Msg_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgExecuteSqlResponse_Msg_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dbmessage_2eproto);
  return file_level_enum_descriptors_dbmessage_2eproto[1];
}
bool CMsgExecuteSqlResponse_Msg_IsValid(int value) {
  switch (value) {
    case 10002:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgExecuteSqlResponse_Msg CMsgExecuteSqlResponse::MsgID;
constexpr CMsgExecuteSqlResponse_Msg CMsgExecuteSqlResponse::Msg_MIN;
constexpr CMsgExecuteSqlResponse_Msg CMsgExecuteSqlResponse::Msg_MAX;
constexpr int CMsgExecuteSqlResponse::Msg_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SQLTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dbmessage_2eproto);
  return file_level_enum_descriptors_dbmessage_2eproto[2];
}
bool SQLTYPE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CALLBACK_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dbmessage_2eproto);
  return file_level_enum_descriptors_dbmessage_2eproto[3];
}
bool CALLBACK_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BLOB_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dbmessage_2eproto);
  return file_level_enum_descriptors_dbmessage_2eproto[4];
}
bool BLOB_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgExecuteSqlRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgExecuteSqlRequest>()._has_bits_);
  static void set_has_logictype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sessionid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_teamid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sqltype(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_callback(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_sql(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bufsize(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sqlwhere(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_outnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_hasblob(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

CMsgExecuteSqlRequest::CMsgExecuteSqlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:CMsgExecuteSqlRequest)
}
CMsgExecuteSqlRequest::CMsgExecuteSqlRequest(const CMsgExecuteSqlRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sql_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sql_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sql()) {
    sql_.Set(from._internal_sql(), 
      GetArenaForAllocation());
  }
  buffer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    buffer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_buffer()) {
    buffer_.Set(from._internal_buffer(), 
      GetArenaForAllocation());
  }
  sqlwhere_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sqlwhere_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sqlwhere()) {
    sqlwhere_.Set(from._internal_sqlwhere(), 
      GetArenaForAllocation());
  }
  ::memcpy(&logictype_, &from.logictype_,
    static_cast<size_t>(reinterpret_cast<char*>(&callback_) -
    reinterpret_cast<char*>(&logictype_)) + sizeof(callback_));
  // @@protoc_insertion_point(copy_constructor:CMsgExecuteSqlRequest)
}

inline void CMsgExecuteSqlRequest::SharedCtor() {
sql_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sql_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
buffer_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  buffer_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sqlwhere_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sqlwhere_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&logictype_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&outnumber_) -
    reinterpret_cast<char*>(&logictype_)) + sizeof(outnumber_));
hasblob_ = 1;
sqltype_ = 1;
callback_ = 1;
}

CMsgExecuteSqlRequest::~CMsgExecuteSqlRequest() {
  // @@protoc_insertion_point(destructor:CMsgExecuteSqlRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgExecuteSqlRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sql_.Destroy();
  buffer_.Destroy();
  sqlwhere_.Destroy();
}

void CMsgExecuteSqlRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgExecuteSqlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgExecuteSqlRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      sql_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      buffer_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      sqlwhere_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&logictype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bufsize_) -
        reinterpret_cast<char*>(&logictype_)) + sizeof(bufsize_));
  }
  if (cached_has_bits & 0x00000f00u) {
    outnumber_ = 0u;
    hasblob_ = 1;
    sqltype_ = 1;
    callback_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgExecuteSqlRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 LogicType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_logictype(&has_bits);
          logictype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 SessionID = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sessionid(&has_bits);
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 TimeStamp = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 TeamID = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_teamid(&has_bits);
          teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SQLTYPE SqlType = 5 [default = SELECT];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SQLTYPE_IsValid(val))) {
            _internal_set_sqltype(static_cast<::SQLTYPE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .CALLBACK Callback = 6 [default = MUSTCALLBACK];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CALLBACK_IsValid(val))) {
            _internal_set_callback(static_cast<::CALLBACK>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string Sql = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_sql();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgExecuteSqlRequest.Sql");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 BufSize = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_bufsize(&has_bits);
          bufsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes Buffer = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_buffer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string SQLWhere = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_sqlwhere();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgExecuteSqlRequest.SQLWhere");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 OutNumber = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_outnumber(&has_bits);
          outnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .BLOB HasBlob = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::BLOB_IsValid(val))) {
            _internal_set_hasblob(static_cast<::BLOB>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgExecuteSqlRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgExecuteSqlRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 LogicType = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_logictype(), target);
  }

  // optional uint32 SessionID = 2 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sessionid(), target);
  }

  // optional uint64 TimeStamp = 3 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_timestamp(), target);
  }

  // optional uint64 TeamID = 4 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_teamid(), target);
  }

  // optional .SQLTYPE SqlType = 5 [default = SELECT];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_sqltype(), target);
  }

  // optional .CALLBACK Callback = 6 [default = MUSTCALLBACK];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_callback(), target);
  }

  // optional string Sql = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sql().data(), static_cast<int>(this->_internal_sql().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgExecuteSqlRequest.Sql");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_sql(), target);
  }

  // optional uint32 BufSize = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_bufsize(), target);
  }

  // optional bytes Buffer = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_buffer(), target);
  }

  // optional string SQLWhere = 10;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sqlwhere().data(), static_cast<int>(this->_internal_sqlwhere().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgExecuteSqlRequest.SQLWhere");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_sqlwhere(), target);
  }

  // optional uint32 OutNumber = 11 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_outnumber(), target);
  }

  // optional .BLOB HasBlob = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_hasblob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgExecuteSqlRequest)
  return target;
}

size_t CMsgExecuteSqlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgExecuteSqlRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string Sql = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sql());
    }

    // optional bytes Buffer = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_buffer());
    }

    // optional string SQLWhere = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sqlwhere());
    }

    // optional uint32 LogicType = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_logictype());
    }

    // optional uint32 SessionID = 2 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sessionid());
    }

    // optional uint64 TimeStamp = 3 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
    }

    // optional uint64 TeamID = 4 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_teamid());
    }

    // optional uint32 BufSize = 8 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bufsize());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint32 OutNumber = 11 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_outnumber());
    }

    // optional .BLOB HasBlob = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_hasblob());
    }

    // optional .SQLTYPE SqlType = 5 [default = SELECT];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_sqltype());
    }

    // optional .CALLBACK Callback = 6 [default = MUSTCALLBACK];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_callback());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgExecuteSqlRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgExecuteSqlRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgExecuteSqlRequest::GetClassData() const { return &_class_data_; }

void CMsgExecuteSqlRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgExecuteSqlRequest *>(to)->MergeFrom(
      static_cast<const CMsgExecuteSqlRequest &>(from));
}


void CMsgExecuteSqlRequest::MergeFrom(const CMsgExecuteSqlRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgExecuteSqlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sql(from._internal_sql());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_buffer(from._internal_buffer());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_sqlwhere(from._internal_sqlwhere());
    }
    if (cached_has_bits & 0x00000008u) {
      logictype_ = from.logictype_;
    }
    if (cached_has_bits & 0x00000010u) {
      sessionid_ = from.sessionid_;
    }
    if (cached_has_bits & 0x00000020u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      teamid_ = from.teamid_;
    }
    if (cached_has_bits & 0x00000080u) {
      bufsize_ = from.bufsize_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      outnumber_ = from.outnumber_;
    }
    if (cached_has_bits & 0x00000200u) {
      hasblob_ = from.hasblob_;
    }
    if (cached_has_bits & 0x00000400u) {
      sqltype_ = from.sqltype_;
    }
    if (cached_has_bits & 0x00000800u) {
      callback_ = from.callback_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgExecuteSqlRequest::CopyFrom(const CMsgExecuteSqlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgExecuteSqlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgExecuteSqlRequest::IsInitialized() const {
  return true;
}

void CMsgExecuteSqlRequest::InternalSwap(CMsgExecuteSqlRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &sql_, lhs_arena,
      &other->sql_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &buffer_, lhs_arena,
      &other->buffer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &sqlwhere_, lhs_arena,
      &other->sqlwhere_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgExecuteSqlRequest, outnumber_)
      + sizeof(CMsgExecuteSqlRequest::outnumber_)
      - PROTOBUF_FIELD_OFFSET(CMsgExecuteSqlRequest, logictype_)>(
          reinterpret_cast<char*>(&logictype_),
          reinterpret_cast<char*>(&other->logictype_));
  swap(hasblob_, other->hasblob_);
  swap(sqltype_, other->sqltype_);
  swap(callback_, other->callback_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgExecuteSqlRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dbmessage_2eproto_getter, &descriptor_table_dbmessage_2eproto_once,
      file_level_metadata_dbmessage_2eproto[0]);
}

// ===================================================================

class CMsgExecuteSqlResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgExecuteSqlResponse>()._has_bits_);
  static void set_has_logictype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sessionid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_teamid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_resultcode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rowcount(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_colcount(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgExecuteSqlResponse::CMsgExecuteSqlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  fieldvalue_(arena),
  fieldvaluelen_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:CMsgExecuteSqlResponse)
}
CMsgExecuteSqlResponse::CMsgExecuteSqlResponse(const CMsgExecuteSqlResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      fieldvalue_(from.fieldvalue_),
      fieldvaluelen_(from.fieldvaluelen_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&logictype_, &from.logictype_,
    static_cast<size_t>(reinterpret_cast<char*>(&colcount_) -
    reinterpret_cast<char*>(&logictype_)) + sizeof(colcount_));
  // @@protoc_insertion_point(copy_constructor:CMsgExecuteSqlResponse)
}

inline void CMsgExecuteSqlResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&logictype_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&colcount_) -
    reinterpret_cast<char*>(&logictype_)) + sizeof(colcount_));
}

CMsgExecuteSqlResponse::~CMsgExecuteSqlResponse() {
  // @@protoc_insertion_point(destructor:CMsgExecuteSqlResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgExecuteSqlResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgExecuteSqlResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgExecuteSqlResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgExecuteSqlResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fieldvalue_.Clear();
  fieldvaluelen_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&logictype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&colcount_) -
        reinterpret_cast<char*>(&logictype_)) + sizeof(colcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgExecuteSqlResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 LogicType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_logictype(&has_bits);
          logictype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 SessionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sessionid(&has_bits);
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 TimeStamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 TeamID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_teamid(&has_bits);
          teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ResultCode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_resultcode(&has_bits);
          resultcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 RowCount = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_rowcount(&has_bits);
          rowcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ColCount = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_colcount(&has_bits);
          colcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes FieldValue = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_fieldvalue();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 FieldValueLen = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_fieldvaluelen(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<uint8_t>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_fieldvaluelen(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgExecuteSqlResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgExecuteSqlResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 LogicType = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_logictype(), target);
  }

  // optional uint32 SessionID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sessionid(), target);
  }

  // optional uint64 TimeStamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_timestamp(), target);
  }

  // optional uint64 TeamID = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_teamid(), target);
  }

  // optional uint32 ResultCode = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_resultcode(), target);
  }

  // optional uint32 RowCount = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_rowcount(), target);
  }

  // optional uint32 ColCount = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_colcount(), target);
  }

  // repeated bytes FieldValue = 8;
  for (int i = 0, n = this->_internal_fieldvalue_size(); i < n; i++) {
    const auto& s = this->_internal_fieldvalue(i);
    target = stream->WriteBytes(8, s, target);
  }

  // repeated uint32 FieldValueLen = 9;
  for (int i = 0, n = this->_internal_fieldvaluelen_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_fieldvaluelen(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgExecuteSqlResponse)
  return target;
}

size_t CMsgExecuteSqlResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgExecuteSqlResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes FieldValue = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(fieldvalue_.size());
  for (int i = 0, n = fieldvalue_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      fieldvalue_.Get(i));
  }

  // repeated uint32 FieldValueLen = 9;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->fieldvaluelen_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_fieldvaluelen_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 LogicType = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_logictype());
    }

    // optional uint32 SessionID = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sessionid());
    }

    // optional uint64 TimeStamp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
    }

    // optional uint64 TeamID = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_teamid());
    }

    // optional uint32 ResultCode = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_resultcode());
    }

    // optional uint32 RowCount = 6 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rowcount());
    }

    // optional uint32 ColCount = 7 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_colcount());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgExecuteSqlResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgExecuteSqlResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgExecuteSqlResponse::GetClassData() const { return &_class_data_; }

void CMsgExecuteSqlResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgExecuteSqlResponse *>(to)->MergeFrom(
      static_cast<const CMsgExecuteSqlResponse &>(from));
}


void CMsgExecuteSqlResponse::MergeFrom(const CMsgExecuteSqlResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgExecuteSqlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  fieldvalue_.MergeFrom(from.fieldvalue_);
  fieldvaluelen_.MergeFrom(from.fieldvaluelen_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      logictype_ = from.logictype_;
    }
    if (cached_has_bits & 0x00000002u) {
      sessionid_ = from.sessionid_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      teamid_ = from.teamid_;
    }
    if (cached_has_bits & 0x00000010u) {
      resultcode_ = from.resultcode_;
    }
    if (cached_has_bits & 0x00000020u) {
      rowcount_ = from.rowcount_;
    }
    if (cached_has_bits & 0x00000040u) {
      colcount_ = from.colcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgExecuteSqlResponse::CopyFrom(const CMsgExecuteSqlResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgExecuteSqlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgExecuteSqlResponse::IsInitialized() const {
  return true;
}

void CMsgExecuteSqlResponse::InternalSwap(CMsgExecuteSqlResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fieldvalue_.InternalSwap(&other->fieldvalue_);
  fieldvaluelen_.InternalSwap(&other->fieldvaluelen_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgExecuteSqlResponse, colcount_)
      + sizeof(CMsgExecuteSqlResponse::colcount_)
      - PROTOBUF_FIELD_OFFSET(CMsgExecuteSqlResponse, logictype_)>(
          reinterpret_cast<char*>(&logictype_),
          reinterpret_cast<char*>(&other->logictype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgExecuteSqlResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dbmessage_2eproto_getter, &descriptor_table_dbmessage_2eproto_once,
      file_level_metadata_dbmessage_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgExecuteSqlRequest*
Arena::CreateMaybeMessage< ::CMsgExecuteSqlRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgExecuteSqlRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgExecuteSqlResponse*
Arena::CreateMaybeMessage< ::CMsgExecuteSqlResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgExecuteSqlResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
