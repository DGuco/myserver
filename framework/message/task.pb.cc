// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "task.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace slg {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* TaskDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScoreDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScoreDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* BarTaskDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BarTaskDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* BarInfoDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BarInfoDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReceiveTaskRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiveTaskRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReceiveTaskResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiveTaskResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignRewardRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignRewardRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignRewardResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignRewardResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* OnlineRewardRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnlineRewardRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* OnlineRewardResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnlineRewardResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReceiveBarTaskRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiveBarTaskRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReceiveBarTaskResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiveBarTaskResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReceiveaAgeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiveaAgeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReceiveAgeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiveAgeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* AchievementPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AchievementPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* MainPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MainPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScorePush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScorePush_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignInfoPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignInfoPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* OnlineInfoPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnlineInfoPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* MissionBarPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MissionBarPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgeRewardPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgeRewardPush_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TaskCommandId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TaskPushId_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_task_2eproto() {
  protobuf_AddDesc_task_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "task.proto");
  GOOGLE_CHECK(file != NULL);
  TaskDTO_descriptor_ = file->message_type(0);
  static const int TaskDTO_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDTO, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDTO, current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDTO, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDTO, isreceived_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDTO, star_),
  };
  TaskDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskDTO_descriptor_,
      TaskDTO::default_instance_,
      TaskDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskDTO));
  ScoreDTO_descriptor_ = file->message_type(1);
  static const int ScoreDTO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreDTO, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreDTO, isreceived_),
  };
  ScoreDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScoreDTO_descriptor_,
      ScoreDTO::default_instance_,
      ScoreDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScoreDTO));
  BarTaskDTO_descriptor_ = file->message_type(2);
  static const int BarTaskDTO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarTaskDTO, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarTaskDTO, quality_),
  };
  BarTaskDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BarTaskDTO_descriptor_,
      BarTaskDTO::default_instance_,
      BarTaskDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarTaskDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarTaskDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BarTaskDTO));
  BarInfoDTO_descriptor_ = file->message_type(3);
  static const int BarInfoDTO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarInfoDTO, tasklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarInfoDTO, reftime_),
  };
  BarInfoDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BarInfoDTO_descriptor_,
      BarInfoDTO::default_instance_,
      BarInfoDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarInfoDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarInfoDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BarInfoDTO));
  ReceiveTaskRequest_descriptor_ = file->message_type(4);
  static const int ReceiveTaskRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveTaskRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveTaskRequest, id_),
  };
  ReceiveTaskRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReceiveTaskRequest_descriptor_,
      ReceiveTaskRequest::default_instance_,
      ReceiveTaskRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveTaskRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveTaskRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReceiveTaskRequest));
  ReceiveTaskResponse_descriptor_ = file->message_type(5);
  static const int ReceiveTaskResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveTaskResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveTaskResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveTaskResponse, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveTaskResponse, items_),
  };
  ReceiveTaskResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReceiveTaskResponse_descriptor_,
      ReceiveTaskResponse::default_instance_,
      ReceiveTaskResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveTaskResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveTaskResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReceiveTaskResponse));
  SignRewardRequest_descriptor_ = file->message_type(6);
  static const int SignRewardRequest_offsets_[1] = {
  };
  SignRewardRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignRewardRequest_descriptor_,
      SignRewardRequest::default_instance_,
      SignRewardRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignRewardRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignRewardRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignRewardRequest));
  SignRewardResponse_descriptor_ = file->message_type(7);
  static const int SignRewardResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignRewardResponse, reward_),
  };
  SignRewardResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignRewardResponse_descriptor_,
      SignRewardResponse::default_instance_,
      SignRewardResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignRewardResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignRewardResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignRewardResponse));
  OnlineRewardRequest_descriptor_ = file->message_type(8);
  static const int OnlineRewardRequest_offsets_[1] = {
  };
  OnlineRewardRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnlineRewardRequest_descriptor_,
      OnlineRewardRequest::default_instance_,
      OnlineRewardRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineRewardRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineRewardRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnlineRewardRequest));
  OnlineRewardResponse_descriptor_ = file->message_type(9);
  static const int OnlineRewardResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineRewardResponse, reward_),
  };
  OnlineRewardResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnlineRewardResponse_descriptor_,
      OnlineRewardResponse::default_instance_,
      OnlineRewardResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineRewardResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineRewardResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnlineRewardResponse));
  ReceiveBarTaskRequest_descriptor_ = file->message_type(10);
  static const int ReceiveBarTaskRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveBarTaskRequest, task_),
  };
  ReceiveBarTaskRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReceiveBarTaskRequest_descriptor_,
      ReceiveBarTaskRequest::default_instance_,
      ReceiveBarTaskRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveBarTaskRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveBarTaskRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReceiveBarTaskRequest));
  ReceiveBarTaskResponse_descriptor_ = file->message_type(11);
  static const int ReceiveBarTaskResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveBarTaskResponse, oldtask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveBarTaskResponse, newtask_),
  };
  ReceiveBarTaskResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReceiveBarTaskResponse_descriptor_,
      ReceiveBarTaskResponse::default_instance_,
      ReceiveBarTaskResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveBarTaskResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveBarTaskResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReceiveBarTaskResponse));
  ReceiveaAgeRequest_descriptor_ = file->message_type(12);
  static const int ReceiveaAgeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveaAgeRequest, level_),
  };
  ReceiveaAgeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReceiveaAgeRequest_descriptor_,
      ReceiveaAgeRequest::default_instance_,
      ReceiveaAgeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveaAgeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveaAgeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReceiveaAgeRequest));
  ReceiveAgeResponse_descriptor_ = file->message_type(13);
  static const int ReceiveAgeResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveAgeResponse, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveAgeResponse, reward_),
  };
  ReceiveAgeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReceiveAgeResponse_descriptor_,
      ReceiveAgeResponse::default_instance_,
      ReceiveAgeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveAgeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveAgeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReceiveAgeResponse));
  DailyPush_descriptor_ = file->message_type(14);
  static const int DailyPush_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyPush, tasklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyPush, score_),
  };
  DailyPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyPush_descriptor_,
      DailyPush::default_instance_,
      DailyPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyPush));
  AchievementPush_descriptor_ = file->message_type(15);
  static const int AchievementPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementPush, tasklist_),
  };
  AchievementPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AchievementPush_descriptor_,
      AchievementPush::default_instance_,
      AchievementPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AchievementPush));
  MainPush_descriptor_ = file->message_type(16);
  static const int MainPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainPush, task_),
  };
  MainPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MainPush_descriptor_,
      MainPush::default_instance_,
      MainPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MainPush));
  ScorePush_descriptor_ = file->message_type(17);
  static const int ScorePush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScorePush, scorelist_),
  };
  ScorePush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScorePush_descriptor_,
      ScorePush::default_instance_,
      ScorePush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScorePush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScorePush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScorePush));
  SignInfoPush_descriptor_ = file->message_type(18);
  static const int SignInfoPush_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInfoPush, signed__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInfoPush, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInfoPush, reward_),
  };
  SignInfoPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignInfoPush_descriptor_,
      SignInfoPush::default_instance_,
      SignInfoPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInfoPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInfoPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignInfoPush));
  OnlineInfoPush_descriptor_ = file->message_type(19);
  static const int OnlineInfoPush_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineInfoPush, lastrecvtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineInfoPush, nextrecvtime_),
  };
  OnlineInfoPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnlineInfoPush_descriptor_,
      OnlineInfoPush::default_instance_,
      OnlineInfoPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineInfoPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineInfoPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnlineInfoPush));
  MissionBarPush_descriptor_ = file->message_type(20);
  static const int MissionBarPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionBarPush, barinfo_),
  };
  MissionBarPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MissionBarPush_descriptor_,
      MissionBarPush::default_instance_,
      MissionBarPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionBarPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionBarPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MissionBarPush));
  AgeRewardPush_descriptor_ = file->message_type(21);
  static const int AgeRewardPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgeRewardPush, receivelevel_),
  };
  AgeRewardPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgeRewardPush_descriptor_,
      AgeRewardPush::default_instance_,
      AgeRewardPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgeRewardPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgeRewardPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgeRewardPush));
  TaskCommandId_descriptor_ = file->enum_type(0);
  TaskPushId_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_task_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskDTO_descriptor_, &TaskDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScoreDTO_descriptor_, &ScoreDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BarTaskDTO_descriptor_, &BarTaskDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BarInfoDTO_descriptor_, &BarInfoDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReceiveTaskRequest_descriptor_, &ReceiveTaskRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReceiveTaskResponse_descriptor_, &ReceiveTaskResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignRewardRequest_descriptor_, &SignRewardRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignRewardResponse_descriptor_, &SignRewardResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnlineRewardRequest_descriptor_, &OnlineRewardRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnlineRewardResponse_descriptor_, &OnlineRewardResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReceiveBarTaskRequest_descriptor_, &ReceiveBarTaskRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReceiveBarTaskResponse_descriptor_, &ReceiveBarTaskResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReceiveaAgeRequest_descriptor_, &ReceiveaAgeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReceiveAgeResponse_descriptor_, &ReceiveAgeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyPush_descriptor_, &DailyPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AchievementPush_descriptor_, &AchievementPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MainPush_descriptor_, &MainPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScorePush_descriptor_, &ScorePush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignInfoPush_descriptor_, &SignInfoPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnlineInfoPush_descriptor_, &OnlineInfoPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MissionBarPush_descriptor_, &MissionBarPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgeRewardPush_descriptor_, &AgeRewardPush::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_task_2eproto() {
  delete TaskDTO::default_instance_;
  delete TaskDTO_reflection_;
  delete ScoreDTO::default_instance_;
  delete ScoreDTO_reflection_;
  delete BarTaskDTO::default_instance_;
  delete BarTaskDTO_reflection_;
  delete BarInfoDTO::default_instance_;
  delete BarInfoDTO_reflection_;
  delete ReceiveTaskRequest::default_instance_;
  delete ReceiveTaskRequest_reflection_;
  delete ReceiveTaskResponse::default_instance_;
  delete ReceiveTaskResponse_reflection_;
  delete SignRewardRequest::default_instance_;
  delete SignRewardRequest_reflection_;
  delete SignRewardResponse::default_instance_;
  delete SignRewardResponse_reflection_;
  delete OnlineRewardRequest::default_instance_;
  delete OnlineRewardRequest_reflection_;
  delete OnlineRewardResponse::default_instance_;
  delete OnlineRewardResponse_reflection_;
  delete ReceiveBarTaskRequest::default_instance_;
  delete ReceiveBarTaskRequest_reflection_;
  delete ReceiveBarTaskResponse::default_instance_;
  delete ReceiveBarTaskResponse_reflection_;
  delete ReceiveaAgeRequest::default_instance_;
  delete ReceiveaAgeRequest_reflection_;
  delete ReceiveAgeResponse::default_instance_;
  delete ReceiveAgeResponse_reflection_;
  delete DailyPush::default_instance_;
  delete DailyPush_reflection_;
  delete AchievementPush::default_instance_;
  delete AchievementPush_reflection_;
  delete MainPush::default_instance_;
  delete MainPush_reflection_;
  delete ScorePush::default_instance_;
  delete ScorePush_reflection_;
  delete SignInfoPush::default_instance_;
  delete SignInfoPush_reflection_;
  delete OnlineInfoPush::default_instance_;
  delete OnlineInfoPush_reflection_;
  delete MissionBarPush::default_instance_;
  delete MissionBarPush_reflection_;
  delete AgeRewardPush::default_instance_;
  delete AgeRewardPush_reflection_;
}

void protobuf_AddDesc_task_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::slg::protocol::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ntask.proto\022\014slg.protocol\032\014common.proto"
    "\"W\n\007TaskDTO\022\n\n\002id\030\001 \002(\005\022\017\n\007current\030\002 \002(\005"
    "\022\r\n\005limit\030\003 \002(\005\022\022\n\nisReceived\030\004 \001(\010\022\014\n\004s"
    "tar\030\005 \001(\005\"-\n\010ScoreDTO\022\r\n\005score\030\001 \002(\005\022\022\n\n"
    "isReceived\030\002 \002(\010\")\n\nBarTaskDTO\022\n\n\002id\030\001 \002"
    "(\005\022\017\n\007quality\030\002 \002(\005\"I\n\nBarInfoDTO\022*\n\010tas"
    "kList\030\001 \003(\0132\030.slg.protocol.BarTaskDTO\022\017\n"
    "\007reftime\030\002 \002(\005\".\n\022ReceiveTaskRequest\022\014\n\004"
    "type\030\001 \002(\005\022\n\n\002id\030\002 \002(\005\"\200\001\n\023ReceiveTaskRe"
    "sponse\022\014\n\004type\030\001 \002(\005\022\n\n\002id\030\002 \002(\005\022)\n\006rewa"
    "rd\030\003 \003(\0132\031.slg.protocol.PropertyDTO\022$\n\005i"
    "tems\030\004 \003(\0132\025.slg.protocol.ItemDTO\"\023\n\021Sig"
    "nRewardRequest\";\n\022SignRewardResponse\022%\n\006"
    "reward\030\001 \003(\0132\025.slg.protocol.ItemDTO\"\025\n\023O"
    "nlineRewardRequest\"=\n\024OnlineRewardRespon"
    "se\022%\n\006reward\030\001 \003(\0132\025.slg.protocol.ItemDT"
    "O\"\?\n\025ReceiveBarTaskRequest\022&\n\004task\030\001 \002(\013"
    "2\030.slg.protocol.BarTaskDTO\"n\n\026ReceiveBar"
    "TaskResponse\022)\n\007oldTask\030\001 \002(\0132\030.slg.prot"
    "ocol.BarTaskDTO\022)\n\007newTask\030\002 \002(\0132\030.slg.p"
    "rotocol.BarTaskDTO\"#\n\022ReceiveaAgeRequest"
    "\022\r\n\005level\030\001 \002(\005\"N\n\022ReceiveAgeResponse\022\r\n"
    "\005level\030\001 \002(\005\022)\n\006reward\030\002 \002(\0132\031.slg.proto"
    "col.PropertyDTO\"C\n\tDailyPush\022\'\n\010taskList"
    "\030\001 \003(\0132\025.slg.protocol.TaskDTO\022\r\n\005score\030\002"
    " \002(\005\":\n\017AchievementPush\022\'\n\010taskList\030\001 \003("
    "\0132\025.slg.protocol.TaskDTO\"/\n\010MainPush\022#\n\004"
    "task\030\001 \002(\0132\025.slg.protocol.TaskDTO\"6\n\tSco"
    "rePush\022)\n\tscoreList\030\001 \003(\0132\026.slg.protocol"
    ".ScoreDTO\"T\n\014SignInfoPush\022\016\n\006signed\030\001 \002("
    "\010\022\r\n\005count\030\002 \002(\005\022%\n\006reward\030\003 \003(\0132\025.slg.p"
    "rotocol.ItemDTO\"<\n\016OnlineInfoPush\022\024\n\014las"
    "tRecvTime\030\001 \002(\005\022\024\n\014nextRecvTime\030\002 \002(\005\";\n"
    "\016MissionBarPush\022)\n\007barInfo\030\001 \002(\0132\030.slg.p"
    "rotocol.BarInfoDTO\"%\n\rAgeRewardPush\022\024\n\014r"
    "eceiveLevel\030\001 \003(\005*\277\001\n\rTaskCommandId\022\030\n\023R"
    "EVEIVE_TASK_REWARD\020\211\016\022\030\n\023REVEIVE_SIGN_RE"
    "WARD\020\212\016\022\032\n\025REVEIVE_ONLINE_REWARD\020\213\016\022\026\n\021F"
    "RESH_MISSION_BAR\020\214\016\022\030\n\023RECEIVE_MISSION_B"
    "AR\020\215\016\022\023\n\016MISSION_BAR_UP\020\216\016\022\027\n\022RECEIVE_AG"
    "E_REWARD\020\217\016*\312\001\n\nTaskPushId\022\025\n\017DAILY_TASK"
    "_PUSH\020\331\224\003\022\033\n\025ACHIEVEMENT_TASK_PUSH\020\332\224\003\022\024"
    "\n\016MAIN_TASK_PUSH\020\333\224\003\022\025\n\017SCORE_TASK_PUSH\020"
    "\334\224\003\022\024\n\016SIGN_INFO_PUSH\020\335\224\003\022\026\n\020ONLINE_INFO"
    "_PUSH\020\336\224\003\022\026\n\020MISSION_BAR_PUSH\020\337\224\003\022\025\n\017AGE"
    "_REWARD_PUSH\020\340\224\003B)\n\034com.bonusstudio.slg."
    "protocolB\tTaskProto", 1859);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "task.proto", &protobuf_RegisterTypes);
  TaskDTO::default_instance_ = new TaskDTO();
  ScoreDTO::default_instance_ = new ScoreDTO();
  BarTaskDTO::default_instance_ = new BarTaskDTO();
  BarInfoDTO::default_instance_ = new BarInfoDTO();
  ReceiveTaskRequest::default_instance_ = new ReceiveTaskRequest();
  ReceiveTaskResponse::default_instance_ = new ReceiveTaskResponse();
  SignRewardRequest::default_instance_ = new SignRewardRequest();
  SignRewardResponse::default_instance_ = new SignRewardResponse();
  OnlineRewardRequest::default_instance_ = new OnlineRewardRequest();
  OnlineRewardResponse::default_instance_ = new OnlineRewardResponse();
  ReceiveBarTaskRequest::default_instance_ = new ReceiveBarTaskRequest();
  ReceiveBarTaskResponse::default_instance_ = new ReceiveBarTaskResponse();
  ReceiveaAgeRequest::default_instance_ = new ReceiveaAgeRequest();
  ReceiveAgeResponse::default_instance_ = new ReceiveAgeResponse();
  DailyPush::default_instance_ = new DailyPush();
  AchievementPush::default_instance_ = new AchievementPush();
  MainPush::default_instance_ = new MainPush();
  ScorePush::default_instance_ = new ScorePush();
  SignInfoPush::default_instance_ = new SignInfoPush();
  OnlineInfoPush::default_instance_ = new OnlineInfoPush();
  MissionBarPush::default_instance_ = new MissionBarPush();
  AgeRewardPush::default_instance_ = new AgeRewardPush();
  TaskDTO::default_instance_->InitAsDefaultInstance();
  ScoreDTO::default_instance_->InitAsDefaultInstance();
  BarTaskDTO::default_instance_->InitAsDefaultInstance();
  BarInfoDTO::default_instance_->InitAsDefaultInstance();
  ReceiveTaskRequest::default_instance_->InitAsDefaultInstance();
  ReceiveTaskResponse::default_instance_->InitAsDefaultInstance();
  SignRewardRequest::default_instance_->InitAsDefaultInstance();
  SignRewardResponse::default_instance_->InitAsDefaultInstance();
  OnlineRewardRequest::default_instance_->InitAsDefaultInstance();
  OnlineRewardResponse::default_instance_->InitAsDefaultInstance();
  ReceiveBarTaskRequest::default_instance_->InitAsDefaultInstance();
  ReceiveBarTaskResponse::default_instance_->InitAsDefaultInstance();
  ReceiveaAgeRequest::default_instance_->InitAsDefaultInstance();
  ReceiveAgeResponse::default_instance_->InitAsDefaultInstance();
  DailyPush::default_instance_->InitAsDefaultInstance();
  AchievementPush::default_instance_->InitAsDefaultInstance();
  MainPush::default_instance_->InitAsDefaultInstance();
  ScorePush::default_instance_->InitAsDefaultInstance();
  SignInfoPush::default_instance_->InitAsDefaultInstance();
  OnlineInfoPush::default_instance_->InitAsDefaultInstance();
  MissionBarPush::default_instance_->InitAsDefaultInstance();
  AgeRewardPush::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_task_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_task_2eproto {
  StaticDescriptorInitializer_task_2eproto() {
    protobuf_AddDesc_task_2eproto();
  }
} static_descriptor_initializer_task_2eproto_;
const ::google::protobuf::EnumDescriptor* TaskCommandId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskCommandId_descriptor_;
}
bool TaskCommandId_IsValid(int value) {
  switch(value) {
    case 1801:
    case 1802:
    case 1803:
    case 1804:
    case 1805:
    case 1806:
    case 1807:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TaskPushId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskPushId_descriptor_;
}
bool TaskPushId_IsValid(int value) {
  switch(value) {
    case 51801:
    case 51802:
    case 51803:
    case 51804:
    case 51805:
    case 51806:
    case 51807:
    case 51808:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TaskDTO::kIdFieldNumber;
const int TaskDTO::kCurrentFieldNumber;
const int TaskDTO::kLimitFieldNumber;
const int TaskDTO::kIsReceivedFieldNumber;
const int TaskDTO::kStarFieldNumber;
#endif  // !_MSC_VER

TaskDTO::TaskDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TaskDTO::InitAsDefaultInstance() {
}

TaskDTO::TaskDTO(const TaskDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TaskDTO::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  current_ = 0;
  limit_ = 0;
  isreceived_ = false;
  star_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskDTO::~TaskDTO() {
  SharedDtor();
}

void TaskDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TaskDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskDTO_descriptor_;
}

const TaskDTO& TaskDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

TaskDTO* TaskDTO::default_instance_ = NULL;

TaskDTO* TaskDTO::New() const {
  return new TaskDTO;
}

void TaskDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    current_ = 0;
    limit_ = 0;
    isreceived_ = false;
    star_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_current;
        break;
      }

      // required int32 current = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_)));
          set_has_current();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_limit;
        break;
      }

      // required int32 limit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isReceived;
        break;
      }

      // optional bool isReceived = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isReceived:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isreceived_)));
          set_has_isreceived();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_star;
        break;
      }

      // optional int32 star = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 current = 2;
  if (has_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->current(), output);
  }

  // required int32 limit = 3;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->limit(), output);
  }

  // optional bool isReceived = 4;
  if (has_isreceived()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isreceived(), output);
  }

  // optional int32 star = 5;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->star(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TaskDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 current = 2;
  if (has_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->current(), target);
  }

  // required int32 limit = 3;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->limit(), target);
  }

  // optional bool isReceived = 4;
  if (has_isreceived()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isreceived(), target);
  }

  // optional int32 star = 5;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->star(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TaskDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 current = 2;
    if (has_current()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current());
    }

    // required int32 limit = 3;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit());
    }

    // optional bool isReceived = 4;
    if (has_isreceived()) {
      total_size += 1 + 1;
    }

    // optional int32 star = 5;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskDTO::MergeFrom(const TaskDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_current()) {
      set_current(from.current());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_isreceived()) {
      set_isreceived(from.isreceived());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskDTO::CopyFrom(const TaskDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TaskDTO::Swap(TaskDTO* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(current_, other->current_);
    std::swap(limit_, other->limit_);
    std::swap(isreceived_, other->isreceived_);
    std::swap(star_, other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskDTO_descriptor_;
  metadata.reflection = TaskDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScoreDTO::kScoreFieldNumber;
const int ScoreDTO::kIsReceivedFieldNumber;
#endif  // !_MSC_VER

ScoreDTO::ScoreDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScoreDTO::InitAsDefaultInstance() {
}

ScoreDTO::ScoreDTO(const ScoreDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScoreDTO::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0;
  isreceived_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScoreDTO::~ScoreDTO() {
  SharedDtor();
}

void ScoreDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScoreDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScoreDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScoreDTO_descriptor_;
}

const ScoreDTO& ScoreDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

ScoreDTO* ScoreDTO::default_instance_ = NULL;

ScoreDTO* ScoreDTO::New() const {
  return new ScoreDTO;
}

void ScoreDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    score_ = 0;
    isreceived_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScoreDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isReceived;
        break;
      }

      // required bool isReceived = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isReceived:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isreceived_)));
          set_has_isreceived();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScoreDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->score(), output);
  }

  // required bool isReceived = 2;
  if (has_isreceived()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isreceived(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScoreDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->score(), target);
  }

  // required bool isReceived = 2;
  if (has_isreceived()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isreceived(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScoreDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // required bool isReceived = 2;
    if (has_isreceived()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScoreDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScoreDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScoreDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScoreDTO::MergeFrom(const ScoreDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_isreceived()) {
      set_isreceived(from.isreceived());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScoreDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScoreDTO::CopyFrom(const ScoreDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ScoreDTO::Swap(ScoreDTO* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(isreceived_, other->isreceived_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScoreDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScoreDTO_descriptor_;
  metadata.reflection = ScoreDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BarTaskDTO::kIdFieldNumber;
const int BarTaskDTO::kQualityFieldNumber;
#endif  // !_MSC_VER

BarTaskDTO::BarTaskDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BarTaskDTO::InitAsDefaultInstance() {
}

BarTaskDTO::BarTaskDTO(const BarTaskDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BarTaskDTO::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  quality_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BarTaskDTO::~BarTaskDTO() {
  SharedDtor();
}

void BarTaskDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BarTaskDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BarTaskDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BarTaskDTO_descriptor_;
}

const BarTaskDTO& BarTaskDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

BarTaskDTO* BarTaskDTO::default_instance_ = NULL;

BarTaskDTO* BarTaskDTO::New() const {
  return new BarTaskDTO;
}

void BarTaskDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    quality_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BarTaskDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quality;
        break;
      }

      // required int32 quality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BarTaskDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 quality = 2;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quality(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BarTaskDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 quality = 2;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quality(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BarTaskDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 quality = 2;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BarTaskDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BarTaskDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BarTaskDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BarTaskDTO::MergeFrom(const BarTaskDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BarTaskDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BarTaskDTO::CopyFrom(const BarTaskDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BarTaskDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BarTaskDTO::Swap(BarTaskDTO* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(quality_, other->quality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BarTaskDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BarTaskDTO_descriptor_;
  metadata.reflection = BarTaskDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BarInfoDTO::kTaskListFieldNumber;
const int BarInfoDTO::kReftimeFieldNumber;
#endif  // !_MSC_VER

BarInfoDTO::BarInfoDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BarInfoDTO::InitAsDefaultInstance() {
}

BarInfoDTO::BarInfoDTO(const BarInfoDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BarInfoDTO::SharedCtor() {
  _cached_size_ = 0;
  reftime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BarInfoDTO::~BarInfoDTO() {
  SharedDtor();
}

void BarInfoDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BarInfoDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BarInfoDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BarInfoDTO_descriptor_;
}

const BarInfoDTO& BarInfoDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

BarInfoDTO* BarInfoDTO::default_instance_ = NULL;

BarInfoDTO* BarInfoDTO::New() const {
  return new BarInfoDTO;
}

void BarInfoDTO::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    reftime_ = 0;
  }
  tasklist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BarInfoDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.BarTaskDTO taskList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taskList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasklist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_taskList;
        if (input->ExpectTag(16)) goto parse_reftime;
        break;
      }

      // required int32 reftime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reftime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reftime_)));
          set_has_reftime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BarInfoDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.BarTaskDTO taskList = 1;
  for (int i = 0; i < this->tasklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tasklist(i), output);
  }

  // required int32 reftime = 2;
  if (has_reftime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reftime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BarInfoDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.BarTaskDTO taskList = 1;
  for (int i = 0; i < this->tasklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tasklist(i), target);
  }

  // required int32 reftime = 2;
  if (has_reftime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reftime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BarInfoDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 reftime = 2;
    if (has_reftime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reftime());
    }

  }
  // repeated .slg.protocol.BarTaskDTO taskList = 1;
  total_size += 1 * this->tasklist_size();
  for (int i = 0; i < this->tasklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasklist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BarInfoDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BarInfoDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BarInfoDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BarInfoDTO::MergeFrom(const BarInfoDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasklist_.MergeFrom(from.tasklist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_reftime()) {
      set_reftime(from.reftime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BarInfoDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BarInfoDTO::CopyFrom(const BarInfoDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BarInfoDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < tasklist_size(); i++) {
    if (!this->tasklist(i).IsInitialized()) return false;
  }
  return true;
}

void BarInfoDTO::Swap(BarInfoDTO* other) {
  if (other != this) {
    tasklist_.Swap(&other->tasklist_);
    std::swap(reftime_, other->reftime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BarInfoDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BarInfoDTO_descriptor_;
  metadata.reflection = BarInfoDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReceiveTaskRequest::kTypeFieldNumber;
const int ReceiveTaskRequest::kIdFieldNumber;
#endif  // !_MSC_VER

ReceiveTaskRequest::ReceiveTaskRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReceiveTaskRequest::InitAsDefaultInstance() {
}

ReceiveTaskRequest::ReceiveTaskRequest(const ReceiveTaskRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReceiveTaskRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiveTaskRequest::~ReceiveTaskRequest() {
  SharedDtor();
}

void ReceiveTaskRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReceiveTaskRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiveTaskRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiveTaskRequest_descriptor_;
}

const ReceiveTaskRequest& ReceiveTaskRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

ReceiveTaskRequest* ReceiveTaskRequest::default_instance_ = NULL;

ReceiveTaskRequest* ReceiveTaskRequest::New() const {
  return new ReceiveTaskRequest;
}

void ReceiveTaskRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReceiveTaskRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReceiveTaskRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReceiveTaskRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReceiveTaskRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiveTaskRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReceiveTaskRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReceiveTaskRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReceiveTaskRequest::MergeFrom(const ReceiveTaskRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReceiveTaskRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiveTaskRequest::CopyFrom(const ReceiveTaskRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiveTaskRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReceiveTaskRequest::Swap(ReceiveTaskRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReceiveTaskRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiveTaskRequest_descriptor_;
  metadata.reflection = ReceiveTaskRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReceiveTaskResponse::kTypeFieldNumber;
const int ReceiveTaskResponse::kIdFieldNumber;
const int ReceiveTaskResponse::kRewardFieldNumber;
const int ReceiveTaskResponse::kItemsFieldNumber;
#endif  // !_MSC_VER

ReceiveTaskResponse::ReceiveTaskResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReceiveTaskResponse::InitAsDefaultInstance() {
}

ReceiveTaskResponse::ReceiveTaskResponse(const ReceiveTaskResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReceiveTaskResponse::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiveTaskResponse::~ReceiveTaskResponse() {
  SharedDtor();
}

void ReceiveTaskResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReceiveTaskResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiveTaskResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiveTaskResponse_descriptor_;
}

const ReceiveTaskResponse& ReceiveTaskResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

ReceiveTaskResponse* ReceiveTaskResponse::default_instance_ = NULL;

ReceiveTaskResponse* ReceiveTaskResponse::New() const {
  return new ReceiveTaskResponse;
}

void ReceiveTaskResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = 0;
  }
  reward_.Clear();
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReceiveTaskResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }

      // repeated .slg.protocol.PropertyDTO reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        if (input->ExpectTag(34)) goto parse_items;
        break;
      }

      // repeated .slg.protocol.ItemDTO items = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReceiveTaskResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // repeated .slg.protocol.PropertyDTO reward = 3;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward(i), output);
  }

  // repeated .slg.protocol.ItemDTO items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReceiveTaskResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // repeated .slg.protocol.PropertyDTO reward = 3;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward(i), target);
  }

  // repeated .slg.protocol.ItemDTO items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReceiveTaskResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated .slg.protocol.PropertyDTO reward = 3;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  // repeated .slg.protocol.ItemDTO items = 4;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiveTaskResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReceiveTaskResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReceiveTaskResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReceiveTaskResponse::MergeFrom(const ReceiveTaskResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReceiveTaskResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiveTaskResponse::CopyFrom(const ReceiveTaskResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiveTaskResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < reward_size(); i++) {
    if (!this->reward(i).IsInitialized()) return false;
  }
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void ReceiveTaskResponse::Swap(ReceiveTaskResponse* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    reward_.Swap(&other->reward_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReceiveTaskResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiveTaskResponse_descriptor_;
  metadata.reflection = ReceiveTaskResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SignRewardRequest::SignRewardRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignRewardRequest::InitAsDefaultInstance() {
}

SignRewardRequest::SignRewardRequest(const SignRewardRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignRewardRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignRewardRequest::~SignRewardRequest() {
  SharedDtor();
}

void SignRewardRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SignRewardRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignRewardRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignRewardRequest_descriptor_;
}

const SignRewardRequest& SignRewardRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

SignRewardRequest* SignRewardRequest::default_instance_ = NULL;

SignRewardRequest* SignRewardRequest::New() const {
  return new SignRewardRequest;
}

void SignRewardRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignRewardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SignRewardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignRewardRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignRewardRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignRewardRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignRewardRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignRewardRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignRewardRequest::MergeFrom(const SignRewardRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignRewardRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignRewardRequest::CopyFrom(const SignRewardRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignRewardRequest::IsInitialized() const {

  return true;
}

void SignRewardRequest::Swap(SignRewardRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignRewardRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignRewardRequest_descriptor_;
  metadata.reflection = SignRewardRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignRewardResponse::kRewardFieldNumber;
#endif  // !_MSC_VER

SignRewardResponse::SignRewardResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignRewardResponse::InitAsDefaultInstance() {
}

SignRewardResponse::SignRewardResponse(const SignRewardResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignRewardResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignRewardResponse::~SignRewardResponse() {
  SharedDtor();
}

void SignRewardResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SignRewardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignRewardResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignRewardResponse_descriptor_;
}

const SignRewardResponse& SignRewardResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

SignRewardResponse* SignRewardResponse::default_instance_ = NULL;

SignRewardResponse* SignRewardResponse::New() const {
  return new SignRewardResponse;
}

void SignRewardResponse::Clear() {
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignRewardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.ItemDTO reward = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignRewardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.ItemDTO reward = 1;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignRewardResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.ItemDTO reward = 1;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignRewardResponse::ByteSize() const {
  int total_size = 0;

  // repeated .slg.protocol.ItemDTO reward = 1;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignRewardResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignRewardResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignRewardResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignRewardResponse::MergeFrom(const SignRewardResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignRewardResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignRewardResponse::CopyFrom(const SignRewardResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignRewardResponse::IsInitialized() const {

  for (int i = 0; i < reward_size(); i++) {
    if (!this->reward(i).IsInitialized()) return false;
  }
  return true;
}

void SignRewardResponse::Swap(SignRewardResponse* other) {
  if (other != this) {
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignRewardResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignRewardResponse_descriptor_;
  metadata.reflection = SignRewardResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OnlineRewardRequest::OnlineRewardRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OnlineRewardRequest::InitAsDefaultInstance() {
}

OnlineRewardRequest::OnlineRewardRequest(const OnlineRewardRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OnlineRewardRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnlineRewardRequest::~OnlineRewardRequest() {
  SharedDtor();
}

void OnlineRewardRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OnlineRewardRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnlineRewardRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnlineRewardRequest_descriptor_;
}

const OnlineRewardRequest& OnlineRewardRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

OnlineRewardRequest* OnlineRewardRequest::default_instance_ = NULL;

OnlineRewardRequest* OnlineRewardRequest::New() const {
  return new OnlineRewardRequest;
}

void OnlineRewardRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnlineRewardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void OnlineRewardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OnlineRewardRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OnlineRewardRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlineRewardRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnlineRewardRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnlineRewardRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnlineRewardRequest::MergeFrom(const OnlineRewardRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnlineRewardRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnlineRewardRequest::CopyFrom(const OnlineRewardRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlineRewardRequest::IsInitialized() const {

  return true;
}

void OnlineRewardRequest::Swap(OnlineRewardRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnlineRewardRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnlineRewardRequest_descriptor_;
  metadata.reflection = OnlineRewardRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OnlineRewardResponse::kRewardFieldNumber;
#endif  // !_MSC_VER

OnlineRewardResponse::OnlineRewardResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OnlineRewardResponse::InitAsDefaultInstance() {
}

OnlineRewardResponse::OnlineRewardResponse(const OnlineRewardResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OnlineRewardResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnlineRewardResponse::~OnlineRewardResponse() {
  SharedDtor();
}

void OnlineRewardResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OnlineRewardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnlineRewardResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnlineRewardResponse_descriptor_;
}

const OnlineRewardResponse& OnlineRewardResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

OnlineRewardResponse* OnlineRewardResponse::default_instance_ = NULL;

OnlineRewardResponse* OnlineRewardResponse::New() const {
  return new OnlineRewardResponse;
}

void OnlineRewardResponse::Clear() {
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnlineRewardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.ItemDTO reward = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OnlineRewardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.ItemDTO reward = 1;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OnlineRewardResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.ItemDTO reward = 1;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OnlineRewardResponse::ByteSize() const {
  int total_size = 0;

  // repeated .slg.protocol.ItemDTO reward = 1;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlineRewardResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnlineRewardResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnlineRewardResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnlineRewardResponse::MergeFrom(const OnlineRewardResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnlineRewardResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnlineRewardResponse::CopyFrom(const OnlineRewardResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlineRewardResponse::IsInitialized() const {

  for (int i = 0; i < reward_size(); i++) {
    if (!this->reward(i).IsInitialized()) return false;
  }
  return true;
}

void OnlineRewardResponse::Swap(OnlineRewardResponse* other) {
  if (other != this) {
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnlineRewardResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnlineRewardResponse_descriptor_;
  metadata.reflection = OnlineRewardResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReceiveBarTaskRequest::kTaskFieldNumber;
#endif  // !_MSC_VER

ReceiveBarTaskRequest::ReceiveBarTaskRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReceiveBarTaskRequest::InitAsDefaultInstance() {
  task_ = const_cast< ::slg::protocol::BarTaskDTO*>(&::slg::protocol::BarTaskDTO::default_instance());
}

ReceiveBarTaskRequest::ReceiveBarTaskRequest(const ReceiveBarTaskRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReceiveBarTaskRequest::SharedCtor() {
  _cached_size_ = 0;
  task_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiveBarTaskRequest::~ReceiveBarTaskRequest() {
  SharedDtor();
}

void ReceiveBarTaskRequest::SharedDtor() {
  if (this != default_instance_) {
    delete task_;
  }
}

void ReceiveBarTaskRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiveBarTaskRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiveBarTaskRequest_descriptor_;
}

const ReceiveBarTaskRequest& ReceiveBarTaskRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

ReceiveBarTaskRequest* ReceiveBarTaskRequest::default_instance_ = NULL;

ReceiveBarTaskRequest* ReceiveBarTaskRequest::New() const {
  return new ReceiveBarTaskRequest;
}

void ReceiveBarTaskRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_task()) {
      if (task_ != NULL) task_->::slg::protocol::BarTaskDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReceiveBarTaskRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .slg.protocol.BarTaskDTO task = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReceiveBarTaskRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .slg.protocol.BarTaskDTO task = 1;
  if (has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReceiveBarTaskRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .slg.protocol.BarTaskDTO task = 1;
  if (has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReceiveBarTaskRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .slg.protocol.BarTaskDTO task = 1;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiveBarTaskRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReceiveBarTaskRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReceiveBarTaskRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReceiveBarTaskRequest::MergeFrom(const ReceiveBarTaskRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task()) {
      mutable_task()->::slg::protocol::BarTaskDTO::MergeFrom(from.task());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReceiveBarTaskRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiveBarTaskRequest::CopyFrom(const ReceiveBarTaskRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiveBarTaskRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_task()) {
    if (!this->task().IsInitialized()) return false;
  }
  return true;
}

void ReceiveBarTaskRequest::Swap(ReceiveBarTaskRequest* other) {
  if (other != this) {
    std::swap(task_, other->task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReceiveBarTaskRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiveBarTaskRequest_descriptor_;
  metadata.reflection = ReceiveBarTaskRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReceiveBarTaskResponse::kOldTaskFieldNumber;
const int ReceiveBarTaskResponse::kNewTaskFieldNumber;
#endif  // !_MSC_VER

ReceiveBarTaskResponse::ReceiveBarTaskResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReceiveBarTaskResponse::InitAsDefaultInstance() {
  oldtask_ = const_cast< ::slg::protocol::BarTaskDTO*>(&::slg::protocol::BarTaskDTO::default_instance());
  newtask_ = const_cast< ::slg::protocol::BarTaskDTO*>(&::slg::protocol::BarTaskDTO::default_instance());
}

ReceiveBarTaskResponse::ReceiveBarTaskResponse(const ReceiveBarTaskResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReceiveBarTaskResponse::SharedCtor() {
  _cached_size_ = 0;
  oldtask_ = NULL;
  newtask_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiveBarTaskResponse::~ReceiveBarTaskResponse() {
  SharedDtor();
}

void ReceiveBarTaskResponse::SharedDtor() {
  if (this != default_instance_) {
    delete oldtask_;
    delete newtask_;
  }
}

void ReceiveBarTaskResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiveBarTaskResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiveBarTaskResponse_descriptor_;
}

const ReceiveBarTaskResponse& ReceiveBarTaskResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

ReceiveBarTaskResponse* ReceiveBarTaskResponse::default_instance_ = NULL;

ReceiveBarTaskResponse* ReceiveBarTaskResponse::New() const {
  return new ReceiveBarTaskResponse;
}

void ReceiveBarTaskResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_oldtask()) {
      if (oldtask_ != NULL) oldtask_->::slg::protocol::BarTaskDTO::Clear();
    }
    if (has_newtask()) {
      if (newtask_ != NULL) newtask_->::slg::protocol::BarTaskDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReceiveBarTaskResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .slg.protocol.BarTaskDTO oldTask = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oldtask()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_newTask;
        break;
      }

      // required .slg.protocol.BarTaskDTO newTask = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newTask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newtask()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReceiveBarTaskResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .slg.protocol.BarTaskDTO oldTask = 1;
  if (has_oldtask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->oldtask(), output);
  }

  // required .slg.protocol.BarTaskDTO newTask = 2;
  if (has_newtask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->newtask(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReceiveBarTaskResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .slg.protocol.BarTaskDTO oldTask = 1;
  if (has_oldtask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->oldtask(), target);
  }

  // required .slg.protocol.BarTaskDTO newTask = 2;
  if (has_newtask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->newtask(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReceiveBarTaskResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .slg.protocol.BarTaskDTO oldTask = 1;
    if (has_oldtask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oldtask());
    }

    // required .slg.protocol.BarTaskDTO newTask = 2;
    if (has_newtask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newtask());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiveBarTaskResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReceiveBarTaskResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReceiveBarTaskResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReceiveBarTaskResponse::MergeFrom(const ReceiveBarTaskResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_oldtask()) {
      mutable_oldtask()->::slg::protocol::BarTaskDTO::MergeFrom(from.oldtask());
    }
    if (from.has_newtask()) {
      mutable_newtask()->::slg::protocol::BarTaskDTO::MergeFrom(from.newtask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReceiveBarTaskResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiveBarTaskResponse::CopyFrom(const ReceiveBarTaskResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiveBarTaskResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_oldtask()) {
    if (!this->oldtask().IsInitialized()) return false;
  }
  if (has_newtask()) {
    if (!this->newtask().IsInitialized()) return false;
  }
  return true;
}

void ReceiveBarTaskResponse::Swap(ReceiveBarTaskResponse* other) {
  if (other != this) {
    std::swap(oldtask_, other->oldtask_);
    std::swap(newtask_, other->newtask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReceiveBarTaskResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiveBarTaskResponse_descriptor_;
  metadata.reflection = ReceiveBarTaskResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReceiveaAgeRequest::kLevelFieldNumber;
#endif  // !_MSC_VER

ReceiveaAgeRequest::ReceiveaAgeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReceiveaAgeRequest::InitAsDefaultInstance() {
}

ReceiveaAgeRequest::ReceiveaAgeRequest(const ReceiveaAgeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReceiveaAgeRequest::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiveaAgeRequest::~ReceiveaAgeRequest() {
  SharedDtor();
}

void ReceiveaAgeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReceiveaAgeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiveaAgeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiveaAgeRequest_descriptor_;
}

const ReceiveaAgeRequest& ReceiveaAgeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

ReceiveaAgeRequest* ReceiveaAgeRequest::default_instance_ = NULL;

ReceiveaAgeRequest* ReceiveaAgeRequest::New() const {
  return new ReceiveaAgeRequest;
}

void ReceiveaAgeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReceiveaAgeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReceiveaAgeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReceiveaAgeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReceiveaAgeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiveaAgeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReceiveaAgeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReceiveaAgeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReceiveaAgeRequest::MergeFrom(const ReceiveaAgeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReceiveaAgeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiveaAgeRequest::CopyFrom(const ReceiveaAgeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiveaAgeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReceiveaAgeRequest::Swap(ReceiveaAgeRequest* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReceiveaAgeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiveaAgeRequest_descriptor_;
  metadata.reflection = ReceiveaAgeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReceiveAgeResponse::kLevelFieldNumber;
const int ReceiveAgeResponse::kRewardFieldNumber;
#endif  // !_MSC_VER

ReceiveAgeResponse::ReceiveAgeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReceiveAgeResponse::InitAsDefaultInstance() {
  reward_ = const_cast< ::slg::protocol::PropertyDTO*>(&::slg::protocol::PropertyDTO::default_instance());
}

ReceiveAgeResponse::ReceiveAgeResponse(const ReceiveAgeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReceiveAgeResponse::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiveAgeResponse::~ReceiveAgeResponse() {
  SharedDtor();
}

void ReceiveAgeResponse::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void ReceiveAgeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiveAgeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiveAgeResponse_descriptor_;
}

const ReceiveAgeResponse& ReceiveAgeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

ReceiveAgeResponse* ReceiveAgeResponse::default_instance_ = NULL;

ReceiveAgeResponse* ReceiveAgeResponse::New() const {
  return new ReceiveAgeResponse;
}

void ReceiveAgeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::slg::protocol::PropertyDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReceiveAgeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // required .slg.protocol.PropertyDTO reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReceiveAgeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // required .slg.protocol.PropertyDTO reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReceiveAgeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // required .slg.protocol.PropertyDTO reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReceiveAgeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required .slg.protocol.PropertyDTO reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiveAgeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReceiveAgeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReceiveAgeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReceiveAgeResponse::MergeFrom(const ReceiveAgeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_reward()) {
      mutable_reward()->::slg::protocol::PropertyDTO::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReceiveAgeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiveAgeResponse::CopyFrom(const ReceiveAgeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiveAgeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void ReceiveAgeResponse::Swap(ReceiveAgeResponse* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReceiveAgeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiveAgeResponse_descriptor_;
  metadata.reflection = ReceiveAgeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyPush::kTaskListFieldNumber;
const int DailyPush::kScoreFieldNumber;
#endif  // !_MSC_VER

DailyPush::DailyPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyPush::InitAsDefaultInstance() {
}

DailyPush::DailyPush(const DailyPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyPush::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyPush::~DailyPush() {
  SharedDtor();
}

void DailyPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyPush_descriptor_;
}

const DailyPush& DailyPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

DailyPush* DailyPush::default_instance_ = NULL;

DailyPush* DailyPush::New() const {
  return new DailyPush;
}

void DailyPush::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    score_ = 0;
  }
  tasklist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.TaskDTO taskList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taskList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasklist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_taskList;
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // required int32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.TaskDTO taskList = 1;
  for (int i = 0; i < this->tasklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tasklist(i), output);
  }

  // required int32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.TaskDTO taskList = 1;
  for (int i = 0; i < this->tasklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tasklist(i), target);
  }

  // required int32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyPush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  // repeated .slg.protocol.TaskDTO taskList = 1;
  total_size += 1 * this->tasklist_size();
  for (int i = 0; i < this->tasklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasklist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyPush::MergeFrom(const DailyPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasklist_.MergeFrom(from.tasklist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyPush::CopyFrom(const DailyPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyPush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < tasklist_size(); i++) {
    if (!this->tasklist(i).IsInitialized()) return false;
  }
  return true;
}

void DailyPush::Swap(DailyPush* other) {
  if (other != this) {
    tasklist_.Swap(&other->tasklist_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyPush_descriptor_;
  metadata.reflection = DailyPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AchievementPush::kTaskListFieldNumber;
#endif  // !_MSC_VER

AchievementPush::AchievementPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AchievementPush::InitAsDefaultInstance() {
}

AchievementPush::AchievementPush(const AchievementPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AchievementPush::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AchievementPush::~AchievementPush() {
  SharedDtor();
}

void AchievementPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AchievementPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AchievementPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AchievementPush_descriptor_;
}

const AchievementPush& AchievementPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

AchievementPush* AchievementPush::default_instance_ = NULL;

AchievementPush* AchievementPush::New() const {
  return new AchievementPush;
}

void AchievementPush::Clear() {
  tasklist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AchievementPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.TaskDTO taskList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taskList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasklist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_taskList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AchievementPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.TaskDTO taskList = 1;
  for (int i = 0; i < this->tasklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tasklist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AchievementPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.TaskDTO taskList = 1;
  for (int i = 0; i < this->tasklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tasklist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AchievementPush::ByteSize() const {
  int total_size = 0;

  // repeated .slg.protocol.TaskDTO taskList = 1;
  total_size += 1 * this->tasklist_size();
  for (int i = 0; i < this->tasklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasklist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AchievementPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AchievementPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AchievementPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AchievementPush::MergeFrom(const AchievementPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasklist_.MergeFrom(from.tasklist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AchievementPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AchievementPush::CopyFrom(const AchievementPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AchievementPush::IsInitialized() const {

  for (int i = 0; i < tasklist_size(); i++) {
    if (!this->tasklist(i).IsInitialized()) return false;
  }
  return true;
}

void AchievementPush::Swap(AchievementPush* other) {
  if (other != this) {
    tasklist_.Swap(&other->tasklist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AchievementPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AchievementPush_descriptor_;
  metadata.reflection = AchievementPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MainPush::kTaskFieldNumber;
#endif  // !_MSC_VER

MainPush::MainPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MainPush::InitAsDefaultInstance() {
  task_ = const_cast< ::slg::protocol::TaskDTO*>(&::slg::protocol::TaskDTO::default_instance());
}

MainPush::MainPush(const MainPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MainPush::SharedCtor() {
  _cached_size_ = 0;
  task_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MainPush::~MainPush() {
  SharedDtor();
}

void MainPush::SharedDtor() {
  if (this != default_instance_) {
    delete task_;
  }
}

void MainPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MainPush_descriptor_;
}

const MainPush& MainPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

MainPush* MainPush::default_instance_ = NULL;

MainPush* MainPush::New() const {
  return new MainPush;
}

void MainPush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_task()) {
      if (task_ != NULL) task_->::slg::protocol::TaskDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MainPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .slg.protocol.TaskDTO task = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MainPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .slg.protocol.TaskDTO task = 1;
  if (has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MainPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .slg.protocol.TaskDTO task = 1;
  if (has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MainPush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .slg.protocol.TaskDTO task = 1;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MainPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MainPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MainPush::MergeFrom(const MainPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task()) {
      mutable_task()->::slg::protocol::TaskDTO::MergeFrom(from.task());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MainPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainPush::CopyFrom(const MainPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainPush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_task()) {
    if (!this->task().IsInitialized()) return false;
  }
  return true;
}

void MainPush::Swap(MainPush* other) {
  if (other != this) {
    std::swap(task_, other->task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MainPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MainPush_descriptor_;
  metadata.reflection = MainPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScorePush::kScoreListFieldNumber;
#endif  // !_MSC_VER

ScorePush::ScorePush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScorePush::InitAsDefaultInstance() {
}

ScorePush::ScorePush(const ScorePush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScorePush::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScorePush::~ScorePush() {
  SharedDtor();
}

void ScorePush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScorePush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScorePush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScorePush_descriptor_;
}

const ScorePush& ScorePush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

ScorePush* ScorePush::default_instance_ = NULL;

ScorePush* ScorePush::New() const {
  return new ScorePush;
}

void ScorePush::Clear() {
  scorelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScorePush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.ScoreDTO scoreList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scoreList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_scorelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_scoreList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScorePush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.ScoreDTO scoreList = 1;
  for (int i = 0; i < this->scorelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->scorelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScorePush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.ScoreDTO scoreList = 1;
  for (int i = 0; i < this->scorelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->scorelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScorePush::ByteSize() const {
  int total_size = 0;

  // repeated .slg.protocol.ScoreDTO scoreList = 1;
  total_size += 1 * this->scorelist_size();
  for (int i = 0; i < this->scorelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->scorelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScorePush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScorePush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScorePush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScorePush::MergeFrom(const ScorePush& from) {
  GOOGLE_CHECK_NE(&from, this);
  scorelist_.MergeFrom(from.scorelist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScorePush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScorePush::CopyFrom(const ScorePush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScorePush::IsInitialized() const {

  for (int i = 0; i < scorelist_size(); i++) {
    if (!this->scorelist(i).IsInitialized()) return false;
  }
  return true;
}

void ScorePush::Swap(ScorePush* other) {
  if (other != this) {
    scorelist_.Swap(&other->scorelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScorePush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScorePush_descriptor_;
  metadata.reflection = ScorePush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignInfoPush::kSignedFieldNumber;
const int SignInfoPush::kCountFieldNumber;
const int SignInfoPush::kRewardFieldNumber;
#endif  // !_MSC_VER

SignInfoPush::SignInfoPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignInfoPush::InitAsDefaultInstance() {
}

SignInfoPush::SignInfoPush(const SignInfoPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignInfoPush::SharedCtor() {
  _cached_size_ = 0;
  signed__ = false;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignInfoPush::~SignInfoPush() {
  SharedDtor();
}

void SignInfoPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SignInfoPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignInfoPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignInfoPush_descriptor_;
}

const SignInfoPush& SignInfoPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

SignInfoPush* SignInfoPush::default_instance_ = NULL;

SignInfoPush* SignInfoPush::New() const {
  return new SignInfoPush;
}

void SignInfoPush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    signed__ = false;
    count_ = 0;
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignInfoPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool signed = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &signed__)));
          set_has_signed_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }

      // repeated .slg.protocol.ItemDTO reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignInfoPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool signed = 1;
  if (has_signed_()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->signed_(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // repeated .slg.protocol.ItemDTO reward = 3;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignInfoPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool signed = 1;
  if (has_signed_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->signed_(), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // repeated .slg.protocol.ItemDTO reward = 3;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignInfoPush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool signed = 1;
    if (has_signed_()) {
      total_size += 1 + 1;
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated .slg.protocol.ItemDTO reward = 3;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignInfoPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignInfoPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignInfoPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignInfoPush::MergeFrom(const SignInfoPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signed_()) {
      set_signed_(from.signed_());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignInfoPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignInfoPush::CopyFrom(const SignInfoPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignInfoPush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < reward_size(); i++) {
    if (!this->reward(i).IsInitialized()) return false;
  }
  return true;
}

void SignInfoPush::Swap(SignInfoPush* other) {
  if (other != this) {
    std::swap(signed__, other->signed__);
    std::swap(count_, other->count_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignInfoPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignInfoPush_descriptor_;
  metadata.reflection = SignInfoPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OnlineInfoPush::kLastRecvTimeFieldNumber;
const int OnlineInfoPush::kNextRecvTimeFieldNumber;
#endif  // !_MSC_VER

OnlineInfoPush::OnlineInfoPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OnlineInfoPush::InitAsDefaultInstance() {
}

OnlineInfoPush::OnlineInfoPush(const OnlineInfoPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OnlineInfoPush::SharedCtor() {
  _cached_size_ = 0;
  lastrecvtime_ = 0;
  nextrecvtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnlineInfoPush::~OnlineInfoPush() {
  SharedDtor();
}

void OnlineInfoPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OnlineInfoPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnlineInfoPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnlineInfoPush_descriptor_;
}

const OnlineInfoPush& OnlineInfoPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

OnlineInfoPush* OnlineInfoPush::default_instance_ = NULL;

OnlineInfoPush* OnlineInfoPush::New() const {
  return new OnlineInfoPush;
}

void OnlineInfoPush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lastrecvtime_ = 0;
    nextrecvtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnlineInfoPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 lastRecvTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastrecvtime_)));
          set_has_lastrecvtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nextRecvTime;
        break;
      }

      // required int32 nextRecvTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextRecvTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextrecvtime_)));
          set_has_nextrecvtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OnlineInfoPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 lastRecvTime = 1;
  if (has_lastrecvtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lastrecvtime(), output);
  }

  // required int32 nextRecvTime = 2;
  if (has_nextrecvtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nextrecvtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OnlineInfoPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 lastRecvTime = 1;
  if (has_lastrecvtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lastrecvtime(), target);
  }

  // required int32 nextRecvTime = 2;
  if (has_nextrecvtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nextrecvtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OnlineInfoPush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 lastRecvTime = 1;
    if (has_lastrecvtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastrecvtime());
    }

    // required int32 nextRecvTime = 2;
    if (has_nextrecvtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextrecvtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlineInfoPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnlineInfoPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnlineInfoPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnlineInfoPush::MergeFrom(const OnlineInfoPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lastrecvtime()) {
      set_lastrecvtime(from.lastrecvtime());
    }
    if (from.has_nextrecvtime()) {
      set_nextrecvtime(from.nextrecvtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnlineInfoPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnlineInfoPush::CopyFrom(const OnlineInfoPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlineInfoPush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void OnlineInfoPush::Swap(OnlineInfoPush* other) {
  if (other != this) {
    std::swap(lastrecvtime_, other->lastrecvtime_);
    std::swap(nextrecvtime_, other->nextrecvtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnlineInfoPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnlineInfoPush_descriptor_;
  metadata.reflection = OnlineInfoPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MissionBarPush::kBarInfoFieldNumber;
#endif  // !_MSC_VER

MissionBarPush::MissionBarPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MissionBarPush::InitAsDefaultInstance() {
  barinfo_ = const_cast< ::slg::protocol::BarInfoDTO*>(&::slg::protocol::BarInfoDTO::default_instance());
}

MissionBarPush::MissionBarPush(const MissionBarPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MissionBarPush::SharedCtor() {
  _cached_size_ = 0;
  barinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MissionBarPush::~MissionBarPush() {
  SharedDtor();
}

void MissionBarPush::SharedDtor() {
  if (this != default_instance_) {
    delete barinfo_;
  }
}

void MissionBarPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionBarPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionBarPush_descriptor_;
}

const MissionBarPush& MissionBarPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

MissionBarPush* MissionBarPush::default_instance_ = NULL;

MissionBarPush* MissionBarPush::New() const {
  return new MissionBarPush;
}

void MissionBarPush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_barinfo()) {
      if (barinfo_ != NULL) barinfo_->::slg::protocol::BarInfoDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MissionBarPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .slg.protocol.BarInfoDTO barInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_barinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MissionBarPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .slg.protocol.BarInfoDTO barInfo = 1;
  if (has_barinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->barinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MissionBarPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .slg.protocol.BarInfoDTO barInfo = 1;
  if (has_barinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->barinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MissionBarPush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .slg.protocol.BarInfoDTO barInfo = 1;
    if (has_barinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->barinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionBarPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MissionBarPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MissionBarPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MissionBarPush::MergeFrom(const MissionBarPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_barinfo()) {
      mutable_barinfo()->::slg::protocol::BarInfoDTO::MergeFrom(from.barinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MissionBarPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionBarPush::CopyFrom(const MissionBarPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionBarPush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_barinfo()) {
    if (!this->barinfo().IsInitialized()) return false;
  }
  return true;
}

void MissionBarPush::Swap(MissionBarPush* other) {
  if (other != this) {
    std::swap(barinfo_, other->barinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MissionBarPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MissionBarPush_descriptor_;
  metadata.reflection = MissionBarPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgeRewardPush::kReceiveLevelFieldNumber;
#endif  // !_MSC_VER

AgeRewardPush::AgeRewardPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AgeRewardPush::InitAsDefaultInstance() {
}

AgeRewardPush::AgeRewardPush(const AgeRewardPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AgeRewardPush::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgeRewardPush::~AgeRewardPush() {
  SharedDtor();
}

void AgeRewardPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AgeRewardPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgeRewardPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgeRewardPush_descriptor_;
}

const AgeRewardPush& AgeRewardPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

AgeRewardPush* AgeRewardPush::default_instance_ = NULL;

AgeRewardPush* AgeRewardPush::New() const {
  return new AgeRewardPush;
}

void AgeRewardPush::Clear() {
  receivelevel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgeRewardPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 receiveLevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receiveLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_receivelevel())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_receivelevel())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_receiveLevel;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AgeRewardPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 receiveLevel = 1;
  for (int i = 0; i < this->receivelevel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->receivelevel(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AgeRewardPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 receiveLevel = 1;
  for (int i = 0; i < this->receivelevel_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->receivelevel(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AgeRewardPush::ByteSize() const {
  int total_size = 0;

  // repeated int32 receiveLevel = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->receivelevel_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->receivelevel(i));
    }
    total_size += 1 * this->receivelevel_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgeRewardPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgeRewardPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgeRewardPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgeRewardPush::MergeFrom(const AgeRewardPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  receivelevel_.MergeFrom(from.receivelevel_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgeRewardPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgeRewardPush::CopyFrom(const AgeRewardPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgeRewardPush::IsInitialized() const {

  return true;
}

void AgeRewardPush::Swap(AgeRewardPush* other) {
  if (other != this) {
    receivelevel_.Swap(&other->receivelevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgeRewardPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgeRewardPush_descriptor_;
  metadata.reflection = AgeRewardPush_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace slg

// @@protoc_insertion_point(global_scope)
