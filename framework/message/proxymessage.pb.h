// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proxymessage.proto

#ifndef PROTOBUF_proxymessage_2eproto__INCLUDED
#define PROTOBUF_proxymessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proxymessage_2eproto();
void protobuf_AssignDesc_proxymessage_2eproto();
void protobuf_ShutdownFile_proxymessage_2eproto();

class CProxyHead;

enum EProxyCmd {
  CMD_NULL = 0,
  CMD_REGIST = 1,
  CMD_KEEPALIVE = 2
};
bool EProxyCmd_IsValid(int value);
const EProxyCmd EProxyCmd_MIN = CMD_NULL;
const EProxyCmd EProxyCmd_MAX = CMD_KEEPALIVE;
const int EProxyCmd_ARRAYSIZE = EProxyCmd_MAX + 1;

const ::google::protobuf::EnumDescriptor* EProxyCmd_descriptor();
inline const ::std::string& EProxyCmd_Name(EProxyCmd value) {
  return ::google::protobuf::internal::NameOfEnum(
    EProxyCmd_descriptor(), value);
}
inline bool EProxyCmd_Parse(
    const ::std::string& name, EProxyCmd* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EProxyCmd>(
    EProxyCmd_descriptor(), name, value);
}
// ===================================================================

class CProxyHead : public ::google::protobuf::Message {
 public:
  CProxyHead();
  virtual ~CProxyHead();

  CProxyHead(const CProxyHead& from);

  inline CProxyHead& operator=(const CProxyHead& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProxyHead& default_instance();

  void Swap(CProxyHead* other);

  // implements Message ----------------------------------------------

  CProxyHead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProxyHead& from);
  void MergeFrom(const CProxyHead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 SrcFE = 1;
  inline bool has_srcfe() const;
  inline void clear_srcfe();
  static const int kSrcFEFieldNumber = 1;
  inline ::google::protobuf::uint32 srcfe() const;
  inline void set_srcfe(::google::protobuf::uint32 value);

  // required uint32 SrcID = 2;
  inline bool has_srcid() const;
  inline void clear_srcid();
  static const int kSrcIDFieldNumber = 2;
  inline ::google::protobuf::uint32 srcid() const;
  inline void set_srcid(::google::protobuf::uint32 value);

  // required uint32 DstFE = 3;
  inline bool has_dstfe() const;
  inline void clear_dstfe();
  static const int kDstFEFieldNumber = 3;
  inline ::google::protobuf::uint32 dstfe() const;
  inline void set_dstfe(::google::protobuf::uint32 value);

  // required uint32 DstID = 4;
  inline bool has_dstid() const;
  inline void clear_dstid();
  static const int kDstIDFieldNumber = 4;
  inline ::google::protobuf::uint32 dstid() const;
  inline void set_dstid(::google::protobuf::uint32 value);

  // required .EProxyCmd OpFlag = 5 [default = CMD_NULL];
  inline bool has_opflag() const;
  inline void clear_opflag();
  static const int kOpFlagFieldNumber = 5;
  inline ::EProxyCmd opflag() const;
  inline void set_opflag(::EProxyCmd value);

  // required uint64 TimeStamp = 6;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimeStampFieldNumber = 6;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CProxyHead)
 private:
  inline void set_has_srcfe();
  inline void clear_has_srcfe();
  inline void set_has_srcid();
  inline void clear_has_srcid();
  inline void set_has_dstfe();
  inline void clear_has_dstfe();
  inline void set_has_dstid();
  inline void clear_has_dstid();
  inline void set_has_opflag();
  inline void clear_has_opflag();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 srcfe_;
  ::google::protobuf::uint32 srcid_;
  ::google::protobuf::uint32 dstfe_;
  ::google::protobuf::uint32 dstid_;
  ::google::protobuf::uint64 timestamp_;
  int opflag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_proxymessage_2eproto();
  friend void protobuf_AssignDesc_proxymessage_2eproto();
  friend void protobuf_ShutdownFile_proxymessage_2eproto();

  void InitAsDefaultInstance();
  static CProxyHead* default_instance_;
};
// ===================================================================


// ===================================================================

// CProxyHead

// required uint32 SrcFE = 1;
inline bool CProxyHead::has_srcfe() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProxyHead::set_has_srcfe() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProxyHead::clear_has_srcfe() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProxyHead::clear_srcfe() {
  srcfe_ = 0u;
  clear_has_srcfe();
}
inline ::google::protobuf::uint32 CProxyHead::srcfe() const {
  return srcfe_;
}
inline void CProxyHead::set_srcfe(::google::protobuf::uint32 value) {
  set_has_srcfe();
  srcfe_ = value;
}

// required uint32 SrcID = 2;
inline bool CProxyHead::has_srcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProxyHead::set_has_srcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProxyHead::clear_has_srcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProxyHead::clear_srcid() {
  srcid_ = 0u;
  clear_has_srcid();
}
inline ::google::protobuf::uint32 CProxyHead::srcid() const {
  return srcid_;
}
inline void CProxyHead::set_srcid(::google::protobuf::uint32 value) {
  set_has_srcid();
  srcid_ = value;
}

// required uint32 DstFE = 3;
inline bool CProxyHead::has_dstfe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CProxyHead::set_has_dstfe() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CProxyHead::clear_has_dstfe() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CProxyHead::clear_dstfe() {
  dstfe_ = 0u;
  clear_has_dstfe();
}
inline ::google::protobuf::uint32 CProxyHead::dstfe() const {
  return dstfe_;
}
inline void CProxyHead::set_dstfe(::google::protobuf::uint32 value) {
  set_has_dstfe();
  dstfe_ = value;
}

// required uint32 DstID = 4;
inline bool CProxyHead::has_dstid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CProxyHead::set_has_dstid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CProxyHead::clear_has_dstid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CProxyHead::clear_dstid() {
  dstid_ = 0u;
  clear_has_dstid();
}
inline ::google::protobuf::uint32 CProxyHead::dstid() const {
  return dstid_;
}
inline void CProxyHead::set_dstid(::google::protobuf::uint32 value) {
  set_has_dstid();
  dstid_ = value;
}

// required .EProxyCmd OpFlag = 5 [default = CMD_NULL];
inline bool CProxyHead::has_opflag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CProxyHead::set_has_opflag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CProxyHead::clear_has_opflag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CProxyHead::clear_opflag() {
  opflag_ = 0;
  clear_has_opflag();
}
inline ::EProxyCmd CProxyHead::opflag() const {
  return static_cast< ::EProxyCmd >(opflag_);
}
inline void CProxyHead::set_opflag(::EProxyCmd value) {
  assert(::EProxyCmd_IsValid(value));
  set_has_opflag();
  opflag_ = value;
}

// required uint64 TimeStamp = 6;
inline bool CProxyHead::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CProxyHead::set_has_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CProxyHead::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CProxyHead::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 CProxyHead::timestamp() const {
  return timestamp_;
}
inline void CProxyHead::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EProxyCmd>() {
  return ::EProxyCmd_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proxymessage_2eproto__INCLUDED
