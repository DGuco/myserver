// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: alliance.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "alliance.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace slg {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* AllianceSummaryDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceSummaryDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceTechVoteDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceTechVoteDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecommendDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecommendDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceInviteDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceInviteDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceShopItemDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceShopItemDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContributeDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContributeDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceContributeInfoDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceContributeInfoDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceTechDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceTechDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceTechUpgradeDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceTechUpgradeDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceNewsDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceNewsDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceHelpDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceHelpDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceMemberDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceMemberDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateAllianceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateAllianceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateAllianceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateAllianceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryAllianceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryAllianceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryAllianceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryAllianceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MyAllianceInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MyAllianceInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MyAllianceInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MyAllianceInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinAllianceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinAllianceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinAllianceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinAllianceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetPositionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetPositionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetPositionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetPositionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* KickOutAllianceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickOutAllianceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExitsAllianceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExitsAllianceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExitsAllianceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExitsAllianceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransferLeaderRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransferLeaderRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransferLeaderResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransferLeaderResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceSettingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceSettingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceSettingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceSettingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceApplyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceApplyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceApplyesponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceApplyesponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckAllianceNameRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckAllianceNameRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckAllianceNameResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckAllianceNameResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendAllianceHelpRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendAllianceHelpRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HelpMemberRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HelpMemberRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HelpMemberResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HelpMemberResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceHelpListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceHelpListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceHelpListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceHelpListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceVoteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceVoteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceVoteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceVoteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceTechUpgradeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceTechUpgradeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceTechUpgradeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceTechUpgradeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContributeInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContributeInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContributeInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContributeInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContributeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContributeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DrawAllianceGiftRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DrawAllianceGiftRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DrawAllianceGiftResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DrawAllianceGiftResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClearContributedCdRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClearContributedCdRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClearContributedCdResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClearContributedCdResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceShopInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceShopInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceShopInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceShopInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceShopBuyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceShopBuyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceShopBuyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceShopBuyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteJoinAllianceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteJoinAllianceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteJoinAllianceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteJoinAllianceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DealInviteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DealInviteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DealInviteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DealInviteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FreshRecommendRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FreshRecommendRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FreshRecommendResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FreshRecommendResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRecommendRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRecommendRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRecommendResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRecommendResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuickJoinRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuickJoinRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryInviterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryInviterRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryInviterResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryInviterResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceMemberRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceMemberRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceMemberResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceMemberResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* NeedAllianceDataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NeedAllianceDataRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceSummaryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceSummaryRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceSummaryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceSummaryResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemberChangePush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemberChangePush_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemberExitPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemberExitPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* MyAllianceInfoPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MyAllianceInfoPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* HelpChangePush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HelpChangePush_reflection_ = NULL;
const ::google::protobuf::Descriptor* HelpRemovePush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HelpRemovePush_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceNewsPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceNewsPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceTechPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceTechPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceTechUpgradePush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceTechUpgradePush_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceDonationPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceDonationPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceWelfarePush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceWelfarePush_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceNewsRemovePush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceNewsRemovePush_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceInvitePush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceInvitePush_reflection_ = NULL;
const ::google::protobuf::Descriptor* HasSendHelpTimesPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HasSendHelpTimesPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceScorePush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceScorePush_reflection_ = NULL;
const ::google::protobuf::Descriptor* MyVotePush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MyVotePush_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceVoteInfoPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceVoteInfoPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceChangePush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceChangePush_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AllianceCommandId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AlliancePushId_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_alliance_2eproto() {
  protobuf_AddDesc_alliance_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "alliance.proto");
  GOOGLE_CHECK(file != NULL);
  AllianceSummaryDTO_descriptor_ = file->message_type(0);
  static const int AllianceSummaryDTO_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceSummaryDTO, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceSummaryDTO, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceSummaryDTO, honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceSummaryDTO, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceSummaryDTO, leadername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceSummaryDTO, memberlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceSummaryDTO, currentmember_),
  };
  AllianceSummaryDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceSummaryDTO_descriptor_,
      AllianceSummaryDTO::default_instance_,
      AllianceSummaryDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceSummaryDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceSummaryDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceSummaryDTO));
  AllianceTechVoteDTO_descriptor_ = file->message_type(1);
  static const int AllianceTechVoteDTO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceTechVoteDTO, techtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceTechVoteDTO, votenum_),
  };
  AllianceTechVoteDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceTechVoteDTO_descriptor_,
      AllianceTechVoteDTO::default_instance_,
      AllianceTechVoteDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceTechVoteDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceTechVoteDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceTechVoteDTO));
  RecommendDTO_descriptor_ = file->message_type(2);
  static const int RecommendDTO_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecommendDTO, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecommendDTO, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecommendDTO, battle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecommendDTO, isinvited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecommendDTO, playername_),
  };
  RecommendDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecommendDTO_descriptor_,
      RecommendDTO::default_instance_,
      RecommendDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecommendDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecommendDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecommendDTO));
  AllianceInviteDTO_descriptor_ = file->message_type(3);
  static const int AllianceInviteDTO_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceInviteDTO, allianceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceInviteDTO, alliancename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceInviteDTO, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceInviteDTO, current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceInviteDTO, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceInviteDTO, honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceInviteDTO, leaderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceInviteDTO, leadername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceInviteDTO, invitetime_),
  };
  AllianceInviteDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceInviteDTO_descriptor_,
      AllianceInviteDTO::default_instance_,
      AllianceInviteDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceInviteDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceInviteDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceInviteDTO));
  AllianceShopItemDTO_descriptor_ = file->message_type(4);
  static const int AllianceShopItemDTO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceShopItemDTO, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceShopItemDTO, buytimes_),
  };
  AllianceShopItemDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceShopItemDTO_descriptor_,
      AllianceShopItemDTO::default_instance_,
      AllianceShopItemDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceShopItemDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceShopItemDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceShopItemDTO));
  ContributeDTO_descriptor_ = file->message_type(5);
  static const int ContributeDTO_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContributeDTO, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContributeDTO, is_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContributeDTO, type_),
  };
  ContributeDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContributeDTO_descriptor_,
      ContributeDTO::default_instance_,
      ContributeDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContributeDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContributeDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContributeDTO));
  AllianceContributeInfoDTO_descriptor_ = file->message_type(6);
  static const int AllianceContributeInfoDTO_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceContributeInfoDTO, contributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceContributeInfoDTO, cooldowntime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceContributeInfoDTO, coolstarttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceContributeInfoDTO, isjoincd_),
  };
  AllianceContributeInfoDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceContributeInfoDTO_descriptor_,
      AllianceContributeInfoDTO::default_instance_,
      AllianceContributeInfoDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceContributeInfoDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceContributeInfoDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceContributeInfoDTO));
  AllianceTechDTO_descriptor_ = file->message_type(7);
  static const int AllianceTechDTO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceTechDTO, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceTechDTO, level_),
  };
  AllianceTechDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceTechDTO_descriptor_,
      AllianceTechDTO::default_instance_,
      AllianceTechDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceTechDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceTechDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceTechDTO));
  AllianceTechUpgradeDTO_descriptor_ = file->message_type(8);
  static const int AllianceTechUpgradeDTO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceTechUpgradeDTO, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceTechUpgradeDTO, endtime_),
  };
  AllianceTechUpgradeDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceTechUpgradeDTO_descriptor_,
      AllianceTechUpgradeDTO::default_instance_,
      AllianceTechUpgradeDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceTechUpgradeDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceTechUpgradeDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceTechUpgradeDTO));
  AllianceNewsDTO_descriptor_ = file->message_type(9);
  static const int AllianceNewsDTO_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceNewsDTO, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceNewsDTO, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceNewsDTO, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceNewsDTO, applymsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceNewsDTO, playername1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceNewsDTO, playername2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceNewsDTO, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceNewsDTO, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceNewsDTO, friendiswin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceNewsDTO, enallishortname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceNewsDTO, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceNewsDTO, param2_),
  };
  AllianceNewsDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceNewsDTO_descriptor_,
      AllianceNewsDTO::default_instance_,
      AllianceNewsDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceNewsDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceNewsDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceNewsDTO));
  AllianceHelpDTO_descriptor_ = file->message_type(10);
  static const int AllianceHelpDTO_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceHelpDTO, timerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceHelpDTO, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceHelpDTO, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceHelpDTO, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceHelpDTO, helptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceHelpDTO, helptimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceHelpDTO, targetlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceHelpDTO, maxtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceHelpDTO, playericon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceHelpDTO, helpid_),
  };
  AllianceHelpDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceHelpDTO_descriptor_,
      AllianceHelpDTO::default_instance_,
      AllianceHelpDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceHelpDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceHelpDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceHelpDTO));
  AllianceMemberDTO_descriptor_ = file->message_type(11);
  static const int AllianceMemberDTO_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceMemberDTO, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceMemberDTO, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceMemberDTO, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceMemberDTO, historydon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceMemberDTO, daydon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceMemberDTO, weekdon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceMemberDTO, isonline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceMemberDTO, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceMemberDTO, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceMemberDTO, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceMemberDTO, lastlogintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceMemberDTO, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceMemberDTO, activated_),
  };
  AllianceMemberDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceMemberDTO_descriptor_,
      AllianceMemberDTO::default_instance_,
      AllianceMemberDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceMemberDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceMemberDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceMemberDTO));
  AllianceDTO_descriptor_ = file->message_type(12);
  static const int AllianceDTO_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceDTO, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceDTO, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceDTO, shortname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceDTO, honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceDTO, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceDTO, declaration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceDTO, ispublic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceDTO, joinpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceDTO, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceDTO, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceDTO, leaderabsence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceDTO, msgs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceDTO, memberlimit_),
  };
  AllianceDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceDTO_descriptor_,
      AllianceDTO::default_instance_,
      AllianceDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceDTO));
  CreateAllianceRequest_descriptor_ = file->message_type(13);
  static const int CreateAllianceRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAllianceRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAllianceRequest, declaration_),
  };
  CreateAllianceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateAllianceRequest_descriptor_,
      CreateAllianceRequest::default_instance_,
      CreateAllianceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAllianceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAllianceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateAllianceRequest));
  CreateAllianceResponse_descriptor_ = file->message_type(14);
  static const int CreateAllianceResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAllianceResponse, alliance_),
  };
  CreateAllianceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateAllianceResponse_descriptor_,
      CreateAllianceResponse::default_instance_,
      CreateAllianceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAllianceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAllianceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateAllianceResponse));
  QueryAllianceRequest_descriptor_ = file->message_type(15);
  static const int QueryAllianceRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAllianceRequest, allianceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAllianceRequest, alliancename_),
  };
  QueryAllianceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryAllianceRequest_descriptor_,
      QueryAllianceRequest::default_instance_,
      QueryAllianceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAllianceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAllianceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryAllianceRequest));
  QueryAllianceResponse_descriptor_ = file->message_type(16);
  static const int QueryAllianceResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAllianceResponse, alliance_),
  };
  QueryAllianceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryAllianceResponse_descriptor_,
      QueryAllianceResponse::default_instance_,
      QueryAllianceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAllianceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAllianceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryAllianceResponse));
  MyAllianceInfoRequest_descriptor_ = file->message_type(17);
  static const int MyAllianceInfoRequest_offsets_[1] = {
  };
  MyAllianceInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MyAllianceInfoRequest_descriptor_,
      MyAllianceInfoRequest::default_instance_,
      MyAllianceInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyAllianceInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyAllianceInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MyAllianceInfoRequest));
  MyAllianceInfoResponse_descriptor_ = file->message_type(18);
  static const int MyAllianceInfoResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyAllianceInfoResponse, alliance_),
  };
  MyAllianceInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MyAllianceInfoResponse_descriptor_,
      MyAllianceInfoResponse::default_instance_,
      MyAllianceInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyAllianceInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyAllianceInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MyAllianceInfoResponse));
  JoinAllianceRequest_descriptor_ = file->message_type(19);
  static const int JoinAllianceRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinAllianceRequest, allianceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinAllianceRequest, applymsg_),
  };
  JoinAllianceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinAllianceRequest_descriptor_,
      JoinAllianceRequest::default_instance_,
      JoinAllianceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinAllianceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinAllianceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinAllianceRequest));
  JoinAllianceResponse_descriptor_ = file->message_type(20);
  static const int JoinAllianceResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinAllianceResponse, alliance_),
  };
  JoinAllianceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinAllianceResponse_descriptor_,
      JoinAllianceResponse::default_instance_,
      JoinAllianceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinAllianceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinAllianceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinAllianceResponse));
  SetPositionRequest_descriptor_ = file->message_type(21);
  static const int SetPositionRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPositionRequest, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPositionRequest, position_),
  };
  SetPositionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetPositionRequest_descriptor_,
      SetPositionRequest::default_instance_,
      SetPositionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPositionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPositionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetPositionRequest));
  SetPositionResponse_descriptor_ = file->message_type(22);
  static const int SetPositionResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPositionResponse, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPositionResponse, position_),
  };
  SetPositionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetPositionResponse_descriptor_,
      SetPositionResponse::default_instance_,
      SetPositionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPositionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPositionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetPositionResponse));
  KickOutAllianceRequest_descriptor_ = file->message_type(23);
  static const int KickOutAllianceRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickOutAllianceRequest, playerid_),
  };
  KickOutAllianceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickOutAllianceRequest_descriptor_,
      KickOutAllianceRequest::default_instance_,
      KickOutAllianceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickOutAllianceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickOutAllianceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickOutAllianceRequest));
  ExitsAllianceRequest_descriptor_ = file->message_type(24);
  static const int ExitsAllianceRequest_offsets_[1] = {
  };
  ExitsAllianceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExitsAllianceRequest_descriptor_,
      ExitsAllianceRequest::default_instance_,
      ExitsAllianceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitsAllianceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitsAllianceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExitsAllianceRequest));
  ExitsAllianceResponse_descriptor_ = file->message_type(25);
  static const int ExitsAllianceResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitsAllianceResponse, playerid_),
  };
  ExitsAllianceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExitsAllianceResponse_descriptor_,
      ExitsAllianceResponse::default_instance_,
      ExitsAllianceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitsAllianceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitsAllianceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExitsAllianceResponse));
  TransferLeaderRequest_descriptor_ = file->message_type(26);
  static const int TransferLeaderRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferLeaderRequest, playerid_),
  };
  TransferLeaderRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransferLeaderRequest_descriptor_,
      TransferLeaderRequest::default_instance_,
      TransferLeaderRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferLeaderRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferLeaderRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransferLeaderRequest));
  TransferLeaderResponse_descriptor_ = file->message_type(27);
  static const int TransferLeaderResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferLeaderResponse, playerid_),
  };
  TransferLeaderResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransferLeaderResponse_descriptor_,
      TransferLeaderResponse::default_instance_,
      TransferLeaderResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferLeaderResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferLeaderResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransferLeaderResponse));
  AllianceSettingRequest_descriptor_ = file->message_type(28);
  static const int AllianceSettingRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceSettingRequest, alliancename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceSettingRequest, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceSettingRequest, declaration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceSettingRequest, ispublic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceSettingRequest, joinpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceSettingRequest, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceSettingRequest, shortname_),
  };
  AllianceSettingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceSettingRequest_descriptor_,
      AllianceSettingRequest::default_instance_,
      AllianceSettingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceSettingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceSettingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceSettingRequest));
  AllianceSettingResponse_descriptor_ = file->message_type(29);
  static const int AllianceSettingResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceSettingResponse, alliancename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceSettingResponse, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceSettingResponse, declaration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceSettingResponse, ispublic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceSettingResponse, joinpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceSettingResponse, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceSettingResponse, shortname_),
  };
  AllianceSettingResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceSettingResponse_descriptor_,
      AllianceSettingResponse::default_instance_,
      AllianceSettingResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceSettingResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceSettingResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceSettingResponse));
  AllianceApplyRequest_descriptor_ = file->message_type(30);
  static const int AllianceApplyRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceApplyRequest, isagree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceApplyRequest, playerid_),
  };
  AllianceApplyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceApplyRequest_descriptor_,
      AllianceApplyRequest::default_instance_,
      AllianceApplyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceApplyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceApplyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceApplyRequest));
  AllianceApplyesponse_descriptor_ = file->message_type(31);
  static const int AllianceApplyesponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceApplyesponse, isagree_),
  };
  AllianceApplyesponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceApplyesponse_descriptor_,
      AllianceApplyesponse::default_instance_,
      AllianceApplyesponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceApplyesponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceApplyesponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceApplyesponse));
  AllianceListRequest_descriptor_ = file->message_type(32);
  static const int AllianceListRequest_offsets_[1] = {
  };
  AllianceListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceListRequest_descriptor_,
      AllianceListRequest::default_instance_,
      AllianceListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceListRequest));
  AllianceListResponse_descriptor_ = file->message_type(33);
  static const int AllianceListResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceListResponse, alliancelist_),
  };
  AllianceListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceListResponse_descriptor_,
      AllianceListResponse::default_instance_,
      AllianceListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceListResponse));
  CheckAllianceNameRequest_descriptor_ = file->message_type(34);
  static const int CheckAllianceNameRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAllianceNameRequest, name_),
  };
  CheckAllianceNameRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckAllianceNameRequest_descriptor_,
      CheckAllianceNameRequest::default_instance_,
      CheckAllianceNameRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAllianceNameRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAllianceNameRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckAllianceNameRequest));
  CheckAllianceNameResponse_descriptor_ = file->message_type(35);
  static const int CheckAllianceNameResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAllianceNameResponse, isavailable_),
  };
  CheckAllianceNameResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckAllianceNameResponse_descriptor_,
      CheckAllianceNameResponse::default_instance_,
      CheckAllianceNameResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAllianceNameResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAllianceNameResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckAllianceNameResponse));
  SendAllianceHelpRequest_descriptor_ = file->message_type(36);
  static const int SendAllianceHelpRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendAllianceHelpRequest, timerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendAllianceHelpRequest, helptype_),
  };
  SendAllianceHelpRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendAllianceHelpRequest_descriptor_,
      SendAllianceHelpRequest::default_instance_,
      SendAllianceHelpRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendAllianceHelpRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendAllianceHelpRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendAllianceHelpRequest));
  HelpMemberRequest_descriptor_ = file->message_type(37);
  static const int HelpMemberRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelpMemberRequest, helpid_),
  };
  HelpMemberRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HelpMemberRequest_descriptor_,
      HelpMemberRequest::default_instance_,
      HelpMemberRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelpMemberRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelpMemberRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HelpMemberRequest));
  HelpMemberResponse_descriptor_ = file->message_type(38);
  static const int HelpMemberResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelpMemberResponse, helpid_),
  };
  HelpMemberResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HelpMemberResponse_descriptor_,
      HelpMemberResponse::default_instance_,
      HelpMemberResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelpMemberResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelpMemberResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HelpMemberResponse));
  AllianceHelpListRequest_descriptor_ = file->message_type(39);
  static const int AllianceHelpListRequest_offsets_[1] = {
  };
  AllianceHelpListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceHelpListRequest_descriptor_,
      AllianceHelpListRequest::default_instance_,
      AllianceHelpListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceHelpListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceHelpListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceHelpListRequest));
  AllianceHelpListResponse_descriptor_ = file->message_type(40);
  static const int AllianceHelpListResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceHelpListResponse, helplist_),
  };
  AllianceHelpListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceHelpListResponse_descriptor_,
      AllianceHelpListResponse::default_instance_,
      AllianceHelpListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceHelpListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceHelpListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceHelpListResponse));
  AllianceVoteRequest_descriptor_ = file->message_type(41);
  static const int AllianceVoteRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceVoteRequest, techtype_),
  };
  AllianceVoteRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceVoteRequest_descriptor_,
      AllianceVoteRequest::default_instance_,
      AllianceVoteRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceVoteRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceVoteRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceVoteRequest));
  AllianceVoteResponse_descriptor_ = file->message_type(42);
  static const int AllianceVoteResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceVoteResponse, techtype_),
  };
  AllianceVoteResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceVoteResponse_descriptor_,
      AllianceVoteResponse::default_instance_,
      AllianceVoteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceVoteResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceVoteResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceVoteResponse));
  AllianceTechUpgradeRequest_descriptor_ = file->message_type(43);
  static const int AllianceTechUpgradeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceTechUpgradeRequest, techtype_),
  };
  AllianceTechUpgradeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceTechUpgradeRequest_descriptor_,
      AllianceTechUpgradeRequest::default_instance_,
      AllianceTechUpgradeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceTechUpgradeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceTechUpgradeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceTechUpgradeRequest));
  AllianceTechUpgradeResponse_descriptor_ = file->message_type(44);
  static const int AllianceTechUpgradeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceTechUpgradeResponse, techtype_),
  };
  AllianceTechUpgradeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceTechUpgradeResponse_descriptor_,
      AllianceTechUpgradeResponse::default_instance_,
      AllianceTechUpgradeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceTechUpgradeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceTechUpgradeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceTechUpgradeResponse));
  ContributeInfoRequest_descriptor_ = file->message_type(45);
  static const int ContributeInfoRequest_offsets_[1] = {
  };
  ContributeInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContributeInfoRequest_descriptor_,
      ContributeInfoRequest::default_instance_,
      ContributeInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContributeInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContributeInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContributeInfoRequest));
  ContributeInfoResponse_descriptor_ = file->message_type(46);
  static const int ContributeInfoResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContributeInfoResponse, donationinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContributeInfoResponse, canreceivetimes_),
  };
  ContributeInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContributeInfoResponse_descriptor_,
      ContributeInfoResponse::default_instance_,
      ContributeInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContributeInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContributeInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContributeInfoResponse));
  ContributeRequest_descriptor_ = file->message_type(47);
  static const int ContributeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContributeRequest, level_),
  };
  ContributeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContributeRequest_descriptor_,
      ContributeRequest::default_instance_,
      ContributeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContributeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContributeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContributeRequest));
  DrawAllianceGiftRequest_descriptor_ = file->message_type(48);
  static const int DrawAllianceGiftRequest_offsets_[1] = {
  };
  DrawAllianceGiftRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DrawAllianceGiftRequest_descriptor_,
      DrawAllianceGiftRequest::default_instance_,
      DrawAllianceGiftRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawAllianceGiftRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawAllianceGiftRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DrawAllianceGiftRequest));
  DrawAllianceGiftResponse_descriptor_ = file->message_type(49);
  static const int DrawAllianceGiftResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawAllianceGiftResponse, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawAllianceGiftResponse, propertys_),
  };
  DrawAllianceGiftResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DrawAllianceGiftResponse_descriptor_,
      DrawAllianceGiftResponse::default_instance_,
      DrawAllianceGiftResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawAllianceGiftResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawAllianceGiftResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DrawAllianceGiftResponse));
  ClearContributedCdRequest_descriptor_ = file->message_type(50);
  static const int ClearContributedCdRequest_offsets_[1] = {
  };
  ClearContributedCdRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClearContributedCdRequest_descriptor_,
      ClearContributedCdRequest::default_instance_,
      ClearContributedCdRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearContributedCdRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearContributedCdRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClearContributedCdRequest));
  ClearContributedCdResponse_descriptor_ = file->message_type(51);
  static const int ClearContributedCdResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearContributedCdResponse, cancontributetime_),
  };
  ClearContributedCdResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClearContributedCdResponse_descriptor_,
      ClearContributedCdResponse::default_instance_,
      ClearContributedCdResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearContributedCdResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearContributedCdResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClearContributedCdResponse));
  AllianceShopInfoRequest_descriptor_ = file->message_type(52);
  static const int AllianceShopInfoRequest_offsets_[1] = {
  };
  AllianceShopInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceShopInfoRequest_descriptor_,
      AllianceShopInfoRequest::default_instance_,
      AllianceShopInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceShopInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceShopInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceShopInfoRequest));
  AllianceShopInfoResponse_descriptor_ = file->message_type(53);
  static const int AllianceShopInfoResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceShopInfoResponse, items_),
  };
  AllianceShopInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceShopInfoResponse_descriptor_,
      AllianceShopInfoResponse::default_instance_,
      AllianceShopInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceShopInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceShopInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceShopInfoResponse));
  AllianceShopBuyRequest_descriptor_ = file->message_type(54);
  static const int AllianceShopBuyRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceShopBuyRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceShopBuyRequest, num_),
  };
  AllianceShopBuyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceShopBuyRequest_descriptor_,
      AllianceShopBuyRequest::default_instance_,
      AllianceShopBuyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceShopBuyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceShopBuyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceShopBuyRequest));
  AllianceShopBuyResponse_descriptor_ = file->message_type(55);
  static const int AllianceShopBuyResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceShopBuyResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceShopBuyResponse, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceShopBuyResponse, itemid_),
  };
  AllianceShopBuyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceShopBuyResponse_descriptor_,
      AllianceShopBuyResponse::default_instance_,
      AllianceShopBuyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceShopBuyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceShopBuyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceShopBuyResponse));
  InviteJoinAllianceRequest_descriptor_ = file->message_type(56);
  static const int InviteJoinAllianceRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinAllianceRequest, playerid_),
  };
  InviteJoinAllianceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteJoinAllianceRequest_descriptor_,
      InviteJoinAllianceRequest::default_instance_,
      InviteJoinAllianceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinAllianceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinAllianceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteJoinAllianceRequest));
  InviteJoinAllianceResponse_descriptor_ = file->message_type(57);
  static const int InviteJoinAllianceResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinAllianceResponse, playerid_),
  };
  InviteJoinAllianceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteJoinAllianceResponse_descriptor_,
      InviteJoinAllianceResponse::default_instance_,
      InviteJoinAllianceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinAllianceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinAllianceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteJoinAllianceResponse));
  DealInviteRequest_descriptor_ = file->message_type(58);
  static const int DealInviteRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealInviteRequest, isagree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealInviteRequest, allianceid_),
  };
  DealInviteRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DealInviteRequest_descriptor_,
      DealInviteRequest::default_instance_,
      DealInviteRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealInviteRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealInviteRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DealInviteRequest));
  DealInviteResponse_descriptor_ = file->message_type(59);
  static const int DealInviteResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealInviteResponse, isagree_),
  };
  DealInviteResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DealInviteResponse_descriptor_,
      DealInviteResponse::default_instance_,
      DealInviteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealInviteResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealInviteResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DealInviteResponse));
  FreshRecommendRequest_descriptor_ = file->message_type(60);
  static const int FreshRecommendRequest_offsets_[1] = {
  };
  FreshRecommendRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FreshRecommendRequest_descriptor_,
      FreshRecommendRequest::default_instance_,
      FreshRecommendRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreshRecommendRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreshRecommendRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FreshRecommendRequest));
  FreshRecommendResponse_descriptor_ = file->message_type(61);
  static const int FreshRecommendResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreshRecommendResponse, recommendlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreshRecommendResponse, nexttime_),
  };
  FreshRecommendResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FreshRecommendResponse_descriptor_,
      FreshRecommendResponse::default_instance_,
      FreshRecommendResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreshRecommendResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreshRecommendResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FreshRecommendResponse));
  GetRecommendRequest_descriptor_ = file->message_type(62);
  static const int GetRecommendRequest_offsets_[1] = {
  };
  GetRecommendRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRecommendRequest_descriptor_,
      GetRecommendRequest::default_instance_,
      GetRecommendRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRecommendRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRecommendRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRecommendRequest));
  GetRecommendResponse_descriptor_ = file->message_type(63);
  static const int GetRecommendResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRecommendResponse, recommendlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRecommendResponse, nexttime_),
  };
  GetRecommendResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRecommendResponse_descriptor_,
      GetRecommendResponse::default_instance_,
      GetRecommendResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRecommendResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRecommendResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRecommendResponse));
  QuickJoinRequest_descriptor_ = file->message_type(64);
  static const int QuickJoinRequest_offsets_[1] = {
  };
  QuickJoinRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuickJoinRequest_descriptor_,
      QuickJoinRequest::default_instance_,
      QuickJoinRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickJoinRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickJoinRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuickJoinRequest));
  QueryInviterRequest_descriptor_ = file->message_type(65);
  static const int QueryInviterRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInviterRequest, playername_),
  };
  QueryInviterRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryInviterRequest_descriptor_,
      QueryInviterRequest::default_instance_,
      QueryInviterRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInviterRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInviterRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryInviterRequest));
  QueryInviterResponse_descriptor_ = file->message_type(66);
  static const int QueryInviterResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInviterResponse, player_),
  };
  QueryInviterResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryInviterResponse_descriptor_,
      QueryInviterResponse::default_instance_,
      QueryInviterResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInviterResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInviterResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryInviterResponse));
  AllianceMemberRequest_descriptor_ = file->message_type(67);
  static const int AllianceMemberRequest_offsets_[1] = {
  };
  AllianceMemberRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceMemberRequest_descriptor_,
      AllianceMemberRequest::default_instance_,
      AllianceMemberRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceMemberRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceMemberRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceMemberRequest));
  AllianceMemberResponse_descriptor_ = file->message_type(68);
  static const int AllianceMemberResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceMemberResponse, memberlist_),
  };
  AllianceMemberResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceMemberResponse_descriptor_,
      AllianceMemberResponse::default_instance_,
      AllianceMemberResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceMemberResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceMemberResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceMemberResponse));
  NeedAllianceDataRequest_descriptor_ = file->message_type(69);
  static const int NeedAllianceDataRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeedAllianceDataRequest, isneed_),
  };
  NeedAllianceDataRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NeedAllianceDataRequest_descriptor_,
      NeedAllianceDataRequest::default_instance_,
      NeedAllianceDataRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeedAllianceDataRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeedAllianceDataRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NeedAllianceDataRequest));
  AllianceSummaryRequest_descriptor_ = file->message_type(70);
  static const int AllianceSummaryRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceSummaryRequest, name_),
  };
  AllianceSummaryRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceSummaryRequest_descriptor_,
      AllianceSummaryRequest::default_instance_,
      AllianceSummaryRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceSummaryRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceSummaryRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceSummaryRequest));
  AllianceSummaryResponse_descriptor_ = file->message_type(71);
  static const int AllianceSummaryResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceSummaryResponse, summaryinfo_),
  };
  AllianceSummaryResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceSummaryResponse_descriptor_,
      AllianceSummaryResponse::default_instance_,
      AllianceSummaryResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceSummaryResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceSummaryResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceSummaryResponse));
  MemberChangePush_descriptor_ = file->message_type(72);
  static const int MemberChangePush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberChangePush, members_),
  };
  MemberChangePush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemberChangePush_descriptor_,
      MemberChangePush::default_instance_,
      MemberChangePush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberChangePush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberChangePush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemberChangePush));
  MemberExitPush_descriptor_ = file->message_type(73);
  static const int MemberExitPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberExitPush, playerid_),
  };
  MemberExitPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemberExitPush_descriptor_,
      MemberExitPush::default_instance_,
      MemberExitPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberExitPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberExitPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemberExitPush));
  MyAllianceInfoPush_descriptor_ = file->message_type(74);
  static const int MyAllianceInfoPush_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyAllianceInfoPush, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyAllianceInfoPush, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyAllianceInfoPush, shortname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyAllianceInfoPush, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyAllianceInfoPush, position_),
  };
  MyAllianceInfoPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MyAllianceInfoPush_descriptor_,
      MyAllianceInfoPush::default_instance_,
      MyAllianceInfoPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyAllianceInfoPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyAllianceInfoPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MyAllianceInfoPush));
  HelpChangePush_descriptor_ = file->message_type(75);
  static const int HelpChangePush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelpChangePush, help_),
  };
  HelpChangePush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HelpChangePush_descriptor_,
      HelpChangePush::default_instance_,
      HelpChangePush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelpChangePush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelpChangePush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HelpChangePush));
  HelpRemovePush_descriptor_ = file->message_type(76);
  static const int HelpRemovePush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelpRemovePush, helpid_),
  };
  HelpRemovePush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HelpRemovePush_descriptor_,
      HelpRemovePush::default_instance_,
      HelpRemovePush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelpRemovePush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelpRemovePush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HelpRemovePush));
  AllianceNewsPush_descriptor_ = file->message_type(77);
  static const int AllianceNewsPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceNewsPush, news_),
  };
  AllianceNewsPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceNewsPush_descriptor_,
      AllianceNewsPush::default_instance_,
      AllianceNewsPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceNewsPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceNewsPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceNewsPush));
  AllianceTechPush_descriptor_ = file->message_type(78);
  static const int AllianceTechPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceTechPush, techs_),
  };
  AllianceTechPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceTechPush_descriptor_,
      AllianceTechPush::default_instance_,
      AllianceTechPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceTechPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceTechPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceTechPush));
  AllianceTechUpgradePush_descriptor_ = file->message_type(79);
  static const int AllianceTechUpgradePush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceTechUpgradePush, upgrade_),
  };
  AllianceTechUpgradePush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceTechUpgradePush_descriptor_,
      AllianceTechUpgradePush::default_instance_,
      AllianceTechUpgradePush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceTechUpgradePush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceTechUpgradePush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceTechUpgradePush));
  AllianceDonationPush_descriptor_ = file->message_type(80);
  static const int AllianceDonationPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceDonationPush, info_),
  };
  AllianceDonationPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceDonationPush_descriptor_,
      AllianceDonationPush::default_instance_,
      AllianceDonationPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceDonationPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceDonationPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceDonationPush));
  AllianceWelfarePush_descriptor_ = file->message_type(81);
  static const int AllianceWelfarePush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceWelfarePush, canreceivetimes_),
  };
  AllianceWelfarePush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceWelfarePush_descriptor_,
      AllianceWelfarePush::default_instance_,
      AllianceWelfarePush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceWelfarePush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceWelfarePush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceWelfarePush));
  AllianceNewsRemovePush_descriptor_ = file->message_type(82);
  static const int AllianceNewsRemovePush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceNewsRemovePush, newsid_),
  };
  AllianceNewsRemovePush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceNewsRemovePush_descriptor_,
      AllianceNewsRemovePush::default_instance_,
      AllianceNewsRemovePush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceNewsRemovePush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceNewsRemovePush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceNewsRemovePush));
  AllianceInvitePush_descriptor_ = file->message_type(83);
  static const int AllianceInvitePush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceInvitePush, invitelist_),
  };
  AllianceInvitePush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceInvitePush_descriptor_,
      AllianceInvitePush::default_instance_,
      AllianceInvitePush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceInvitePush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceInvitePush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceInvitePush));
  HasSendHelpTimesPush_descriptor_ = file->message_type(84);
  static const int HasSendHelpTimesPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HasSendHelpTimesPush, timerids_),
  };
  HasSendHelpTimesPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HasSendHelpTimesPush_descriptor_,
      HasSendHelpTimesPush::default_instance_,
      HasSendHelpTimesPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HasSendHelpTimesPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HasSendHelpTimesPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HasSendHelpTimesPush));
  AllianceScorePush_descriptor_ = file->message_type(85);
  static const int AllianceScorePush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceScorePush, score_),
  };
  AllianceScorePush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceScorePush_descriptor_,
      AllianceScorePush::default_instance_,
      AllianceScorePush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceScorePush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceScorePush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceScorePush));
  MyVotePush_descriptor_ = file->message_type(86);
  static const int MyVotePush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyVotePush, votetype_),
  };
  MyVotePush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MyVotePush_descriptor_,
      MyVotePush::default_instance_,
      MyVotePush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyVotePush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyVotePush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MyVotePush));
  AllianceVoteInfoPush_descriptor_ = file->message_type(87);
  static const int AllianceVoteInfoPush_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceVoteInfoPush, votes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceVoteInfoPush, isclear_),
  };
  AllianceVoteInfoPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceVoteInfoPush_descriptor_,
      AllianceVoteInfoPush::default_instance_,
      AllianceVoteInfoPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceVoteInfoPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceVoteInfoPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceVoteInfoPush));
  AllianceChangePush_descriptor_ = file->message_type(88);
  static const int AllianceChangePush_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceChangePush, alliancename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceChangePush, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceChangePush, declaration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceChangePush, ispublic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceChangePush, joinpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceChangePush, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceChangePush, shortname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceChangePush, honor_),
  };
  AllianceChangePush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceChangePush_descriptor_,
      AllianceChangePush::default_instance_,
      AllianceChangePush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceChangePush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceChangePush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceChangePush));
  AllianceCommandId_descriptor_ = file->enum_type(0);
  AlliancePushId_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_alliance_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceSummaryDTO_descriptor_, &AllianceSummaryDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceTechVoteDTO_descriptor_, &AllianceTechVoteDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecommendDTO_descriptor_, &RecommendDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceInviteDTO_descriptor_, &AllianceInviteDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceShopItemDTO_descriptor_, &AllianceShopItemDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContributeDTO_descriptor_, &ContributeDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceContributeInfoDTO_descriptor_, &AllianceContributeInfoDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceTechDTO_descriptor_, &AllianceTechDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceTechUpgradeDTO_descriptor_, &AllianceTechUpgradeDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceNewsDTO_descriptor_, &AllianceNewsDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceHelpDTO_descriptor_, &AllianceHelpDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceMemberDTO_descriptor_, &AllianceMemberDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceDTO_descriptor_, &AllianceDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateAllianceRequest_descriptor_, &CreateAllianceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateAllianceResponse_descriptor_, &CreateAllianceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryAllianceRequest_descriptor_, &QueryAllianceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryAllianceResponse_descriptor_, &QueryAllianceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MyAllianceInfoRequest_descriptor_, &MyAllianceInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MyAllianceInfoResponse_descriptor_, &MyAllianceInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinAllianceRequest_descriptor_, &JoinAllianceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinAllianceResponse_descriptor_, &JoinAllianceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetPositionRequest_descriptor_, &SetPositionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetPositionResponse_descriptor_, &SetPositionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickOutAllianceRequest_descriptor_, &KickOutAllianceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExitsAllianceRequest_descriptor_, &ExitsAllianceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExitsAllianceResponse_descriptor_, &ExitsAllianceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransferLeaderRequest_descriptor_, &TransferLeaderRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransferLeaderResponse_descriptor_, &TransferLeaderResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceSettingRequest_descriptor_, &AllianceSettingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceSettingResponse_descriptor_, &AllianceSettingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceApplyRequest_descriptor_, &AllianceApplyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceApplyesponse_descriptor_, &AllianceApplyesponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceListRequest_descriptor_, &AllianceListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceListResponse_descriptor_, &AllianceListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckAllianceNameRequest_descriptor_, &CheckAllianceNameRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckAllianceNameResponse_descriptor_, &CheckAllianceNameResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendAllianceHelpRequest_descriptor_, &SendAllianceHelpRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HelpMemberRequest_descriptor_, &HelpMemberRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HelpMemberResponse_descriptor_, &HelpMemberResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceHelpListRequest_descriptor_, &AllianceHelpListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceHelpListResponse_descriptor_, &AllianceHelpListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceVoteRequest_descriptor_, &AllianceVoteRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceVoteResponse_descriptor_, &AllianceVoteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceTechUpgradeRequest_descriptor_, &AllianceTechUpgradeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceTechUpgradeResponse_descriptor_, &AllianceTechUpgradeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContributeInfoRequest_descriptor_, &ContributeInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContributeInfoResponse_descriptor_, &ContributeInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContributeRequest_descriptor_, &ContributeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DrawAllianceGiftRequest_descriptor_, &DrawAllianceGiftRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DrawAllianceGiftResponse_descriptor_, &DrawAllianceGiftResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClearContributedCdRequest_descriptor_, &ClearContributedCdRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClearContributedCdResponse_descriptor_, &ClearContributedCdResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceShopInfoRequest_descriptor_, &AllianceShopInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceShopInfoResponse_descriptor_, &AllianceShopInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceShopBuyRequest_descriptor_, &AllianceShopBuyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceShopBuyResponse_descriptor_, &AllianceShopBuyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteJoinAllianceRequest_descriptor_, &InviteJoinAllianceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteJoinAllianceResponse_descriptor_, &InviteJoinAllianceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DealInviteRequest_descriptor_, &DealInviteRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DealInviteResponse_descriptor_, &DealInviteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FreshRecommendRequest_descriptor_, &FreshRecommendRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FreshRecommendResponse_descriptor_, &FreshRecommendResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRecommendRequest_descriptor_, &GetRecommendRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRecommendResponse_descriptor_, &GetRecommendResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuickJoinRequest_descriptor_, &QuickJoinRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryInviterRequest_descriptor_, &QueryInviterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryInviterResponse_descriptor_, &QueryInviterResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceMemberRequest_descriptor_, &AllianceMemberRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceMemberResponse_descriptor_, &AllianceMemberResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NeedAllianceDataRequest_descriptor_, &NeedAllianceDataRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceSummaryRequest_descriptor_, &AllianceSummaryRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceSummaryResponse_descriptor_, &AllianceSummaryResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemberChangePush_descriptor_, &MemberChangePush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemberExitPush_descriptor_, &MemberExitPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MyAllianceInfoPush_descriptor_, &MyAllianceInfoPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HelpChangePush_descriptor_, &HelpChangePush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HelpRemovePush_descriptor_, &HelpRemovePush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceNewsPush_descriptor_, &AllianceNewsPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceTechPush_descriptor_, &AllianceTechPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceTechUpgradePush_descriptor_, &AllianceTechUpgradePush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceDonationPush_descriptor_, &AllianceDonationPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceWelfarePush_descriptor_, &AllianceWelfarePush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceNewsRemovePush_descriptor_, &AllianceNewsRemovePush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceInvitePush_descriptor_, &AllianceInvitePush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HasSendHelpTimesPush_descriptor_, &HasSendHelpTimesPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceScorePush_descriptor_, &AllianceScorePush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MyVotePush_descriptor_, &MyVotePush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceVoteInfoPush_descriptor_, &AllianceVoteInfoPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceChangePush_descriptor_, &AllianceChangePush::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_alliance_2eproto() {
  delete AllianceSummaryDTO::default_instance_;
  delete AllianceSummaryDTO_reflection_;
  delete AllianceTechVoteDTO::default_instance_;
  delete AllianceTechVoteDTO_reflection_;
  delete RecommendDTO::default_instance_;
  delete RecommendDTO_reflection_;
  delete AllianceInviteDTO::default_instance_;
  delete AllianceInviteDTO_reflection_;
  delete AllianceShopItemDTO::default_instance_;
  delete AllianceShopItemDTO_reflection_;
  delete ContributeDTO::default_instance_;
  delete ContributeDTO_reflection_;
  delete AllianceContributeInfoDTO::default_instance_;
  delete AllianceContributeInfoDTO_reflection_;
  delete AllianceTechDTO::default_instance_;
  delete AllianceTechDTO_reflection_;
  delete AllianceTechUpgradeDTO::default_instance_;
  delete AllianceTechUpgradeDTO_reflection_;
  delete AllianceNewsDTO::default_instance_;
  delete AllianceNewsDTO_reflection_;
  delete AllianceHelpDTO::default_instance_;
  delete AllianceHelpDTO_reflection_;
  delete AllianceMemberDTO::default_instance_;
  delete AllianceMemberDTO_reflection_;
  delete AllianceDTO::default_instance_;
  delete AllianceDTO_reflection_;
  delete CreateAllianceRequest::default_instance_;
  delete CreateAllianceRequest_reflection_;
  delete CreateAllianceResponse::default_instance_;
  delete CreateAllianceResponse_reflection_;
  delete QueryAllianceRequest::default_instance_;
  delete QueryAllianceRequest_reflection_;
  delete QueryAllianceResponse::default_instance_;
  delete QueryAllianceResponse_reflection_;
  delete MyAllianceInfoRequest::default_instance_;
  delete MyAllianceInfoRequest_reflection_;
  delete MyAllianceInfoResponse::default_instance_;
  delete MyAllianceInfoResponse_reflection_;
  delete JoinAllianceRequest::default_instance_;
  delete JoinAllianceRequest_reflection_;
  delete JoinAllianceResponse::default_instance_;
  delete JoinAllianceResponse_reflection_;
  delete SetPositionRequest::default_instance_;
  delete SetPositionRequest_reflection_;
  delete SetPositionResponse::default_instance_;
  delete SetPositionResponse_reflection_;
  delete KickOutAllianceRequest::default_instance_;
  delete KickOutAllianceRequest_reflection_;
  delete ExitsAllianceRequest::default_instance_;
  delete ExitsAllianceRequest_reflection_;
  delete ExitsAllianceResponse::default_instance_;
  delete ExitsAllianceResponse_reflection_;
  delete TransferLeaderRequest::default_instance_;
  delete TransferLeaderRequest_reflection_;
  delete TransferLeaderResponse::default_instance_;
  delete TransferLeaderResponse_reflection_;
  delete AllianceSettingRequest::default_instance_;
  delete AllianceSettingRequest_reflection_;
  delete AllianceSettingResponse::default_instance_;
  delete AllianceSettingResponse_reflection_;
  delete AllianceApplyRequest::default_instance_;
  delete AllianceApplyRequest_reflection_;
  delete AllianceApplyesponse::default_instance_;
  delete AllianceApplyesponse_reflection_;
  delete AllianceListRequest::default_instance_;
  delete AllianceListRequest_reflection_;
  delete AllianceListResponse::default_instance_;
  delete AllianceListResponse_reflection_;
  delete CheckAllianceNameRequest::default_instance_;
  delete CheckAllianceNameRequest_reflection_;
  delete CheckAllianceNameResponse::default_instance_;
  delete CheckAllianceNameResponse_reflection_;
  delete SendAllianceHelpRequest::default_instance_;
  delete SendAllianceHelpRequest_reflection_;
  delete HelpMemberRequest::default_instance_;
  delete HelpMemberRequest_reflection_;
  delete HelpMemberResponse::default_instance_;
  delete HelpMemberResponse_reflection_;
  delete AllianceHelpListRequest::default_instance_;
  delete AllianceHelpListRequest_reflection_;
  delete AllianceHelpListResponse::default_instance_;
  delete AllianceHelpListResponse_reflection_;
  delete AllianceVoteRequest::default_instance_;
  delete AllianceVoteRequest_reflection_;
  delete AllianceVoteResponse::default_instance_;
  delete AllianceVoteResponse_reflection_;
  delete AllianceTechUpgradeRequest::default_instance_;
  delete AllianceTechUpgradeRequest_reflection_;
  delete AllianceTechUpgradeResponse::default_instance_;
  delete AllianceTechUpgradeResponse_reflection_;
  delete ContributeInfoRequest::default_instance_;
  delete ContributeInfoRequest_reflection_;
  delete ContributeInfoResponse::default_instance_;
  delete ContributeInfoResponse_reflection_;
  delete ContributeRequest::default_instance_;
  delete ContributeRequest_reflection_;
  delete DrawAllianceGiftRequest::default_instance_;
  delete DrawAllianceGiftRequest_reflection_;
  delete DrawAllianceGiftResponse::default_instance_;
  delete DrawAllianceGiftResponse_reflection_;
  delete ClearContributedCdRequest::default_instance_;
  delete ClearContributedCdRequest_reflection_;
  delete ClearContributedCdResponse::default_instance_;
  delete ClearContributedCdResponse_reflection_;
  delete AllianceShopInfoRequest::default_instance_;
  delete AllianceShopInfoRequest_reflection_;
  delete AllianceShopInfoResponse::default_instance_;
  delete AllianceShopInfoResponse_reflection_;
  delete AllianceShopBuyRequest::default_instance_;
  delete AllianceShopBuyRequest_reflection_;
  delete AllianceShopBuyResponse::default_instance_;
  delete AllianceShopBuyResponse_reflection_;
  delete InviteJoinAllianceRequest::default_instance_;
  delete InviteJoinAllianceRequest_reflection_;
  delete InviteJoinAllianceResponse::default_instance_;
  delete InviteJoinAllianceResponse_reflection_;
  delete DealInviteRequest::default_instance_;
  delete DealInviteRequest_reflection_;
  delete DealInviteResponse::default_instance_;
  delete DealInviteResponse_reflection_;
  delete FreshRecommendRequest::default_instance_;
  delete FreshRecommendRequest_reflection_;
  delete FreshRecommendResponse::default_instance_;
  delete FreshRecommendResponse_reflection_;
  delete GetRecommendRequest::default_instance_;
  delete GetRecommendRequest_reflection_;
  delete GetRecommendResponse::default_instance_;
  delete GetRecommendResponse_reflection_;
  delete QuickJoinRequest::default_instance_;
  delete QuickJoinRequest_reflection_;
  delete QueryInviterRequest::default_instance_;
  delete QueryInviterRequest_reflection_;
  delete QueryInviterResponse::default_instance_;
  delete QueryInviterResponse_reflection_;
  delete AllianceMemberRequest::default_instance_;
  delete AllianceMemberRequest_reflection_;
  delete AllianceMemberResponse::default_instance_;
  delete AllianceMemberResponse_reflection_;
  delete NeedAllianceDataRequest::default_instance_;
  delete NeedAllianceDataRequest_reflection_;
  delete AllianceSummaryRequest::default_instance_;
  delete AllianceSummaryRequest_reflection_;
  delete AllianceSummaryResponse::default_instance_;
  delete AllianceSummaryResponse_reflection_;
  delete MemberChangePush::default_instance_;
  delete MemberChangePush_reflection_;
  delete MemberExitPush::default_instance_;
  delete MemberExitPush_reflection_;
  delete MyAllianceInfoPush::default_instance_;
  delete MyAllianceInfoPush_reflection_;
  delete HelpChangePush::default_instance_;
  delete HelpChangePush_reflection_;
  delete HelpRemovePush::default_instance_;
  delete HelpRemovePush_reflection_;
  delete AllianceNewsPush::default_instance_;
  delete AllianceNewsPush_reflection_;
  delete AllianceTechPush::default_instance_;
  delete AllianceTechPush_reflection_;
  delete AllianceTechUpgradePush::default_instance_;
  delete AllianceTechUpgradePush_reflection_;
  delete AllianceDonationPush::default_instance_;
  delete AllianceDonationPush_reflection_;
  delete AllianceWelfarePush::default_instance_;
  delete AllianceWelfarePush_reflection_;
  delete AllianceNewsRemovePush::default_instance_;
  delete AllianceNewsRemovePush_reflection_;
  delete AllianceInvitePush::default_instance_;
  delete AllianceInvitePush_reflection_;
  delete HasSendHelpTimesPush::default_instance_;
  delete HasSendHelpTimesPush_reflection_;
  delete AllianceScorePush::default_instance_;
  delete AllianceScorePush_reflection_;
  delete MyVotePush::default_instance_;
  delete MyVotePush_reflection_;
  delete AllianceVoteInfoPush::default_instance_;
  delete AllianceVoteInfoPush_reflection_;
  delete AllianceChangePush::default_instance_;
  delete AllianceChangePush_reflection_;
}

void protobuf_AddDesc_alliance_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::slg::protocol::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016alliance.proto\022\014slg.protocol\032\014common.p"
    "roto\"\213\001\n\022AllianceSummaryDTO\022\n\n\002id\030\001 \002(\005\022"
    "\014\n\004name\030\002 \002(\t\022\r\n\005honor\030\003 \002(\005\022\014\n\004flag\030\004 \002"
    "(\005\022\022\n\nleaderName\030\005 \002(\t\022\023\n\013memberLimit\030\006 "
    "\002(\005\022\025\n\rcurrentMember\030\007 \002(\005\"8\n\023AllianceTe"
    "chVoteDTO\022\020\n\010techType\030\001 \002(\005\022\017\n\007voteNum\030\002"
    " \002(\005\"e\n\014RecommendDTO\022\020\n\010playerId\030\001 \002(\003\022\014"
    "\n\004icon\030\002 \002(\t\022\016\n\006battle\030\003 \002(\005\022\021\n\tisInvite"
    "d\030\004 \002(\010\022\022\n\nplayerName\030\005 \002(\t\"\264\001\n\021Alliance"
    "InviteDTO\022\022\n\nallianceId\030\001 \002(\005\022\024\n\014allianc"
    "eName\030\002 \002(\t\022\014\n\004icon\030\003 \002(\005\022\017\n\007current\030\004 \002"
    "(\005\022\r\n\005limit\030\005 \002(\005\022\r\n\005honor\030\006 \002(\005\022\020\n\010lead"
    "erId\030\007 \002(\003\022\022\n\nleaderName\030\010 \002(\t\022\022\n\ninvite"
    "Time\030\t \002(\005\"3\n\023AllianceShopItemDTO\022\n\n\002id\030"
    "\001 \002(\005\022\020\n\010buyTimes\030\002 \002(\005\"=\n\rContributeDTO"
    "\022\r\n\005level\030\001 \002(\005\022\017\n\007is_open\030\002 \002(\010\022\014\n\004type"
    "\030\003 \002(\005\"\214\001\n\031AllianceContributeInfoDTO\0220\n\013"
    "contributes\030\001 \003(\0132\033.slg.protocol.Contrib"
    "uteDTO\022\024\n\014coolDownTime\030\002 \002(\005\022\025\n\rcoolStar"
    "tTime\030\003 \002(\005\022\020\n\010isJoinCd\030\004 \002(\010\".\n\017Allianc"
    "eTechDTO\022\014\n\004type\030\001 \002(\005\022\r\n\005level\030\002 \002(\005\"7\n"
    "\026AllianceTechUpgradeDTO\022\014\n\004type\030\001 \002(\005\022\017\n"
    "\007endTime\030\002 \002(\005\"\202\002\n\017AllianceNewsDTO\022\n\n\002id"
    "\030\001 \002(\005\022\014\n\004type\030\002 \002(\005\022\020\n\010targetId\030\003 \001(\003\022\020"
    "\n\010applyMsg\030\004 \001(\t\022\023\n\013playerName1\030\005 \001(\t\022\023\n"
    "\013playerName2\030\006 \001(\t\022+\n\010position\030\007 \001(\0132\031.s"
    "lg.protocol.PositionDTO\022\014\n\004time\030\010 \001(\005\022\023\n"
    "\013friendIsWin\030\t \001(\010\022\027\n\017enAlliShortName\030\n "
    "\001(\t\022\016\n\006param1\030\013 \001(\005\022\016\n\006param2\030\014 \001(\005\"\312\001\n\017"
    "AllianceHelpDTO\022\017\n\007timerId\030\001 \002(\005\022\020\n\010play"
    "erId\030\002 \002(\003\022\022\n\nplayerName\030\003 \002(\t\022\020\n\010target"
    "Id\030\004 \002(\005\022\020\n\010helpType\030\005 \002(\005\022\021\n\thelpTimes\030"
    "\006 \002(\005\022\023\n\013targetLevel\030\007 \002(\005\022\020\n\010maxTimes\030\010"
    " \002(\005\022\022\n\nplayerIcon\030\t \002(\t\022\016\n\006helpId\030\n \002(\005"
    "\"\215\002\n\021AllianceMemberDTO\022\020\n\010playerId\030\001 \002(\003"
    "\022\014\n\004name\030\002 \002(\t\022\r\n\005power\030\003 \002(\005\022\022\n\nhistory"
    "Don\030\004 \002(\005\022\016\n\006dayDon\030\005 \002(\005\022\017\n\007weekDon\030\006 \002"
    "(\005\022\020\n\010isOnline\030\007 \002(\010\022\014\n\004icon\030\010 \002(\t\022\020\n\010po"
    "sition\030\t \002(\005\022&\n\003pos\030\n \002(\0132\031.slg.protocol"
    ".PositionDTO\022\025\n\rlastLoginTime\030\013 \002(\005\022\020\n\010v"
    "ipLevel\030\014 \002(\005\022\021\n\tactivated\030\r \002(\010\"\256\002\n\013All"
    "ianceDTO\022\n\n\002id\030\001 \002(\005\022\014\n\004name\030\002 \002(\t\022\021\n\tsh"
    "ortName\030\003 \002(\t\022\r\n\005honor\030\004 \002(\005\022\014\n\004flag\030\005 \002"
    "(\005\022\023\n\013declaration\030\006 \002(\t\022\020\n\010isPublic\030\007 \002("
    "\010\022\021\n\tjoinPower\030\010 \002(\005\022\020\n\010language\030\t \002(\t\0220"
    "\n\007members\030\n \003(\0132\037.slg.protocol.AllianceM"
    "emberDTO\022\025\n\rleaderAbsence\030\013 \002(\010\022+\n\004msgs\030"
    "\014 \003(\0132\035.slg.protocol.AllianceNewsDTO\022\023\n\013"
    "memberLimit\030\r \002(\005\":\n\025CreateAllianceReque"
    "st\022\014\n\004name\030\001 \002(\t\022\023\n\013declaration\030\002 \002(\t\"E\n"
    "\026CreateAllianceResponse\022+\n\010alliance\030\001 \002("
    "\0132\031.slg.protocol.AllianceDTO\"@\n\024QueryAll"
    "ianceRequest\022\022\n\nallianceId\030\001 \001(\005\022\024\n\014alli"
    "anceName\030\002 \001(\t\"D\n\025QueryAllianceResponse\022"
    "+\n\010alliance\030\001 \001(\0132\031.slg.protocol.Allianc"
    "eDTO\"\027\n\025MyAllianceInfoRequest\"E\n\026MyAllia"
    "nceInfoResponse\022+\n\010alliance\030\001 \001(\0132\031.slg."
    "protocol.AllianceDTO\";\n\023JoinAllianceRequ"
    "est\022\022\n\nallianceId\030\001 \002(\005\022\020\n\010applyMsg\030\002 \001("
    "\t\"C\n\024JoinAllianceResponse\022+\n\010alliance\030\001 "
    "\001(\0132\031.slg.protocol.AllianceDTO\"8\n\022SetPos"
    "itionRequest\022\020\n\010playerId\030\001 \002(\003\022\020\n\010positi"
    "on\030\002 \002(\005\"9\n\023SetPositionResponse\022\020\n\010playe"
    "rId\030\001 \002(\003\022\020\n\010position\030\002 \002(\005\"*\n\026KickOutAl"
    "lianceRequest\022\020\n\010playerId\030\001 \002(\003\"\026\n\024Exits"
    "AllianceRequest\")\n\025ExitsAllianceResponse"
    "\022\020\n\010playerId\030\001 \002(\003\")\n\025TransferLeaderRequ"
    "est\022\020\n\010playerId\030\001 \002(\003\"*\n\026TransferLeaderR"
    "esponse\022\020\n\010playerId\030\001 \002(\003\"\233\001\n\026AllianceSe"
    "ttingRequest\022\024\n\014allianceName\030\001 \001(\t\022\014\n\004fl"
    "ag\030\002 \001(\005\022\023\n\013declaration\030\003 \001(\t\022\020\n\010isPubli"
    "c\030\004 \001(\010\022\021\n\tjoinPower\030\005 \001(\005\022\020\n\010language\030\006"
    " \001(\t\022\021\n\tshortName\030\007 \001(\t\"\234\001\n\027AllianceSett"
    "ingResponse\022\024\n\014allianceName\030\001 \001(\t\022\014\n\004fla"
    "g\030\002 \001(\005\022\023\n\013declaration\030\003 \001(\t\022\020\n\010isPublic"
    "\030\004 \001(\010\022\021\n\tjoinPower\030\005 \001(\005\022\020\n\010language\030\006 "
    "\001(\t\022\021\n\tshortName\030\007 \001(\t\"9\n\024AllianceApplyR"
    "equest\022\017\n\007isAgree\030\001 \002(\010\022\020\n\010playerId\030\002 \002("
    "\003\"\'\n\024AllianceApplyesponse\022\017\n\007isAgree\030\001 \002"
    "(\010\"\025\n\023AllianceListRequest\"N\n\024AllianceLis"
    "tResponse\0226\n\014allianceList\030\001 \003(\0132 .slg.pr"
    "otocol.AllianceSummaryDTO\"(\n\030CheckAllian"
    "ceNameRequest\022\014\n\004name\030\001 \002(\t\"0\n\031CheckAlli"
    "anceNameResponse\022\023\n\013isAvailable\030\001 \002(\010\"<\n"
    "\027SendAllianceHelpRequest\022\017\n\007timerId\030\001 \002("
    "\005\022\020\n\010helpType\030\002 \002(\005\"#\n\021HelpMemberRequest"
    "\022\016\n\006helpId\030\001 \002(\005\"$\n\022HelpMemberResponse\022\016"
    "\n\006helpId\030\001 \002(\005\"\031\n\027AllianceHelpListReques"
    "t\"K\n\030AllianceHelpListResponse\022/\n\010helpLis"
    "t\030\001 \003(\0132\035.slg.protocol.AllianceHelpDTO\"\'"
    "\n\023AllianceVoteRequest\022\020\n\010techType\030\001 \002(\005\""
    "(\n\024AllianceVoteResponse\022\020\n\010techType\030\001 \002("
    "\005\".\n\032AllianceTechUpgradeRequest\022\020\n\010techT"
    "ype\030\001 \002(\005\"/\n\033AllianceTechUpgradeResponse"
    "\022\020\n\010techType\030\001 \002(\005\"\027\n\025ContributeInfoRequ"
    "est\"p\n\026ContributeInfoResponse\022=\n\014donatio"
    "nInfo\030\001 \002(\0132\'.slg.protocol.AllianceContr"
    "ibuteInfoDTO\022\027\n\017canReceiveTimes\030\002 \002(\005\"\"\n"
    "\021ContributeRequest\022\r\n\005level\030\001 \002(\005\"\031\n\027Dra"
    "wAllianceGiftRequest\"n\n\030DrawAllianceGift"
    "Response\022$\n\005items\030\001 \003(\0132\025.slg.protocol.I"
    "temDTO\022,\n\tpropertys\030\002 \003(\0132\031.slg.protocol"
    ".PropertyDTO\"\033\n\031ClearContributedCdReques"
    "t\"7\n\032ClearContributedCdResponse\022\031\n\021canCo"
    "ntributeTime\030\001 \002(\005\"\031\n\027AllianceShopInfoRe"
    "quest\"L\n\030AllianceShopInfoResponse\0220\n\005ite"
    "ms\030\001 \003(\0132!.slg.protocol.AllianceShopItem"
    "DTO\"1\n\026AllianceShopBuyRequest\022\n\n\002id\030\001 \002("
    "\005\022\013\n\003num\030\002 \002(\005\"B\n\027AllianceShopBuyRespons"
    "e\022\n\n\002id\030\001 \002(\005\022\013\n\003num\030\002 \002(\005\022\016\n\006itemId\030\003 \002"
    "(\005\"-\n\031InviteJoinAllianceRequest\022\020\n\010playe"
    "rId\030\001 \002(\003\".\n\032InviteJoinAllianceResponse\022"
    "\020\n\010playerId\030\001 \002(\003\"8\n\021DealInviteRequest\022\017"
    "\n\007isAgree\030\001 \002(\010\022\022\n\nallianceId\030\002 \002(\005\"%\n\022D"
    "ealInviteResponse\022\017\n\007isAgree\030\001 \002(\010\"\027\n\025Fr"
    "eshRecommendRequest\"]\n\026FreshRecommendRes"
    "ponse\0221\n\rrecommendList\030\001 \003(\0132\032.slg.proto"
    "col.RecommendDTO\022\020\n\010nextTime\030\002 \002(\005\"\025\n\023Ge"
    "tRecommendRequest\"[\n\024GetRecommendRespons"
    "e\0221\n\rrecommendList\030\001 \003(\0132\032.slg.protocol."
    "RecommendDTO\022\020\n\010nextTime\030\002 \002(\005\"\022\n\020QuickJ"
    "oinRequest\")\n\023QueryInviterRequest\022\022\n\npla"
    "yerName\030\001 \002(\t\"B\n\024QueryInviterResponse\022*\n"
    "\006player\030\001 \001(\0132\032.slg.protocol.RecommendDT"
    "O\"\027\n\025AllianceMemberRequest\"M\n\026AllianceMe"
    "mberResponse\0223\n\nmemberList\030\001 \003(\0132\037.slg.p"
    "rotocol.AllianceMemberDTO\")\n\027NeedAllianc"
    "eDataRequest\022\016\n\006isNeed\030\001 \002(\010\"&\n\026Alliance"
    "SummaryRequest\022\014\n\004name\030\001 \002(\t\"P\n\027Alliance"
    "SummaryResponse\0225\n\013summaryInfo\030\001 \001(\0132 .s"
    "lg.protocol.AllianceSummaryDTO\"D\n\020Member"
    "ChangePush\0220\n\007members\030\001 \003(\0132\037.slg.protoc"
    "ol.AllianceMemberDTO\"\"\n\016MemberExitPush\022\020"
    "\n\010playerId\030\001 \002(\003\"a\n\022MyAllianceInfoPush\022\n"
    "\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\021\n\tshortName\030\003 "
    "\001(\t\022\014\n\004flag\030\004 \001(\005\022\020\n\010position\030\005 \001(\005\"=\n\016H"
    "elpChangePush\022+\n\004help\030\001 \003(\0132\035.slg.protoc"
    "ol.AllianceHelpDTO\" \n\016HelpRemovePush\022\016\n\006"
    "helpId\030\001 \002(\005\"\?\n\020AllianceNewsPush\022+\n\004news"
    "\030\001 \002(\0132\035.slg.protocol.AllianceNewsDTO\"@\n"
    "\020AllianceTechPush\022,\n\005techs\030\001 \003(\0132\035.slg.p"
    "rotocol.AllianceTechDTO\"P\n\027AllianceTechU"
    "pgradePush\0225\n\007upgrade\030\001 \002(\0132$.slg.protoc"
    "ol.AllianceTechUpgradeDTO\"M\n\024AllianceDon"
    "ationPush\0225\n\004info\030\001 \002(\0132\'.slg.protocol.A"
    "llianceContributeInfoDTO\".\n\023AllianceWelf"
    "arePush\022\027\n\017canReceiveTimes\030\001 \002(\005\"(\n\026Alli"
    "anceNewsRemovePush\022\016\n\006newsId\030\001 \002(\005\"I\n\022Al"
    "lianceInvitePush\0223\n\ninviteList\030\001 \003(\0132\037.s"
    "lg.protocol.AllianceInviteDTO\"(\n\024HasSend"
    "HelpTimesPush\022\020\n\010timerIds\030\001 \003(\005\"\"\n\021Allia"
    "nceScorePush\022\r\n\005score\030\001 \002(\005\"\036\n\nMyVotePus"
    "h\022\020\n\010voteType\030\001 \002(\005\"Y\n\024AllianceVoteInfoP"
    "ush\0220\n\005votes\030\001 \003(\0132!.slg.protocol.Allian"
    "ceTechVoteDTO\022\017\n\007isClear\030\002 \001(\010\"\246\001\n\022Allia"
    "nceChangePush\022\024\n\014allianceName\030\001 \001(\t\022\014\n\004f"
    "lag\030\002 \001(\005\022\023\n\013declaration\030\003 \001(\t\022\020\n\010isPubl"
    "ic\030\004 \001(\010\022\021\n\tjoinPower\030\005 \001(\005\022\020\n\010language\030"
    "\006 \001(\t\022\021\n\tshortName\030\007 \001(\t\022\r\n\005honor\030\010 \001(\005*"
    "\313\007\n\021AllianceCommandId\022\034\n\027ALLIANCE_CRATE_"
    "ALLIANCE\020\335\013\022\034\n\027ALLIANCE_QUERY_ALLIANCE\020\336"
    "\013\022\033\n\026ALLIANCE_JOIN_ALLIANCE\020\337\013\022\032\n\025ALLIAN"
    "CE_SET_POSITION\020\340\013\022\031\n\024ALLIANCE_KICK_MEMB"
    "ER\020\341\013\022\032\n\025ALLIANCE_EXITS_MEMBER\020\342\013\022\034\n\027ALL"
    "IANCE_REPLACE_LEADER\020\343\013\022\032\n\025ALLIANCE_SET_"
    "ALLIANCE\020\344\013\022\034\n\027ALLIANCE_APPLY_ALLIANCE\020\345"
    "\013\022\036\n\031ALLIANCE_GET_ALLIANCELIST\020\346\013\022\037\n\032ALL"
    "IANCE_CHECK_ALLIANCNAME\020\347\013\022\027\n\022ALLIANCE_S"
    "END_HELP\020\350\013\022\031\n\024ALLIANCE_HELP_MEMBER\020\351\013\022\033"
    "\n\026ALLIANCE_GET_HELP_LIST\020\352\013\022\036\n\031ALLIANCE_"
    "MY_ALLIANCE_INFO\020\353\013\022\027\n\022ALLIANCE_TECH_VOT"
    "E\020\354\013\022\032\n\025ALLIANCE_TECH_UPGRADE\020\355\013\022\035\n\030ALLI"
    "ANCE_CONTRIBUTE_INFO\020\356\013\022\030\n\023ALLIANCE_CONT"
    "RIBUTE\020\357\013\022\035\n\030ALLIANCE_CONTRIBUTE_GIFT\020\360\013"
    "\022!\n\034ALLIANCE_CONTRIBUTE_CD_CLEAR\020\361\013\022\027\n\022A"
    "LLIANCE_SHOP_INFO\020\362\013\022\026\n\021ALLIANCE_SHOP_BU"
    "Y\020\363\013\022\031\n\024ALLIANCE_INVITE_JOIN\020\364\013\022\031\n\024ALLIA"
    "NCE_DEAL_INVITE\020\365\013\022\035\n\030ALLIANCE_FRESH_REC"
    "OMMEND\020\366\013\022\033\n\026ALLIANCE_GET_RECOMMEND\020\367\013\022\030"
    "\n\023ALLIANCE_QUICK_JOIN\020\370\013\022\033\n\026ALLIANCE_QUE"
    "RY_INVITER\020\371\013\022\031\n\024ALLIANCE_MEMBER_LIST\020\372\013"
    "\022\035\n\030ALLIANCE_TRANSFER_LEADER\020\373\013\022 \n\033ALLIA"
    "NCE_NEED_ALLIANCE_DATA\020\374\013\022\032\n\025ALLIANCE_SU"
    "MMARY_INFO\020\375\013*\260\004\n\016AlliancePushId\022!\n\033ALLI"
    "ANCE_MEMBER_CHANGE_PUSH\020\255\222\003\022\037\n\031ALLIANCE_"
    "MEMBER_EXIT_PUSH\020\256\222\003\022\037\n\031ALLIANCE_MY_ALLI"
    "ANCE_PUSH\020\257\222\003\022\037\n\031ALLIANCE_HELP_CHANGE_PU"
    "SH\020\260\222\003\022\037\n\031ALLIANCE_HELP_REMOVE_PUSH\020\261\222\003\022"
    "\030\n\022ALLIANCE_NEWS_PUSH\020\262\222\003\022\030\n\022ALLIANCE_TE"
    "CH_PUSH\020\263\222\003\022 \n\032ALLIANCE_TECH_UPGRADE_PUS"
    "H\020\264\222\003\022\036\n\030ALLIANCE_CONTRIBUTE_PUSH\020\265\222\003\022\033\n"
    "\025ALLIANCE_WELFARE_PUSH\020\266\222\003\022\037\n\031ALLIANCE_N"
    "EWS_REMOVE_PUSH\020\267\222\003\022\032\n\024ALLIANCE_INVITE_P"
    "USH\020\270\222\003\022\034\n\026ALLIANCE_SENDHELP_PUSH\020\271\222\003\022\031\n"
    "\023ALLIANCE_SCORE_PUSH\020\272\222\003\022\033\n\025ALLIANCE_MY_"
    "VOTE_PUSH\020\273\222\003\022\030\n\022ALLIANCE_VOTE_PUSH\020\274\222\003\022"
    "\032\n\024ALLIANCE_CHANGE_PUSH\020\275\222\003\022\033\n\025ALLIANCE_"
    "JOIN_SUCCEED\020\276\222\003B-\n\034com.bonusstudio.slg."
    "protocolB\rAllianceProto", 7943);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "alliance.proto", &protobuf_RegisterTypes);
  AllianceSummaryDTO::default_instance_ = new AllianceSummaryDTO();
  AllianceTechVoteDTO::default_instance_ = new AllianceTechVoteDTO();
  RecommendDTO::default_instance_ = new RecommendDTO();
  AllianceInviteDTO::default_instance_ = new AllianceInviteDTO();
  AllianceShopItemDTO::default_instance_ = new AllianceShopItemDTO();
  ContributeDTO::default_instance_ = new ContributeDTO();
  AllianceContributeInfoDTO::default_instance_ = new AllianceContributeInfoDTO();
  AllianceTechDTO::default_instance_ = new AllianceTechDTO();
  AllianceTechUpgradeDTO::default_instance_ = new AllianceTechUpgradeDTO();
  AllianceNewsDTO::default_instance_ = new AllianceNewsDTO();
  AllianceHelpDTO::default_instance_ = new AllianceHelpDTO();
  AllianceMemberDTO::default_instance_ = new AllianceMemberDTO();
  AllianceDTO::default_instance_ = new AllianceDTO();
  CreateAllianceRequest::default_instance_ = new CreateAllianceRequest();
  CreateAllianceResponse::default_instance_ = new CreateAllianceResponse();
  QueryAllianceRequest::default_instance_ = new QueryAllianceRequest();
  QueryAllianceResponse::default_instance_ = new QueryAllianceResponse();
  MyAllianceInfoRequest::default_instance_ = new MyAllianceInfoRequest();
  MyAllianceInfoResponse::default_instance_ = new MyAllianceInfoResponse();
  JoinAllianceRequest::default_instance_ = new JoinAllianceRequest();
  JoinAllianceResponse::default_instance_ = new JoinAllianceResponse();
  SetPositionRequest::default_instance_ = new SetPositionRequest();
  SetPositionResponse::default_instance_ = new SetPositionResponse();
  KickOutAllianceRequest::default_instance_ = new KickOutAllianceRequest();
  ExitsAllianceRequest::default_instance_ = new ExitsAllianceRequest();
  ExitsAllianceResponse::default_instance_ = new ExitsAllianceResponse();
  TransferLeaderRequest::default_instance_ = new TransferLeaderRequest();
  TransferLeaderResponse::default_instance_ = new TransferLeaderResponse();
  AllianceSettingRequest::default_instance_ = new AllianceSettingRequest();
  AllianceSettingResponse::default_instance_ = new AllianceSettingResponse();
  AllianceApplyRequest::default_instance_ = new AllianceApplyRequest();
  AllianceApplyesponse::default_instance_ = new AllianceApplyesponse();
  AllianceListRequest::default_instance_ = new AllianceListRequest();
  AllianceListResponse::default_instance_ = new AllianceListResponse();
  CheckAllianceNameRequest::default_instance_ = new CheckAllianceNameRequest();
  CheckAllianceNameResponse::default_instance_ = new CheckAllianceNameResponse();
  SendAllianceHelpRequest::default_instance_ = new SendAllianceHelpRequest();
  HelpMemberRequest::default_instance_ = new HelpMemberRequest();
  HelpMemberResponse::default_instance_ = new HelpMemberResponse();
  AllianceHelpListRequest::default_instance_ = new AllianceHelpListRequest();
  AllianceHelpListResponse::default_instance_ = new AllianceHelpListResponse();
  AllianceVoteRequest::default_instance_ = new AllianceVoteRequest();
  AllianceVoteResponse::default_instance_ = new AllianceVoteResponse();
  AllianceTechUpgradeRequest::default_instance_ = new AllianceTechUpgradeRequest();
  AllianceTechUpgradeResponse::default_instance_ = new AllianceTechUpgradeResponse();
  ContributeInfoRequest::default_instance_ = new ContributeInfoRequest();
  ContributeInfoResponse::default_instance_ = new ContributeInfoResponse();
  ContributeRequest::default_instance_ = new ContributeRequest();
  DrawAllianceGiftRequest::default_instance_ = new DrawAllianceGiftRequest();
  DrawAllianceGiftResponse::default_instance_ = new DrawAllianceGiftResponse();
  ClearContributedCdRequest::default_instance_ = new ClearContributedCdRequest();
  ClearContributedCdResponse::default_instance_ = new ClearContributedCdResponse();
  AllianceShopInfoRequest::default_instance_ = new AllianceShopInfoRequest();
  AllianceShopInfoResponse::default_instance_ = new AllianceShopInfoResponse();
  AllianceShopBuyRequest::default_instance_ = new AllianceShopBuyRequest();
  AllianceShopBuyResponse::default_instance_ = new AllianceShopBuyResponse();
  InviteJoinAllianceRequest::default_instance_ = new InviteJoinAllianceRequest();
  InviteJoinAllianceResponse::default_instance_ = new InviteJoinAllianceResponse();
  DealInviteRequest::default_instance_ = new DealInviteRequest();
  DealInviteResponse::default_instance_ = new DealInviteResponse();
  FreshRecommendRequest::default_instance_ = new FreshRecommendRequest();
  FreshRecommendResponse::default_instance_ = new FreshRecommendResponse();
  GetRecommendRequest::default_instance_ = new GetRecommendRequest();
  GetRecommendResponse::default_instance_ = new GetRecommendResponse();
  QuickJoinRequest::default_instance_ = new QuickJoinRequest();
  QueryInviterRequest::default_instance_ = new QueryInviterRequest();
  QueryInviterResponse::default_instance_ = new QueryInviterResponse();
  AllianceMemberRequest::default_instance_ = new AllianceMemberRequest();
  AllianceMemberResponse::default_instance_ = new AllianceMemberResponse();
  NeedAllianceDataRequest::default_instance_ = new NeedAllianceDataRequest();
  AllianceSummaryRequest::default_instance_ = new AllianceSummaryRequest();
  AllianceSummaryResponse::default_instance_ = new AllianceSummaryResponse();
  MemberChangePush::default_instance_ = new MemberChangePush();
  MemberExitPush::default_instance_ = new MemberExitPush();
  MyAllianceInfoPush::default_instance_ = new MyAllianceInfoPush();
  HelpChangePush::default_instance_ = new HelpChangePush();
  HelpRemovePush::default_instance_ = new HelpRemovePush();
  AllianceNewsPush::default_instance_ = new AllianceNewsPush();
  AllianceTechPush::default_instance_ = new AllianceTechPush();
  AllianceTechUpgradePush::default_instance_ = new AllianceTechUpgradePush();
  AllianceDonationPush::default_instance_ = new AllianceDonationPush();
  AllianceWelfarePush::default_instance_ = new AllianceWelfarePush();
  AllianceNewsRemovePush::default_instance_ = new AllianceNewsRemovePush();
  AllianceInvitePush::default_instance_ = new AllianceInvitePush();
  HasSendHelpTimesPush::default_instance_ = new HasSendHelpTimesPush();
  AllianceScorePush::default_instance_ = new AllianceScorePush();
  MyVotePush::default_instance_ = new MyVotePush();
  AllianceVoteInfoPush::default_instance_ = new AllianceVoteInfoPush();
  AllianceChangePush::default_instance_ = new AllianceChangePush();
  AllianceSummaryDTO::default_instance_->InitAsDefaultInstance();
  AllianceTechVoteDTO::default_instance_->InitAsDefaultInstance();
  RecommendDTO::default_instance_->InitAsDefaultInstance();
  AllianceInviteDTO::default_instance_->InitAsDefaultInstance();
  AllianceShopItemDTO::default_instance_->InitAsDefaultInstance();
  ContributeDTO::default_instance_->InitAsDefaultInstance();
  AllianceContributeInfoDTO::default_instance_->InitAsDefaultInstance();
  AllianceTechDTO::default_instance_->InitAsDefaultInstance();
  AllianceTechUpgradeDTO::default_instance_->InitAsDefaultInstance();
  AllianceNewsDTO::default_instance_->InitAsDefaultInstance();
  AllianceHelpDTO::default_instance_->InitAsDefaultInstance();
  AllianceMemberDTO::default_instance_->InitAsDefaultInstance();
  AllianceDTO::default_instance_->InitAsDefaultInstance();
  CreateAllianceRequest::default_instance_->InitAsDefaultInstance();
  CreateAllianceResponse::default_instance_->InitAsDefaultInstance();
  QueryAllianceRequest::default_instance_->InitAsDefaultInstance();
  QueryAllianceResponse::default_instance_->InitAsDefaultInstance();
  MyAllianceInfoRequest::default_instance_->InitAsDefaultInstance();
  MyAllianceInfoResponse::default_instance_->InitAsDefaultInstance();
  JoinAllianceRequest::default_instance_->InitAsDefaultInstance();
  JoinAllianceResponse::default_instance_->InitAsDefaultInstance();
  SetPositionRequest::default_instance_->InitAsDefaultInstance();
  SetPositionResponse::default_instance_->InitAsDefaultInstance();
  KickOutAllianceRequest::default_instance_->InitAsDefaultInstance();
  ExitsAllianceRequest::default_instance_->InitAsDefaultInstance();
  ExitsAllianceResponse::default_instance_->InitAsDefaultInstance();
  TransferLeaderRequest::default_instance_->InitAsDefaultInstance();
  TransferLeaderResponse::default_instance_->InitAsDefaultInstance();
  AllianceSettingRequest::default_instance_->InitAsDefaultInstance();
  AllianceSettingResponse::default_instance_->InitAsDefaultInstance();
  AllianceApplyRequest::default_instance_->InitAsDefaultInstance();
  AllianceApplyesponse::default_instance_->InitAsDefaultInstance();
  AllianceListRequest::default_instance_->InitAsDefaultInstance();
  AllianceListResponse::default_instance_->InitAsDefaultInstance();
  CheckAllianceNameRequest::default_instance_->InitAsDefaultInstance();
  CheckAllianceNameResponse::default_instance_->InitAsDefaultInstance();
  SendAllianceHelpRequest::default_instance_->InitAsDefaultInstance();
  HelpMemberRequest::default_instance_->InitAsDefaultInstance();
  HelpMemberResponse::default_instance_->InitAsDefaultInstance();
  AllianceHelpListRequest::default_instance_->InitAsDefaultInstance();
  AllianceHelpListResponse::default_instance_->InitAsDefaultInstance();
  AllianceVoteRequest::default_instance_->InitAsDefaultInstance();
  AllianceVoteResponse::default_instance_->InitAsDefaultInstance();
  AllianceTechUpgradeRequest::default_instance_->InitAsDefaultInstance();
  AllianceTechUpgradeResponse::default_instance_->InitAsDefaultInstance();
  ContributeInfoRequest::default_instance_->InitAsDefaultInstance();
  ContributeInfoResponse::default_instance_->InitAsDefaultInstance();
  ContributeRequest::default_instance_->InitAsDefaultInstance();
  DrawAllianceGiftRequest::default_instance_->InitAsDefaultInstance();
  DrawAllianceGiftResponse::default_instance_->InitAsDefaultInstance();
  ClearContributedCdRequest::default_instance_->InitAsDefaultInstance();
  ClearContributedCdResponse::default_instance_->InitAsDefaultInstance();
  AllianceShopInfoRequest::default_instance_->InitAsDefaultInstance();
  AllianceShopInfoResponse::default_instance_->InitAsDefaultInstance();
  AllianceShopBuyRequest::default_instance_->InitAsDefaultInstance();
  AllianceShopBuyResponse::default_instance_->InitAsDefaultInstance();
  InviteJoinAllianceRequest::default_instance_->InitAsDefaultInstance();
  InviteJoinAllianceResponse::default_instance_->InitAsDefaultInstance();
  DealInviteRequest::default_instance_->InitAsDefaultInstance();
  DealInviteResponse::default_instance_->InitAsDefaultInstance();
  FreshRecommendRequest::default_instance_->InitAsDefaultInstance();
  FreshRecommendResponse::default_instance_->InitAsDefaultInstance();
  GetRecommendRequest::default_instance_->InitAsDefaultInstance();
  GetRecommendResponse::default_instance_->InitAsDefaultInstance();
  QuickJoinRequest::default_instance_->InitAsDefaultInstance();
  QueryInviterRequest::default_instance_->InitAsDefaultInstance();
  QueryInviterResponse::default_instance_->InitAsDefaultInstance();
  AllianceMemberRequest::default_instance_->InitAsDefaultInstance();
  AllianceMemberResponse::default_instance_->InitAsDefaultInstance();
  NeedAllianceDataRequest::default_instance_->InitAsDefaultInstance();
  AllianceSummaryRequest::default_instance_->InitAsDefaultInstance();
  AllianceSummaryResponse::default_instance_->InitAsDefaultInstance();
  MemberChangePush::default_instance_->InitAsDefaultInstance();
  MemberExitPush::default_instance_->InitAsDefaultInstance();
  MyAllianceInfoPush::default_instance_->InitAsDefaultInstance();
  HelpChangePush::default_instance_->InitAsDefaultInstance();
  HelpRemovePush::default_instance_->InitAsDefaultInstance();
  AllianceNewsPush::default_instance_->InitAsDefaultInstance();
  AllianceTechPush::default_instance_->InitAsDefaultInstance();
  AllianceTechUpgradePush::default_instance_->InitAsDefaultInstance();
  AllianceDonationPush::default_instance_->InitAsDefaultInstance();
  AllianceWelfarePush::default_instance_->InitAsDefaultInstance();
  AllianceNewsRemovePush::default_instance_->InitAsDefaultInstance();
  AllianceInvitePush::default_instance_->InitAsDefaultInstance();
  HasSendHelpTimesPush::default_instance_->InitAsDefaultInstance();
  AllianceScorePush::default_instance_->InitAsDefaultInstance();
  MyVotePush::default_instance_->InitAsDefaultInstance();
  AllianceVoteInfoPush::default_instance_->InitAsDefaultInstance();
  AllianceChangePush::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_alliance_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_alliance_2eproto {
  StaticDescriptorInitializer_alliance_2eproto() {
    protobuf_AddDesc_alliance_2eproto();
  }
} static_descriptor_initializer_alliance_2eproto_;
const ::google::protobuf::EnumDescriptor* AllianceCommandId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceCommandId_descriptor_;
}
bool AllianceCommandId_IsValid(int value) {
  switch(value) {
    case 1501:
    case 1502:
    case 1503:
    case 1504:
    case 1505:
    case 1506:
    case 1507:
    case 1508:
    case 1509:
    case 1510:
    case 1511:
    case 1512:
    case 1513:
    case 1514:
    case 1515:
    case 1516:
    case 1517:
    case 1518:
    case 1519:
    case 1520:
    case 1521:
    case 1522:
    case 1523:
    case 1524:
    case 1525:
    case 1526:
    case 1527:
    case 1528:
    case 1529:
    case 1530:
    case 1531:
    case 1532:
    case 1533:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AlliancePushId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlliancePushId_descriptor_;
}
bool AlliancePushId_IsValid(int value) {
  switch(value) {
    case 51501:
    case 51502:
    case 51503:
    case 51504:
    case 51505:
    case 51506:
    case 51507:
    case 51508:
    case 51509:
    case 51510:
    case 51511:
    case 51512:
    case 51513:
    case 51514:
    case 51515:
    case 51516:
    case 51517:
    case 51518:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceSummaryDTO::kIdFieldNumber;
const int AllianceSummaryDTO::kNameFieldNumber;
const int AllianceSummaryDTO::kHonorFieldNumber;
const int AllianceSummaryDTO::kFlagFieldNumber;
const int AllianceSummaryDTO::kLeaderNameFieldNumber;
const int AllianceSummaryDTO::kMemberLimitFieldNumber;
const int AllianceSummaryDTO::kCurrentMemberFieldNumber;
#endif  // !_MSC_VER

AllianceSummaryDTO::AllianceSummaryDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceSummaryDTO::InitAsDefaultInstance() {
}

AllianceSummaryDTO::AllianceSummaryDTO(const AllianceSummaryDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceSummaryDTO::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  honor_ = 0;
  flag_ = 0;
  leadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  memberlimit_ = 0;
  currentmember_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceSummaryDTO::~AllianceSummaryDTO() {
  SharedDtor();
}

void AllianceSummaryDTO::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (leadername_ != &::google::protobuf::internal::kEmptyString) {
    delete leadername_;
  }
  if (this != default_instance_) {
  }
}

void AllianceSummaryDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceSummaryDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceSummaryDTO_descriptor_;
}

const AllianceSummaryDTO& AllianceSummaryDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceSummaryDTO* AllianceSummaryDTO::default_instance_ = NULL;

AllianceSummaryDTO* AllianceSummaryDTO::New() const {
  return new AllianceSummaryDTO;
}

void AllianceSummaryDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    honor_ = 0;
    flag_ = 0;
    if (has_leadername()) {
      if (leadername_ != &::google::protobuf::internal::kEmptyString) {
        leadername_->clear();
      }
    }
    memberlimit_ = 0;
    currentmember_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceSummaryDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_honor;
        break;
      }

      // required int32 honor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_honor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &honor_)));
          set_has_honor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_flag;
        break;
      }

      // required int32 flag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_leaderName;
        break;
      }

      // required string leaderName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leaderName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leadername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leadername().data(), this->leadername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_memberLimit;
        break;
      }

      // required int32 memberLimit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memberLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memberlimit_)));
          set_has_memberlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_currentMember;
        break;
      }

      // required int32 currentMember = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentMember:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentmember_)));
          set_has_currentmember();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllianceSummaryDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required int32 honor = 3;
  if (has_honor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->honor(), output);
  }

  // required int32 flag = 4;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->flag(), output);
  }

  // required string leaderName = 5;
  if (has_leadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->leadername(), output);
  }

  // required int32 memberLimit = 6;
  if (has_memberlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->memberlimit(), output);
  }

  // required int32 currentMember = 7;
  if (has_currentmember()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->currentmember(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceSummaryDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int32 honor = 3;
  if (has_honor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->honor(), target);
  }

  // required int32 flag = 4;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->flag(), target);
  }

  // required string leaderName = 5;
  if (has_leadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->leadername(), target);
  }

  // required int32 memberLimit = 6;
  if (has_memberlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->memberlimit(), target);
  }

  // required int32 currentMember = 7;
  if (has_currentmember()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->currentmember(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceSummaryDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 honor = 3;
    if (has_honor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->honor());
    }

    // required int32 flag = 4;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // required string leaderName = 5;
    if (has_leadername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leadername());
    }

    // required int32 memberLimit = 6;
    if (has_memberlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->memberlimit());
    }

    // required int32 currentMember = 7;
    if (has_currentmember()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentmember());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceSummaryDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceSummaryDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceSummaryDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceSummaryDTO::MergeFrom(const AllianceSummaryDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_honor()) {
      set_honor(from.honor());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_leadername()) {
      set_leadername(from.leadername());
    }
    if (from.has_memberlimit()) {
      set_memberlimit(from.memberlimit());
    }
    if (from.has_currentmember()) {
      set_currentmember(from.currentmember());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceSummaryDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceSummaryDTO::CopyFrom(const AllianceSummaryDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceSummaryDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void AllianceSummaryDTO::Swap(AllianceSummaryDTO* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(honor_, other->honor_);
    std::swap(flag_, other->flag_);
    std::swap(leadername_, other->leadername_);
    std::swap(memberlimit_, other->memberlimit_);
    std::swap(currentmember_, other->currentmember_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceSummaryDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceSummaryDTO_descriptor_;
  metadata.reflection = AllianceSummaryDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceTechVoteDTO::kTechTypeFieldNumber;
const int AllianceTechVoteDTO::kVoteNumFieldNumber;
#endif  // !_MSC_VER

AllianceTechVoteDTO::AllianceTechVoteDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceTechVoteDTO::InitAsDefaultInstance() {
}

AllianceTechVoteDTO::AllianceTechVoteDTO(const AllianceTechVoteDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceTechVoteDTO::SharedCtor() {
  _cached_size_ = 0;
  techtype_ = 0;
  votenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceTechVoteDTO::~AllianceTechVoteDTO() {
  SharedDtor();
}

void AllianceTechVoteDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllianceTechVoteDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceTechVoteDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceTechVoteDTO_descriptor_;
}

const AllianceTechVoteDTO& AllianceTechVoteDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceTechVoteDTO* AllianceTechVoteDTO::default_instance_ = NULL;

AllianceTechVoteDTO* AllianceTechVoteDTO::New() const {
  return new AllianceTechVoteDTO;
}

void AllianceTechVoteDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    techtype_ = 0;
    votenum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceTechVoteDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 techType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &techtype_)));
          set_has_techtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_voteNum;
        break;
      }

      // required int32 voteNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_voteNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &votenum_)));
          set_has_votenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllianceTechVoteDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 techType = 1;
  if (has_techtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->techtype(), output);
  }

  // required int32 voteNum = 2;
  if (has_votenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->votenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceTechVoteDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 techType = 1;
  if (has_techtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->techtype(), target);
  }

  // required int32 voteNum = 2;
  if (has_votenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->votenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceTechVoteDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 techType = 1;
    if (has_techtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->techtype());
    }

    // required int32 voteNum = 2;
    if (has_votenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->votenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceTechVoteDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceTechVoteDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceTechVoteDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceTechVoteDTO::MergeFrom(const AllianceTechVoteDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_techtype()) {
      set_techtype(from.techtype());
    }
    if (from.has_votenum()) {
      set_votenum(from.votenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceTechVoteDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceTechVoteDTO::CopyFrom(const AllianceTechVoteDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceTechVoteDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AllianceTechVoteDTO::Swap(AllianceTechVoteDTO* other) {
  if (other != this) {
    std::swap(techtype_, other->techtype_);
    std::swap(votenum_, other->votenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceTechVoteDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceTechVoteDTO_descriptor_;
  metadata.reflection = AllianceTechVoteDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecommendDTO::kPlayerIdFieldNumber;
const int RecommendDTO::kIconFieldNumber;
const int RecommendDTO::kBattleFieldNumber;
const int RecommendDTO::kIsInvitedFieldNumber;
const int RecommendDTO::kPlayerNameFieldNumber;
#endif  // !_MSC_VER

RecommendDTO::RecommendDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecommendDTO::InitAsDefaultInstance() {
}

RecommendDTO::RecommendDTO(const RecommendDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecommendDTO::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  battle_ = 0;
  isinvited_ = false;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecommendDTO::~RecommendDTO() {
  SharedDtor();
}

void RecommendDTO::SharedDtor() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void RecommendDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecommendDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecommendDTO_descriptor_;
}

const RecommendDTO& RecommendDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

RecommendDTO* RecommendDTO::default_instance_ = NULL;

RecommendDTO* RecommendDTO::New() const {
  return new RecommendDTO;
}

void RecommendDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    battle_ = 0;
    isinvited_ = false;
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecommendDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_icon;
        break;
      }

      // required string icon = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_battle;
        break;
      }

      // required int32 battle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_)));
          set_has_battle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isInvited;
        break;
      }

      // required bool isInvited = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isInvited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isinvited_)));
          set_has_isinvited();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_playerName;
        break;
      }

      // required string playerName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecommendDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // required string icon = 2;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->icon(), output);
  }

  // required int32 battle = 3;
  if (has_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->battle(), output);
  }

  // required bool isInvited = 4;
  if (has_isinvited()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isinvited(), output);
  }

  // required string playerName = 5;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->playername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecommendDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // required string icon = 2;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->icon(), target);
  }

  // required int32 battle = 3;
  if (has_battle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->battle(), target);
  }

  // required bool isInvited = 4;
  if (has_isinvited()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isinvited(), target);
  }

  // required string playerName = 5;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->playername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecommendDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // required string icon = 2;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // required int32 battle = 3;
    if (has_battle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle());
    }

    // required bool isInvited = 4;
    if (has_isinvited()) {
      total_size += 1 + 1;
    }

    // required string playerName = 5;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecommendDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecommendDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecommendDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecommendDTO::MergeFrom(const RecommendDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_battle()) {
      set_battle(from.battle());
    }
    if (from.has_isinvited()) {
      set_isinvited(from.isinvited());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecommendDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecommendDTO::CopyFrom(const RecommendDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecommendDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void RecommendDTO::Swap(RecommendDTO* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(icon_, other->icon_);
    std::swap(battle_, other->battle_);
    std::swap(isinvited_, other->isinvited_);
    std::swap(playername_, other->playername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecommendDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecommendDTO_descriptor_;
  metadata.reflection = RecommendDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceInviteDTO::kAllianceIdFieldNumber;
const int AllianceInviteDTO::kAllianceNameFieldNumber;
const int AllianceInviteDTO::kIconFieldNumber;
const int AllianceInviteDTO::kCurrentFieldNumber;
const int AllianceInviteDTO::kLimitFieldNumber;
const int AllianceInviteDTO::kHonorFieldNumber;
const int AllianceInviteDTO::kLeaderIdFieldNumber;
const int AllianceInviteDTO::kLeaderNameFieldNumber;
const int AllianceInviteDTO::kInviteTimeFieldNumber;
#endif  // !_MSC_VER

AllianceInviteDTO::AllianceInviteDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceInviteDTO::InitAsDefaultInstance() {
}

AllianceInviteDTO::AllianceInviteDTO(const AllianceInviteDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceInviteDTO::SharedCtor() {
  _cached_size_ = 0;
  allianceid_ = 0;
  alliancename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = 0;
  current_ = 0;
  limit_ = 0;
  honor_ = 0;
  leaderid_ = GOOGLE_LONGLONG(0);
  leadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  invitetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceInviteDTO::~AllianceInviteDTO() {
  SharedDtor();
}

void AllianceInviteDTO::SharedDtor() {
  if (alliancename_ != &::google::protobuf::internal::kEmptyString) {
    delete alliancename_;
  }
  if (leadername_ != &::google::protobuf::internal::kEmptyString) {
    delete leadername_;
  }
  if (this != default_instance_) {
  }
}

void AllianceInviteDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceInviteDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceInviteDTO_descriptor_;
}

const AllianceInviteDTO& AllianceInviteDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceInviteDTO* AllianceInviteDTO::default_instance_ = NULL;

AllianceInviteDTO* AllianceInviteDTO::New() const {
  return new AllianceInviteDTO;
}

void AllianceInviteDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    allianceid_ = 0;
    if (has_alliancename()) {
      if (alliancename_ != &::google::protobuf::internal::kEmptyString) {
        alliancename_->clear();
      }
    }
    icon_ = 0;
    current_ = 0;
    limit_ = 0;
    honor_ = 0;
    leaderid_ = GOOGLE_LONGLONG(0);
    if (has_leadername()) {
      if (leadername_ != &::google::protobuf::internal::kEmptyString) {
        leadername_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    invitetime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceInviteDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 allianceId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allianceid_)));
          set_has_allianceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_allianceName;
        break;
      }

      // required string allianceName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allianceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alliancename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alliancename().data(), this->alliancename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_icon;
        break;
      }

      // required int32 icon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_icon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icon_)));
          set_has_icon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_current;
        break;
      }

      // required int32 current = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_)));
          set_has_current();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_limit;
        break;
      }

      // required int32 limit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_honor;
        break;
      }

      // required int32 honor = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_honor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &honor_)));
          set_has_honor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_leaderId;
        break;
      }

      // required int64 leaderId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaderId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &leaderid_)));
          set_has_leaderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_leaderName;
        break;
      }

      // required string leaderName = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leaderName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leadername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leadername().data(), this->leadername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_inviteTime;
        break;
      }

      // required int32 inviteTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inviteTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invitetime_)));
          set_has_invitetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllianceInviteDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 allianceId = 1;
  if (has_allianceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->allianceid(), output);
  }

  // required string allianceName = 2;
  if (has_alliancename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alliancename().data(), this->alliancename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->alliancename(), output);
  }

  // required int32 icon = 3;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->icon(), output);
  }

  // required int32 current = 4;
  if (has_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->current(), output);
  }

  // required int32 limit = 5;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->limit(), output);
  }

  // required int32 honor = 6;
  if (has_honor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->honor(), output);
  }

  // required int64 leaderId = 7;
  if (has_leaderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->leaderid(), output);
  }

  // required string leaderName = 8;
  if (has_leadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->leadername(), output);
  }

  // required int32 inviteTime = 9;
  if (has_invitetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->invitetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceInviteDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 allianceId = 1;
  if (has_allianceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->allianceid(), target);
  }

  // required string allianceName = 2;
  if (has_alliancename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alliancename().data(), this->alliancename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->alliancename(), target);
  }

  // required int32 icon = 3;
  if (has_icon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->icon(), target);
  }

  // required int32 current = 4;
  if (has_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->current(), target);
  }

  // required int32 limit = 5;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->limit(), target);
  }

  // required int32 honor = 6;
  if (has_honor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->honor(), target);
  }

  // required int64 leaderId = 7;
  if (has_leaderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->leaderid(), target);
  }

  // required string leaderName = 8;
  if (has_leadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->leadername(), target);
  }

  // required int32 inviteTime = 9;
  if (has_invitetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->invitetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceInviteDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 allianceId = 1;
    if (has_allianceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allianceid());
    }

    // required string allianceName = 2;
    if (has_alliancename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alliancename());
    }

    // required int32 icon = 3;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icon());
    }

    // required int32 current = 4;
    if (has_current()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current());
    }

    // required int32 limit = 5;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit());
    }

    // required int32 honor = 6;
    if (has_honor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->honor());
    }

    // required int64 leaderId = 7;
    if (has_leaderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->leaderid());
    }

    // required string leaderName = 8;
    if (has_leadername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leadername());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 inviteTime = 9;
    if (has_invitetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invitetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceInviteDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceInviteDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceInviteDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceInviteDTO::MergeFrom(const AllianceInviteDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allianceid()) {
      set_allianceid(from.allianceid());
    }
    if (from.has_alliancename()) {
      set_alliancename(from.alliancename());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_current()) {
      set_current(from.current());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_honor()) {
      set_honor(from.honor());
    }
    if (from.has_leaderid()) {
      set_leaderid(from.leaderid());
    }
    if (from.has_leadername()) {
      set_leadername(from.leadername());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_invitetime()) {
      set_invitetime(from.invitetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceInviteDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceInviteDTO::CopyFrom(const AllianceInviteDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceInviteDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void AllianceInviteDTO::Swap(AllianceInviteDTO* other) {
  if (other != this) {
    std::swap(allianceid_, other->allianceid_);
    std::swap(alliancename_, other->alliancename_);
    std::swap(icon_, other->icon_);
    std::swap(current_, other->current_);
    std::swap(limit_, other->limit_);
    std::swap(honor_, other->honor_);
    std::swap(leaderid_, other->leaderid_);
    std::swap(leadername_, other->leadername_);
    std::swap(invitetime_, other->invitetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceInviteDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceInviteDTO_descriptor_;
  metadata.reflection = AllianceInviteDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceShopItemDTO::kIdFieldNumber;
const int AllianceShopItemDTO::kBuyTimesFieldNumber;
#endif  // !_MSC_VER

AllianceShopItemDTO::AllianceShopItemDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceShopItemDTO::InitAsDefaultInstance() {
}

AllianceShopItemDTO::AllianceShopItemDTO(const AllianceShopItemDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceShopItemDTO::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  buytimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceShopItemDTO::~AllianceShopItemDTO() {
  SharedDtor();
}

void AllianceShopItemDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllianceShopItemDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceShopItemDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceShopItemDTO_descriptor_;
}

const AllianceShopItemDTO& AllianceShopItemDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceShopItemDTO* AllianceShopItemDTO::default_instance_ = NULL;

AllianceShopItemDTO* AllianceShopItemDTO::New() const {
  return new AllianceShopItemDTO;
}

void AllianceShopItemDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    buytimes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceShopItemDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buyTimes;
        break;
      }

      // required int32 buyTimes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buytimes_)));
          set_has_buytimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllianceShopItemDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 buyTimes = 2;
  if (has_buytimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buytimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceShopItemDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 buyTimes = 2;
  if (has_buytimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buytimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceShopItemDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 buyTimes = 2;
    if (has_buytimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buytimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceShopItemDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceShopItemDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceShopItemDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceShopItemDTO::MergeFrom(const AllianceShopItemDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_buytimes()) {
      set_buytimes(from.buytimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceShopItemDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceShopItemDTO::CopyFrom(const AllianceShopItemDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceShopItemDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AllianceShopItemDTO::Swap(AllianceShopItemDTO* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(buytimes_, other->buytimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceShopItemDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceShopItemDTO_descriptor_;
  metadata.reflection = AllianceShopItemDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContributeDTO::kLevelFieldNumber;
const int ContributeDTO::kIsOpenFieldNumber;
const int ContributeDTO::kTypeFieldNumber;
#endif  // !_MSC_VER

ContributeDTO::ContributeDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContributeDTO::InitAsDefaultInstance() {
}

ContributeDTO::ContributeDTO(const ContributeDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContributeDTO::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  is_open_ = false;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContributeDTO::~ContributeDTO() {
  SharedDtor();
}

void ContributeDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContributeDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContributeDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContributeDTO_descriptor_;
}

const ContributeDTO& ContributeDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

ContributeDTO* ContributeDTO::default_instance_ = NULL;

ContributeDTO* ContributeDTO::New() const {
  return new ContributeDTO;
}

void ContributeDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    is_open_ = false;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContributeDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_open;
        break;
      }

      // required bool is_open = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_open_)));
          set_has_is_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContributeDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // required bool is_open = 2;
  if (has_is_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_open(), output);
  }

  // required int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContributeDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // required bool is_open = 2;
  if (has_is_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_open(), target);
  }

  // required int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContributeDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required bool is_open = 2;
    if (has_is_open()) {
      total_size += 1 + 1;
    }

    // required int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContributeDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContributeDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContributeDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContributeDTO::MergeFrom(const ContributeDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_is_open()) {
      set_is_open(from.is_open());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContributeDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContributeDTO::CopyFrom(const ContributeDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContributeDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ContributeDTO::Swap(ContributeDTO* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(is_open_, other->is_open_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContributeDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContributeDTO_descriptor_;
  metadata.reflection = ContributeDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceContributeInfoDTO::kContributesFieldNumber;
const int AllianceContributeInfoDTO::kCoolDownTimeFieldNumber;
const int AllianceContributeInfoDTO::kCoolStartTimeFieldNumber;
const int AllianceContributeInfoDTO::kIsJoinCdFieldNumber;
#endif  // !_MSC_VER

AllianceContributeInfoDTO::AllianceContributeInfoDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceContributeInfoDTO::InitAsDefaultInstance() {
}

AllianceContributeInfoDTO::AllianceContributeInfoDTO(const AllianceContributeInfoDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceContributeInfoDTO::SharedCtor() {
  _cached_size_ = 0;
  cooldowntime_ = 0;
  coolstarttime_ = 0;
  isjoincd_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceContributeInfoDTO::~AllianceContributeInfoDTO() {
  SharedDtor();
}

void AllianceContributeInfoDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllianceContributeInfoDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceContributeInfoDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceContributeInfoDTO_descriptor_;
}

const AllianceContributeInfoDTO& AllianceContributeInfoDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceContributeInfoDTO* AllianceContributeInfoDTO::default_instance_ = NULL;

AllianceContributeInfoDTO* AllianceContributeInfoDTO::New() const {
  return new AllianceContributeInfoDTO;
}

void AllianceContributeInfoDTO::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    cooldowntime_ = 0;
    coolstarttime_ = 0;
    isjoincd_ = false;
  }
  contributes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceContributeInfoDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.ContributeDTO contributes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contributes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_contributes;
        if (input->ExpectTag(16)) goto parse_coolDownTime;
        break;
      }

      // required int32 coolDownTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coolDownTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cooldowntime_)));
          set_has_cooldowntime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_coolStartTime;
        break;
      }

      // required int32 coolStartTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coolStartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coolstarttime_)));
          set_has_coolstarttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isJoinCd;
        break;
      }

      // required bool isJoinCd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isJoinCd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isjoincd_)));
          set_has_isjoincd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllianceContributeInfoDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.ContributeDTO contributes = 1;
  for (int i = 0; i < this->contributes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->contributes(i), output);
  }

  // required int32 coolDownTime = 2;
  if (has_cooldowntime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cooldowntime(), output);
  }

  // required int32 coolStartTime = 3;
  if (has_coolstarttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->coolstarttime(), output);
  }

  // required bool isJoinCd = 4;
  if (has_isjoincd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isjoincd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceContributeInfoDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.ContributeDTO contributes = 1;
  for (int i = 0; i < this->contributes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->contributes(i), target);
  }

  // required int32 coolDownTime = 2;
  if (has_cooldowntime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cooldowntime(), target);
  }

  // required int32 coolStartTime = 3;
  if (has_coolstarttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->coolstarttime(), target);
  }

  // required bool isJoinCd = 4;
  if (has_isjoincd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isjoincd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceContributeInfoDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 coolDownTime = 2;
    if (has_cooldowntime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cooldowntime());
    }

    // required int32 coolStartTime = 3;
    if (has_coolstarttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coolstarttime());
    }

    // required bool isJoinCd = 4;
    if (has_isjoincd()) {
      total_size += 1 + 1;
    }

  }
  // repeated .slg.protocol.ContributeDTO contributes = 1;
  total_size += 1 * this->contributes_size();
  for (int i = 0; i < this->contributes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contributes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceContributeInfoDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceContributeInfoDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceContributeInfoDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceContributeInfoDTO::MergeFrom(const AllianceContributeInfoDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  contributes_.MergeFrom(from.contributes_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_cooldowntime()) {
      set_cooldowntime(from.cooldowntime());
    }
    if (from.has_coolstarttime()) {
      set_coolstarttime(from.coolstarttime());
    }
    if (from.has_isjoincd()) {
      set_isjoincd(from.isjoincd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceContributeInfoDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceContributeInfoDTO::CopyFrom(const AllianceContributeInfoDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceContributeInfoDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  for (int i = 0; i < contributes_size(); i++) {
    if (!this->contributes(i).IsInitialized()) return false;
  }
  return true;
}

void AllianceContributeInfoDTO::Swap(AllianceContributeInfoDTO* other) {
  if (other != this) {
    contributes_.Swap(&other->contributes_);
    std::swap(cooldowntime_, other->cooldowntime_);
    std::swap(coolstarttime_, other->coolstarttime_);
    std::swap(isjoincd_, other->isjoincd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceContributeInfoDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceContributeInfoDTO_descriptor_;
  metadata.reflection = AllianceContributeInfoDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceTechDTO::kTypeFieldNumber;
const int AllianceTechDTO::kLevelFieldNumber;
#endif  // !_MSC_VER

AllianceTechDTO::AllianceTechDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceTechDTO::InitAsDefaultInstance() {
}

AllianceTechDTO::AllianceTechDTO(const AllianceTechDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceTechDTO::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceTechDTO::~AllianceTechDTO() {
  SharedDtor();
}

void AllianceTechDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllianceTechDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceTechDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceTechDTO_descriptor_;
}

const AllianceTechDTO& AllianceTechDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceTechDTO* AllianceTechDTO::default_instance_ = NULL;

AllianceTechDTO* AllianceTechDTO::New() const {
  return new AllianceTechDTO;
}

void AllianceTechDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceTechDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllianceTechDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceTechDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceTechDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceTechDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceTechDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceTechDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceTechDTO::MergeFrom(const AllianceTechDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceTechDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceTechDTO::CopyFrom(const AllianceTechDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceTechDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AllianceTechDTO::Swap(AllianceTechDTO* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceTechDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceTechDTO_descriptor_;
  metadata.reflection = AllianceTechDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceTechUpgradeDTO::kTypeFieldNumber;
const int AllianceTechUpgradeDTO::kEndTimeFieldNumber;
#endif  // !_MSC_VER

AllianceTechUpgradeDTO::AllianceTechUpgradeDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceTechUpgradeDTO::InitAsDefaultInstance() {
}

AllianceTechUpgradeDTO::AllianceTechUpgradeDTO(const AllianceTechUpgradeDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceTechUpgradeDTO::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  endtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceTechUpgradeDTO::~AllianceTechUpgradeDTO() {
  SharedDtor();
}

void AllianceTechUpgradeDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllianceTechUpgradeDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceTechUpgradeDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceTechUpgradeDTO_descriptor_;
}

const AllianceTechUpgradeDTO& AllianceTechUpgradeDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceTechUpgradeDTO* AllianceTechUpgradeDTO::default_instance_ = NULL;

AllianceTechUpgradeDTO* AllianceTechUpgradeDTO::New() const {
  return new AllianceTechUpgradeDTO;
}

void AllianceTechUpgradeDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    endtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceTechUpgradeDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_endTime;
        break;
      }

      // required int32 endTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllianceTechUpgradeDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 endTime = 2;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceTechUpgradeDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 endTime = 2;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceTechUpgradeDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 endTime = 2;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceTechUpgradeDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceTechUpgradeDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceTechUpgradeDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceTechUpgradeDTO::MergeFrom(const AllianceTechUpgradeDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceTechUpgradeDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceTechUpgradeDTO::CopyFrom(const AllianceTechUpgradeDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceTechUpgradeDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AllianceTechUpgradeDTO::Swap(AllianceTechUpgradeDTO* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceTechUpgradeDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceTechUpgradeDTO_descriptor_;
  metadata.reflection = AllianceTechUpgradeDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceNewsDTO::kIdFieldNumber;
const int AllianceNewsDTO::kTypeFieldNumber;
const int AllianceNewsDTO::kTargetIdFieldNumber;
const int AllianceNewsDTO::kApplyMsgFieldNumber;
const int AllianceNewsDTO::kPlayerName1FieldNumber;
const int AllianceNewsDTO::kPlayerName2FieldNumber;
const int AllianceNewsDTO::kPositionFieldNumber;
const int AllianceNewsDTO::kTimeFieldNumber;
const int AllianceNewsDTO::kFriendIsWinFieldNumber;
const int AllianceNewsDTO::kEnAlliShortNameFieldNumber;
const int AllianceNewsDTO::kParam1FieldNumber;
const int AllianceNewsDTO::kParam2FieldNumber;
#endif  // !_MSC_VER

AllianceNewsDTO::AllianceNewsDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceNewsDTO::InitAsDefaultInstance() {
  position_ = const_cast< ::slg::protocol::PositionDTO*>(&::slg::protocol::PositionDTO::default_instance());
}

AllianceNewsDTO::AllianceNewsDTO(const AllianceNewsDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceNewsDTO::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  targetid_ = GOOGLE_LONGLONG(0);
  applymsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playername1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playername2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  position_ = NULL;
  time_ = 0;
  friendiswin_ = false;
  enallishortname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  param1_ = 0;
  param2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceNewsDTO::~AllianceNewsDTO() {
  SharedDtor();
}

void AllianceNewsDTO::SharedDtor() {
  if (applymsg_ != &::google::protobuf::internal::kEmptyString) {
    delete applymsg_;
  }
  if (playername1_ != &::google::protobuf::internal::kEmptyString) {
    delete playername1_;
  }
  if (playername2_ != &::google::protobuf::internal::kEmptyString) {
    delete playername2_;
  }
  if (enallishortname_ != &::google::protobuf::internal::kEmptyString) {
    delete enallishortname_;
  }
  if (this != default_instance_) {
    delete position_;
  }
}

void AllianceNewsDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceNewsDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceNewsDTO_descriptor_;
}

const AllianceNewsDTO& AllianceNewsDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceNewsDTO* AllianceNewsDTO::default_instance_ = NULL;

AllianceNewsDTO* AllianceNewsDTO::New() const {
  return new AllianceNewsDTO;
}

void AllianceNewsDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    targetid_ = GOOGLE_LONGLONG(0);
    if (has_applymsg()) {
      if (applymsg_ != &::google::protobuf::internal::kEmptyString) {
        applymsg_->clear();
      }
    }
    if (has_playername1()) {
      if (playername1_ != &::google::protobuf::internal::kEmptyString) {
        playername1_->clear();
      }
    }
    if (has_playername2()) {
      if (playername2_ != &::google::protobuf::internal::kEmptyString) {
        playername2_->clear();
      }
    }
    if (has_position()) {
      if (position_ != NULL) position_->::slg::protocol::PositionDTO::Clear();
    }
    time_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    friendiswin_ = false;
    if (has_enallishortname()) {
      if (enallishortname_ != &::google::protobuf::internal::kEmptyString) {
        enallishortname_->clear();
      }
    }
    param1_ = 0;
    param2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceNewsDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_targetId;
        break;
      }

      // optional int64 targetId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_applyMsg;
        break;
      }

      // optional string applyMsg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_applyMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_applymsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->applymsg().data(), this->applymsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_playerName1;
        break;
      }

      // optional string playerName1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerName1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername1().data(), this->playername1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_playerName2;
        break;
      }

      // optional string playerName2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerName2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername2().data(), this->playername2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_position;
        break;
      }

      // optional .slg.protocol.PositionDTO position = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_time;
        break;
      }

      // optional int32 time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_friendIsWin;
        break;
      }

      // optional bool friendIsWin = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendIsWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &friendiswin_)));
          set_has_friendiswin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_enAlliShortName;
        break;
      }

      // optional string enAlliShortName = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enAlliShortName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enallishortname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->enallishortname().data(), this->enallishortname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_param1;
        break;
      }

      // optional int32 param1 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_param2;
        break;
      }

      // optional int32 param2 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param2_)));
          set_has_param2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllianceNewsDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int64 targetId = 3;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->targetid(), output);
  }

  // optional string applyMsg = 4;
  if (has_applymsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->applymsg().data(), this->applymsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->applymsg(), output);
  }

  // optional string playerName1 = 5;
  if (has_playername1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername1().data(), this->playername1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->playername1(), output);
  }

  // optional string playerName2 = 6;
  if (has_playername2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername2().data(), this->playername2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->playername2(), output);
  }

  // optional .slg.protocol.PositionDTO position = 7;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->position(), output);
  }

  // optional int32 time = 8;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->time(), output);
  }

  // optional bool friendIsWin = 9;
  if (has_friendiswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->friendiswin(), output);
  }

  // optional string enAlliShortName = 10;
  if (has_enallishortname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enallishortname().data(), this->enallishortname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->enallishortname(), output);
  }

  // optional int32 param1 = 11;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->param1(), output);
  }

  // optional int32 param2 = 12;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->param2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceNewsDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int64 targetId = 3;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->targetid(), target);
  }

  // optional string applyMsg = 4;
  if (has_applymsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->applymsg().data(), this->applymsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->applymsg(), target);
  }

  // optional string playerName1 = 5;
  if (has_playername1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername1().data(), this->playername1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->playername1(), target);
  }

  // optional string playerName2 = 6;
  if (has_playername2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername2().data(), this->playername2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->playername2(), target);
  }

  // optional .slg.protocol.PositionDTO position = 7;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->position(), target);
  }

  // optional int32 time = 8;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->time(), target);
  }

  // optional bool friendIsWin = 9;
  if (has_friendiswin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->friendiswin(), target);
  }

  // optional string enAlliShortName = 10;
  if (has_enallishortname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enallishortname().data(), this->enallishortname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->enallishortname(), target);
  }

  // optional int32 param1 = 11;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->param1(), target);
  }

  // optional int32 param2 = 12;
  if (has_param2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->param2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceNewsDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 targetId = 3;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->targetid());
    }

    // optional string applyMsg = 4;
    if (has_applymsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->applymsg());
    }

    // optional string playerName1 = 5;
    if (has_playername1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername1());
    }

    // optional string playerName2 = 6;
    if (has_playername2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername2());
    }

    // optional .slg.protocol.PositionDTO position = 7;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional int32 time = 8;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool friendIsWin = 9;
    if (has_friendiswin()) {
      total_size += 1 + 1;
    }

    // optional string enAlliShortName = 10;
    if (has_enallishortname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->enallishortname());
    }

    // optional int32 param1 = 11;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param1());
    }

    // optional int32 param2 = 12;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceNewsDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceNewsDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceNewsDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceNewsDTO::MergeFrom(const AllianceNewsDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_applymsg()) {
      set_applymsg(from.applymsg());
    }
    if (from.has_playername1()) {
      set_playername1(from.playername1());
    }
    if (from.has_playername2()) {
      set_playername2(from.playername2());
    }
    if (from.has_position()) {
      mutable_position()->::slg::protocol::PositionDTO::MergeFrom(from.position());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_friendiswin()) {
      set_friendiswin(from.friendiswin());
    }
    if (from.has_enallishortname()) {
      set_enallishortname(from.enallishortname());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceNewsDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceNewsDTO::CopyFrom(const AllianceNewsDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceNewsDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void AllianceNewsDTO::Swap(AllianceNewsDTO* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(targetid_, other->targetid_);
    std::swap(applymsg_, other->applymsg_);
    std::swap(playername1_, other->playername1_);
    std::swap(playername2_, other->playername2_);
    std::swap(position_, other->position_);
    std::swap(time_, other->time_);
    std::swap(friendiswin_, other->friendiswin_);
    std::swap(enallishortname_, other->enallishortname_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceNewsDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceNewsDTO_descriptor_;
  metadata.reflection = AllianceNewsDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceHelpDTO::kTimerIdFieldNumber;
const int AllianceHelpDTO::kPlayerIdFieldNumber;
const int AllianceHelpDTO::kPlayerNameFieldNumber;
const int AllianceHelpDTO::kTargetIdFieldNumber;
const int AllianceHelpDTO::kHelpTypeFieldNumber;
const int AllianceHelpDTO::kHelpTimesFieldNumber;
const int AllianceHelpDTO::kTargetLevelFieldNumber;
const int AllianceHelpDTO::kMaxTimesFieldNumber;
const int AllianceHelpDTO::kPlayerIconFieldNumber;
const int AllianceHelpDTO::kHelpIdFieldNumber;
#endif  // !_MSC_VER

AllianceHelpDTO::AllianceHelpDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceHelpDTO::InitAsDefaultInstance() {
}

AllianceHelpDTO::AllianceHelpDTO(const AllianceHelpDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceHelpDTO::SharedCtor() {
  _cached_size_ = 0;
  timerid_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  targetid_ = 0;
  helptype_ = 0;
  helptimes_ = 0;
  targetlevel_ = 0;
  maxtimes_ = 0;
  playericon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  helpid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceHelpDTO::~AllianceHelpDTO() {
  SharedDtor();
}

void AllianceHelpDTO::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (playericon_ != &::google::protobuf::internal::kEmptyString) {
    delete playericon_;
  }
  if (this != default_instance_) {
  }
}

void AllianceHelpDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceHelpDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceHelpDTO_descriptor_;
}

const AllianceHelpDTO& AllianceHelpDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceHelpDTO* AllianceHelpDTO::default_instance_ = NULL;

AllianceHelpDTO* AllianceHelpDTO::New() const {
  return new AllianceHelpDTO;
}

void AllianceHelpDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timerid_ = 0;
    playerid_ = GOOGLE_LONGLONG(0);
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    targetid_ = 0;
    helptype_ = 0;
    helptimes_ = 0;
    targetlevel_ = 0;
    maxtimes_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_playericon()) {
      if (playericon_ != &::google::protobuf::internal::kEmptyString) {
        playericon_->clear();
      }
    }
    helpid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceHelpDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 timerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timerid_)));
          set_has_timerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // required int64 playerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_playerName;
        break;
      }

      // required string playerName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_targetId;
        break;
      }

      // required int32 targetId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_helpType;
        break;
      }

      // required int32 helpType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_helpType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &helptype_)));
          set_has_helptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_helpTimes;
        break;
      }

      // required int32 helpTimes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_helpTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &helptimes_)));
          set_has_helptimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_targetLevel;
        break;
      }

      // required int32 targetLevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetlevel_)));
          set_has_targetlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_maxTimes;
        break;
      }

      // required int32 maxTimes = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxtimes_)));
          set_has_maxtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_playerIcon;
        break;
      }

      // required string playerIcon = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerIcon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playericon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playericon().data(), this->playericon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_helpId;
        break;
      }

      // required int32 helpId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_helpId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &helpid_)));
          set_has_helpid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllianceHelpDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 timerId = 1;
  if (has_timerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timerid(), output);
  }

  // required int64 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->playerid(), output);
  }

  // required string playerName = 3;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->playername(), output);
  }

  // required int32 targetId = 4;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->targetid(), output);
  }

  // required int32 helpType = 5;
  if (has_helptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->helptype(), output);
  }

  // required int32 helpTimes = 6;
  if (has_helptimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->helptimes(), output);
  }

  // required int32 targetLevel = 7;
  if (has_targetlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->targetlevel(), output);
  }

  // required int32 maxTimes = 8;
  if (has_maxtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->maxtimes(), output);
  }

  // required string playerIcon = 9;
  if (has_playericon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playericon().data(), this->playericon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->playericon(), output);
  }

  // required int32 helpId = 10;
  if (has_helpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->helpid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceHelpDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 timerId = 1;
  if (has_timerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->timerid(), target);
  }

  // required int64 playerId = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->playerid(), target);
  }

  // required string playerName = 3;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->playername(), target);
  }

  // required int32 targetId = 4;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->targetid(), target);
  }

  // required int32 helpType = 5;
  if (has_helptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->helptype(), target);
  }

  // required int32 helpTimes = 6;
  if (has_helptimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->helptimes(), target);
  }

  // required int32 targetLevel = 7;
  if (has_targetlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->targetlevel(), target);
  }

  // required int32 maxTimes = 8;
  if (has_maxtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->maxtimes(), target);
  }

  // required string playerIcon = 9;
  if (has_playericon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playericon().data(), this->playericon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->playericon(), target);
  }

  // required int32 helpId = 10;
  if (has_helpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->helpid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceHelpDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 timerId = 1;
    if (has_timerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timerid());
    }

    // required int64 playerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // required string playerName = 3;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // required int32 targetId = 4;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetid());
    }

    // required int32 helpType = 5;
    if (has_helptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->helptype());
    }

    // required int32 helpTimes = 6;
    if (has_helptimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->helptimes());
    }

    // required int32 targetLevel = 7;
    if (has_targetlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetlevel());
    }

    // required int32 maxTimes = 8;
    if (has_maxtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxtimes());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string playerIcon = 9;
    if (has_playericon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playericon());
    }

    // required int32 helpId = 10;
    if (has_helpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->helpid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceHelpDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceHelpDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceHelpDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceHelpDTO::MergeFrom(const AllianceHelpDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timerid()) {
      set_timerid(from.timerid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_helptype()) {
      set_helptype(from.helptype());
    }
    if (from.has_helptimes()) {
      set_helptimes(from.helptimes());
    }
    if (from.has_targetlevel()) {
      set_targetlevel(from.targetlevel());
    }
    if (from.has_maxtimes()) {
      set_maxtimes(from.maxtimes());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_playericon()) {
      set_playericon(from.playericon());
    }
    if (from.has_helpid()) {
      set_helpid(from.helpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceHelpDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceHelpDTO::CopyFrom(const AllianceHelpDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceHelpDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void AllianceHelpDTO::Swap(AllianceHelpDTO* other) {
  if (other != this) {
    std::swap(timerid_, other->timerid_);
    std::swap(playerid_, other->playerid_);
    std::swap(playername_, other->playername_);
    std::swap(targetid_, other->targetid_);
    std::swap(helptype_, other->helptype_);
    std::swap(helptimes_, other->helptimes_);
    std::swap(targetlevel_, other->targetlevel_);
    std::swap(maxtimes_, other->maxtimes_);
    std::swap(playericon_, other->playericon_);
    std::swap(helpid_, other->helpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceHelpDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceHelpDTO_descriptor_;
  metadata.reflection = AllianceHelpDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceMemberDTO::kPlayerIdFieldNumber;
const int AllianceMemberDTO::kNameFieldNumber;
const int AllianceMemberDTO::kPowerFieldNumber;
const int AllianceMemberDTO::kHistoryDonFieldNumber;
const int AllianceMemberDTO::kDayDonFieldNumber;
const int AllianceMemberDTO::kWeekDonFieldNumber;
const int AllianceMemberDTO::kIsOnlineFieldNumber;
const int AllianceMemberDTO::kIconFieldNumber;
const int AllianceMemberDTO::kPositionFieldNumber;
const int AllianceMemberDTO::kPosFieldNumber;
const int AllianceMemberDTO::kLastLoginTimeFieldNumber;
const int AllianceMemberDTO::kVipLevelFieldNumber;
const int AllianceMemberDTO::kActivatedFieldNumber;
#endif  // !_MSC_VER

AllianceMemberDTO::AllianceMemberDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceMemberDTO::InitAsDefaultInstance() {
  pos_ = const_cast< ::slg::protocol::PositionDTO*>(&::slg::protocol::PositionDTO::default_instance());
}

AllianceMemberDTO::AllianceMemberDTO(const AllianceMemberDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceMemberDTO::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  power_ = 0;
  historydon_ = 0;
  daydon_ = 0;
  weekdon_ = 0;
  isonline_ = false;
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  position_ = 0;
  pos_ = NULL;
  lastlogintime_ = 0;
  viplevel_ = 0;
  activated_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceMemberDTO::~AllianceMemberDTO() {
  SharedDtor();
}

void AllianceMemberDTO::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (this != default_instance_) {
    delete pos_;
  }
}

void AllianceMemberDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceMemberDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceMemberDTO_descriptor_;
}

const AllianceMemberDTO& AllianceMemberDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceMemberDTO* AllianceMemberDTO::default_instance_ = NULL;

AllianceMemberDTO* AllianceMemberDTO::New() const {
  return new AllianceMemberDTO;
}

void AllianceMemberDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    power_ = 0;
    historydon_ = 0;
    daydon_ = 0;
    weekdon_ = 0;
    isonline_ = false;
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    position_ = 0;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::slg::protocol::PositionDTO::Clear();
    }
    lastlogintime_ = 0;
    viplevel_ = 0;
    activated_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceMemberDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_power;
        break;
      }

      // required int32 power = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_historyDon;
        break;
      }

      // required int32 historyDon = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_historyDon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &historydon_)));
          set_has_historydon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dayDon;
        break;
      }

      // required int32 dayDon = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dayDon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daydon_)));
          set_has_daydon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_weekDon;
        break;
      }

      // required int32 weekDon = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weekDon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weekdon_)));
          set_has_weekdon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isOnline;
        break;
      }

      // required bool isOnline = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOnline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isonline_)));
          set_has_isonline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_icon;
        break;
      }

      // required string icon = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_position;
        break;
      }

      // required int32 position = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_pos;
        break;
      }

      // required .slg.protocol.PositionDTO pos = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_lastLoginTime;
        break;
      }

      // required int32 lastLoginTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastLoginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastlogintime_)));
          set_has_lastlogintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_vipLevel;
        break;
      }

      // required int32 vipLevel = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_activated;
        break;
      }

      // required bool activated = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &activated_)));
          set_has_activated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllianceMemberDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required int32 power = 3;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->power(), output);
  }

  // required int32 historyDon = 4;
  if (has_historydon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->historydon(), output);
  }

  // required int32 dayDon = 5;
  if (has_daydon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->daydon(), output);
  }

  // required int32 weekDon = 6;
  if (has_weekdon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->weekdon(), output);
  }

  // required bool isOnline = 7;
  if (has_isonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isonline(), output);
  }

  // required string icon = 8;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->icon(), output);
  }

  // required int32 position = 9;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->position(), output);
  }

  // required .slg.protocol.PositionDTO pos = 10;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->pos(), output);
  }

  // required int32 lastLoginTime = 11;
  if (has_lastlogintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->lastlogintime(), output);
  }

  // required int32 vipLevel = 12;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->viplevel(), output);
  }

  // required bool activated = 13;
  if (has_activated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->activated(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceMemberDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int32 power = 3;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->power(), target);
  }

  // required int32 historyDon = 4;
  if (has_historydon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->historydon(), target);
  }

  // required int32 dayDon = 5;
  if (has_daydon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->daydon(), target);
  }

  // required int32 weekDon = 6;
  if (has_weekdon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->weekdon(), target);
  }

  // required bool isOnline = 7;
  if (has_isonline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isonline(), target);
  }

  // required string icon = 8;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->icon(), target);
  }

  // required int32 position = 9;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->position(), target);
  }

  // required .slg.protocol.PositionDTO pos = 10;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->pos(), target);
  }

  // required int32 lastLoginTime = 11;
  if (has_lastlogintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->lastlogintime(), target);
  }

  // required int32 vipLevel = 12;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->viplevel(), target);
  }

  // required bool activated = 13;
  if (has_activated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->activated(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceMemberDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 power = 3;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

    // required int32 historyDon = 4;
    if (has_historydon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->historydon());
    }

    // required int32 dayDon = 5;
    if (has_daydon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daydon());
    }

    // required int32 weekDon = 6;
    if (has_weekdon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weekdon());
    }

    // required bool isOnline = 7;
    if (has_isonline()) {
      total_size += 1 + 1;
    }

    // required string icon = 8;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 position = 9;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

    // required .slg.protocol.PositionDTO pos = 10;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // required int32 lastLoginTime = 11;
    if (has_lastlogintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastlogintime());
    }

    // required int32 vipLevel = 12;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // required bool activated = 13;
    if (has_activated()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceMemberDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceMemberDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceMemberDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceMemberDTO::MergeFrom(const AllianceMemberDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_historydon()) {
      set_historydon(from.historydon());
    }
    if (from.has_daydon()) {
      set_daydon(from.daydon());
    }
    if (from.has_weekdon()) {
      set_weekdon(from.weekdon());
    }
    if (from.has_isonline()) {
      set_isonline(from.isonline());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_pos()) {
      mutable_pos()->::slg::protocol::PositionDTO::MergeFrom(from.pos());
    }
    if (from.has_lastlogintime()) {
      set_lastlogintime(from.lastlogintime());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_activated()) {
      set_activated(from.activated());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceMemberDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceMemberDTO::CopyFrom(const AllianceMemberDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceMemberDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void AllianceMemberDTO::Swap(AllianceMemberDTO* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(name_, other->name_);
    std::swap(power_, other->power_);
    std::swap(historydon_, other->historydon_);
    std::swap(daydon_, other->daydon_);
    std::swap(weekdon_, other->weekdon_);
    std::swap(isonline_, other->isonline_);
    std::swap(icon_, other->icon_);
    std::swap(position_, other->position_);
    std::swap(pos_, other->pos_);
    std::swap(lastlogintime_, other->lastlogintime_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(activated_, other->activated_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceMemberDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceMemberDTO_descriptor_;
  metadata.reflection = AllianceMemberDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceDTO::kIdFieldNumber;
const int AllianceDTO::kNameFieldNumber;
const int AllianceDTO::kShortNameFieldNumber;
const int AllianceDTO::kHonorFieldNumber;
const int AllianceDTO::kFlagFieldNumber;
const int AllianceDTO::kDeclarationFieldNumber;
const int AllianceDTO::kIsPublicFieldNumber;
const int AllianceDTO::kJoinPowerFieldNumber;
const int AllianceDTO::kLanguageFieldNumber;
const int AllianceDTO::kMembersFieldNumber;
const int AllianceDTO::kLeaderAbsenceFieldNumber;
const int AllianceDTO::kMsgsFieldNumber;
const int AllianceDTO::kMemberLimitFieldNumber;
#endif  // !_MSC_VER

AllianceDTO::AllianceDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceDTO::InitAsDefaultInstance() {
}

AllianceDTO::AllianceDTO(const AllianceDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceDTO::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  shortname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  honor_ = 0;
  flag_ = 0;
  declaration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ispublic_ = false;
  joinpower_ = 0;
  language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leaderabsence_ = false;
  memberlimit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceDTO::~AllianceDTO() {
  SharedDtor();
}

void AllianceDTO::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (shortname_ != &::google::protobuf::internal::kEmptyString) {
    delete shortname_;
  }
  if (declaration_ != &::google::protobuf::internal::kEmptyString) {
    delete declaration_;
  }
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    delete language_;
  }
  if (this != default_instance_) {
  }
}

void AllianceDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceDTO_descriptor_;
}

const AllianceDTO& AllianceDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceDTO* AllianceDTO::default_instance_ = NULL;

AllianceDTO* AllianceDTO::New() const {
  return new AllianceDTO;
}

void AllianceDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_shortname()) {
      if (shortname_ != &::google::protobuf::internal::kEmptyString) {
        shortname_->clear();
      }
    }
    honor_ = 0;
    flag_ = 0;
    if (has_declaration()) {
      if (declaration_ != &::google::protobuf::internal::kEmptyString) {
        declaration_->clear();
      }
    }
    ispublic_ = false;
    joinpower_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_language()) {
      if (language_ != &::google::protobuf::internal::kEmptyString) {
        language_->clear();
      }
    }
    leaderabsence_ = false;
    memberlimit_ = 0;
  }
  members_.Clear();
  msgs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_shortName;
        break;
      }

      // required string shortName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shortName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shortname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->shortname().data(), this->shortname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_honor;
        break;
      }

      // required int32 honor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_honor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &honor_)));
          set_has_honor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_flag;
        break;
      }

      // required int32 flag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_declaration;
        break;
      }

      // required string declaration = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_declaration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_declaration()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->declaration().data(), this->declaration().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isPublic;
        break;
      }

      // required bool isPublic = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isPublic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispublic_)));
          set_has_ispublic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_joinPower;
        break;
      }

      // required int32 joinPower = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_joinPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &joinpower_)));
          set_has_joinpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_language;
        break;
      }

      // required string language = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_members;
        break;
      }

      // repeated .slg.protocol.AllianceMemberDTO members = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_members;
        if (input->ExpectTag(88)) goto parse_leaderAbsence;
        break;
      }

      // required bool leaderAbsence = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaderAbsence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &leaderabsence_)));
          set_has_leaderabsence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_msgs;
        break;
      }

      // repeated .slg.protocol.AllianceNewsDTO msgs = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msgs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_msgs;
        if (input->ExpectTag(104)) goto parse_memberLimit;
        break;
      }

      // required int32 memberLimit = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memberLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memberlimit_)));
          set_has_memberlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllianceDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required string shortName = 3;
  if (has_shortname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shortname().data(), this->shortname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->shortname(), output);
  }

  // required int32 honor = 4;
  if (has_honor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->honor(), output);
  }

  // required int32 flag = 5;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->flag(), output);
  }

  // required string declaration = 6;
  if (has_declaration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->declaration().data(), this->declaration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->declaration(), output);
  }

  // required bool isPublic = 7;
  if (has_ispublic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->ispublic(), output);
  }

  // required int32 joinPower = 8;
  if (has_joinpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->joinpower(), output);
  }

  // required string language = 9;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->language(), output);
  }

  // repeated .slg.protocol.AllianceMemberDTO members = 10;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->members(i), output);
  }

  // required bool leaderAbsence = 11;
  if (has_leaderabsence()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->leaderabsence(), output);
  }

  // repeated .slg.protocol.AllianceNewsDTO msgs = 12;
  for (int i = 0; i < this->msgs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->msgs(i), output);
  }

  // required int32 memberLimit = 13;
  if (has_memberlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->memberlimit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required string shortName = 3;
  if (has_shortname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shortname().data(), this->shortname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->shortname(), target);
  }

  // required int32 honor = 4;
  if (has_honor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->honor(), target);
  }

  // required int32 flag = 5;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->flag(), target);
  }

  // required string declaration = 6;
  if (has_declaration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->declaration().data(), this->declaration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->declaration(), target);
  }

  // required bool isPublic = 7;
  if (has_ispublic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->ispublic(), target);
  }

  // required int32 joinPower = 8;
  if (has_joinpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->joinpower(), target);
  }

  // required string language = 9;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->language(), target);
  }

  // repeated .slg.protocol.AllianceMemberDTO members = 10;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->members(i), target);
  }

  // required bool leaderAbsence = 11;
  if (has_leaderabsence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->leaderabsence(), target);
  }

  // repeated .slg.protocol.AllianceNewsDTO msgs = 12;
  for (int i = 0; i < this->msgs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->msgs(i), target);
  }

  // required int32 memberLimit = 13;
  if (has_memberlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->memberlimit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string shortName = 3;
    if (has_shortname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shortname());
    }

    // required int32 honor = 4;
    if (has_honor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->honor());
    }

    // required int32 flag = 5;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // required string declaration = 6;
    if (has_declaration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->declaration());
    }

    // required bool isPublic = 7;
    if (has_ispublic()) {
      total_size += 1 + 1;
    }

    // required int32 joinPower = 8;
    if (has_joinpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->joinpower());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string language = 9;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

    // required bool leaderAbsence = 11;
    if (has_leaderabsence()) {
      total_size += 1 + 1;
    }

    // required int32 memberLimit = 13;
    if (has_memberlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->memberlimit());
    }

  }
  // repeated .slg.protocol.AllianceMemberDTO members = 10;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  // repeated .slg.protocol.AllianceNewsDTO msgs = 12;
  total_size += 1 * this->msgs_size();
  for (int i = 0; i < this->msgs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msgs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceDTO::MergeFrom(const AllianceDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  msgs_.MergeFrom(from.msgs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_shortname()) {
      set_shortname(from.shortname());
    }
    if (from.has_honor()) {
      set_honor(from.honor());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_declaration()) {
      set_declaration(from.declaration());
    }
    if (from.has_ispublic()) {
      set_ispublic(from.ispublic());
    }
    if (from.has_joinpower()) {
      set_joinpower(from.joinpower());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_leaderabsence()) {
      set_leaderabsence(from.leaderabsence());
    }
    if (from.has_memberlimit()) {
      set_memberlimit(from.memberlimit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceDTO::CopyFrom(const AllianceDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x000015ff) != 0x000015ff) return false;

  for (int i = 0; i < members_size(); i++) {
    if (!this->members(i).IsInitialized()) return false;
  }
  for (int i = 0; i < msgs_size(); i++) {
    if (!this->msgs(i).IsInitialized()) return false;
  }
  return true;
}

void AllianceDTO::Swap(AllianceDTO* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(shortname_, other->shortname_);
    std::swap(honor_, other->honor_);
    std::swap(flag_, other->flag_);
    std::swap(declaration_, other->declaration_);
    std::swap(ispublic_, other->ispublic_);
    std::swap(joinpower_, other->joinpower_);
    std::swap(language_, other->language_);
    members_.Swap(&other->members_);
    std::swap(leaderabsence_, other->leaderabsence_);
    msgs_.Swap(&other->msgs_);
    std::swap(memberlimit_, other->memberlimit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceDTO_descriptor_;
  metadata.reflection = AllianceDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateAllianceRequest::kNameFieldNumber;
const int CreateAllianceRequest::kDeclarationFieldNumber;
#endif  // !_MSC_VER

CreateAllianceRequest::CreateAllianceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateAllianceRequest::InitAsDefaultInstance() {
}

CreateAllianceRequest::CreateAllianceRequest(const CreateAllianceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateAllianceRequest::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  declaration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateAllianceRequest::~CreateAllianceRequest() {
  SharedDtor();
}

void CreateAllianceRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (declaration_ != &::google::protobuf::internal::kEmptyString) {
    delete declaration_;
  }
  if (this != default_instance_) {
  }
}

void CreateAllianceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateAllianceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateAllianceRequest_descriptor_;
}

const CreateAllianceRequest& CreateAllianceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

CreateAllianceRequest* CreateAllianceRequest::default_instance_ = NULL;

CreateAllianceRequest* CreateAllianceRequest::New() const {
  return new CreateAllianceRequest;
}

void CreateAllianceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_declaration()) {
      if (declaration_ != &::google::protobuf::internal::kEmptyString) {
        declaration_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateAllianceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_declaration;
        break;
      }

      // required string declaration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_declaration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_declaration()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->declaration().data(), this->declaration().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateAllianceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string declaration = 2;
  if (has_declaration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->declaration().data(), this->declaration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->declaration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateAllianceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string declaration = 2;
  if (has_declaration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->declaration().data(), this->declaration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->declaration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateAllianceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string declaration = 2;
    if (has_declaration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->declaration());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateAllianceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateAllianceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateAllianceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateAllianceRequest::MergeFrom(const CreateAllianceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_declaration()) {
      set_declaration(from.declaration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateAllianceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateAllianceRequest::CopyFrom(const CreateAllianceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAllianceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CreateAllianceRequest::Swap(CreateAllianceRequest* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(declaration_, other->declaration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateAllianceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateAllianceRequest_descriptor_;
  metadata.reflection = CreateAllianceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateAllianceResponse::kAllianceFieldNumber;
#endif  // !_MSC_VER

CreateAllianceResponse::CreateAllianceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateAllianceResponse::InitAsDefaultInstance() {
  alliance_ = const_cast< ::slg::protocol::AllianceDTO*>(&::slg::protocol::AllianceDTO::default_instance());
}

CreateAllianceResponse::CreateAllianceResponse(const CreateAllianceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateAllianceResponse::SharedCtor() {
  _cached_size_ = 0;
  alliance_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateAllianceResponse::~CreateAllianceResponse() {
  SharedDtor();
}

void CreateAllianceResponse::SharedDtor() {
  if (this != default_instance_) {
    delete alliance_;
  }
}

void CreateAllianceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateAllianceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateAllianceResponse_descriptor_;
}

const CreateAllianceResponse& CreateAllianceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

CreateAllianceResponse* CreateAllianceResponse::default_instance_ = NULL;

CreateAllianceResponse* CreateAllianceResponse::New() const {
  return new CreateAllianceResponse;
}

void CreateAllianceResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_alliance()) {
      if (alliance_ != NULL) alliance_->::slg::protocol::AllianceDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateAllianceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .slg.protocol.AllianceDTO alliance = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alliance()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateAllianceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .slg.protocol.AllianceDTO alliance = 1;
  if (has_alliance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alliance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateAllianceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .slg.protocol.AllianceDTO alliance = 1;
  if (has_alliance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->alliance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateAllianceResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .slg.protocol.AllianceDTO alliance = 1;
    if (has_alliance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alliance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateAllianceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateAllianceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateAllianceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateAllianceResponse::MergeFrom(const CreateAllianceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alliance()) {
      mutable_alliance()->::slg::protocol::AllianceDTO::MergeFrom(from.alliance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateAllianceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateAllianceResponse::CopyFrom(const CreateAllianceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAllianceResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_alliance()) {
    if (!this->alliance().IsInitialized()) return false;
  }
  return true;
}

void CreateAllianceResponse::Swap(CreateAllianceResponse* other) {
  if (other != this) {
    std::swap(alliance_, other->alliance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateAllianceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateAllianceResponse_descriptor_;
  metadata.reflection = CreateAllianceResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryAllianceRequest::kAllianceIdFieldNumber;
const int QueryAllianceRequest::kAllianceNameFieldNumber;
#endif  // !_MSC_VER

QueryAllianceRequest::QueryAllianceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryAllianceRequest::InitAsDefaultInstance() {
}

QueryAllianceRequest::QueryAllianceRequest(const QueryAllianceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryAllianceRequest::SharedCtor() {
  _cached_size_ = 0;
  allianceid_ = 0;
  alliancename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryAllianceRequest::~QueryAllianceRequest() {
  SharedDtor();
}

void QueryAllianceRequest::SharedDtor() {
  if (alliancename_ != &::google::protobuf::internal::kEmptyString) {
    delete alliancename_;
  }
  if (this != default_instance_) {
  }
}

void QueryAllianceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryAllianceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryAllianceRequest_descriptor_;
}

const QueryAllianceRequest& QueryAllianceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

QueryAllianceRequest* QueryAllianceRequest::default_instance_ = NULL;

QueryAllianceRequest* QueryAllianceRequest::New() const {
  return new QueryAllianceRequest;
}

void QueryAllianceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    allianceid_ = 0;
    if (has_alliancename()) {
      if (alliancename_ != &::google::protobuf::internal::kEmptyString) {
        alliancename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryAllianceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 allianceId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allianceid_)));
          set_has_allianceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_allianceName;
        break;
      }

      // optional string allianceName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allianceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alliancename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alliancename().data(), this->alliancename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryAllianceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 allianceId = 1;
  if (has_allianceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->allianceid(), output);
  }

  // optional string allianceName = 2;
  if (has_alliancename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alliancename().data(), this->alliancename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->alliancename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryAllianceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 allianceId = 1;
  if (has_allianceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->allianceid(), target);
  }

  // optional string allianceName = 2;
  if (has_alliancename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alliancename().data(), this->alliancename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->alliancename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryAllianceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 allianceId = 1;
    if (has_allianceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allianceid());
    }

    // optional string allianceName = 2;
    if (has_alliancename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alliancename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryAllianceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryAllianceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryAllianceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryAllianceRequest::MergeFrom(const QueryAllianceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allianceid()) {
      set_allianceid(from.allianceid());
    }
    if (from.has_alliancename()) {
      set_alliancename(from.alliancename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryAllianceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryAllianceRequest::CopyFrom(const QueryAllianceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAllianceRequest::IsInitialized() const {

  return true;
}

void QueryAllianceRequest::Swap(QueryAllianceRequest* other) {
  if (other != this) {
    std::swap(allianceid_, other->allianceid_);
    std::swap(alliancename_, other->alliancename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryAllianceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryAllianceRequest_descriptor_;
  metadata.reflection = QueryAllianceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryAllianceResponse::kAllianceFieldNumber;
#endif  // !_MSC_VER

QueryAllianceResponse::QueryAllianceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryAllianceResponse::InitAsDefaultInstance() {
  alliance_ = const_cast< ::slg::protocol::AllianceDTO*>(&::slg::protocol::AllianceDTO::default_instance());
}

QueryAllianceResponse::QueryAllianceResponse(const QueryAllianceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryAllianceResponse::SharedCtor() {
  _cached_size_ = 0;
  alliance_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryAllianceResponse::~QueryAllianceResponse() {
  SharedDtor();
}

void QueryAllianceResponse::SharedDtor() {
  if (this != default_instance_) {
    delete alliance_;
  }
}

void QueryAllianceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryAllianceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryAllianceResponse_descriptor_;
}

const QueryAllianceResponse& QueryAllianceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

QueryAllianceResponse* QueryAllianceResponse::default_instance_ = NULL;

QueryAllianceResponse* QueryAllianceResponse::New() const {
  return new QueryAllianceResponse;
}

void QueryAllianceResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_alliance()) {
      if (alliance_ != NULL) alliance_->::slg::protocol::AllianceDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryAllianceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .slg.protocol.AllianceDTO alliance = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alliance()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryAllianceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .slg.protocol.AllianceDTO alliance = 1;
  if (has_alliance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alliance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryAllianceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .slg.protocol.AllianceDTO alliance = 1;
  if (has_alliance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->alliance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryAllianceResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .slg.protocol.AllianceDTO alliance = 1;
    if (has_alliance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alliance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryAllianceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryAllianceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryAllianceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryAllianceResponse::MergeFrom(const QueryAllianceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alliance()) {
      mutable_alliance()->::slg::protocol::AllianceDTO::MergeFrom(from.alliance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryAllianceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryAllianceResponse::CopyFrom(const QueryAllianceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAllianceResponse::IsInitialized() const {

  if (has_alliance()) {
    if (!this->alliance().IsInitialized()) return false;
  }
  return true;
}

void QueryAllianceResponse::Swap(QueryAllianceResponse* other) {
  if (other != this) {
    std::swap(alliance_, other->alliance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryAllianceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryAllianceResponse_descriptor_;
  metadata.reflection = QueryAllianceResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MyAllianceInfoRequest::MyAllianceInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MyAllianceInfoRequest::InitAsDefaultInstance() {
}

MyAllianceInfoRequest::MyAllianceInfoRequest(const MyAllianceInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MyAllianceInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MyAllianceInfoRequest::~MyAllianceInfoRequest() {
  SharedDtor();
}

void MyAllianceInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MyAllianceInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MyAllianceInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyAllianceInfoRequest_descriptor_;
}

const MyAllianceInfoRequest& MyAllianceInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

MyAllianceInfoRequest* MyAllianceInfoRequest::default_instance_ = NULL;

MyAllianceInfoRequest* MyAllianceInfoRequest::New() const {
  return new MyAllianceInfoRequest;
}

void MyAllianceInfoRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MyAllianceInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MyAllianceInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MyAllianceInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MyAllianceInfoRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyAllianceInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MyAllianceInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MyAllianceInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MyAllianceInfoRequest::MergeFrom(const MyAllianceInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MyAllianceInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyAllianceInfoRequest::CopyFrom(const MyAllianceInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyAllianceInfoRequest::IsInitialized() const {

  return true;
}

void MyAllianceInfoRequest::Swap(MyAllianceInfoRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MyAllianceInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MyAllianceInfoRequest_descriptor_;
  metadata.reflection = MyAllianceInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MyAllianceInfoResponse::kAllianceFieldNumber;
#endif  // !_MSC_VER

MyAllianceInfoResponse::MyAllianceInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MyAllianceInfoResponse::InitAsDefaultInstance() {
  alliance_ = const_cast< ::slg::protocol::AllianceDTO*>(&::slg::protocol::AllianceDTO::default_instance());
}

MyAllianceInfoResponse::MyAllianceInfoResponse(const MyAllianceInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MyAllianceInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  alliance_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MyAllianceInfoResponse::~MyAllianceInfoResponse() {
  SharedDtor();
}

void MyAllianceInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete alliance_;
  }
}

void MyAllianceInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MyAllianceInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyAllianceInfoResponse_descriptor_;
}

const MyAllianceInfoResponse& MyAllianceInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

MyAllianceInfoResponse* MyAllianceInfoResponse::default_instance_ = NULL;

MyAllianceInfoResponse* MyAllianceInfoResponse::New() const {
  return new MyAllianceInfoResponse;
}

void MyAllianceInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_alliance()) {
      if (alliance_ != NULL) alliance_->::slg::protocol::AllianceDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MyAllianceInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .slg.protocol.AllianceDTO alliance = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alliance()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MyAllianceInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .slg.protocol.AllianceDTO alliance = 1;
  if (has_alliance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alliance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MyAllianceInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .slg.protocol.AllianceDTO alliance = 1;
  if (has_alliance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->alliance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MyAllianceInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .slg.protocol.AllianceDTO alliance = 1;
    if (has_alliance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alliance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyAllianceInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MyAllianceInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MyAllianceInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MyAllianceInfoResponse::MergeFrom(const MyAllianceInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alliance()) {
      mutable_alliance()->::slg::protocol::AllianceDTO::MergeFrom(from.alliance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MyAllianceInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyAllianceInfoResponse::CopyFrom(const MyAllianceInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyAllianceInfoResponse::IsInitialized() const {

  if (has_alliance()) {
    if (!this->alliance().IsInitialized()) return false;
  }
  return true;
}

void MyAllianceInfoResponse::Swap(MyAllianceInfoResponse* other) {
  if (other != this) {
    std::swap(alliance_, other->alliance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MyAllianceInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MyAllianceInfoResponse_descriptor_;
  metadata.reflection = MyAllianceInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinAllianceRequest::kAllianceIdFieldNumber;
const int JoinAllianceRequest::kApplyMsgFieldNumber;
#endif  // !_MSC_VER

JoinAllianceRequest::JoinAllianceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JoinAllianceRequest::InitAsDefaultInstance() {
}

JoinAllianceRequest::JoinAllianceRequest(const JoinAllianceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JoinAllianceRequest::SharedCtor() {
  _cached_size_ = 0;
  allianceid_ = 0;
  applymsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinAllianceRequest::~JoinAllianceRequest() {
  SharedDtor();
}

void JoinAllianceRequest::SharedDtor() {
  if (applymsg_ != &::google::protobuf::internal::kEmptyString) {
    delete applymsg_;
  }
  if (this != default_instance_) {
  }
}

void JoinAllianceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinAllianceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinAllianceRequest_descriptor_;
}

const JoinAllianceRequest& JoinAllianceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

JoinAllianceRequest* JoinAllianceRequest::default_instance_ = NULL;

JoinAllianceRequest* JoinAllianceRequest::New() const {
  return new JoinAllianceRequest;
}

void JoinAllianceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    allianceid_ = 0;
    if (has_applymsg()) {
      if (applymsg_ != &::google::protobuf::internal::kEmptyString) {
        applymsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinAllianceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 allianceId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allianceid_)));
          set_has_allianceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_applyMsg;
        break;
      }

      // optional string applyMsg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_applyMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_applymsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->applymsg().data(), this->applymsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JoinAllianceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 allianceId = 1;
  if (has_allianceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->allianceid(), output);
  }

  // optional string applyMsg = 2;
  if (has_applymsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->applymsg().data(), this->applymsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->applymsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JoinAllianceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 allianceId = 1;
  if (has_allianceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->allianceid(), target);
  }

  // optional string applyMsg = 2;
  if (has_applymsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->applymsg().data(), this->applymsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->applymsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JoinAllianceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 allianceId = 1;
    if (has_allianceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allianceid());
    }

    // optional string applyMsg = 2;
    if (has_applymsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->applymsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinAllianceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinAllianceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinAllianceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinAllianceRequest::MergeFrom(const JoinAllianceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allianceid()) {
      set_allianceid(from.allianceid());
    }
    if (from.has_applymsg()) {
      set_applymsg(from.applymsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinAllianceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinAllianceRequest::CopyFrom(const JoinAllianceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinAllianceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void JoinAllianceRequest::Swap(JoinAllianceRequest* other) {
  if (other != this) {
    std::swap(allianceid_, other->allianceid_);
    std::swap(applymsg_, other->applymsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinAllianceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinAllianceRequest_descriptor_;
  metadata.reflection = JoinAllianceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinAllianceResponse::kAllianceFieldNumber;
#endif  // !_MSC_VER

JoinAllianceResponse::JoinAllianceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JoinAllianceResponse::InitAsDefaultInstance() {
  alliance_ = const_cast< ::slg::protocol::AllianceDTO*>(&::slg::protocol::AllianceDTO::default_instance());
}

JoinAllianceResponse::JoinAllianceResponse(const JoinAllianceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JoinAllianceResponse::SharedCtor() {
  _cached_size_ = 0;
  alliance_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinAllianceResponse::~JoinAllianceResponse() {
  SharedDtor();
}

void JoinAllianceResponse::SharedDtor() {
  if (this != default_instance_) {
    delete alliance_;
  }
}

void JoinAllianceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinAllianceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinAllianceResponse_descriptor_;
}

const JoinAllianceResponse& JoinAllianceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

JoinAllianceResponse* JoinAllianceResponse::default_instance_ = NULL;

JoinAllianceResponse* JoinAllianceResponse::New() const {
  return new JoinAllianceResponse;
}

void JoinAllianceResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_alliance()) {
      if (alliance_ != NULL) alliance_->::slg::protocol::AllianceDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinAllianceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .slg.protocol.AllianceDTO alliance = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alliance()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JoinAllianceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .slg.protocol.AllianceDTO alliance = 1;
  if (has_alliance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alliance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JoinAllianceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .slg.protocol.AllianceDTO alliance = 1;
  if (has_alliance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->alliance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JoinAllianceResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .slg.protocol.AllianceDTO alliance = 1;
    if (has_alliance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alliance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinAllianceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinAllianceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinAllianceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinAllianceResponse::MergeFrom(const JoinAllianceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alliance()) {
      mutable_alliance()->::slg::protocol::AllianceDTO::MergeFrom(from.alliance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinAllianceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinAllianceResponse::CopyFrom(const JoinAllianceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinAllianceResponse::IsInitialized() const {

  if (has_alliance()) {
    if (!this->alliance().IsInitialized()) return false;
  }
  return true;
}

void JoinAllianceResponse::Swap(JoinAllianceResponse* other) {
  if (other != this) {
    std::swap(alliance_, other->alliance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinAllianceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinAllianceResponse_descriptor_;
  metadata.reflection = JoinAllianceResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetPositionRequest::kPlayerIdFieldNumber;
const int SetPositionRequest::kPositionFieldNumber;
#endif  // !_MSC_VER

SetPositionRequest::SetPositionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetPositionRequest::InitAsDefaultInstance() {
}

SetPositionRequest::SetPositionRequest(const SetPositionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetPositionRequest::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  position_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetPositionRequest::~SetPositionRequest() {
  SharedDtor();
}

void SetPositionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetPositionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetPositionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetPositionRequest_descriptor_;
}

const SetPositionRequest& SetPositionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

SetPositionRequest* SetPositionRequest::default_instance_ = NULL;

SetPositionRequest* SetPositionRequest::New() const {
  return new SetPositionRequest;
}

void SetPositionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
    position_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetPositionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // required int32 position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetPositionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // required int32 position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetPositionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // required int32 position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetPositionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // required int32 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetPositionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetPositionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetPositionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetPositionRequest::MergeFrom(const SetPositionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetPositionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPositionRequest::CopyFrom(const SetPositionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPositionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SetPositionRequest::Swap(SetPositionRequest* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetPositionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetPositionRequest_descriptor_;
  metadata.reflection = SetPositionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetPositionResponse::kPlayerIdFieldNumber;
const int SetPositionResponse::kPositionFieldNumber;
#endif  // !_MSC_VER

SetPositionResponse::SetPositionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetPositionResponse::InitAsDefaultInstance() {
}

SetPositionResponse::SetPositionResponse(const SetPositionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetPositionResponse::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  position_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetPositionResponse::~SetPositionResponse() {
  SharedDtor();
}

void SetPositionResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetPositionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetPositionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetPositionResponse_descriptor_;
}

const SetPositionResponse& SetPositionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

SetPositionResponse* SetPositionResponse::default_instance_ = NULL;

SetPositionResponse* SetPositionResponse::New() const {
  return new SetPositionResponse;
}

void SetPositionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
    position_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetPositionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // required int32 position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetPositionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // required int32 position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetPositionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // required int32 position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetPositionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // required int32 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetPositionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetPositionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetPositionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetPositionResponse::MergeFrom(const SetPositionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetPositionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPositionResponse::CopyFrom(const SetPositionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPositionResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SetPositionResponse::Swap(SetPositionResponse* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetPositionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetPositionResponse_descriptor_;
  metadata.reflection = SetPositionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KickOutAllianceRequest::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

KickOutAllianceRequest::KickOutAllianceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KickOutAllianceRequest::InitAsDefaultInstance() {
}

KickOutAllianceRequest::KickOutAllianceRequest(const KickOutAllianceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KickOutAllianceRequest::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickOutAllianceRequest::~KickOutAllianceRequest() {
  SharedDtor();
}

void KickOutAllianceRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KickOutAllianceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickOutAllianceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickOutAllianceRequest_descriptor_;
}

const KickOutAllianceRequest& KickOutAllianceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

KickOutAllianceRequest* KickOutAllianceRequest::default_instance_ = NULL;

KickOutAllianceRequest* KickOutAllianceRequest::New() const {
  return new KickOutAllianceRequest;
}

void KickOutAllianceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickOutAllianceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KickOutAllianceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KickOutAllianceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KickOutAllianceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickOutAllianceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickOutAllianceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickOutAllianceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickOutAllianceRequest::MergeFrom(const KickOutAllianceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickOutAllianceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickOutAllianceRequest::CopyFrom(const KickOutAllianceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickOutAllianceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void KickOutAllianceRequest::Swap(KickOutAllianceRequest* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickOutAllianceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickOutAllianceRequest_descriptor_;
  metadata.reflection = KickOutAllianceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ExitsAllianceRequest::ExitsAllianceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExitsAllianceRequest::InitAsDefaultInstance() {
}

ExitsAllianceRequest::ExitsAllianceRequest(const ExitsAllianceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExitsAllianceRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExitsAllianceRequest::~ExitsAllianceRequest() {
  SharedDtor();
}

void ExitsAllianceRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExitsAllianceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExitsAllianceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExitsAllianceRequest_descriptor_;
}

const ExitsAllianceRequest& ExitsAllianceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

ExitsAllianceRequest* ExitsAllianceRequest::default_instance_ = NULL;

ExitsAllianceRequest* ExitsAllianceRequest::New() const {
  return new ExitsAllianceRequest;
}

void ExitsAllianceRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExitsAllianceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ExitsAllianceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExitsAllianceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExitsAllianceRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExitsAllianceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExitsAllianceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExitsAllianceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExitsAllianceRequest::MergeFrom(const ExitsAllianceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExitsAllianceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExitsAllianceRequest::CopyFrom(const ExitsAllianceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitsAllianceRequest::IsInitialized() const {

  return true;
}

void ExitsAllianceRequest::Swap(ExitsAllianceRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExitsAllianceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExitsAllianceRequest_descriptor_;
  metadata.reflection = ExitsAllianceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExitsAllianceResponse::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

ExitsAllianceResponse::ExitsAllianceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExitsAllianceResponse::InitAsDefaultInstance() {
}

ExitsAllianceResponse::ExitsAllianceResponse(const ExitsAllianceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExitsAllianceResponse::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExitsAllianceResponse::~ExitsAllianceResponse() {
  SharedDtor();
}

void ExitsAllianceResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExitsAllianceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExitsAllianceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExitsAllianceResponse_descriptor_;
}

const ExitsAllianceResponse& ExitsAllianceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

ExitsAllianceResponse* ExitsAllianceResponse::default_instance_ = NULL;

ExitsAllianceResponse* ExitsAllianceResponse::New() const {
  return new ExitsAllianceResponse;
}

void ExitsAllianceResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExitsAllianceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExitsAllianceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExitsAllianceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExitsAllianceResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExitsAllianceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExitsAllianceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExitsAllianceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExitsAllianceResponse::MergeFrom(const ExitsAllianceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExitsAllianceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExitsAllianceResponse::CopyFrom(const ExitsAllianceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitsAllianceResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ExitsAllianceResponse::Swap(ExitsAllianceResponse* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExitsAllianceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExitsAllianceResponse_descriptor_;
  metadata.reflection = ExitsAllianceResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransferLeaderRequest::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

TransferLeaderRequest::TransferLeaderRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransferLeaderRequest::InitAsDefaultInstance() {
}

TransferLeaderRequest::TransferLeaderRequest(const TransferLeaderRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransferLeaderRequest::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransferLeaderRequest::~TransferLeaderRequest() {
  SharedDtor();
}

void TransferLeaderRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransferLeaderRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferLeaderRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferLeaderRequest_descriptor_;
}

const TransferLeaderRequest& TransferLeaderRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

TransferLeaderRequest* TransferLeaderRequest::default_instance_ = NULL;

TransferLeaderRequest* TransferLeaderRequest::New() const {
  return new TransferLeaderRequest;
}

void TransferLeaderRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransferLeaderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransferLeaderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransferLeaderRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransferLeaderRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferLeaderRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransferLeaderRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransferLeaderRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransferLeaderRequest::MergeFrom(const TransferLeaderRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransferLeaderRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferLeaderRequest::CopyFrom(const TransferLeaderRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferLeaderRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TransferLeaderRequest::Swap(TransferLeaderRequest* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransferLeaderRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransferLeaderRequest_descriptor_;
  metadata.reflection = TransferLeaderRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransferLeaderResponse::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

TransferLeaderResponse::TransferLeaderResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransferLeaderResponse::InitAsDefaultInstance() {
}

TransferLeaderResponse::TransferLeaderResponse(const TransferLeaderResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransferLeaderResponse::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransferLeaderResponse::~TransferLeaderResponse() {
  SharedDtor();
}

void TransferLeaderResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransferLeaderResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferLeaderResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferLeaderResponse_descriptor_;
}

const TransferLeaderResponse& TransferLeaderResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

TransferLeaderResponse* TransferLeaderResponse::default_instance_ = NULL;

TransferLeaderResponse* TransferLeaderResponse::New() const {
  return new TransferLeaderResponse;
}

void TransferLeaderResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransferLeaderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransferLeaderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransferLeaderResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransferLeaderResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferLeaderResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransferLeaderResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransferLeaderResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransferLeaderResponse::MergeFrom(const TransferLeaderResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransferLeaderResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferLeaderResponse::CopyFrom(const TransferLeaderResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferLeaderResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TransferLeaderResponse::Swap(TransferLeaderResponse* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransferLeaderResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransferLeaderResponse_descriptor_;
  metadata.reflection = TransferLeaderResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceSettingRequest::kAllianceNameFieldNumber;
const int AllianceSettingRequest::kFlagFieldNumber;
const int AllianceSettingRequest::kDeclarationFieldNumber;
const int AllianceSettingRequest::kIsPublicFieldNumber;
const int AllianceSettingRequest::kJoinPowerFieldNumber;
const int AllianceSettingRequest::kLanguageFieldNumber;
const int AllianceSettingRequest::kShortNameFieldNumber;
#endif  // !_MSC_VER

AllianceSettingRequest::AllianceSettingRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceSettingRequest::InitAsDefaultInstance() {
}

AllianceSettingRequest::AllianceSettingRequest(const AllianceSettingRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceSettingRequest::SharedCtor() {
  _cached_size_ = 0;
  alliancename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flag_ = 0;
  declaration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ispublic_ = false;
  joinpower_ = 0;
  language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  shortname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceSettingRequest::~AllianceSettingRequest() {
  SharedDtor();
}

void AllianceSettingRequest::SharedDtor() {
  if (alliancename_ != &::google::protobuf::internal::kEmptyString) {
    delete alliancename_;
  }
  if (declaration_ != &::google::protobuf::internal::kEmptyString) {
    delete declaration_;
  }
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    delete language_;
  }
  if (shortname_ != &::google::protobuf::internal::kEmptyString) {
    delete shortname_;
  }
  if (this != default_instance_) {
  }
}

void AllianceSettingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceSettingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceSettingRequest_descriptor_;
}

const AllianceSettingRequest& AllianceSettingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceSettingRequest* AllianceSettingRequest::default_instance_ = NULL;

AllianceSettingRequest* AllianceSettingRequest::New() const {
  return new AllianceSettingRequest;
}

void AllianceSettingRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_alliancename()) {
      if (alliancename_ != &::google::protobuf::internal::kEmptyString) {
        alliancename_->clear();
      }
    }
    flag_ = 0;
    if (has_declaration()) {
      if (declaration_ != &::google::protobuf::internal::kEmptyString) {
        declaration_->clear();
      }
    }
    ispublic_ = false;
    joinpower_ = 0;
    if (has_language()) {
      if (language_ != &::google::protobuf::internal::kEmptyString) {
        language_->clear();
      }
    }
    if (has_shortname()) {
      if (shortname_ != &::google::protobuf::internal::kEmptyString) {
        shortname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceSettingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string allianceName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alliancename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alliancename().data(), this->alliancename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional int32 flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_declaration;
        break;
      }

      // optional string declaration = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_declaration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_declaration()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->declaration().data(), this->declaration().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isPublic;
        break;
      }

      // optional bool isPublic = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isPublic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispublic_)));
          set_has_ispublic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_joinPower;
        break;
      }

      // optional int32 joinPower = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_joinPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &joinpower_)));
          set_has_joinpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_language;
        break;
      }

      // optional string language = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_shortName;
        break;
      }

      // optional string shortName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shortName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shortname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->shortname().data(), this->shortname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllianceSettingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string allianceName = 1;
  if (has_alliancename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alliancename().data(), this->alliancename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->alliancename(), output);
  }

  // optional int32 flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->flag(), output);
  }

  // optional string declaration = 3;
  if (has_declaration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->declaration().data(), this->declaration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->declaration(), output);
  }

  // optional bool isPublic = 4;
  if (has_ispublic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ispublic(), output);
  }

  // optional int32 joinPower = 5;
  if (has_joinpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->joinpower(), output);
  }

  // optional string language = 6;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->language(), output);
  }

  // optional string shortName = 7;
  if (has_shortname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shortname().data(), this->shortname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->shortname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceSettingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string allianceName = 1;
  if (has_alliancename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alliancename().data(), this->alliancename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->alliancename(), target);
  }

  // optional int32 flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->flag(), target);
  }

  // optional string declaration = 3;
  if (has_declaration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->declaration().data(), this->declaration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->declaration(), target);
  }

  // optional bool isPublic = 4;
  if (has_ispublic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ispublic(), target);
  }

  // optional int32 joinPower = 5;
  if (has_joinpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->joinpower(), target);
  }

  // optional string language = 6;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->language(), target);
  }

  // optional string shortName = 7;
  if (has_shortname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shortname().data(), this->shortname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->shortname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceSettingRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string allianceName = 1;
    if (has_alliancename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alliancename());
    }

    // optional int32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional string declaration = 3;
    if (has_declaration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->declaration());
    }

    // optional bool isPublic = 4;
    if (has_ispublic()) {
      total_size += 1 + 1;
    }

    // optional int32 joinPower = 5;
    if (has_joinpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->joinpower());
    }

    // optional string language = 6;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

    // optional string shortName = 7;
    if (has_shortname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shortname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceSettingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceSettingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceSettingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceSettingRequest::MergeFrom(const AllianceSettingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alliancename()) {
      set_alliancename(from.alliancename());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_declaration()) {
      set_declaration(from.declaration());
    }
    if (from.has_ispublic()) {
      set_ispublic(from.ispublic());
    }
    if (from.has_joinpower()) {
      set_joinpower(from.joinpower());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_shortname()) {
      set_shortname(from.shortname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceSettingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceSettingRequest::CopyFrom(const AllianceSettingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceSettingRequest::IsInitialized() const {

  return true;
}

void AllianceSettingRequest::Swap(AllianceSettingRequest* other) {
  if (other != this) {
    std::swap(alliancename_, other->alliancename_);
    std::swap(flag_, other->flag_);
    std::swap(declaration_, other->declaration_);
    std::swap(ispublic_, other->ispublic_);
    std::swap(joinpower_, other->joinpower_);
    std::swap(language_, other->language_);
    std::swap(shortname_, other->shortname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceSettingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceSettingRequest_descriptor_;
  metadata.reflection = AllianceSettingRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceSettingResponse::kAllianceNameFieldNumber;
const int AllianceSettingResponse::kFlagFieldNumber;
const int AllianceSettingResponse::kDeclarationFieldNumber;
const int AllianceSettingResponse::kIsPublicFieldNumber;
const int AllianceSettingResponse::kJoinPowerFieldNumber;
const int AllianceSettingResponse::kLanguageFieldNumber;
const int AllianceSettingResponse::kShortNameFieldNumber;
#endif  // !_MSC_VER

AllianceSettingResponse::AllianceSettingResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceSettingResponse::InitAsDefaultInstance() {
}

AllianceSettingResponse::AllianceSettingResponse(const AllianceSettingResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceSettingResponse::SharedCtor() {
  _cached_size_ = 0;
  alliancename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flag_ = 0;
  declaration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ispublic_ = false;
  joinpower_ = 0;
  language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  shortname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceSettingResponse::~AllianceSettingResponse() {
  SharedDtor();
}

void AllianceSettingResponse::SharedDtor() {
  if (alliancename_ != &::google::protobuf::internal::kEmptyString) {
    delete alliancename_;
  }
  if (declaration_ != &::google::protobuf::internal::kEmptyString) {
    delete declaration_;
  }
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    delete language_;
  }
  if (shortname_ != &::google::protobuf::internal::kEmptyString) {
    delete shortname_;
  }
  if (this != default_instance_) {
  }
}

void AllianceSettingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceSettingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceSettingResponse_descriptor_;
}

const AllianceSettingResponse& AllianceSettingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceSettingResponse* AllianceSettingResponse::default_instance_ = NULL;

AllianceSettingResponse* AllianceSettingResponse::New() const {
  return new AllianceSettingResponse;
}

void AllianceSettingResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_alliancename()) {
      if (alliancename_ != &::google::protobuf::internal::kEmptyString) {
        alliancename_->clear();
      }
    }
    flag_ = 0;
    if (has_declaration()) {
      if (declaration_ != &::google::protobuf::internal::kEmptyString) {
        declaration_->clear();
      }
    }
    ispublic_ = false;
    joinpower_ = 0;
    if (has_language()) {
      if (language_ != &::google::protobuf::internal::kEmptyString) {
        language_->clear();
      }
    }
    if (has_shortname()) {
      if (shortname_ != &::google::protobuf::internal::kEmptyString) {
        shortname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceSettingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string allianceName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alliancename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alliancename().data(), this->alliancename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional int32 flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_declaration;
        break;
      }

      // optional string declaration = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_declaration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_declaration()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->declaration().data(), this->declaration().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isPublic;
        break;
      }

      // optional bool isPublic = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isPublic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispublic_)));
          set_has_ispublic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_joinPower;
        break;
      }

      // optional int32 joinPower = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_joinPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &joinpower_)));
          set_has_joinpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_language;
        break;
      }

      // optional string language = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_shortName;
        break;
      }

      // optional string shortName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shortName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shortname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->shortname().data(), this->shortname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllianceSettingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string allianceName = 1;
  if (has_alliancename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alliancename().data(), this->alliancename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->alliancename(), output);
  }

  // optional int32 flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->flag(), output);
  }

  // optional string declaration = 3;
  if (has_declaration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->declaration().data(), this->declaration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->declaration(), output);
  }

  // optional bool isPublic = 4;
  if (has_ispublic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ispublic(), output);
  }

  // optional int32 joinPower = 5;
  if (has_joinpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->joinpower(), output);
  }

  // optional string language = 6;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->language(), output);
  }

  // optional string shortName = 7;
  if (has_shortname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shortname().data(), this->shortname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->shortname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceSettingResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string allianceName = 1;
  if (has_alliancename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alliancename().data(), this->alliancename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->alliancename(), target);
  }

  // optional int32 flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->flag(), target);
  }

  // optional string declaration = 3;
  if (has_declaration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->declaration().data(), this->declaration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->declaration(), target);
  }

  // optional bool isPublic = 4;
  if (has_ispublic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ispublic(), target);
  }

  // optional int32 joinPower = 5;
  if (has_joinpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->joinpower(), target);
  }

  // optional string language = 6;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->language(), target);
  }

  // optional string shortName = 7;
  if (has_shortname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shortname().data(), this->shortname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->shortname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceSettingResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string allianceName = 1;
    if (has_alliancename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alliancename());
    }

    // optional int32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional string declaration = 3;
    if (has_declaration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->declaration());
    }

    // optional bool isPublic = 4;
    if (has_ispublic()) {
      total_size += 1 + 1;
    }

    // optional int32 joinPower = 5;
    if (has_joinpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->joinpower());
    }

    // optional string language = 6;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

    // optional string shortName = 7;
    if (has_shortname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shortname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceSettingResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceSettingResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceSettingResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceSettingResponse::MergeFrom(const AllianceSettingResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alliancename()) {
      set_alliancename(from.alliancename());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_declaration()) {
      set_declaration(from.declaration());
    }
    if (from.has_ispublic()) {
      set_ispublic(from.ispublic());
    }
    if (from.has_joinpower()) {
      set_joinpower(from.joinpower());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_shortname()) {
      set_shortname(from.shortname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceSettingResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceSettingResponse::CopyFrom(const AllianceSettingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceSettingResponse::IsInitialized() const {

  return true;
}

void AllianceSettingResponse::Swap(AllianceSettingResponse* other) {
  if (other != this) {
    std::swap(alliancename_, other->alliancename_);
    std::swap(flag_, other->flag_);
    std::swap(declaration_, other->declaration_);
    std::swap(ispublic_, other->ispublic_);
    std::swap(joinpower_, other->joinpower_);
    std::swap(language_, other->language_);
    std::swap(shortname_, other->shortname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceSettingResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceSettingResponse_descriptor_;
  metadata.reflection = AllianceSettingResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceApplyRequest::kIsAgreeFieldNumber;
const int AllianceApplyRequest::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

AllianceApplyRequest::AllianceApplyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceApplyRequest::InitAsDefaultInstance() {
}

AllianceApplyRequest::AllianceApplyRequest(const AllianceApplyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceApplyRequest::SharedCtor() {
  _cached_size_ = 0;
  isagree_ = false;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceApplyRequest::~AllianceApplyRequest() {
  SharedDtor();
}

void AllianceApplyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllianceApplyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceApplyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceApplyRequest_descriptor_;
}

const AllianceApplyRequest& AllianceApplyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceApplyRequest* AllianceApplyRequest::default_instance_ = NULL;

AllianceApplyRequest* AllianceApplyRequest::New() const {
  return new AllianceApplyRequest;
}

void AllianceApplyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isagree_ = false;
    playerid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceApplyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isAgree = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isagree_)));
          set_has_isagree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // required int64 playerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllianceApplyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isAgree = 1;
  if (has_isagree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isagree(), output);
  }

  // required int64 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceApplyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isAgree = 1;
  if (has_isagree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isagree(), target);
  }

  // required int64 playerId = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceApplyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isAgree = 1;
    if (has_isagree()) {
      total_size += 1 + 1;
    }

    // required int64 playerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceApplyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceApplyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceApplyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceApplyRequest::MergeFrom(const AllianceApplyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isagree()) {
      set_isagree(from.isagree());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceApplyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceApplyRequest::CopyFrom(const AllianceApplyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceApplyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AllianceApplyRequest::Swap(AllianceApplyRequest* other) {
  if (other != this) {
    std::swap(isagree_, other->isagree_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceApplyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceApplyRequest_descriptor_;
  metadata.reflection = AllianceApplyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceApplyesponse::kIsAgreeFieldNumber;
#endif  // !_MSC_VER

AllianceApplyesponse::AllianceApplyesponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceApplyesponse::InitAsDefaultInstance() {
}

AllianceApplyesponse::AllianceApplyesponse(const AllianceApplyesponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceApplyesponse::SharedCtor() {
  _cached_size_ = 0;
  isagree_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceApplyesponse::~AllianceApplyesponse() {
  SharedDtor();
}

void AllianceApplyesponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllianceApplyesponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceApplyesponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceApplyesponse_descriptor_;
}

const AllianceApplyesponse& AllianceApplyesponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceApplyesponse* AllianceApplyesponse::default_instance_ = NULL;

AllianceApplyesponse* AllianceApplyesponse::New() const {
  return new AllianceApplyesponse;
}

void AllianceApplyesponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isagree_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceApplyesponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isAgree = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isagree_)));
          set_has_isagree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllianceApplyesponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isAgree = 1;
  if (has_isagree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isagree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceApplyesponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isAgree = 1;
  if (has_isagree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isagree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceApplyesponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isAgree = 1;
    if (has_isagree()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceApplyesponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceApplyesponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceApplyesponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceApplyesponse::MergeFrom(const AllianceApplyesponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isagree()) {
      set_isagree(from.isagree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceApplyesponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceApplyesponse::CopyFrom(const AllianceApplyesponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceApplyesponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AllianceApplyesponse::Swap(AllianceApplyesponse* other) {
  if (other != this) {
    std::swap(isagree_, other->isagree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceApplyesponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceApplyesponse_descriptor_;
  metadata.reflection = AllianceApplyesponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AllianceListRequest::AllianceListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceListRequest::InitAsDefaultInstance() {
}

AllianceListRequest::AllianceListRequest(const AllianceListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceListRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceListRequest::~AllianceListRequest() {
  SharedDtor();
}

void AllianceListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllianceListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceListRequest_descriptor_;
}

const AllianceListRequest& AllianceListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceListRequest* AllianceListRequest::default_instance_ = NULL;

AllianceListRequest* AllianceListRequest::New() const {
  return new AllianceListRequest;
}

void AllianceListRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void AllianceListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceListRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceListRequest::MergeFrom(const AllianceListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceListRequest::CopyFrom(const AllianceListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceListRequest::IsInitialized() const {

  return true;
}

void AllianceListRequest::Swap(AllianceListRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceListRequest_descriptor_;
  metadata.reflection = AllianceListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceListResponse::kAllianceListFieldNumber;
#endif  // !_MSC_VER

AllianceListResponse::AllianceListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceListResponse::InitAsDefaultInstance() {
}

AllianceListResponse::AllianceListResponse(const AllianceListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceListResponse::~AllianceListResponse() {
  SharedDtor();
}

void AllianceListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllianceListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceListResponse_descriptor_;
}

const AllianceListResponse& AllianceListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceListResponse* AllianceListResponse::default_instance_ = NULL;

AllianceListResponse* AllianceListResponse::New() const {
  return new AllianceListResponse;
}

void AllianceListResponse::Clear() {
  alliancelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.AllianceSummaryDTO allianceList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allianceList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_alliancelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_allianceList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllianceListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.AllianceSummaryDTO allianceList = 1;
  for (int i = 0; i < this->alliancelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alliancelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.AllianceSummaryDTO allianceList = 1;
  for (int i = 0; i < this->alliancelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->alliancelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceListResponse::ByteSize() const {
  int total_size = 0;

  // repeated .slg.protocol.AllianceSummaryDTO allianceList = 1;
  total_size += 1 * this->alliancelist_size();
  for (int i = 0; i < this->alliancelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->alliancelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceListResponse::MergeFrom(const AllianceListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  alliancelist_.MergeFrom(from.alliancelist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceListResponse::CopyFrom(const AllianceListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceListResponse::IsInitialized() const {

  for (int i = 0; i < alliancelist_size(); i++) {
    if (!this->alliancelist(i).IsInitialized()) return false;
  }
  return true;
}

void AllianceListResponse::Swap(AllianceListResponse* other) {
  if (other != this) {
    alliancelist_.Swap(&other->alliancelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceListResponse_descriptor_;
  metadata.reflection = AllianceListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckAllianceNameRequest::kNameFieldNumber;
#endif  // !_MSC_VER

CheckAllianceNameRequest::CheckAllianceNameRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckAllianceNameRequest::InitAsDefaultInstance() {
}

CheckAllianceNameRequest::CheckAllianceNameRequest(const CheckAllianceNameRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckAllianceNameRequest::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckAllianceNameRequest::~CheckAllianceNameRequest() {
  SharedDtor();
}

void CheckAllianceNameRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CheckAllianceNameRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckAllianceNameRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckAllianceNameRequest_descriptor_;
}

const CheckAllianceNameRequest& CheckAllianceNameRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

CheckAllianceNameRequest* CheckAllianceNameRequest::default_instance_ = NULL;

CheckAllianceNameRequest* CheckAllianceNameRequest::New() const {
  return new CheckAllianceNameRequest;
}

void CheckAllianceNameRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckAllianceNameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckAllianceNameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckAllianceNameRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckAllianceNameRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckAllianceNameRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckAllianceNameRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckAllianceNameRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckAllianceNameRequest::MergeFrom(const CheckAllianceNameRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckAllianceNameRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckAllianceNameRequest::CopyFrom(const CheckAllianceNameRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckAllianceNameRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CheckAllianceNameRequest::Swap(CheckAllianceNameRequest* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckAllianceNameRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckAllianceNameRequest_descriptor_;
  metadata.reflection = CheckAllianceNameRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckAllianceNameResponse::kIsAvailableFieldNumber;
#endif  // !_MSC_VER

CheckAllianceNameResponse::CheckAllianceNameResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckAllianceNameResponse::InitAsDefaultInstance() {
}

CheckAllianceNameResponse::CheckAllianceNameResponse(const CheckAllianceNameResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckAllianceNameResponse::SharedCtor() {
  _cached_size_ = 0;
  isavailable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckAllianceNameResponse::~CheckAllianceNameResponse() {
  SharedDtor();
}

void CheckAllianceNameResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CheckAllianceNameResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckAllianceNameResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckAllianceNameResponse_descriptor_;
}

const CheckAllianceNameResponse& CheckAllianceNameResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

CheckAllianceNameResponse* CheckAllianceNameResponse::default_instance_ = NULL;

CheckAllianceNameResponse* CheckAllianceNameResponse::New() const {
  return new CheckAllianceNameResponse;
}

void CheckAllianceNameResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isavailable_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckAllianceNameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isAvailable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isavailable_)));
          set_has_isavailable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckAllianceNameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isAvailable = 1;
  if (has_isavailable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isavailable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckAllianceNameResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isAvailable = 1;
  if (has_isavailable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isavailable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckAllianceNameResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isAvailable = 1;
    if (has_isavailable()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckAllianceNameResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckAllianceNameResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckAllianceNameResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckAllianceNameResponse::MergeFrom(const CheckAllianceNameResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isavailable()) {
      set_isavailable(from.isavailable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckAllianceNameResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckAllianceNameResponse::CopyFrom(const CheckAllianceNameResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckAllianceNameResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CheckAllianceNameResponse::Swap(CheckAllianceNameResponse* other) {
  if (other != this) {
    std::swap(isavailable_, other->isavailable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckAllianceNameResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckAllianceNameResponse_descriptor_;
  metadata.reflection = CheckAllianceNameResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendAllianceHelpRequest::kTimerIdFieldNumber;
const int SendAllianceHelpRequest::kHelpTypeFieldNumber;
#endif  // !_MSC_VER

SendAllianceHelpRequest::SendAllianceHelpRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendAllianceHelpRequest::InitAsDefaultInstance() {
}

SendAllianceHelpRequest::SendAllianceHelpRequest(const SendAllianceHelpRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendAllianceHelpRequest::SharedCtor() {
  _cached_size_ = 0;
  timerid_ = 0;
  helptype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendAllianceHelpRequest::~SendAllianceHelpRequest() {
  SharedDtor();
}

void SendAllianceHelpRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SendAllianceHelpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendAllianceHelpRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendAllianceHelpRequest_descriptor_;
}

const SendAllianceHelpRequest& SendAllianceHelpRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

SendAllianceHelpRequest* SendAllianceHelpRequest::default_instance_ = NULL;

SendAllianceHelpRequest* SendAllianceHelpRequest::New() const {
  return new SendAllianceHelpRequest;
}

void SendAllianceHelpRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timerid_ = 0;
    helptype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendAllianceHelpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 timerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timerid_)));
          set_has_timerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_helpType;
        break;
      }

      // required int32 helpType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_helpType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &helptype_)));
          set_has_helptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendAllianceHelpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 timerId = 1;
  if (has_timerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timerid(), output);
  }

  // required int32 helpType = 2;
  if (has_helptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->helptype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendAllianceHelpRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 timerId = 1;
  if (has_timerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->timerid(), target);
  }

  // required int32 helpType = 2;
  if (has_helptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->helptype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendAllianceHelpRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 timerId = 1;
    if (has_timerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timerid());
    }

    // required int32 helpType = 2;
    if (has_helptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->helptype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendAllianceHelpRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendAllianceHelpRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendAllianceHelpRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendAllianceHelpRequest::MergeFrom(const SendAllianceHelpRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timerid()) {
      set_timerid(from.timerid());
    }
    if (from.has_helptype()) {
      set_helptype(from.helptype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendAllianceHelpRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendAllianceHelpRequest::CopyFrom(const SendAllianceHelpRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendAllianceHelpRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SendAllianceHelpRequest::Swap(SendAllianceHelpRequest* other) {
  if (other != this) {
    std::swap(timerid_, other->timerid_);
    std::swap(helptype_, other->helptype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendAllianceHelpRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendAllianceHelpRequest_descriptor_;
  metadata.reflection = SendAllianceHelpRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HelpMemberRequest::kHelpIdFieldNumber;
#endif  // !_MSC_VER

HelpMemberRequest::HelpMemberRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HelpMemberRequest::InitAsDefaultInstance() {
}

HelpMemberRequest::HelpMemberRequest(const HelpMemberRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HelpMemberRequest::SharedCtor() {
  _cached_size_ = 0;
  helpid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HelpMemberRequest::~HelpMemberRequest() {
  SharedDtor();
}

void HelpMemberRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HelpMemberRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HelpMemberRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HelpMemberRequest_descriptor_;
}

const HelpMemberRequest& HelpMemberRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

HelpMemberRequest* HelpMemberRequest::default_instance_ = NULL;

HelpMemberRequest* HelpMemberRequest::New() const {
  return new HelpMemberRequest;
}

void HelpMemberRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    helpid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HelpMemberRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 helpId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &helpid_)));
          set_has_helpid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HelpMemberRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 helpId = 1;
  if (has_helpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->helpid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HelpMemberRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 helpId = 1;
  if (has_helpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->helpid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HelpMemberRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 helpId = 1;
    if (has_helpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->helpid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HelpMemberRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HelpMemberRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HelpMemberRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HelpMemberRequest::MergeFrom(const HelpMemberRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_helpid()) {
      set_helpid(from.helpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HelpMemberRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelpMemberRequest::CopyFrom(const HelpMemberRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelpMemberRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HelpMemberRequest::Swap(HelpMemberRequest* other) {
  if (other != this) {
    std::swap(helpid_, other->helpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HelpMemberRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HelpMemberRequest_descriptor_;
  metadata.reflection = HelpMemberRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HelpMemberResponse::kHelpIdFieldNumber;
#endif  // !_MSC_VER

HelpMemberResponse::HelpMemberResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HelpMemberResponse::InitAsDefaultInstance() {
}

HelpMemberResponse::HelpMemberResponse(const HelpMemberResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HelpMemberResponse::SharedCtor() {
  _cached_size_ = 0;
  helpid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HelpMemberResponse::~HelpMemberResponse() {
  SharedDtor();
}

void HelpMemberResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HelpMemberResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HelpMemberResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HelpMemberResponse_descriptor_;
}

const HelpMemberResponse& HelpMemberResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

HelpMemberResponse* HelpMemberResponse::default_instance_ = NULL;

HelpMemberResponse* HelpMemberResponse::New() const {
  return new HelpMemberResponse;
}

void HelpMemberResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    helpid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HelpMemberResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 helpId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &helpid_)));
          set_has_helpid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HelpMemberResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 helpId = 1;
  if (has_helpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->helpid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HelpMemberResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 helpId = 1;
  if (has_helpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->helpid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HelpMemberResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 helpId = 1;
    if (has_helpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->helpid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HelpMemberResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HelpMemberResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HelpMemberResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HelpMemberResponse::MergeFrom(const HelpMemberResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_helpid()) {
      set_helpid(from.helpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HelpMemberResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelpMemberResponse::CopyFrom(const HelpMemberResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelpMemberResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HelpMemberResponse::Swap(HelpMemberResponse* other) {
  if (other != this) {
    std::swap(helpid_, other->helpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HelpMemberResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HelpMemberResponse_descriptor_;
  metadata.reflection = HelpMemberResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AllianceHelpListRequest::AllianceHelpListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceHelpListRequest::InitAsDefaultInstance() {
}

AllianceHelpListRequest::AllianceHelpListRequest(const AllianceHelpListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceHelpListRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceHelpListRequest::~AllianceHelpListRequest() {
  SharedDtor();
}

void AllianceHelpListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllianceHelpListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceHelpListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceHelpListRequest_descriptor_;
}

const AllianceHelpListRequest& AllianceHelpListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceHelpListRequest* AllianceHelpListRequest::default_instance_ = NULL;

AllianceHelpListRequest* AllianceHelpListRequest::New() const {
  return new AllianceHelpListRequest;
}

void AllianceHelpListRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceHelpListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void AllianceHelpListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceHelpListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceHelpListRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceHelpListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceHelpListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceHelpListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceHelpListRequest::MergeFrom(const AllianceHelpListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceHelpListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceHelpListRequest::CopyFrom(const AllianceHelpListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceHelpListRequest::IsInitialized() const {

  return true;
}

void AllianceHelpListRequest::Swap(AllianceHelpListRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceHelpListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceHelpListRequest_descriptor_;
  metadata.reflection = AllianceHelpListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceHelpListResponse::kHelpListFieldNumber;
#endif  // !_MSC_VER

AllianceHelpListResponse::AllianceHelpListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceHelpListResponse::InitAsDefaultInstance() {
}

AllianceHelpListResponse::AllianceHelpListResponse(const AllianceHelpListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceHelpListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceHelpListResponse::~AllianceHelpListResponse() {
  SharedDtor();
}

void AllianceHelpListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllianceHelpListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceHelpListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceHelpListResponse_descriptor_;
}

const AllianceHelpListResponse& AllianceHelpListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceHelpListResponse* AllianceHelpListResponse::default_instance_ = NULL;

AllianceHelpListResponse* AllianceHelpListResponse::New() const {
  return new AllianceHelpListResponse;
}

void AllianceHelpListResponse::Clear() {
  helplist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceHelpListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.AllianceHelpDTO helpList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_helpList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_helplist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_helpList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllianceHelpListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.AllianceHelpDTO helpList = 1;
  for (int i = 0; i < this->helplist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->helplist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceHelpListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.AllianceHelpDTO helpList = 1;
  for (int i = 0; i < this->helplist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->helplist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceHelpListResponse::ByteSize() const {
  int total_size = 0;

  // repeated .slg.protocol.AllianceHelpDTO helpList = 1;
  total_size += 1 * this->helplist_size();
  for (int i = 0; i < this->helplist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->helplist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceHelpListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceHelpListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceHelpListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceHelpListResponse::MergeFrom(const AllianceHelpListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  helplist_.MergeFrom(from.helplist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceHelpListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceHelpListResponse::CopyFrom(const AllianceHelpListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceHelpListResponse::IsInitialized() const {

  for (int i = 0; i < helplist_size(); i++) {
    if (!this->helplist(i).IsInitialized()) return false;
  }
  return true;
}

void AllianceHelpListResponse::Swap(AllianceHelpListResponse* other) {
  if (other != this) {
    helplist_.Swap(&other->helplist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceHelpListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceHelpListResponse_descriptor_;
  metadata.reflection = AllianceHelpListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceVoteRequest::kTechTypeFieldNumber;
#endif  // !_MSC_VER

AllianceVoteRequest::AllianceVoteRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceVoteRequest::InitAsDefaultInstance() {
}

AllianceVoteRequest::AllianceVoteRequest(const AllianceVoteRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceVoteRequest::SharedCtor() {
  _cached_size_ = 0;
  techtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceVoteRequest::~AllianceVoteRequest() {
  SharedDtor();
}

void AllianceVoteRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllianceVoteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceVoteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceVoteRequest_descriptor_;
}

const AllianceVoteRequest& AllianceVoteRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceVoteRequest* AllianceVoteRequest::default_instance_ = NULL;

AllianceVoteRequest* AllianceVoteRequest::New() const {
  return new AllianceVoteRequest;
}

void AllianceVoteRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    techtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceVoteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 techType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &techtype_)));
          set_has_techtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllianceVoteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 techType = 1;
  if (has_techtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->techtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceVoteRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 techType = 1;
  if (has_techtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->techtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceVoteRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 techType = 1;
    if (has_techtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->techtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceVoteRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceVoteRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceVoteRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceVoteRequest::MergeFrom(const AllianceVoteRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_techtype()) {
      set_techtype(from.techtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceVoteRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceVoteRequest::CopyFrom(const AllianceVoteRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceVoteRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AllianceVoteRequest::Swap(AllianceVoteRequest* other) {
  if (other != this) {
    std::swap(techtype_, other->techtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceVoteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceVoteRequest_descriptor_;
  metadata.reflection = AllianceVoteRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceVoteResponse::kTechTypeFieldNumber;
#endif  // !_MSC_VER

AllianceVoteResponse::AllianceVoteResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceVoteResponse::InitAsDefaultInstance() {
}

AllianceVoteResponse::AllianceVoteResponse(const AllianceVoteResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceVoteResponse::SharedCtor() {
  _cached_size_ = 0;
  techtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceVoteResponse::~AllianceVoteResponse() {
  SharedDtor();
}

void AllianceVoteResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllianceVoteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceVoteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceVoteResponse_descriptor_;
}

const AllianceVoteResponse& AllianceVoteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceVoteResponse* AllianceVoteResponse::default_instance_ = NULL;

AllianceVoteResponse* AllianceVoteResponse::New() const {
  return new AllianceVoteResponse;
}

void AllianceVoteResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    techtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceVoteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 techType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &techtype_)));
          set_has_techtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllianceVoteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 techType = 1;
  if (has_techtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->techtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceVoteResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 techType = 1;
  if (has_techtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->techtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceVoteResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 techType = 1;
    if (has_techtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->techtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceVoteResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceVoteResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceVoteResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceVoteResponse::MergeFrom(const AllianceVoteResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_techtype()) {
      set_techtype(from.techtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceVoteResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceVoteResponse::CopyFrom(const AllianceVoteResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceVoteResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AllianceVoteResponse::Swap(AllianceVoteResponse* other) {
  if (other != this) {
    std::swap(techtype_, other->techtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceVoteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceVoteResponse_descriptor_;
  metadata.reflection = AllianceVoteResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceTechUpgradeRequest::kTechTypeFieldNumber;
#endif  // !_MSC_VER

AllianceTechUpgradeRequest::AllianceTechUpgradeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceTechUpgradeRequest::InitAsDefaultInstance() {
}

AllianceTechUpgradeRequest::AllianceTechUpgradeRequest(const AllianceTechUpgradeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceTechUpgradeRequest::SharedCtor() {
  _cached_size_ = 0;
  techtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceTechUpgradeRequest::~AllianceTechUpgradeRequest() {
  SharedDtor();
}

void AllianceTechUpgradeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllianceTechUpgradeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceTechUpgradeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceTechUpgradeRequest_descriptor_;
}

const AllianceTechUpgradeRequest& AllianceTechUpgradeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceTechUpgradeRequest* AllianceTechUpgradeRequest::default_instance_ = NULL;

AllianceTechUpgradeRequest* AllianceTechUpgradeRequest::New() const {
  return new AllianceTechUpgradeRequest;
}

void AllianceTechUpgradeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    techtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceTechUpgradeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 techType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &techtype_)));
          set_has_techtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllianceTechUpgradeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 techType = 1;
  if (has_techtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->techtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceTechUpgradeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 techType = 1;
  if (has_techtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->techtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceTechUpgradeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 techType = 1;
    if (has_techtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->techtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceTechUpgradeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceTechUpgradeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceTechUpgradeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceTechUpgradeRequest::MergeFrom(const AllianceTechUpgradeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_techtype()) {
      set_techtype(from.techtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceTechUpgradeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceTechUpgradeRequest::CopyFrom(const AllianceTechUpgradeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceTechUpgradeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AllianceTechUpgradeRequest::Swap(AllianceTechUpgradeRequest* other) {
  if (other != this) {
    std::swap(techtype_, other->techtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceTechUpgradeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceTechUpgradeRequest_descriptor_;
  metadata.reflection = AllianceTechUpgradeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceTechUpgradeResponse::kTechTypeFieldNumber;
#endif  // !_MSC_VER

AllianceTechUpgradeResponse::AllianceTechUpgradeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceTechUpgradeResponse::InitAsDefaultInstance() {
}

AllianceTechUpgradeResponse::AllianceTechUpgradeResponse(const AllianceTechUpgradeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceTechUpgradeResponse::SharedCtor() {
  _cached_size_ = 0;
  techtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceTechUpgradeResponse::~AllianceTechUpgradeResponse() {
  SharedDtor();
}

void AllianceTechUpgradeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllianceTechUpgradeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceTechUpgradeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceTechUpgradeResponse_descriptor_;
}

const AllianceTechUpgradeResponse& AllianceTechUpgradeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceTechUpgradeResponse* AllianceTechUpgradeResponse::default_instance_ = NULL;

AllianceTechUpgradeResponse* AllianceTechUpgradeResponse::New() const {
  return new AllianceTechUpgradeResponse;
}

void AllianceTechUpgradeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    techtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceTechUpgradeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 techType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &techtype_)));
          set_has_techtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllianceTechUpgradeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 techType = 1;
  if (has_techtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->techtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceTechUpgradeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 techType = 1;
  if (has_techtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->techtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceTechUpgradeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 techType = 1;
    if (has_techtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->techtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceTechUpgradeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceTechUpgradeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceTechUpgradeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceTechUpgradeResponse::MergeFrom(const AllianceTechUpgradeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_techtype()) {
      set_techtype(from.techtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceTechUpgradeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceTechUpgradeResponse::CopyFrom(const AllianceTechUpgradeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceTechUpgradeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AllianceTechUpgradeResponse::Swap(AllianceTechUpgradeResponse* other) {
  if (other != this) {
    std::swap(techtype_, other->techtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceTechUpgradeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceTechUpgradeResponse_descriptor_;
  metadata.reflection = AllianceTechUpgradeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ContributeInfoRequest::ContributeInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContributeInfoRequest::InitAsDefaultInstance() {
}

ContributeInfoRequest::ContributeInfoRequest(const ContributeInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContributeInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContributeInfoRequest::~ContributeInfoRequest() {
  SharedDtor();
}

void ContributeInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContributeInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContributeInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContributeInfoRequest_descriptor_;
}

const ContributeInfoRequest& ContributeInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

ContributeInfoRequest* ContributeInfoRequest::default_instance_ = NULL;

ContributeInfoRequest* ContributeInfoRequest::New() const {
  return new ContributeInfoRequest;
}

void ContributeInfoRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContributeInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ContributeInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContributeInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContributeInfoRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContributeInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContributeInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContributeInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContributeInfoRequest::MergeFrom(const ContributeInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContributeInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContributeInfoRequest::CopyFrom(const ContributeInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContributeInfoRequest::IsInitialized() const {

  return true;
}

void ContributeInfoRequest::Swap(ContributeInfoRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContributeInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContributeInfoRequest_descriptor_;
  metadata.reflection = ContributeInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContributeInfoResponse::kDonationInfoFieldNumber;
const int ContributeInfoResponse::kCanReceiveTimesFieldNumber;
#endif  // !_MSC_VER

ContributeInfoResponse::ContributeInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContributeInfoResponse::InitAsDefaultInstance() {
  donationinfo_ = const_cast< ::slg::protocol::AllianceContributeInfoDTO*>(&::slg::protocol::AllianceContributeInfoDTO::default_instance());
}

ContributeInfoResponse::ContributeInfoResponse(const ContributeInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContributeInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  donationinfo_ = NULL;
  canreceivetimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContributeInfoResponse::~ContributeInfoResponse() {
  SharedDtor();
}

void ContributeInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete donationinfo_;
  }
}

void ContributeInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContributeInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContributeInfoResponse_descriptor_;
}

const ContributeInfoResponse& ContributeInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

ContributeInfoResponse* ContributeInfoResponse::default_instance_ = NULL;

ContributeInfoResponse* ContributeInfoResponse::New() const {
  return new ContributeInfoResponse;
}

void ContributeInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_donationinfo()) {
      if (donationinfo_ != NULL) donationinfo_->::slg::protocol::AllianceContributeInfoDTO::Clear();
    }
    canreceivetimes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContributeInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .slg.protocol.AllianceContributeInfoDTO donationInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_donationinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_canReceiveTimes;
        break;
      }

      // required int32 canReceiveTimes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canReceiveTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &canreceivetimes_)));
          set_has_canreceivetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContributeInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .slg.protocol.AllianceContributeInfoDTO donationInfo = 1;
  if (has_donationinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->donationinfo(), output);
  }

  // required int32 canReceiveTimes = 2;
  if (has_canreceivetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->canreceivetimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContributeInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .slg.protocol.AllianceContributeInfoDTO donationInfo = 1;
  if (has_donationinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->donationinfo(), target);
  }

  // required int32 canReceiveTimes = 2;
  if (has_canreceivetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->canreceivetimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContributeInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .slg.protocol.AllianceContributeInfoDTO donationInfo = 1;
    if (has_donationinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->donationinfo());
    }

    // required int32 canReceiveTimes = 2;
    if (has_canreceivetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->canreceivetimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContributeInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContributeInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContributeInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContributeInfoResponse::MergeFrom(const ContributeInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_donationinfo()) {
      mutable_donationinfo()->::slg::protocol::AllianceContributeInfoDTO::MergeFrom(from.donationinfo());
    }
    if (from.has_canreceivetimes()) {
      set_canreceivetimes(from.canreceivetimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContributeInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContributeInfoResponse::CopyFrom(const ContributeInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContributeInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_donationinfo()) {
    if (!this->donationinfo().IsInitialized()) return false;
  }
  return true;
}

void ContributeInfoResponse::Swap(ContributeInfoResponse* other) {
  if (other != this) {
    std::swap(donationinfo_, other->donationinfo_);
    std::swap(canreceivetimes_, other->canreceivetimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContributeInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContributeInfoResponse_descriptor_;
  metadata.reflection = ContributeInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContributeRequest::kLevelFieldNumber;
#endif  // !_MSC_VER

ContributeRequest::ContributeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContributeRequest::InitAsDefaultInstance() {
}

ContributeRequest::ContributeRequest(const ContributeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContributeRequest::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContributeRequest::~ContributeRequest() {
  SharedDtor();
}

void ContributeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContributeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContributeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContributeRequest_descriptor_;
}

const ContributeRequest& ContributeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

ContributeRequest* ContributeRequest::default_instance_ = NULL;

ContributeRequest* ContributeRequest::New() const {
  return new ContributeRequest;
}

void ContributeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContributeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContributeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContributeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContributeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContributeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContributeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContributeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContributeRequest::MergeFrom(const ContributeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContributeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContributeRequest::CopyFrom(const ContributeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContributeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ContributeRequest::Swap(ContributeRequest* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContributeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContributeRequest_descriptor_;
  metadata.reflection = ContributeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DrawAllianceGiftRequest::DrawAllianceGiftRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DrawAllianceGiftRequest::InitAsDefaultInstance() {
}

DrawAllianceGiftRequest::DrawAllianceGiftRequest(const DrawAllianceGiftRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DrawAllianceGiftRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DrawAllianceGiftRequest::~DrawAllianceGiftRequest() {
  SharedDtor();
}

void DrawAllianceGiftRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DrawAllianceGiftRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DrawAllianceGiftRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DrawAllianceGiftRequest_descriptor_;
}

const DrawAllianceGiftRequest& DrawAllianceGiftRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

DrawAllianceGiftRequest* DrawAllianceGiftRequest::default_instance_ = NULL;

DrawAllianceGiftRequest* DrawAllianceGiftRequest::New() const {
  return new DrawAllianceGiftRequest;
}

void DrawAllianceGiftRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DrawAllianceGiftRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DrawAllianceGiftRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DrawAllianceGiftRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DrawAllianceGiftRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DrawAllianceGiftRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DrawAllianceGiftRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DrawAllianceGiftRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DrawAllianceGiftRequest::MergeFrom(const DrawAllianceGiftRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DrawAllianceGiftRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawAllianceGiftRequest::CopyFrom(const DrawAllianceGiftRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawAllianceGiftRequest::IsInitialized() const {

  return true;
}

void DrawAllianceGiftRequest::Swap(DrawAllianceGiftRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DrawAllianceGiftRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DrawAllianceGiftRequest_descriptor_;
  metadata.reflection = DrawAllianceGiftRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DrawAllianceGiftResponse::kItemsFieldNumber;
const int DrawAllianceGiftResponse::kPropertysFieldNumber;
#endif  // !_MSC_VER

DrawAllianceGiftResponse::DrawAllianceGiftResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DrawAllianceGiftResponse::InitAsDefaultInstance() {
}

DrawAllianceGiftResponse::DrawAllianceGiftResponse(const DrawAllianceGiftResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DrawAllianceGiftResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DrawAllianceGiftResponse::~DrawAllianceGiftResponse() {
  SharedDtor();
}

void DrawAllianceGiftResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DrawAllianceGiftResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DrawAllianceGiftResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DrawAllianceGiftResponse_descriptor_;
}

const DrawAllianceGiftResponse& DrawAllianceGiftResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

DrawAllianceGiftResponse* DrawAllianceGiftResponse::default_instance_ = NULL;

DrawAllianceGiftResponse* DrawAllianceGiftResponse::New() const {
  return new DrawAllianceGiftResponse;
}

void DrawAllianceGiftResponse::Clear() {
  items_.Clear();
  propertys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DrawAllianceGiftResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.ItemDTO items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectTag(18)) goto parse_propertys;
        break;
      }

      // repeated .slg.protocol.PropertyDTO propertys = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_propertys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_propertys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_propertys;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DrawAllianceGiftResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.ItemDTO items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  // repeated .slg.protocol.PropertyDTO propertys = 2;
  for (int i = 0; i < this->propertys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->propertys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DrawAllianceGiftResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.ItemDTO items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  // repeated .slg.protocol.PropertyDTO propertys = 2;
  for (int i = 0; i < this->propertys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->propertys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DrawAllianceGiftResponse::ByteSize() const {
  int total_size = 0;

  // repeated .slg.protocol.ItemDTO items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  // repeated .slg.protocol.PropertyDTO propertys = 2;
  total_size += 1 * this->propertys_size();
  for (int i = 0; i < this->propertys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->propertys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DrawAllianceGiftResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DrawAllianceGiftResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DrawAllianceGiftResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DrawAllianceGiftResponse::MergeFrom(const DrawAllianceGiftResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  propertys_.MergeFrom(from.propertys_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DrawAllianceGiftResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawAllianceGiftResponse::CopyFrom(const DrawAllianceGiftResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawAllianceGiftResponse::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  for (int i = 0; i < propertys_size(); i++) {
    if (!this->propertys(i).IsInitialized()) return false;
  }
  return true;
}

void DrawAllianceGiftResponse::Swap(DrawAllianceGiftResponse* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    propertys_.Swap(&other->propertys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DrawAllianceGiftResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DrawAllianceGiftResponse_descriptor_;
  metadata.reflection = DrawAllianceGiftResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ClearContributedCdRequest::ClearContributedCdRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClearContributedCdRequest::InitAsDefaultInstance() {
}

ClearContributedCdRequest::ClearContributedCdRequest(const ClearContributedCdRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClearContributedCdRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClearContributedCdRequest::~ClearContributedCdRequest() {
  SharedDtor();
}

void ClearContributedCdRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClearContributedCdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClearContributedCdRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClearContributedCdRequest_descriptor_;
}

const ClearContributedCdRequest& ClearContributedCdRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

ClearContributedCdRequest* ClearContributedCdRequest::default_instance_ = NULL;

ClearContributedCdRequest* ClearContributedCdRequest::New() const {
  return new ClearContributedCdRequest;
}

void ClearContributedCdRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClearContributedCdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ClearContributedCdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClearContributedCdRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClearContributedCdRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClearContributedCdRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClearContributedCdRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClearContributedCdRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClearContributedCdRequest::MergeFrom(const ClearContributedCdRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClearContributedCdRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearContributedCdRequest::CopyFrom(const ClearContributedCdRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearContributedCdRequest::IsInitialized() const {

  return true;
}

void ClearContributedCdRequest::Swap(ClearContributedCdRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClearContributedCdRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClearContributedCdRequest_descriptor_;
  metadata.reflection = ClearContributedCdRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClearContributedCdResponse::kCanContributeTimeFieldNumber;
#endif  // !_MSC_VER

ClearContributedCdResponse::ClearContributedCdResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClearContributedCdResponse::InitAsDefaultInstance() {
}

ClearContributedCdResponse::ClearContributedCdResponse(const ClearContributedCdResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClearContributedCdResponse::SharedCtor() {
  _cached_size_ = 0;
  cancontributetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClearContributedCdResponse::~ClearContributedCdResponse() {
  SharedDtor();
}

void ClearContributedCdResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClearContributedCdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClearContributedCdResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClearContributedCdResponse_descriptor_;
}

const ClearContributedCdResponse& ClearContributedCdResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

ClearContributedCdResponse* ClearContributedCdResponse::default_instance_ = NULL;

ClearContributedCdResponse* ClearContributedCdResponse::New() const {
  return new ClearContributedCdResponse;
}

void ClearContributedCdResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cancontributetime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClearContributedCdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 canContributeTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cancontributetime_)));
          set_has_cancontributetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClearContributedCdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 canContributeTime = 1;
  if (has_cancontributetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cancontributetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClearContributedCdResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 canContributeTime = 1;
  if (has_cancontributetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cancontributetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClearContributedCdResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 canContributeTime = 1;
    if (has_cancontributetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cancontributetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClearContributedCdResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClearContributedCdResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClearContributedCdResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClearContributedCdResponse::MergeFrom(const ClearContributedCdResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cancontributetime()) {
      set_cancontributetime(from.cancontributetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClearContributedCdResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearContributedCdResponse::CopyFrom(const ClearContributedCdResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearContributedCdResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClearContributedCdResponse::Swap(ClearContributedCdResponse* other) {
  if (other != this) {
    std::swap(cancontributetime_, other->cancontributetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClearContributedCdResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClearContributedCdResponse_descriptor_;
  metadata.reflection = ClearContributedCdResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AllianceShopInfoRequest::AllianceShopInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceShopInfoRequest::InitAsDefaultInstance() {
}

AllianceShopInfoRequest::AllianceShopInfoRequest(const AllianceShopInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceShopInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceShopInfoRequest::~AllianceShopInfoRequest() {
  SharedDtor();
}

void AllianceShopInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllianceShopInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceShopInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceShopInfoRequest_descriptor_;
}

const AllianceShopInfoRequest& AllianceShopInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceShopInfoRequest* AllianceShopInfoRequest::default_instance_ = NULL;

AllianceShopInfoRequest* AllianceShopInfoRequest::New() const {
  return new AllianceShopInfoRequest;
}

void AllianceShopInfoRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceShopInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void AllianceShopInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceShopInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceShopInfoRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceShopInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceShopInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceShopInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceShopInfoRequest::MergeFrom(const AllianceShopInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceShopInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceShopInfoRequest::CopyFrom(const AllianceShopInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceShopInfoRequest::IsInitialized() const {

  return true;
}

void AllianceShopInfoRequest::Swap(AllianceShopInfoRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceShopInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceShopInfoRequest_descriptor_;
  metadata.reflection = AllianceShopInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceShopInfoResponse::kItemsFieldNumber;
#endif  // !_MSC_VER

AllianceShopInfoResponse::AllianceShopInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceShopInfoResponse::InitAsDefaultInstance() {
}

AllianceShopInfoResponse::AllianceShopInfoResponse(const AllianceShopInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceShopInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceShopInfoResponse::~AllianceShopInfoResponse() {
  SharedDtor();
}

void AllianceShopInfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllianceShopInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceShopInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceShopInfoResponse_descriptor_;
}

const AllianceShopInfoResponse& AllianceShopInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceShopInfoResponse* AllianceShopInfoResponse::default_instance_ = NULL;

AllianceShopInfoResponse* AllianceShopInfoResponse::New() const {
  return new AllianceShopInfoResponse;
}

void AllianceShopInfoResponse::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceShopInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.AllianceShopItemDTO items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllianceShopInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.AllianceShopItemDTO items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceShopInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.AllianceShopItemDTO items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceShopInfoResponse::ByteSize() const {
  int total_size = 0;

  // repeated .slg.protocol.AllianceShopItemDTO items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceShopInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceShopInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceShopInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceShopInfoResponse::MergeFrom(const AllianceShopInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceShopInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceShopInfoResponse::CopyFrom(const AllianceShopInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceShopInfoResponse::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void AllianceShopInfoResponse::Swap(AllianceShopInfoResponse* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceShopInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceShopInfoResponse_descriptor_;
  metadata.reflection = AllianceShopInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceShopBuyRequest::kIdFieldNumber;
const int AllianceShopBuyRequest::kNumFieldNumber;
#endif  // !_MSC_VER

AllianceShopBuyRequest::AllianceShopBuyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceShopBuyRequest::InitAsDefaultInstance() {
}

AllianceShopBuyRequest::AllianceShopBuyRequest(const AllianceShopBuyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceShopBuyRequest::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceShopBuyRequest::~AllianceShopBuyRequest() {
  SharedDtor();
}

void AllianceShopBuyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllianceShopBuyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceShopBuyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceShopBuyRequest_descriptor_;
}

const AllianceShopBuyRequest& AllianceShopBuyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceShopBuyRequest* AllianceShopBuyRequest::default_instance_ = NULL;

AllianceShopBuyRequest* AllianceShopBuyRequest::New() const {
  return new AllianceShopBuyRequest;
}

void AllianceShopBuyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceShopBuyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllianceShopBuyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceShopBuyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceShopBuyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceShopBuyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceShopBuyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceShopBuyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceShopBuyRequest::MergeFrom(const AllianceShopBuyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceShopBuyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceShopBuyRequest::CopyFrom(const AllianceShopBuyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceShopBuyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AllianceShopBuyRequest::Swap(AllianceShopBuyRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceShopBuyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceShopBuyRequest_descriptor_;
  metadata.reflection = AllianceShopBuyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceShopBuyResponse::kIdFieldNumber;
const int AllianceShopBuyResponse::kNumFieldNumber;
const int AllianceShopBuyResponse::kItemIdFieldNumber;
#endif  // !_MSC_VER

AllianceShopBuyResponse::AllianceShopBuyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceShopBuyResponse::InitAsDefaultInstance() {
}

AllianceShopBuyResponse::AllianceShopBuyResponse(const AllianceShopBuyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceShopBuyResponse::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  num_ = 0;
  itemid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceShopBuyResponse::~AllianceShopBuyResponse() {
  SharedDtor();
}

void AllianceShopBuyResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllianceShopBuyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceShopBuyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceShopBuyResponse_descriptor_;
}

const AllianceShopBuyResponse& AllianceShopBuyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceShopBuyResponse* AllianceShopBuyResponse::default_instance_ = NULL;

AllianceShopBuyResponse* AllianceShopBuyResponse::New() const {
  return new AllianceShopBuyResponse;
}

void AllianceShopBuyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    num_ = 0;
    itemid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceShopBuyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemId;
        break;
      }

      // required int32 itemId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllianceShopBuyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // required int32 itemId = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceShopBuyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  // required int32 itemId = 3;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceShopBuyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // required int32 itemId = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceShopBuyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceShopBuyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceShopBuyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceShopBuyResponse::MergeFrom(const AllianceShopBuyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceShopBuyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceShopBuyResponse::CopyFrom(const AllianceShopBuyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceShopBuyResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AllianceShopBuyResponse::Swap(AllianceShopBuyResponse* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceShopBuyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceShopBuyResponse_descriptor_;
  metadata.reflection = AllianceShopBuyResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteJoinAllianceRequest::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

InviteJoinAllianceRequest::InviteJoinAllianceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InviteJoinAllianceRequest::InitAsDefaultInstance() {
}

InviteJoinAllianceRequest::InviteJoinAllianceRequest(const InviteJoinAllianceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InviteJoinAllianceRequest::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteJoinAllianceRequest::~InviteJoinAllianceRequest() {
  SharedDtor();
}

void InviteJoinAllianceRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InviteJoinAllianceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteJoinAllianceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteJoinAllianceRequest_descriptor_;
}

const InviteJoinAllianceRequest& InviteJoinAllianceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

InviteJoinAllianceRequest* InviteJoinAllianceRequest::default_instance_ = NULL;

InviteJoinAllianceRequest* InviteJoinAllianceRequest::New() const {
  return new InviteJoinAllianceRequest;
}

void InviteJoinAllianceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteJoinAllianceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InviteJoinAllianceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InviteJoinAllianceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InviteJoinAllianceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteJoinAllianceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteJoinAllianceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteJoinAllianceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteJoinAllianceRequest::MergeFrom(const InviteJoinAllianceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteJoinAllianceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteJoinAllianceRequest::CopyFrom(const InviteJoinAllianceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteJoinAllianceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InviteJoinAllianceRequest::Swap(InviteJoinAllianceRequest* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteJoinAllianceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteJoinAllianceRequest_descriptor_;
  metadata.reflection = InviteJoinAllianceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteJoinAllianceResponse::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

InviteJoinAllianceResponse::InviteJoinAllianceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InviteJoinAllianceResponse::InitAsDefaultInstance() {
}

InviteJoinAllianceResponse::InviteJoinAllianceResponse(const InviteJoinAllianceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InviteJoinAllianceResponse::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteJoinAllianceResponse::~InviteJoinAllianceResponse() {
  SharedDtor();
}

void InviteJoinAllianceResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InviteJoinAllianceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteJoinAllianceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteJoinAllianceResponse_descriptor_;
}

const InviteJoinAllianceResponse& InviteJoinAllianceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

InviteJoinAllianceResponse* InviteJoinAllianceResponse::default_instance_ = NULL;

InviteJoinAllianceResponse* InviteJoinAllianceResponse::New() const {
  return new InviteJoinAllianceResponse;
}

void InviteJoinAllianceResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteJoinAllianceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InviteJoinAllianceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InviteJoinAllianceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InviteJoinAllianceResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteJoinAllianceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteJoinAllianceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteJoinAllianceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteJoinAllianceResponse::MergeFrom(const InviteJoinAllianceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteJoinAllianceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteJoinAllianceResponse::CopyFrom(const InviteJoinAllianceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteJoinAllianceResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InviteJoinAllianceResponse::Swap(InviteJoinAllianceResponse* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteJoinAllianceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteJoinAllianceResponse_descriptor_;
  metadata.reflection = InviteJoinAllianceResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DealInviteRequest::kIsAgreeFieldNumber;
const int DealInviteRequest::kAllianceIdFieldNumber;
#endif  // !_MSC_VER

DealInviteRequest::DealInviteRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DealInviteRequest::InitAsDefaultInstance() {
}

DealInviteRequest::DealInviteRequest(const DealInviteRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DealInviteRequest::SharedCtor() {
  _cached_size_ = 0;
  isagree_ = false;
  allianceid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DealInviteRequest::~DealInviteRequest() {
  SharedDtor();
}

void DealInviteRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DealInviteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DealInviteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DealInviteRequest_descriptor_;
}

const DealInviteRequest& DealInviteRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

DealInviteRequest* DealInviteRequest::default_instance_ = NULL;

DealInviteRequest* DealInviteRequest::New() const {
  return new DealInviteRequest;
}

void DealInviteRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isagree_ = false;
    allianceid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DealInviteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isAgree = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isagree_)));
          set_has_isagree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_allianceId;
        break;
      }

      // required int32 allianceId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allianceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allianceid_)));
          set_has_allianceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DealInviteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isAgree = 1;
  if (has_isagree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isagree(), output);
  }

  // required int32 allianceId = 2;
  if (has_allianceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->allianceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DealInviteRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isAgree = 1;
  if (has_isagree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isagree(), target);
  }

  // required int32 allianceId = 2;
  if (has_allianceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->allianceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DealInviteRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isAgree = 1;
    if (has_isagree()) {
      total_size += 1 + 1;
    }

    // required int32 allianceId = 2;
    if (has_allianceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allianceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DealInviteRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DealInviteRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DealInviteRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DealInviteRequest::MergeFrom(const DealInviteRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isagree()) {
      set_isagree(from.isagree());
    }
    if (from.has_allianceid()) {
      set_allianceid(from.allianceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DealInviteRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DealInviteRequest::CopyFrom(const DealInviteRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DealInviteRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DealInviteRequest::Swap(DealInviteRequest* other) {
  if (other != this) {
    std::swap(isagree_, other->isagree_);
    std::swap(allianceid_, other->allianceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DealInviteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DealInviteRequest_descriptor_;
  metadata.reflection = DealInviteRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DealInviteResponse::kIsAgreeFieldNumber;
#endif  // !_MSC_VER

DealInviteResponse::DealInviteResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DealInviteResponse::InitAsDefaultInstance() {
}

DealInviteResponse::DealInviteResponse(const DealInviteResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DealInviteResponse::SharedCtor() {
  _cached_size_ = 0;
  isagree_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DealInviteResponse::~DealInviteResponse() {
  SharedDtor();
}

void DealInviteResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DealInviteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DealInviteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DealInviteResponse_descriptor_;
}

const DealInviteResponse& DealInviteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

DealInviteResponse* DealInviteResponse::default_instance_ = NULL;

DealInviteResponse* DealInviteResponse::New() const {
  return new DealInviteResponse;
}

void DealInviteResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isagree_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DealInviteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isAgree = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isagree_)));
          set_has_isagree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DealInviteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isAgree = 1;
  if (has_isagree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isagree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DealInviteResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isAgree = 1;
  if (has_isagree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isagree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DealInviteResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isAgree = 1;
    if (has_isagree()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DealInviteResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DealInviteResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DealInviteResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DealInviteResponse::MergeFrom(const DealInviteResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isagree()) {
      set_isagree(from.isagree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DealInviteResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DealInviteResponse::CopyFrom(const DealInviteResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DealInviteResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DealInviteResponse::Swap(DealInviteResponse* other) {
  if (other != this) {
    std::swap(isagree_, other->isagree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DealInviteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DealInviteResponse_descriptor_;
  metadata.reflection = DealInviteResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FreshRecommendRequest::FreshRecommendRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FreshRecommendRequest::InitAsDefaultInstance() {
}

FreshRecommendRequest::FreshRecommendRequest(const FreshRecommendRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FreshRecommendRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FreshRecommendRequest::~FreshRecommendRequest() {
  SharedDtor();
}

void FreshRecommendRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FreshRecommendRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FreshRecommendRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FreshRecommendRequest_descriptor_;
}

const FreshRecommendRequest& FreshRecommendRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

FreshRecommendRequest* FreshRecommendRequest::default_instance_ = NULL;

FreshRecommendRequest* FreshRecommendRequest::New() const {
  return new FreshRecommendRequest;
}

void FreshRecommendRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FreshRecommendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FreshRecommendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FreshRecommendRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FreshRecommendRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FreshRecommendRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FreshRecommendRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FreshRecommendRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FreshRecommendRequest::MergeFrom(const FreshRecommendRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FreshRecommendRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreshRecommendRequest::CopyFrom(const FreshRecommendRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreshRecommendRequest::IsInitialized() const {

  return true;
}

void FreshRecommendRequest::Swap(FreshRecommendRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FreshRecommendRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FreshRecommendRequest_descriptor_;
  metadata.reflection = FreshRecommendRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FreshRecommendResponse::kRecommendListFieldNumber;
const int FreshRecommendResponse::kNextTimeFieldNumber;
#endif  // !_MSC_VER

FreshRecommendResponse::FreshRecommendResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FreshRecommendResponse::InitAsDefaultInstance() {
}

FreshRecommendResponse::FreshRecommendResponse(const FreshRecommendResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FreshRecommendResponse::SharedCtor() {
  _cached_size_ = 0;
  nexttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FreshRecommendResponse::~FreshRecommendResponse() {
  SharedDtor();
}

void FreshRecommendResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FreshRecommendResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FreshRecommendResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FreshRecommendResponse_descriptor_;
}

const FreshRecommendResponse& FreshRecommendResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

FreshRecommendResponse* FreshRecommendResponse::default_instance_ = NULL;

FreshRecommendResponse* FreshRecommendResponse::New() const {
  return new FreshRecommendResponse;
}

void FreshRecommendResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    nexttime_ = 0;
  }
  recommendlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FreshRecommendResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.RecommendDTO recommendList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recommendList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recommendlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_recommendList;
        if (input->ExpectTag(16)) goto parse_nextTime;
        break;
      }

      // required int32 nextTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nexttime_)));
          set_has_nexttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FreshRecommendResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.RecommendDTO recommendList = 1;
  for (int i = 0; i < this->recommendlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recommendlist(i), output);
  }

  // required int32 nextTime = 2;
  if (has_nexttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nexttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FreshRecommendResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.RecommendDTO recommendList = 1;
  for (int i = 0; i < this->recommendlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recommendlist(i), target);
  }

  // required int32 nextTime = 2;
  if (has_nexttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nexttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FreshRecommendResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 nextTime = 2;
    if (has_nexttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nexttime());
    }

  }
  // repeated .slg.protocol.RecommendDTO recommendList = 1;
  total_size += 1 * this->recommendlist_size();
  for (int i = 0; i < this->recommendlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recommendlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FreshRecommendResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FreshRecommendResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FreshRecommendResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FreshRecommendResponse::MergeFrom(const FreshRecommendResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  recommendlist_.MergeFrom(from.recommendlist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_nexttime()) {
      set_nexttime(from.nexttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FreshRecommendResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreshRecommendResponse::CopyFrom(const FreshRecommendResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreshRecommendResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < recommendlist_size(); i++) {
    if (!this->recommendlist(i).IsInitialized()) return false;
  }
  return true;
}

void FreshRecommendResponse::Swap(FreshRecommendResponse* other) {
  if (other != this) {
    recommendlist_.Swap(&other->recommendlist_);
    std::swap(nexttime_, other->nexttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FreshRecommendResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FreshRecommendResponse_descriptor_;
  metadata.reflection = FreshRecommendResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetRecommendRequest::GetRecommendRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetRecommendRequest::InitAsDefaultInstance() {
}

GetRecommendRequest::GetRecommendRequest(const GetRecommendRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetRecommendRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRecommendRequest::~GetRecommendRequest() {
  SharedDtor();
}

void GetRecommendRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetRecommendRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRecommendRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRecommendRequest_descriptor_;
}

const GetRecommendRequest& GetRecommendRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

GetRecommendRequest* GetRecommendRequest::default_instance_ = NULL;

GetRecommendRequest* GetRecommendRequest::New() const {
  return new GetRecommendRequest;
}

void GetRecommendRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRecommendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetRecommendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetRecommendRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetRecommendRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRecommendRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRecommendRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRecommendRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRecommendRequest::MergeFrom(const GetRecommendRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRecommendRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRecommendRequest::CopyFrom(const GetRecommendRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRecommendRequest::IsInitialized() const {

  return true;
}

void GetRecommendRequest::Swap(GetRecommendRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRecommendRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRecommendRequest_descriptor_;
  metadata.reflection = GetRecommendRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRecommendResponse::kRecommendListFieldNumber;
const int GetRecommendResponse::kNextTimeFieldNumber;
#endif  // !_MSC_VER

GetRecommendResponse::GetRecommendResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetRecommendResponse::InitAsDefaultInstance() {
}

GetRecommendResponse::GetRecommendResponse(const GetRecommendResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetRecommendResponse::SharedCtor() {
  _cached_size_ = 0;
  nexttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRecommendResponse::~GetRecommendResponse() {
  SharedDtor();
}

void GetRecommendResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetRecommendResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRecommendResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRecommendResponse_descriptor_;
}

const GetRecommendResponse& GetRecommendResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

GetRecommendResponse* GetRecommendResponse::default_instance_ = NULL;

GetRecommendResponse* GetRecommendResponse::New() const {
  return new GetRecommendResponse;
}

void GetRecommendResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    nexttime_ = 0;
  }
  recommendlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRecommendResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.RecommendDTO recommendList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recommendList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recommendlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_recommendList;
        if (input->ExpectTag(16)) goto parse_nextTime;
        break;
      }

      // required int32 nextTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nexttime_)));
          set_has_nexttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetRecommendResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.RecommendDTO recommendList = 1;
  for (int i = 0; i < this->recommendlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recommendlist(i), output);
  }

  // required int32 nextTime = 2;
  if (has_nexttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nexttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetRecommendResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.RecommendDTO recommendList = 1;
  for (int i = 0; i < this->recommendlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recommendlist(i), target);
  }

  // required int32 nextTime = 2;
  if (has_nexttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nexttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetRecommendResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 nextTime = 2;
    if (has_nexttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nexttime());
    }

  }
  // repeated .slg.protocol.RecommendDTO recommendList = 1;
  total_size += 1 * this->recommendlist_size();
  for (int i = 0; i < this->recommendlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recommendlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRecommendResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRecommendResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRecommendResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRecommendResponse::MergeFrom(const GetRecommendResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  recommendlist_.MergeFrom(from.recommendlist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_nexttime()) {
      set_nexttime(from.nexttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRecommendResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRecommendResponse::CopyFrom(const GetRecommendResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRecommendResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < recommendlist_size(); i++) {
    if (!this->recommendlist(i).IsInitialized()) return false;
  }
  return true;
}

void GetRecommendResponse::Swap(GetRecommendResponse* other) {
  if (other != this) {
    recommendlist_.Swap(&other->recommendlist_);
    std::swap(nexttime_, other->nexttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRecommendResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRecommendResponse_descriptor_;
  metadata.reflection = GetRecommendResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

QuickJoinRequest::QuickJoinRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuickJoinRequest::InitAsDefaultInstance() {
}

QuickJoinRequest::QuickJoinRequest(const QuickJoinRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuickJoinRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuickJoinRequest::~QuickJoinRequest() {
  SharedDtor();
}

void QuickJoinRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuickJoinRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuickJoinRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuickJoinRequest_descriptor_;
}

const QuickJoinRequest& QuickJoinRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

QuickJoinRequest* QuickJoinRequest::default_instance_ = NULL;

QuickJoinRequest* QuickJoinRequest::New() const {
  return new QuickJoinRequest;
}

void QuickJoinRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuickJoinRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void QuickJoinRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuickJoinRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuickJoinRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuickJoinRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuickJoinRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuickJoinRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuickJoinRequest::MergeFrom(const QuickJoinRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuickJoinRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuickJoinRequest::CopyFrom(const QuickJoinRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuickJoinRequest::IsInitialized() const {

  return true;
}

void QuickJoinRequest::Swap(QuickJoinRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuickJoinRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuickJoinRequest_descriptor_;
  metadata.reflection = QuickJoinRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryInviterRequest::kPlayerNameFieldNumber;
#endif  // !_MSC_VER

QueryInviterRequest::QueryInviterRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryInviterRequest::InitAsDefaultInstance() {
}

QueryInviterRequest::QueryInviterRequest(const QueryInviterRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryInviterRequest::SharedCtor() {
  _cached_size_ = 0;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryInviterRequest::~QueryInviterRequest() {
  SharedDtor();
}

void QueryInviterRequest::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void QueryInviterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryInviterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryInviterRequest_descriptor_;
}

const QueryInviterRequest& QueryInviterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

QueryInviterRequest* QueryInviterRequest::default_instance_ = NULL;

QueryInviterRequest* QueryInviterRequest::New() const {
  return new QueryInviterRequest;
}

void QueryInviterRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryInviterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playerName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryInviterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string playerName = 1;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryInviterRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string playerName = 1;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryInviterRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string playerName = 1;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryInviterRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryInviterRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryInviterRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryInviterRequest::MergeFrom(const QueryInviterRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playername()) {
      set_playername(from.playername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryInviterRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryInviterRequest::CopyFrom(const QueryInviterRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryInviterRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void QueryInviterRequest::Swap(QueryInviterRequest* other) {
  if (other != this) {
    std::swap(playername_, other->playername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryInviterRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryInviterRequest_descriptor_;
  metadata.reflection = QueryInviterRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryInviterResponse::kPlayerFieldNumber;
#endif  // !_MSC_VER

QueryInviterResponse::QueryInviterResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryInviterResponse::InitAsDefaultInstance() {
  player_ = const_cast< ::slg::protocol::RecommendDTO*>(&::slg::protocol::RecommendDTO::default_instance());
}

QueryInviterResponse::QueryInviterResponse(const QueryInviterResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryInviterResponse::SharedCtor() {
  _cached_size_ = 0;
  player_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryInviterResponse::~QueryInviterResponse() {
  SharedDtor();
}

void QueryInviterResponse::SharedDtor() {
  if (this != default_instance_) {
    delete player_;
  }
}

void QueryInviterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryInviterResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryInviterResponse_descriptor_;
}

const QueryInviterResponse& QueryInviterResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

QueryInviterResponse* QueryInviterResponse::default_instance_ = NULL;

QueryInviterResponse* QueryInviterResponse::New() const {
  return new QueryInviterResponse;
}

void QueryInviterResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player()) {
      if (player_ != NULL) player_->::slg::protocol::RecommendDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryInviterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .slg.protocol.RecommendDTO player = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryInviterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .slg.protocol.RecommendDTO player = 1;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryInviterResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .slg.protocol.RecommendDTO player = 1;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryInviterResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .slg.protocol.RecommendDTO player = 1;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryInviterResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryInviterResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryInviterResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryInviterResponse::MergeFrom(const QueryInviterResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player()) {
      mutable_player()->::slg::protocol::RecommendDTO::MergeFrom(from.player());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryInviterResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryInviterResponse::CopyFrom(const QueryInviterResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryInviterResponse::IsInitialized() const {

  if (has_player()) {
    if (!this->player().IsInitialized()) return false;
  }
  return true;
}

void QueryInviterResponse::Swap(QueryInviterResponse* other) {
  if (other != this) {
    std::swap(player_, other->player_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryInviterResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryInviterResponse_descriptor_;
  metadata.reflection = QueryInviterResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AllianceMemberRequest::AllianceMemberRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceMemberRequest::InitAsDefaultInstance() {
}

AllianceMemberRequest::AllianceMemberRequest(const AllianceMemberRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceMemberRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceMemberRequest::~AllianceMemberRequest() {
  SharedDtor();
}

void AllianceMemberRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllianceMemberRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceMemberRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceMemberRequest_descriptor_;
}

const AllianceMemberRequest& AllianceMemberRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceMemberRequest* AllianceMemberRequest::default_instance_ = NULL;

AllianceMemberRequest* AllianceMemberRequest::New() const {
  return new AllianceMemberRequest;
}

void AllianceMemberRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceMemberRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void AllianceMemberRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceMemberRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceMemberRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceMemberRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceMemberRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceMemberRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceMemberRequest::MergeFrom(const AllianceMemberRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceMemberRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceMemberRequest::CopyFrom(const AllianceMemberRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceMemberRequest::IsInitialized() const {

  return true;
}

void AllianceMemberRequest::Swap(AllianceMemberRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceMemberRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceMemberRequest_descriptor_;
  metadata.reflection = AllianceMemberRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceMemberResponse::kMemberListFieldNumber;
#endif  // !_MSC_VER

AllianceMemberResponse::AllianceMemberResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceMemberResponse::InitAsDefaultInstance() {
}

AllianceMemberResponse::AllianceMemberResponse(const AllianceMemberResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceMemberResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceMemberResponse::~AllianceMemberResponse() {
  SharedDtor();
}

void AllianceMemberResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllianceMemberResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceMemberResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceMemberResponse_descriptor_;
}

const AllianceMemberResponse& AllianceMemberResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceMemberResponse* AllianceMemberResponse::default_instance_ = NULL;

AllianceMemberResponse* AllianceMemberResponse::New() const {
  return new AllianceMemberResponse;
}

void AllianceMemberResponse::Clear() {
  memberlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceMemberResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.AllianceMemberDTO memberList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_memberList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memberlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_memberList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllianceMemberResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.AllianceMemberDTO memberList = 1;
  for (int i = 0; i < this->memberlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->memberlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceMemberResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.AllianceMemberDTO memberList = 1;
  for (int i = 0; i < this->memberlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->memberlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceMemberResponse::ByteSize() const {
  int total_size = 0;

  // repeated .slg.protocol.AllianceMemberDTO memberList = 1;
  total_size += 1 * this->memberlist_size();
  for (int i = 0; i < this->memberlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->memberlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceMemberResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceMemberResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceMemberResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceMemberResponse::MergeFrom(const AllianceMemberResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  memberlist_.MergeFrom(from.memberlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceMemberResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceMemberResponse::CopyFrom(const AllianceMemberResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceMemberResponse::IsInitialized() const {

  for (int i = 0; i < memberlist_size(); i++) {
    if (!this->memberlist(i).IsInitialized()) return false;
  }
  return true;
}

void AllianceMemberResponse::Swap(AllianceMemberResponse* other) {
  if (other != this) {
    memberlist_.Swap(&other->memberlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceMemberResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceMemberResponse_descriptor_;
  metadata.reflection = AllianceMemberResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NeedAllianceDataRequest::kIsNeedFieldNumber;
#endif  // !_MSC_VER

NeedAllianceDataRequest::NeedAllianceDataRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NeedAllianceDataRequest::InitAsDefaultInstance() {
}

NeedAllianceDataRequest::NeedAllianceDataRequest(const NeedAllianceDataRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NeedAllianceDataRequest::SharedCtor() {
  _cached_size_ = 0;
  isneed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NeedAllianceDataRequest::~NeedAllianceDataRequest() {
  SharedDtor();
}

void NeedAllianceDataRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NeedAllianceDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NeedAllianceDataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NeedAllianceDataRequest_descriptor_;
}

const NeedAllianceDataRequest& NeedAllianceDataRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

NeedAllianceDataRequest* NeedAllianceDataRequest::default_instance_ = NULL;

NeedAllianceDataRequest* NeedAllianceDataRequest::New() const {
  return new NeedAllianceDataRequest;
}

void NeedAllianceDataRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isneed_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NeedAllianceDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isNeed = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isneed_)));
          set_has_isneed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NeedAllianceDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isNeed = 1;
  if (has_isneed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isneed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NeedAllianceDataRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isNeed = 1;
  if (has_isneed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isneed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NeedAllianceDataRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isNeed = 1;
    if (has_isneed()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NeedAllianceDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NeedAllianceDataRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NeedAllianceDataRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NeedAllianceDataRequest::MergeFrom(const NeedAllianceDataRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isneed()) {
      set_isneed(from.isneed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NeedAllianceDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NeedAllianceDataRequest::CopyFrom(const NeedAllianceDataRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NeedAllianceDataRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NeedAllianceDataRequest::Swap(NeedAllianceDataRequest* other) {
  if (other != this) {
    std::swap(isneed_, other->isneed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NeedAllianceDataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NeedAllianceDataRequest_descriptor_;
  metadata.reflection = NeedAllianceDataRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceSummaryRequest::kNameFieldNumber;
#endif  // !_MSC_VER

AllianceSummaryRequest::AllianceSummaryRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceSummaryRequest::InitAsDefaultInstance() {
}

AllianceSummaryRequest::AllianceSummaryRequest(const AllianceSummaryRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceSummaryRequest::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceSummaryRequest::~AllianceSummaryRequest() {
  SharedDtor();
}

void AllianceSummaryRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void AllianceSummaryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceSummaryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceSummaryRequest_descriptor_;
}

const AllianceSummaryRequest& AllianceSummaryRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceSummaryRequest* AllianceSummaryRequest::default_instance_ = NULL;

AllianceSummaryRequest* AllianceSummaryRequest::New() const {
  return new AllianceSummaryRequest;
}

void AllianceSummaryRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceSummaryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllianceSummaryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceSummaryRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceSummaryRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceSummaryRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceSummaryRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceSummaryRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceSummaryRequest::MergeFrom(const AllianceSummaryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceSummaryRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceSummaryRequest::CopyFrom(const AllianceSummaryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceSummaryRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AllianceSummaryRequest::Swap(AllianceSummaryRequest* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceSummaryRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceSummaryRequest_descriptor_;
  metadata.reflection = AllianceSummaryRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceSummaryResponse::kSummaryInfoFieldNumber;
#endif  // !_MSC_VER

AllianceSummaryResponse::AllianceSummaryResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceSummaryResponse::InitAsDefaultInstance() {
  summaryinfo_ = const_cast< ::slg::protocol::AllianceSummaryDTO*>(&::slg::protocol::AllianceSummaryDTO::default_instance());
}

AllianceSummaryResponse::AllianceSummaryResponse(const AllianceSummaryResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceSummaryResponse::SharedCtor() {
  _cached_size_ = 0;
  summaryinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceSummaryResponse::~AllianceSummaryResponse() {
  SharedDtor();
}

void AllianceSummaryResponse::SharedDtor() {
  if (this != default_instance_) {
    delete summaryinfo_;
  }
}

void AllianceSummaryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceSummaryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceSummaryResponse_descriptor_;
}

const AllianceSummaryResponse& AllianceSummaryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceSummaryResponse* AllianceSummaryResponse::default_instance_ = NULL;

AllianceSummaryResponse* AllianceSummaryResponse::New() const {
  return new AllianceSummaryResponse;
}

void AllianceSummaryResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_summaryinfo()) {
      if (summaryinfo_ != NULL) summaryinfo_->::slg::protocol::AllianceSummaryDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceSummaryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .slg.protocol.AllianceSummaryDTO summaryInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_summaryinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllianceSummaryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .slg.protocol.AllianceSummaryDTO summaryInfo = 1;
  if (has_summaryinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->summaryinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceSummaryResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .slg.protocol.AllianceSummaryDTO summaryInfo = 1;
  if (has_summaryinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->summaryinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceSummaryResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .slg.protocol.AllianceSummaryDTO summaryInfo = 1;
    if (has_summaryinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->summaryinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceSummaryResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceSummaryResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceSummaryResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceSummaryResponse::MergeFrom(const AllianceSummaryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_summaryinfo()) {
      mutable_summaryinfo()->::slg::protocol::AllianceSummaryDTO::MergeFrom(from.summaryinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceSummaryResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceSummaryResponse::CopyFrom(const AllianceSummaryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceSummaryResponse::IsInitialized() const {

  if (has_summaryinfo()) {
    if (!this->summaryinfo().IsInitialized()) return false;
  }
  return true;
}

void AllianceSummaryResponse::Swap(AllianceSummaryResponse* other) {
  if (other != this) {
    std::swap(summaryinfo_, other->summaryinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceSummaryResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceSummaryResponse_descriptor_;
  metadata.reflection = AllianceSummaryResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MemberChangePush::kMembersFieldNumber;
#endif  // !_MSC_VER

MemberChangePush::MemberChangePush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MemberChangePush::InitAsDefaultInstance() {
}

MemberChangePush::MemberChangePush(const MemberChangePush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MemberChangePush::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemberChangePush::~MemberChangePush() {
  SharedDtor();
}

void MemberChangePush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MemberChangePush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberChangePush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemberChangePush_descriptor_;
}

const MemberChangePush& MemberChangePush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

MemberChangePush* MemberChangePush::default_instance_ = NULL;

MemberChangePush* MemberChangePush::New() const {
  return new MemberChangePush;
}

void MemberChangePush::Clear() {
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemberChangePush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.AllianceMemberDTO members = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_members;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MemberChangePush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.AllianceMemberDTO members = 1;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->members(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MemberChangePush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.AllianceMemberDTO members = 1;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->members(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MemberChangePush::ByteSize() const {
  int total_size = 0;

  // repeated .slg.protocol.AllianceMemberDTO members = 1;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberChangePush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemberChangePush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemberChangePush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemberChangePush::MergeFrom(const MemberChangePush& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemberChangePush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberChangePush::CopyFrom(const MemberChangePush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberChangePush::IsInitialized() const {

  for (int i = 0; i < members_size(); i++) {
    if (!this->members(i).IsInitialized()) return false;
  }
  return true;
}

void MemberChangePush::Swap(MemberChangePush* other) {
  if (other != this) {
    members_.Swap(&other->members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemberChangePush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemberChangePush_descriptor_;
  metadata.reflection = MemberChangePush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MemberExitPush::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

MemberExitPush::MemberExitPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MemberExitPush::InitAsDefaultInstance() {
}

MemberExitPush::MemberExitPush(const MemberExitPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MemberExitPush::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemberExitPush::~MemberExitPush() {
  SharedDtor();
}

void MemberExitPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MemberExitPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberExitPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemberExitPush_descriptor_;
}

const MemberExitPush& MemberExitPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

MemberExitPush* MemberExitPush::default_instance_ = NULL;

MemberExitPush* MemberExitPush::New() const {
  return new MemberExitPush;
}

void MemberExitPush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemberExitPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MemberExitPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MemberExitPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MemberExitPush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberExitPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemberExitPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemberExitPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemberExitPush::MergeFrom(const MemberExitPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemberExitPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberExitPush::CopyFrom(const MemberExitPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberExitPush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MemberExitPush::Swap(MemberExitPush* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemberExitPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemberExitPush_descriptor_;
  metadata.reflection = MemberExitPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MyAllianceInfoPush::kIdFieldNumber;
const int MyAllianceInfoPush::kNameFieldNumber;
const int MyAllianceInfoPush::kShortNameFieldNumber;
const int MyAllianceInfoPush::kFlagFieldNumber;
const int MyAllianceInfoPush::kPositionFieldNumber;
#endif  // !_MSC_VER

MyAllianceInfoPush::MyAllianceInfoPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MyAllianceInfoPush::InitAsDefaultInstance() {
}

MyAllianceInfoPush::MyAllianceInfoPush(const MyAllianceInfoPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MyAllianceInfoPush::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  shortname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flag_ = 0;
  position_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MyAllianceInfoPush::~MyAllianceInfoPush() {
  SharedDtor();
}

void MyAllianceInfoPush::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (shortname_ != &::google::protobuf::internal::kEmptyString) {
    delete shortname_;
  }
  if (this != default_instance_) {
  }
}

void MyAllianceInfoPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MyAllianceInfoPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyAllianceInfoPush_descriptor_;
}

const MyAllianceInfoPush& MyAllianceInfoPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

MyAllianceInfoPush* MyAllianceInfoPush::default_instance_ = NULL;

MyAllianceInfoPush* MyAllianceInfoPush::New() const {
  return new MyAllianceInfoPush;
}

void MyAllianceInfoPush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_shortname()) {
      if (shortname_ != &::google::protobuf::internal::kEmptyString) {
        shortname_->clear();
      }
    }
    flag_ = 0;
    position_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MyAllianceInfoPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_shortName;
        break;
      }

      // optional string shortName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shortName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shortname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->shortname().data(), this->shortname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_flag;
        break;
      }

      // optional int32 flag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_position;
        break;
      }

      // optional int32 position = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MyAllianceInfoPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string shortName = 3;
  if (has_shortname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shortname().data(), this->shortname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->shortname(), output);
  }

  // optional int32 flag = 4;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->flag(), output);
  }

  // optional int32 position = 5;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MyAllianceInfoPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string shortName = 3;
  if (has_shortname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shortname().data(), this->shortname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->shortname(), target);
  }

  // optional int32 flag = 4;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->flag(), target);
  }

  // optional int32 position = 5;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MyAllianceInfoPush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string shortName = 3;
    if (has_shortname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shortname());
    }

    // optional int32 flag = 4;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int32 position = 5;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyAllianceInfoPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MyAllianceInfoPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MyAllianceInfoPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MyAllianceInfoPush::MergeFrom(const MyAllianceInfoPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_shortname()) {
      set_shortname(from.shortname());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MyAllianceInfoPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyAllianceInfoPush::CopyFrom(const MyAllianceInfoPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyAllianceInfoPush::IsInitialized() const {

  return true;
}

void MyAllianceInfoPush::Swap(MyAllianceInfoPush* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(shortname_, other->shortname_);
    std::swap(flag_, other->flag_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MyAllianceInfoPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MyAllianceInfoPush_descriptor_;
  metadata.reflection = MyAllianceInfoPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HelpChangePush::kHelpFieldNumber;
#endif  // !_MSC_VER

HelpChangePush::HelpChangePush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HelpChangePush::InitAsDefaultInstance() {
}

HelpChangePush::HelpChangePush(const HelpChangePush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HelpChangePush::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HelpChangePush::~HelpChangePush() {
  SharedDtor();
}

void HelpChangePush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HelpChangePush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HelpChangePush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HelpChangePush_descriptor_;
}

const HelpChangePush& HelpChangePush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

HelpChangePush* HelpChangePush::default_instance_ = NULL;

HelpChangePush* HelpChangePush::New() const {
  return new HelpChangePush;
}

void HelpChangePush::Clear() {
  help_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HelpChangePush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.AllianceHelpDTO help = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_help:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_help()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_help;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HelpChangePush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.AllianceHelpDTO help = 1;
  for (int i = 0; i < this->help_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->help(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HelpChangePush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.AllianceHelpDTO help = 1;
  for (int i = 0; i < this->help_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->help(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HelpChangePush::ByteSize() const {
  int total_size = 0;

  // repeated .slg.protocol.AllianceHelpDTO help = 1;
  total_size += 1 * this->help_size();
  for (int i = 0; i < this->help_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->help(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HelpChangePush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HelpChangePush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HelpChangePush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HelpChangePush::MergeFrom(const HelpChangePush& from) {
  GOOGLE_CHECK_NE(&from, this);
  help_.MergeFrom(from.help_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HelpChangePush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelpChangePush::CopyFrom(const HelpChangePush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelpChangePush::IsInitialized() const {

  for (int i = 0; i < help_size(); i++) {
    if (!this->help(i).IsInitialized()) return false;
  }
  return true;
}

void HelpChangePush::Swap(HelpChangePush* other) {
  if (other != this) {
    help_.Swap(&other->help_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HelpChangePush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HelpChangePush_descriptor_;
  metadata.reflection = HelpChangePush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HelpRemovePush::kHelpIdFieldNumber;
#endif  // !_MSC_VER

HelpRemovePush::HelpRemovePush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HelpRemovePush::InitAsDefaultInstance() {
}

HelpRemovePush::HelpRemovePush(const HelpRemovePush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HelpRemovePush::SharedCtor() {
  _cached_size_ = 0;
  helpid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HelpRemovePush::~HelpRemovePush() {
  SharedDtor();
}

void HelpRemovePush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HelpRemovePush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HelpRemovePush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HelpRemovePush_descriptor_;
}

const HelpRemovePush& HelpRemovePush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

HelpRemovePush* HelpRemovePush::default_instance_ = NULL;

HelpRemovePush* HelpRemovePush::New() const {
  return new HelpRemovePush;
}

void HelpRemovePush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    helpid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HelpRemovePush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 helpId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &helpid_)));
          set_has_helpid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HelpRemovePush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 helpId = 1;
  if (has_helpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->helpid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HelpRemovePush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 helpId = 1;
  if (has_helpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->helpid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HelpRemovePush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 helpId = 1;
    if (has_helpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->helpid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HelpRemovePush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HelpRemovePush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HelpRemovePush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HelpRemovePush::MergeFrom(const HelpRemovePush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_helpid()) {
      set_helpid(from.helpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HelpRemovePush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelpRemovePush::CopyFrom(const HelpRemovePush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelpRemovePush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HelpRemovePush::Swap(HelpRemovePush* other) {
  if (other != this) {
    std::swap(helpid_, other->helpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HelpRemovePush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HelpRemovePush_descriptor_;
  metadata.reflection = HelpRemovePush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceNewsPush::kNewsFieldNumber;
#endif  // !_MSC_VER

AllianceNewsPush::AllianceNewsPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceNewsPush::InitAsDefaultInstance() {
  news_ = const_cast< ::slg::protocol::AllianceNewsDTO*>(&::slg::protocol::AllianceNewsDTO::default_instance());
}

AllianceNewsPush::AllianceNewsPush(const AllianceNewsPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceNewsPush::SharedCtor() {
  _cached_size_ = 0;
  news_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceNewsPush::~AllianceNewsPush() {
  SharedDtor();
}

void AllianceNewsPush::SharedDtor() {
  if (this != default_instance_) {
    delete news_;
  }
}

void AllianceNewsPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceNewsPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceNewsPush_descriptor_;
}

const AllianceNewsPush& AllianceNewsPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceNewsPush* AllianceNewsPush::default_instance_ = NULL;

AllianceNewsPush* AllianceNewsPush::New() const {
  return new AllianceNewsPush;
}

void AllianceNewsPush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_news()) {
      if (news_ != NULL) news_->::slg::protocol::AllianceNewsDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceNewsPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .slg.protocol.AllianceNewsDTO news = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_news()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllianceNewsPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .slg.protocol.AllianceNewsDTO news = 1;
  if (has_news()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->news(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceNewsPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .slg.protocol.AllianceNewsDTO news = 1;
  if (has_news()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->news(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceNewsPush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .slg.protocol.AllianceNewsDTO news = 1;
    if (has_news()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->news());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceNewsPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceNewsPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceNewsPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceNewsPush::MergeFrom(const AllianceNewsPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_news()) {
      mutable_news()->::slg::protocol::AllianceNewsDTO::MergeFrom(from.news());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceNewsPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceNewsPush::CopyFrom(const AllianceNewsPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceNewsPush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_news()) {
    if (!this->news().IsInitialized()) return false;
  }
  return true;
}

void AllianceNewsPush::Swap(AllianceNewsPush* other) {
  if (other != this) {
    std::swap(news_, other->news_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceNewsPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceNewsPush_descriptor_;
  metadata.reflection = AllianceNewsPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceTechPush::kTechsFieldNumber;
#endif  // !_MSC_VER

AllianceTechPush::AllianceTechPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceTechPush::InitAsDefaultInstance() {
}

AllianceTechPush::AllianceTechPush(const AllianceTechPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceTechPush::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceTechPush::~AllianceTechPush() {
  SharedDtor();
}

void AllianceTechPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllianceTechPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceTechPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceTechPush_descriptor_;
}

const AllianceTechPush& AllianceTechPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceTechPush* AllianceTechPush::default_instance_ = NULL;

AllianceTechPush* AllianceTechPush::New() const {
  return new AllianceTechPush;
}

void AllianceTechPush::Clear() {
  techs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceTechPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.AllianceTechDTO techs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_techs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_techs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_techs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllianceTechPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.AllianceTechDTO techs = 1;
  for (int i = 0; i < this->techs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->techs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceTechPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.AllianceTechDTO techs = 1;
  for (int i = 0; i < this->techs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->techs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceTechPush::ByteSize() const {
  int total_size = 0;

  // repeated .slg.protocol.AllianceTechDTO techs = 1;
  total_size += 1 * this->techs_size();
  for (int i = 0; i < this->techs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->techs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceTechPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceTechPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceTechPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceTechPush::MergeFrom(const AllianceTechPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  techs_.MergeFrom(from.techs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceTechPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceTechPush::CopyFrom(const AllianceTechPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceTechPush::IsInitialized() const {

  for (int i = 0; i < techs_size(); i++) {
    if (!this->techs(i).IsInitialized()) return false;
  }
  return true;
}

void AllianceTechPush::Swap(AllianceTechPush* other) {
  if (other != this) {
    techs_.Swap(&other->techs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceTechPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceTechPush_descriptor_;
  metadata.reflection = AllianceTechPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceTechUpgradePush::kUpgradeFieldNumber;
#endif  // !_MSC_VER

AllianceTechUpgradePush::AllianceTechUpgradePush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceTechUpgradePush::InitAsDefaultInstance() {
  upgrade_ = const_cast< ::slg::protocol::AllianceTechUpgradeDTO*>(&::slg::protocol::AllianceTechUpgradeDTO::default_instance());
}

AllianceTechUpgradePush::AllianceTechUpgradePush(const AllianceTechUpgradePush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceTechUpgradePush::SharedCtor() {
  _cached_size_ = 0;
  upgrade_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceTechUpgradePush::~AllianceTechUpgradePush() {
  SharedDtor();
}

void AllianceTechUpgradePush::SharedDtor() {
  if (this != default_instance_) {
    delete upgrade_;
  }
}

void AllianceTechUpgradePush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceTechUpgradePush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceTechUpgradePush_descriptor_;
}

const AllianceTechUpgradePush& AllianceTechUpgradePush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceTechUpgradePush* AllianceTechUpgradePush::default_instance_ = NULL;

AllianceTechUpgradePush* AllianceTechUpgradePush::New() const {
  return new AllianceTechUpgradePush;
}

void AllianceTechUpgradePush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_upgrade()) {
      if (upgrade_ != NULL) upgrade_->::slg::protocol::AllianceTechUpgradeDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceTechUpgradePush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .slg.protocol.AllianceTechUpgradeDTO upgrade = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upgrade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllianceTechUpgradePush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .slg.protocol.AllianceTechUpgradeDTO upgrade = 1;
  if (has_upgrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->upgrade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceTechUpgradePush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .slg.protocol.AllianceTechUpgradeDTO upgrade = 1;
  if (has_upgrade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->upgrade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceTechUpgradePush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .slg.protocol.AllianceTechUpgradeDTO upgrade = 1;
    if (has_upgrade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->upgrade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceTechUpgradePush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceTechUpgradePush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceTechUpgradePush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceTechUpgradePush::MergeFrom(const AllianceTechUpgradePush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_upgrade()) {
      mutable_upgrade()->::slg::protocol::AllianceTechUpgradeDTO::MergeFrom(from.upgrade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceTechUpgradePush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceTechUpgradePush::CopyFrom(const AllianceTechUpgradePush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceTechUpgradePush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_upgrade()) {
    if (!this->upgrade().IsInitialized()) return false;
  }
  return true;
}

void AllianceTechUpgradePush::Swap(AllianceTechUpgradePush* other) {
  if (other != this) {
    std::swap(upgrade_, other->upgrade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceTechUpgradePush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceTechUpgradePush_descriptor_;
  metadata.reflection = AllianceTechUpgradePush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceDonationPush::kInfoFieldNumber;
#endif  // !_MSC_VER

AllianceDonationPush::AllianceDonationPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceDonationPush::InitAsDefaultInstance() {
  info_ = const_cast< ::slg::protocol::AllianceContributeInfoDTO*>(&::slg::protocol::AllianceContributeInfoDTO::default_instance());
}

AllianceDonationPush::AllianceDonationPush(const AllianceDonationPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceDonationPush::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceDonationPush::~AllianceDonationPush() {
  SharedDtor();
}

void AllianceDonationPush::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void AllianceDonationPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceDonationPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceDonationPush_descriptor_;
}

const AllianceDonationPush& AllianceDonationPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceDonationPush* AllianceDonationPush::default_instance_ = NULL;

AllianceDonationPush* AllianceDonationPush::New() const {
  return new AllianceDonationPush;
}

void AllianceDonationPush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::slg::protocol::AllianceContributeInfoDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceDonationPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .slg.protocol.AllianceContributeInfoDTO info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllianceDonationPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .slg.protocol.AllianceContributeInfoDTO info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceDonationPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .slg.protocol.AllianceContributeInfoDTO info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceDonationPush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .slg.protocol.AllianceContributeInfoDTO info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceDonationPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceDonationPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceDonationPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceDonationPush::MergeFrom(const AllianceDonationPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::slg::protocol::AllianceContributeInfoDTO::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceDonationPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceDonationPush::CopyFrom(const AllianceDonationPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceDonationPush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void AllianceDonationPush::Swap(AllianceDonationPush* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceDonationPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceDonationPush_descriptor_;
  metadata.reflection = AllianceDonationPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceWelfarePush::kCanReceiveTimesFieldNumber;
#endif  // !_MSC_VER

AllianceWelfarePush::AllianceWelfarePush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceWelfarePush::InitAsDefaultInstance() {
}

AllianceWelfarePush::AllianceWelfarePush(const AllianceWelfarePush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceWelfarePush::SharedCtor() {
  _cached_size_ = 0;
  canreceivetimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceWelfarePush::~AllianceWelfarePush() {
  SharedDtor();
}

void AllianceWelfarePush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllianceWelfarePush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceWelfarePush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceWelfarePush_descriptor_;
}

const AllianceWelfarePush& AllianceWelfarePush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceWelfarePush* AllianceWelfarePush::default_instance_ = NULL;

AllianceWelfarePush* AllianceWelfarePush::New() const {
  return new AllianceWelfarePush;
}

void AllianceWelfarePush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    canreceivetimes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceWelfarePush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 canReceiveTimes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &canreceivetimes_)));
          set_has_canreceivetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllianceWelfarePush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 canReceiveTimes = 1;
  if (has_canreceivetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->canreceivetimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceWelfarePush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 canReceiveTimes = 1;
  if (has_canreceivetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->canreceivetimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceWelfarePush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 canReceiveTimes = 1;
    if (has_canreceivetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->canreceivetimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceWelfarePush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceWelfarePush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceWelfarePush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceWelfarePush::MergeFrom(const AllianceWelfarePush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_canreceivetimes()) {
      set_canreceivetimes(from.canreceivetimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceWelfarePush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceWelfarePush::CopyFrom(const AllianceWelfarePush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceWelfarePush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AllianceWelfarePush::Swap(AllianceWelfarePush* other) {
  if (other != this) {
    std::swap(canreceivetimes_, other->canreceivetimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceWelfarePush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceWelfarePush_descriptor_;
  metadata.reflection = AllianceWelfarePush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceNewsRemovePush::kNewsIdFieldNumber;
#endif  // !_MSC_VER

AllianceNewsRemovePush::AllianceNewsRemovePush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceNewsRemovePush::InitAsDefaultInstance() {
}

AllianceNewsRemovePush::AllianceNewsRemovePush(const AllianceNewsRemovePush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceNewsRemovePush::SharedCtor() {
  _cached_size_ = 0;
  newsid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceNewsRemovePush::~AllianceNewsRemovePush() {
  SharedDtor();
}

void AllianceNewsRemovePush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllianceNewsRemovePush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceNewsRemovePush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceNewsRemovePush_descriptor_;
}

const AllianceNewsRemovePush& AllianceNewsRemovePush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceNewsRemovePush* AllianceNewsRemovePush::default_instance_ = NULL;

AllianceNewsRemovePush* AllianceNewsRemovePush::New() const {
  return new AllianceNewsRemovePush;
}

void AllianceNewsRemovePush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    newsid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceNewsRemovePush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 newsId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newsid_)));
          set_has_newsid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllianceNewsRemovePush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 newsId = 1;
  if (has_newsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->newsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceNewsRemovePush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 newsId = 1;
  if (has_newsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->newsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceNewsRemovePush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 newsId = 1;
    if (has_newsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceNewsRemovePush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceNewsRemovePush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceNewsRemovePush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceNewsRemovePush::MergeFrom(const AllianceNewsRemovePush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newsid()) {
      set_newsid(from.newsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceNewsRemovePush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceNewsRemovePush::CopyFrom(const AllianceNewsRemovePush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceNewsRemovePush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AllianceNewsRemovePush::Swap(AllianceNewsRemovePush* other) {
  if (other != this) {
    std::swap(newsid_, other->newsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceNewsRemovePush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceNewsRemovePush_descriptor_;
  metadata.reflection = AllianceNewsRemovePush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceInvitePush::kInviteListFieldNumber;
#endif  // !_MSC_VER

AllianceInvitePush::AllianceInvitePush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceInvitePush::InitAsDefaultInstance() {
}

AllianceInvitePush::AllianceInvitePush(const AllianceInvitePush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceInvitePush::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceInvitePush::~AllianceInvitePush() {
  SharedDtor();
}

void AllianceInvitePush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllianceInvitePush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceInvitePush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceInvitePush_descriptor_;
}

const AllianceInvitePush& AllianceInvitePush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceInvitePush* AllianceInvitePush::default_instance_ = NULL;

AllianceInvitePush* AllianceInvitePush::New() const {
  return new AllianceInvitePush;
}

void AllianceInvitePush::Clear() {
  invitelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceInvitePush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.AllianceInviteDTO inviteList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inviteList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_invitelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_inviteList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllianceInvitePush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.AllianceInviteDTO inviteList = 1;
  for (int i = 0; i < this->invitelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->invitelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceInvitePush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.AllianceInviteDTO inviteList = 1;
  for (int i = 0; i < this->invitelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->invitelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceInvitePush::ByteSize() const {
  int total_size = 0;

  // repeated .slg.protocol.AllianceInviteDTO inviteList = 1;
  total_size += 1 * this->invitelist_size();
  for (int i = 0; i < this->invitelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->invitelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceInvitePush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceInvitePush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceInvitePush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceInvitePush::MergeFrom(const AllianceInvitePush& from) {
  GOOGLE_CHECK_NE(&from, this);
  invitelist_.MergeFrom(from.invitelist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceInvitePush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceInvitePush::CopyFrom(const AllianceInvitePush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceInvitePush::IsInitialized() const {

  for (int i = 0; i < invitelist_size(); i++) {
    if (!this->invitelist(i).IsInitialized()) return false;
  }
  return true;
}

void AllianceInvitePush::Swap(AllianceInvitePush* other) {
  if (other != this) {
    invitelist_.Swap(&other->invitelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceInvitePush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceInvitePush_descriptor_;
  metadata.reflection = AllianceInvitePush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HasSendHelpTimesPush::kTimerIdsFieldNumber;
#endif  // !_MSC_VER

HasSendHelpTimesPush::HasSendHelpTimesPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HasSendHelpTimesPush::InitAsDefaultInstance() {
}

HasSendHelpTimesPush::HasSendHelpTimesPush(const HasSendHelpTimesPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HasSendHelpTimesPush::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HasSendHelpTimesPush::~HasSendHelpTimesPush() {
  SharedDtor();
}

void HasSendHelpTimesPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HasSendHelpTimesPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HasSendHelpTimesPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HasSendHelpTimesPush_descriptor_;
}

const HasSendHelpTimesPush& HasSendHelpTimesPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

HasSendHelpTimesPush* HasSendHelpTimesPush::default_instance_ = NULL;

HasSendHelpTimesPush* HasSendHelpTimesPush::New() const {
  return new HasSendHelpTimesPush;
}

void HasSendHelpTimesPush::Clear() {
  timerids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HasSendHelpTimesPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 timerIds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timerIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_timerids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_timerids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_timerIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HasSendHelpTimesPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 timerIds = 1;
  for (int i = 0; i < this->timerids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->timerids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HasSendHelpTimesPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 timerIds = 1;
  for (int i = 0; i < this->timerids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->timerids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HasSendHelpTimesPush::ByteSize() const {
  int total_size = 0;

  // repeated int32 timerIds = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->timerids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->timerids(i));
    }
    total_size += 1 * this->timerids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HasSendHelpTimesPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HasSendHelpTimesPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HasSendHelpTimesPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HasSendHelpTimesPush::MergeFrom(const HasSendHelpTimesPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  timerids_.MergeFrom(from.timerids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HasSendHelpTimesPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HasSendHelpTimesPush::CopyFrom(const HasSendHelpTimesPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HasSendHelpTimesPush::IsInitialized() const {

  return true;
}

void HasSendHelpTimesPush::Swap(HasSendHelpTimesPush* other) {
  if (other != this) {
    timerids_.Swap(&other->timerids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HasSendHelpTimesPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HasSendHelpTimesPush_descriptor_;
  metadata.reflection = HasSendHelpTimesPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceScorePush::kScoreFieldNumber;
#endif  // !_MSC_VER

AllianceScorePush::AllianceScorePush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceScorePush::InitAsDefaultInstance() {
}

AllianceScorePush::AllianceScorePush(const AllianceScorePush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceScorePush::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceScorePush::~AllianceScorePush() {
  SharedDtor();
}

void AllianceScorePush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllianceScorePush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceScorePush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceScorePush_descriptor_;
}

const AllianceScorePush& AllianceScorePush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceScorePush* AllianceScorePush::default_instance_ = NULL;

AllianceScorePush* AllianceScorePush::New() const {
  return new AllianceScorePush;
}

void AllianceScorePush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceScorePush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllianceScorePush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceScorePush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceScorePush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceScorePush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceScorePush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceScorePush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceScorePush::MergeFrom(const AllianceScorePush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceScorePush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceScorePush::CopyFrom(const AllianceScorePush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceScorePush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AllianceScorePush::Swap(AllianceScorePush* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceScorePush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceScorePush_descriptor_;
  metadata.reflection = AllianceScorePush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MyVotePush::kVoteTypeFieldNumber;
#endif  // !_MSC_VER

MyVotePush::MyVotePush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MyVotePush::InitAsDefaultInstance() {
}

MyVotePush::MyVotePush(const MyVotePush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MyVotePush::SharedCtor() {
  _cached_size_ = 0;
  votetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MyVotePush::~MyVotePush() {
  SharedDtor();
}

void MyVotePush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MyVotePush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MyVotePush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyVotePush_descriptor_;
}

const MyVotePush& MyVotePush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

MyVotePush* MyVotePush::default_instance_ = NULL;

MyVotePush* MyVotePush::New() const {
  return new MyVotePush;
}

void MyVotePush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    votetype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MyVotePush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 voteType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &votetype_)));
          set_has_votetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MyVotePush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 voteType = 1;
  if (has_votetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->votetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MyVotePush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 voteType = 1;
  if (has_votetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->votetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MyVotePush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 voteType = 1;
    if (has_votetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->votetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyVotePush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MyVotePush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MyVotePush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MyVotePush::MergeFrom(const MyVotePush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_votetype()) {
      set_votetype(from.votetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MyVotePush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyVotePush::CopyFrom(const MyVotePush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyVotePush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MyVotePush::Swap(MyVotePush* other) {
  if (other != this) {
    std::swap(votetype_, other->votetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MyVotePush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MyVotePush_descriptor_;
  metadata.reflection = MyVotePush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceVoteInfoPush::kVotesFieldNumber;
const int AllianceVoteInfoPush::kIsClearFieldNumber;
#endif  // !_MSC_VER

AllianceVoteInfoPush::AllianceVoteInfoPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceVoteInfoPush::InitAsDefaultInstance() {
}

AllianceVoteInfoPush::AllianceVoteInfoPush(const AllianceVoteInfoPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceVoteInfoPush::SharedCtor() {
  _cached_size_ = 0;
  isclear_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceVoteInfoPush::~AllianceVoteInfoPush() {
  SharedDtor();
}

void AllianceVoteInfoPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllianceVoteInfoPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceVoteInfoPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceVoteInfoPush_descriptor_;
}

const AllianceVoteInfoPush& AllianceVoteInfoPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceVoteInfoPush* AllianceVoteInfoPush::default_instance_ = NULL;

AllianceVoteInfoPush* AllianceVoteInfoPush::New() const {
  return new AllianceVoteInfoPush;
}

void AllianceVoteInfoPush::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    isclear_ = false;
  }
  votes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceVoteInfoPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.AllianceTechVoteDTO votes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_votes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_votes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_votes;
        if (input->ExpectTag(16)) goto parse_isClear;
        break;
      }

      // optional bool isClear = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isClear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isclear_)));
          set_has_isclear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllianceVoteInfoPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.AllianceTechVoteDTO votes = 1;
  for (int i = 0; i < this->votes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->votes(i), output);
  }

  // optional bool isClear = 2;
  if (has_isclear()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isclear(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceVoteInfoPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.AllianceTechVoteDTO votes = 1;
  for (int i = 0; i < this->votes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->votes(i), target);
  }

  // optional bool isClear = 2;
  if (has_isclear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isclear(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceVoteInfoPush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool isClear = 2;
    if (has_isclear()) {
      total_size += 1 + 1;
    }

  }
  // repeated .slg.protocol.AllianceTechVoteDTO votes = 1;
  total_size += 1 * this->votes_size();
  for (int i = 0; i < this->votes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->votes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceVoteInfoPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceVoteInfoPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceVoteInfoPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceVoteInfoPush::MergeFrom(const AllianceVoteInfoPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  votes_.MergeFrom(from.votes_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_isclear()) {
      set_isclear(from.isclear());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceVoteInfoPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceVoteInfoPush::CopyFrom(const AllianceVoteInfoPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceVoteInfoPush::IsInitialized() const {

  for (int i = 0; i < votes_size(); i++) {
    if (!this->votes(i).IsInitialized()) return false;
  }
  return true;
}

void AllianceVoteInfoPush::Swap(AllianceVoteInfoPush* other) {
  if (other != this) {
    votes_.Swap(&other->votes_);
    std::swap(isclear_, other->isclear_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceVoteInfoPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceVoteInfoPush_descriptor_;
  metadata.reflection = AllianceVoteInfoPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceChangePush::kAllianceNameFieldNumber;
const int AllianceChangePush::kFlagFieldNumber;
const int AllianceChangePush::kDeclarationFieldNumber;
const int AllianceChangePush::kIsPublicFieldNumber;
const int AllianceChangePush::kJoinPowerFieldNumber;
const int AllianceChangePush::kLanguageFieldNumber;
const int AllianceChangePush::kShortNameFieldNumber;
const int AllianceChangePush::kHonorFieldNumber;
#endif  // !_MSC_VER

AllianceChangePush::AllianceChangePush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllianceChangePush::InitAsDefaultInstance() {
}

AllianceChangePush::AllianceChangePush(const AllianceChangePush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllianceChangePush::SharedCtor() {
  _cached_size_ = 0;
  alliancename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flag_ = 0;
  declaration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ispublic_ = false;
  joinpower_ = 0;
  language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  shortname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  honor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceChangePush::~AllianceChangePush() {
  SharedDtor();
}

void AllianceChangePush::SharedDtor() {
  if (alliancename_ != &::google::protobuf::internal::kEmptyString) {
    delete alliancename_;
  }
  if (declaration_ != &::google::protobuf::internal::kEmptyString) {
    delete declaration_;
  }
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    delete language_;
  }
  if (shortname_ != &::google::protobuf::internal::kEmptyString) {
    delete shortname_;
  }
  if (this != default_instance_) {
  }
}

void AllianceChangePush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceChangePush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceChangePush_descriptor_;
}

const AllianceChangePush& AllianceChangePush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alliance_2eproto();
  return *default_instance_;
}

AllianceChangePush* AllianceChangePush::default_instance_ = NULL;

AllianceChangePush* AllianceChangePush::New() const {
  return new AllianceChangePush;
}

void AllianceChangePush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_alliancename()) {
      if (alliancename_ != &::google::protobuf::internal::kEmptyString) {
        alliancename_->clear();
      }
    }
    flag_ = 0;
    if (has_declaration()) {
      if (declaration_ != &::google::protobuf::internal::kEmptyString) {
        declaration_->clear();
      }
    }
    ispublic_ = false;
    joinpower_ = 0;
    if (has_language()) {
      if (language_ != &::google::protobuf::internal::kEmptyString) {
        language_->clear();
      }
    }
    if (has_shortname()) {
      if (shortname_ != &::google::protobuf::internal::kEmptyString) {
        shortname_->clear();
      }
    }
    honor_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceChangePush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string allianceName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alliancename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alliancename().data(), this->alliancename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional int32 flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_declaration;
        break;
      }

      // optional string declaration = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_declaration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_declaration()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->declaration().data(), this->declaration().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isPublic;
        break;
      }

      // optional bool isPublic = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isPublic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispublic_)));
          set_has_ispublic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_joinPower;
        break;
      }

      // optional int32 joinPower = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_joinPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &joinpower_)));
          set_has_joinpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_language;
        break;
      }

      // optional string language = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_shortName;
        break;
      }

      // optional string shortName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shortName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shortname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->shortname().data(), this->shortname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_honor;
        break;
      }

      // optional int32 honor = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_honor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &honor_)));
          set_has_honor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllianceChangePush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string allianceName = 1;
  if (has_alliancename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alliancename().data(), this->alliancename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->alliancename(), output);
  }

  // optional int32 flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->flag(), output);
  }

  // optional string declaration = 3;
  if (has_declaration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->declaration().data(), this->declaration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->declaration(), output);
  }

  // optional bool isPublic = 4;
  if (has_ispublic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ispublic(), output);
  }

  // optional int32 joinPower = 5;
  if (has_joinpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->joinpower(), output);
  }

  // optional string language = 6;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->language(), output);
  }

  // optional string shortName = 7;
  if (has_shortname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shortname().data(), this->shortname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->shortname(), output);
  }

  // optional int32 honor = 8;
  if (has_honor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->honor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllianceChangePush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string allianceName = 1;
  if (has_alliancename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alliancename().data(), this->alliancename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->alliancename(), target);
  }

  // optional int32 flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->flag(), target);
  }

  // optional string declaration = 3;
  if (has_declaration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->declaration().data(), this->declaration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->declaration(), target);
  }

  // optional bool isPublic = 4;
  if (has_ispublic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ispublic(), target);
  }

  // optional int32 joinPower = 5;
  if (has_joinpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->joinpower(), target);
  }

  // optional string language = 6;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->language(), target);
  }

  // optional string shortName = 7;
  if (has_shortname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shortname().data(), this->shortname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->shortname(), target);
  }

  // optional int32 honor = 8;
  if (has_honor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->honor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllianceChangePush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string allianceName = 1;
    if (has_alliancename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alliancename());
    }

    // optional int32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional string declaration = 3;
    if (has_declaration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->declaration());
    }

    // optional bool isPublic = 4;
    if (has_ispublic()) {
      total_size += 1 + 1;
    }

    // optional int32 joinPower = 5;
    if (has_joinpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->joinpower());
    }

    // optional string language = 6;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

    // optional string shortName = 7;
    if (has_shortname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shortname());
    }

    // optional int32 honor = 8;
    if (has_honor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->honor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceChangePush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceChangePush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceChangePush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceChangePush::MergeFrom(const AllianceChangePush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alliancename()) {
      set_alliancename(from.alliancename());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_declaration()) {
      set_declaration(from.declaration());
    }
    if (from.has_ispublic()) {
      set_ispublic(from.ispublic());
    }
    if (from.has_joinpower()) {
      set_joinpower(from.joinpower());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_shortname()) {
      set_shortname(from.shortname());
    }
    if (from.has_honor()) {
      set_honor(from.honor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceChangePush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceChangePush::CopyFrom(const AllianceChangePush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceChangePush::IsInitialized() const {

  return true;
}

void AllianceChangePush::Swap(AllianceChangePush* other) {
  if (other != this) {
    std::swap(alliancename_, other->alliancename_);
    std::swap(flag_, other->flag_);
    std::swap(declaration_, other->declaration_);
    std::swap(ispublic_, other->ispublic_);
    std::swap(joinpower_, other->joinpower_);
    std::swap(language_, other->language_);
    std::swap(shortname_, other->shortname_);
    std::swap(honor_, other->honor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceChangePush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceChangePush_descriptor_;
  metadata.reflection = AllianceChangePush_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace slg

// @@protoc_insertion_point(global_scope)
