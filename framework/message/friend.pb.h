// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friend.proto

#ifndef PROTOBUF_friend_2eproto__INCLUDED
#define PROTOBUF_friend_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace slg {
namespace protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_friend_2eproto();
void protobuf_AssignDesc_friend_2eproto();
void protobuf_ShutdownFile_friend_2eproto();

class FriendDTO;
class FriendApplyRequest;
class FriendApplyResponse;
class FriendReplyRequest;
class FriendReplyResponse;
class FriendDeleteRequest;
class FriendDeleteResponse;
class FriendListPush;
class FriendRemovePush;
class FriendRecommendDTO;
class FriendRecommendPush;
class FriendApplyListPush;
class FriendApplyingPush;

enum FriendCommandId {
  FRIEND_APPLY = 2001,
  FRIEND_REPLY = 2002,
  FRIEND_DELETE = 2003
};
bool FriendCommandId_IsValid(int value);
const FriendCommandId FriendCommandId_MIN = FRIEND_APPLY;
const FriendCommandId FriendCommandId_MAX = FRIEND_DELETE;
const int FriendCommandId_ARRAYSIZE = FriendCommandId_MAX + 1;

const ::google::protobuf::EnumDescriptor* FriendCommandId_descriptor();
inline const ::std::string& FriendCommandId_Name(FriendCommandId value) {
  return ::google::protobuf::internal::NameOfEnum(
    FriendCommandId_descriptor(), value);
}
inline bool FriendCommandId_Parse(
    const ::std::string& name, FriendCommandId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FriendCommandId>(
    FriendCommandId_descriptor(), name, value);
}
enum FriendReplyResult {
  ACCEPT = 1,
  REJECT = 2
};
bool FriendReplyResult_IsValid(int value);
const FriendReplyResult FriendReplyResult_MIN = ACCEPT;
const FriendReplyResult FriendReplyResult_MAX = REJECT;
const int FriendReplyResult_ARRAYSIZE = FriendReplyResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* FriendReplyResult_descriptor();
inline const ::std::string& FriendReplyResult_Name(FriendReplyResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    FriendReplyResult_descriptor(), value);
}
inline bool FriendReplyResult_Parse(
    const ::std::string& name, FriendReplyResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FriendReplyResult>(
    FriendReplyResult_descriptor(), name, value);
}
enum FriendPushId {
  FRIEND_LIST_PUSH = 52001,
  FRIEND_REMOVE_PUSH = 52002,
  FRIEND_RECOMMEND_LIST_PUSH = 52003,
  FRIEND_APPLY_LIST_PUSH = 52004,
  FRIEND_APPLYING_LIST_PUSH = 52005
};
bool FriendPushId_IsValid(int value);
const FriendPushId FriendPushId_MIN = FRIEND_LIST_PUSH;
const FriendPushId FriendPushId_MAX = FRIEND_APPLYING_LIST_PUSH;
const int FriendPushId_ARRAYSIZE = FriendPushId_MAX + 1;

const ::google::protobuf::EnumDescriptor* FriendPushId_descriptor();
inline const ::std::string& FriendPushId_Name(FriendPushId value) {
  return ::google::protobuf::internal::NameOfEnum(
    FriendPushId_descriptor(), value);
}
inline bool FriendPushId_Parse(
    const ::std::string& name, FriendPushId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FriendPushId>(
    FriendPushId_descriptor(), name, value);
}
enum FriendRecommendReason {
  DEFAULT = 1,
  ALLIANCE = 2,
  FOAF = 3,
  ENEMY = 4,
  NEAR_BY = 5,
  SAME_LEVEL = 6,
  SAME_LANGUAGE = 7
};
bool FriendRecommendReason_IsValid(int value);
const FriendRecommendReason FriendRecommendReason_MIN = DEFAULT;
const FriendRecommendReason FriendRecommendReason_MAX = SAME_LANGUAGE;
const int FriendRecommendReason_ARRAYSIZE = FriendRecommendReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* FriendRecommendReason_descriptor();
inline const ::std::string& FriendRecommendReason_Name(FriendRecommendReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    FriendRecommendReason_descriptor(), value);
}
inline bool FriendRecommendReason_Parse(
    const ::std::string& name, FriendRecommendReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FriendRecommendReason>(
    FriendRecommendReason_descriptor(), name, value);
}
// ===================================================================

class FriendDTO : public ::google::protobuf::Message {
 public:
  FriendDTO();
  virtual ~FriendDTO();

  FriendDTO(const FriendDTO& from);

  inline FriendDTO& operator=(const FriendDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendDTO& default_instance();

  void Swap(FriendDTO* other);

  // implements Message ----------------------------------------------

  FriendDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendDTO& from);
  void MergeFrom(const FriendDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string icon = 3;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 3;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // required int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required .slg.protocol.VipDTO vip = 5;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 5;
  inline const ::slg::protocol::VipDTO& vip() const;
  inline ::slg::protocol::VipDTO* mutable_vip();
  inline ::slg::protocol::VipDTO* release_vip();
  inline void set_allocated_vip(::slg::protocol::VipDTO* vip);

  // required .slg.protocol.Platform platform = 6;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 6;
  inline ::slg::protocol::Platform platform() const;
  inline void set_platform(::slg::protocol::Platform value);

  // optional string serverName = 7;
  inline bool has_servername() const;
  inline void clear_servername();
  static const int kServerNameFieldNumber = 7;
  inline const ::std::string& servername() const;
  inline void set_servername(const ::std::string& value);
  inline void set_servername(const char* value);
  inline void set_servername(const char* value, size_t size);
  inline ::std::string* mutable_servername();
  inline ::std::string* release_servername();
  inline void set_allocated_servername(::std::string* servername);

  // @@protoc_insertion_point(class_scope:slg.protocol.FriendDTO)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_vip();
  inline void clear_has_vip();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_servername();
  inline void clear_has_servername();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 playerid_;
  ::std::string* name_;
  ::std::string* icon_;
  ::slg::protocol::VipDTO* vip_;
  ::google::protobuf::int32 level_;
  int platform_;
  ::std::string* servername_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static FriendDTO* default_instance_;
};
// -------------------------------------------------------------------

class FriendApplyRequest : public ::google::protobuf::Message {
 public:
  FriendApplyRequest();
  virtual ~FriendApplyRequest();

  FriendApplyRequest(const FriendApplyRequest& from);

  inline FriendApplyRequest& operator=(const FriendApplyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendApplyRequest& default_instance();

  void Swap(FriendApplyRequest* other);

  // implements Message ----------------------------------------------

  FriendApplyRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendApplyRequest& from);
  void MergeFrom(const FriendApplyRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.FriendApplyRequest)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static FriendApplyRequest* default_instance_;
};
// -------------------------------------------------------------------

class FriendApplyResponse : public ::google::protobuf::Message {
 public:
  FriendApplyResponse();
  virtual ~FriendApplyResponse();

  FriendApplyResponse(const FriendApplyResponse& from);

  inline FriendApplyResponse& operator=(const FriendApplyResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendApplyResponse& default_instance();

  void Swap(FriendApplyResponse* other);

  // implements Message ----------------------------------------------

  FriendApplyResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendApplyResponse& from);
  void MergeFrom(const FriendApplyResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.FriendApplyResponse)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static FriendApplyResponse* default_instance_;
};
// -------------------------------------------------------------------

class FriendReplyRequest : public ::google::protobuf::Message {
 public:
  FriendReplyRequest();
  virtual ~FriendReplyRequest();

  FriendReplyRequest(const FriendReplyRequest& from);

  inline FriendReplyRequest& operator=(const FriendReplyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendReplyRequest& default_instance();

  void Swap(FriendReplyRequest* other);

  // implements Message ----------------------------------------------

  FriendReplyRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendReplyRequest& from);
  void MergeFrom(const FriendReplyRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // required .slg.protocol.FriendReplyResult result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::slg::protocol::FriendReplyResult result() const;
  inline void set_result(::slg::protocol::FriendReplyResult value);

  // @@protoc_insertion_point(class_scope:slg.protocol.FriendReplyRequest)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 playerid_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static FriendReplyRequest* default_instance_;
};
// -------------------------------------------------------------------

class FriendReplyResponse : public ::google::protobuf::Message {
 public:
  FriendReplyResponse();
  virtual ~FriendReplyResponse();

  FriendReplyResponse(const FriendReplyResponse& from);

  inline FriendReplyResponse& operator=(const FriendReplyResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendReplyResponse& default_instance();

  void Swap(FriendReplyResponse* other);

  // implements Message ----------------------------------------------

  FriendReplyResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendReplyResponse& from);
  void MergeFrom(const FriendReplyResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // required .slg.protocol.FriendReplyResult result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::slg::protocol::FriendReplyResult result() const;
  inline void set_result(::slg::protocol::FriendReplyResult value);

  // @@protoc_insertion_point(class_scope:slg.protocol.FriendReplyResponse)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 playerid_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static FriendReplyResponse* default_instance_;
};
// -------------------------------------------------------------------

class FriendDeleteRequest : public ::google::protobuf::Message {
 public:
  FriendDeleteRequest();
  virtual ~FriendDeleteRequest();

  FriendDeleteRequest(const FriendDeleteRequest& from);

  inline FriendDeleteRequest& operator=(const FriendDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendDeleteRequest& default_instance();

  void Swap(FriendDeleteRequest* other);

  // implements Message ----------------------------------------------

  FriendDeleteRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendDeleteRequest& from);
  void MergeFrom(const FriendDeleteRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.FriendDeleteRequest)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static FriendDeleteRequest* default_instance_;
};
// -------------------------------------------------------------------

class FriendDeleteResponse : public ::google::protobuf::Message {
 public:
  FriendDeleteResponse();
  virtual ~FriendDeleteResponse();

  FriendDeleteResponse(const FriendDeleteResponse& from);

  inline FriendDeleteResponse& operator=(const FriendDeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendDeleteResponse& default_instance();

  void Swap(FriendDeleteResponse* other);

  // implements Message ----------------------------------------------

  FriendDeleteResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendDeleteResponse& from);
  void MergeFrom(const FriendDeleteResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.FriendDeleteResponse)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static FriendDeleteResponse* default_instance_;
};
// -------------------------------------------------------------------

class FriendListPush : public ::google::protobuf::Message {
 public:
  FriendListPush();
  virtual ~FriendListPush();

  FriendListPush(const FriendListPush& from);

  inline FriendListPush& operator=(const FriendListPush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendListPush& default_instance();

  void Swap(FriendListPush* other);

  // implements Message ----------------------------------------------

  FriendListPush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendListPush& from);
  void MergeFrom(const FriendListPush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .slg.protocol.FriendDTO friends = 1;
  inline int friends_size() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 1;
  inline const ::slg::protocol::FriendDTO& friends(int index) const;
  inline ::slg::protocol::FriendDTO* mutable_friends(int index);
  inline ::slg::protocol::FriendDTO* add_friends();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::FriendDTO >&
      friends() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::FriendDTO >*
      mutable_friends();

  // @@protoc_insertion_point(class_scope:slg.protocol.FriendListPush)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::slg::protocol::FriendDTO > friends_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static FriendListPush* default_instance_;
};
// -------------------------------------------------------------------

class FriendRemovePush : public ::google::protobuf::Message {
 public:
  FriendRemovePush();
  virtual ~FriendRemovePush();

  FriendRemovePush(const FriendRemovePush& from);

  inline FriendRemovePush& operator=(const FriendRemovePush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendRemovePush& default_instance();

  void Swap(FriendRemovePush* other);

  // implements Message ----------------------------------------------

  FriendRemovePush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendRemovePush& from);
  void MergeFrom(const FriendRemovePush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.FriendRemovePush)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static FriendRemovePush* default_instance_;
};
// -------------------------------------------------------------------

class FriendRecommendDTO : public ::google::protobuf::Message {
 public:
  FriendRecommendDTO();
  virtual ~FriendRecommendDTO();

  FriendRecommendDTO(const FriendRecommendDTO& from);

  inline FriendRecommendDTO& operator=(const FriendRecommendDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendRecommendDTO& default_instance();

  void Swap(FriendRecommendDTO* other);

  // implements Message ----------------------------------------------

  FriendRecommendDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendRecommendDTO& from);
  void MergeFrom(const FriendRecommendDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .slg.protocol.FriendDTO friend = 1;
  inline bool has_friend_() const;
  inline void clear_friend_();
  static const int kFriendFieldNumber = 1;
  inline const ::slg::protocol::FriendDTO& friend_() const;
  inline ::slg::protocol::FriendDTO* mutable_friend_();
  inline ::slg::protocol::FriendDTO* release_friend_();
  inline void set_allocated_friend_(::slg::protocol::FriendDTO* friend_);

  // required .slg.protocol.FriendRecommendReason reason = 2;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 2;
  inline ::slg::protocol::FriendRecommendReason reason() const;
  inline void set_reason(::slg::protocol::FriendRecommendReason value);

  // @@protoc_insertion_point(class_scope:slg.protocol.FriendRecommendDTO)
 private:
  inline void set_has_friend_();
  inline void clear_has_friend_();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::slg::protocol::FriendDTO* friend__;
  int reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static FriendRecommendDTO* default_instance_;
};
// -------------------------------------------------------------------

class FriendRecommendPush : public ::google::protobuf::Message {
 public:
  FriendRecommendPush();
  virtual ~FriendRecommendPush();

  FriendRecommendPush(const FriendRecommendPush& from);

  inline FriendRecommendPush& operator=(const FriendRecommendPush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendRecommendPush& default_instance();

  void Swap(FriendRecommendPush* other);

  // implements Message ----------------------------------------------

  FriendRecommendPush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendRecommendPush& from);
  void MergeFrom(const FriendRecommendPush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .slg.protocol.FriendRecommendDTO recommends = 1;
  inline int recommends_size() const;
  inline void clear_recommends();
  static const int kRecommendsFieldNumber = 1;
  inline const ::slg::protocol::FriendRecommendDTO& recommends(int index) const;
  inline ::slg::protocol::FriendRecommendDTO* mutable_recommends(int index);
  inline ::slg::protocol::FriendRecommendDTO* add_recommends();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::FriendRecommendDTO >&
      recommends() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::FriendRecommendDTO >*
      mutable_recommends();

  // @@protoc_insertion_point(class_scope:slg.protocol.FriendRecommendPush)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::slg::protocol::FriendRecommendDTO > recommends_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static FriendRecommendPush* default_instance_;
};
// -------------------------------------------------------------------

class FriendApplyListPush : public ::google::protobuf::Message {
 public:
  FriendApplyListPush();
  virtual ~FriendApplyListPush();

  FriendApplyListPush(const FriendApplyListPush& from);

  inline FriendApplyListPush& operator=(const FriendApplyListPush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendApplyListPush& default_instance();

  void Swap(FriendApplyListPush* other);

  // implements Message ----------------------------------------------

  FriendApplyListPush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendApplyListPush& from);
  void MergeFrom(const FriendApplyListPush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .slg.protocol.FriendDTO friends = 1;
  inline int friends_size() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 1;
  inline const ::slg::protocol::FriendDTO& friends(int index) const;
  inline ::slg::protocol::FriendDTO* mutable_friends(int index);
  inline ::slg::protocol::FriendDTO* add_friends();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::FriendDTO >&
      friends() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::FriendDTO >*
      mutable_friends();

  // @@protoc_insertion_point(class_scope:slg.protocol.FriendApplyListPush)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::slg::protocol::FriendDTO > friends_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static FriendApplyListPush* default_instance_;
};
// -------------------------------------------------------------------

class FriendApplyingPush : public ::google::protobuf::Message {
 public:
  FriendApplyingPush();
  virtual ~FriendApplyingPush();

  FriendApplyingPush(const FriendApplyingPush& from);

  inline FriendApplyingPush& operator=(const FriendApplyingPush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendApplyingPush& default_instance();

  void Swap(FriendApplyingPush* other);

  // implements Message ----------------------------------------------

  FriendApplyingPush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendApplyingPush& from);
  void MergeFrom(const FriendApplyingPush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 playerIds = 1;
  inline int playerids_size() const;
  inline void clear_playerids();
  static const int kPlayerIdsFieldNumber = 1;
  inline ::google::protobuf::int64 playerids(int index) const;
  inline void set_playerids(int index, ::google::protobuf::int64 value);
  inline void add_playerids(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      playerids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_playerids();

  // @@protoc_insertion_point(class_scope:slg.protocol.FriendApplyingPush)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > playerids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static FriendApplyingPush* default_instance_;
};
// ===================================================================


// ===================================================================

// FriendDTO

// required int64 playerId = 1;
inline bool FriendDTO::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendDTO::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendDTO::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendDTO::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 FriendDTO::playerid() const {
  return playerid_;
}
inline void FriendDTO::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// required string name = 2;
inline bool FriendDTO::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendDTO::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendDTO::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendDTO::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FriendDTO::name() const {
  return *name_;
}
inline void FriendDTO::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FriendDTO::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FriendDTO::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendDTO::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FriendDTO::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FriendDTO::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string icon = 3;
inline bool FriendDTO::has_icon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendDTO::set_has_icon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendDTO::clear_has_icon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendDTO::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& FriendDTO::icon() const {
  return *icon_;
}
inline void FriendDTO::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void FriendDTO::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void FriendDTO::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendDTO::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* FriendDTO::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FriendDTO::set_allocated_icon(::std::string* icon) {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 level = 4;
inline bool FriendDTO::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FriendDTO::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FriendDTO::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FriendDTO::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 FriendDTO::level() const {
  return level_;
}
inline void FriendDTO::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required .slg.protocol.VipDTO vip = 5;
inline bool FriendDTO::has_vip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FriendDTO::set_has_vip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FriendDTO::clear_has_vip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FriendDTO::clear_vip() {
  if (vip_ != NULL) vip_->::slg::protocol::VipDTO::Clear();
  clear_has_vip();
}
inline const ::slg::protocol::VipDTO& FriendDTO::vip() const {
  return vip_ != NULL ? *vip_ : *default_instance_->vip_;
}
inline ::slg::protocol::VipDTO* FriendDTO::mutable_vip() {
  set_has_vip();
  if (vip_ == NULL) vip_ = new ::slg::protocol::VipDTO;
  return vip_;
}
inline ::slg::protocol::VipDTO* FriendDTO::release_vip() {
  clear_has_vip();
  ::slg::protocol::VipDTO* temp = vip_;
  vip_ = NULL;
  return temp;
}
inline void FriendDTO::set_allocated_vip(::slg::protocol::VipDTO* vip) {
  delete vip_;
  vip_ = vip;
  if (vip) {
    set_has_vip();
  } else {
    clear_has_vip();
  }
}

// required .slg.protocol.Platform platform = 6;
inline bool FriendDTO::has_platform() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FriendDTO::set_has_platform() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FriendDTO::clear_has_platform() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FriendDTO::clear_platform() {
  platform_ = 1;
  clear_has_platform();
}
inline ::slg::protocol::Platform FriendDTO::platform() const {
  return static_cast< ::slg::protocol::Platform >(platform_);
}
inline void FriendDTO::set_platform(::slg::protocol::Platform value) {
  assert(::slg::protocol::Platform_IsValid(value));
  set_has_platform();
  platform_ = value;
}

// optional string serverName = 7;
inline bool FriendDTO::has_servername() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FriendDTO::set_has_servername() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FriendDTO::clear_has_servername() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FriendDTO::clear_servername() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    servername_->clear();
  }
  clear_has_servername();
}
inline const ::std::string& FriendDTO::servername() const {
  return *servername_;
}
inline void FriendDTO::set_servername(const ::std::string& value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void FriendDTO::set_servername(const char* value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void FriendDTO::set_servername(const char* value, size_t size) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendDTO::mutable_servername() {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  return servername_;
}
inline ::std::string* FriendDTO::release_servername() {
  clear_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = servername_;
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FriendDTO::set_allocated_servername(::std::string* servername) {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (servername) {
    set_has_servername();
    servername_ = servername;
  } else {
    clear_has_servername();
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FriendApplyRequest

// required int64 playerId = 1;
inline bool FriendApplyRequest::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendApplyRequest::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendApplyRequest::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendApplyRequest::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 FriendApplyRequest::playerid() const {
  return playerid_;
}
inline void FriendApplyRequest::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// FriendApplyResponse

// required int64 playerId = 1;
inline bool FriendApplyResponse::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendApplyResponse::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendApplyResponse::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendApplyResponse::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 FriendApplyResponse::playerid() const {
  return playerid_;
}
inline void FriendApplyResponse::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// FriendReplyRequest

// required int64 playerId = 1;
inline bool FriendReplyRequest::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendReplyRequest::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendReplyRequest::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendReplyRequest::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 FriendReplyRequest::playerid() const {
  return playerid_;
}
inline void FriendReplyRequest::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// required .slg.protocol.FriendReplyResult result = 2;
inline bool FriendReplyRequest::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendReplyRequest::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendReplyRequest::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendReplyRequest::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::slg::protocol::FriendReplyResult FriendReplyRequest::result() const {
  return static_cast< ::slg::protocol::FriendReplyResult >(result_);
}
inline void FriendReplyRequest::set_result(::slg::protocol::FriendReplyResult value) {
  assert(::slg::protocol::FriendReplyResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// FriendReplyResponse

// required int64 playerId = 1;
inline bool FriendReplyResponse::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendReplyResponse::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendReplyResponse::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendReplyResponse::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 FriendReplyResponse::playerid() const {
  return playerid_;
}
inline void FriendReplyResponse::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// required .slg.protocol.FriendReplyResult result = 2;
inline bool FriendReplyResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendReplyResponse::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendReplyResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendReplyResponse::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::slg::protocol::FriendReplyResult FriendReplyResponse::result() const {
  return static_cast< ::slg::protocol::FriendReplyResult >(result_);
}
inline void FriendReplyResponse::set_result(::slg::protocol::FriendReplyResult value) {
  assert(::slg::protocol::FriendReplyResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// FriendDeleteRequest

// required int64 playerId = 1;
inline bool FriendDeleteRequest::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendDeleteRequest::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendDeleteRequest::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendDeleteRequest::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 FriendDeleteRequest::playerid() const {
  return playerid_;
}
inline void FriendDeleteRequest::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// FriendDeleteResponse

// required int64 playerId = 1;
inline bool FriendDeleteResponse::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendDeleteResponse::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendDeleteResponse::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendDeleteResponse::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 FriendDeleteResponse::playerid() const {
  return playerid_;
}
inline void FriendDeleteResponse::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// FriendListPush

// repeated .slg.protocol.FriendDTO friends = 1;
inline int FriendListPush::friends_size() const {
  return friends_.size();
}
inline void FriendListPush::clear_friends() {
  friends_.Clear();
}
inline const ::slg::protocol::FriendDTO& FriendListPush::friends(int index) const {
  return friends_.Get(index);
}
inline ::slg::protocol::FriendDTO* FriendListPush::mutable_friends(int index) {
  return friends_.Mutable(index);
}
inline ::slg::protocol::FriendDTO* FriendListPush::add_friends() {
  return friends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::FriendDTO >&
FriendListPush::friends() const {
  return friends_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::FriendDTO >*
FriendListPush::mutable_friends() {
  return &friends_;
}

// -------------------------------------------------------------------

// FriendRemovePush

// required int64 playerId = 1;
inline bool FriendRemovePush::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendRemovePush::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendRemovePush::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendRemovePush::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 FriendRemovePush::playerid() const {
  return playerid_;
}
inline void FriendRemovePush::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// FriendRecommendDTO

// required .slg.protocol.FriendDTO friend = 1;
inline bool FriendRecommendDTO::has_friend_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendRecommendDTO::set_has_friend_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendRecommendDTO::clear_has_friend_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendRecommendDTO::clear_friend_() {
  if (friend__ != NULL) friend__->::slg::protocol::FriendDTO::Clear();
  clear_has_friend_();
}
inline const ::slg::protocol::FriendDTO& FriendRecommendDTO::friend_() const {
  return friend__ != NULL ? *friend__ : *default_instance_->friend__;
}
inline ::slg::protocol::FriendDTO* FriendRecommendDTO::mutable_friend_() {
  set_has_friend_();
  if (friend__ == NULL) friend__ = new ::slg::protocol::FriendDTO;
  return friend__;
}
inline ::slg::protocol::FriendDTO* FriendRecommendDTO::release_friend_() {
  clear_has_friend_();
  ::slg::protocol::FriendDTO* temp = friend__;
  friend__ = NULL;
  return temp;
}
inline void FriendRecommendDTO::set_allocated_friend_(::slg::protocol::FriendDTO* friend_) {
  delete friend__;
  friend__ = friend_;
  if (friend_) {
    set_has_friend_();
  } else {
    clear_has_friend_();
  }
}

// required .slg.protocol.FriendRecommendReason reason = 2;
inline bool FriendRecommendDTO::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendRecommendDTO::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendRecommendDTO::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendRecommendDTO::clear_reason() {
  reason_ = 1;
  clear_has_reason();
}
inline ::slg::protocol::FriendRecommendReason FriendRecommendDTO::reason() const {
  return static_cast< ::slg::protocol::FriendRecommendReason >(reason_);
}
inline void FriendRecommendDTO::set_reason(::slg::protocol::FriendRecommendReason value) {
  assert(::slg::protocol::FriendRecommendReason_IsValid(value));
  set_has_reason();
  reason_ = value;
}

// -------------------------------------------------------------------

// FriendRecommendPush

// repeated .slg.protocol.FriendRecommendDTO recommends = 1;
inline int FriendRecommendPush::recommends_size() const {
  return recommends_.size();
}
inline void FriendRecommendPush::clear_recommends() {
  recommends_.Clear();
}
inline const ::slg::protocol::FriendRecommendDTO& FriendRecommendPush::recommends(int index) const {
  return recommends_.Get(index);
}
inline ::slg::protocol::FriendRecommendDTO* FriendRecommendPush::mutable_recommends(int index) {
  return recommends_.Mutable(index);
}
inline ::slg::protocol::FriendRecommendDTO* FriendRecommendPush::add_recommends() {
  return recommends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::FriendRecommendDTO >&
FriendRecommendPush::recommends() const {
  return recommends_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::FriendRecommendDTO >*
FriendRecommendPush::mutable_recommends() {
  return &recommends_;
}

// -------------------------------------------------------------------

// FriendApplyListPush

// repeated .slg.protocol.FriendDTO friends = 1;
inline int FriendApplyListPush::friends_size() const {
  return friends_.size();
}
inline void FriendApplyListPush::clear_friends() {
  friends_.Clear();
}
inline const ::slg::protocol::FriendDTO& FriendApplyListPush::friends(int index) const {
  return friends_.Get(index);
}
inline ::slg::protocol::FriendDTO* FriendApplyListPush::mutable_friends(int index) {
  return friends_.Mutable(index);
}
inline ::slg::protocol::FriendDTO* FriendApplyListPush::add_friends() {
  return friends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::FriendDTO >&
FriendApplyListPush::friends() const {
  return friends_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::FriendDTO >*
FriendApplyListPush::mutable_friends() {
  return &friends_;
}

// -------------------------------------------------------------------

// FriendApplyingPush

// repeated int64 playerIds = 1;
inline int FriendApplyingPush::playerids_size() const {
  return playerids_.size();
}
inline void FriendApplyingPush::clear_playerids() {
  playerids_.Clear();
}
inline ::google::protobuf::int64 FriendApplyingPush::playerids(int index) const {
  return playerids_.Get(index);
}
inline void FriendApplyingPush::set_playerids(int index, ::google::protobuf::int64 value) {
  playerids_.Set(index, value);
}
inline void FriendApplyingPush::add_playerids(::google::protobuf::int64 value) {
  playerids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
FriendApplyingPush::playerids() const {
  return playerids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
FriendApplyingPush::mutable_playerids() {
  return &playerids_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace slg

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::slg::protocol::FriendCommandId>() {
  return ::slg::protocol::FriendCommandId_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::slg::protocol::FriendReplyResult>() {
  return ::slg::protocol::FriendReplyResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::slg::protocol::FriendPushId>() {
  return ::slg::protocol::FriendPushId_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::slg::protocol::FriendRecommendReason>() {
  return ::slg::protocol::FriendRecommendReason_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_friend_2eproto__INCLUDED
