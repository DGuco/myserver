// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: timer_task.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "timer_task.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace slg {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* TimerTaskTargetDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimerTaskTargetDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimerTaskDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimerTaskDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimerTaskCompleteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimerTaskCompleteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimerTaskCompleteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimerTaskCompleteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimerTaskSpeedUpRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimerTaskSpeedUpRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimerTaskSpeedUpResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimerTaskSpeedUpResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimerTaskCancelRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimerTaskCancelRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimerTaskCancelResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimerTaskCancelResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimerTaskListPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimerTaskListPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimerTaskCompletePush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimerTaskCompletePush_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimerTaskAdjustPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimerTaskAdjustPush_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TimerTaskTargetType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TimerTaskCommandId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TimerTaskSpeedUpType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TimerTaskPushId_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_timer_5ftask_2eproto() {
  protobuf_AddDesc_timer_5ftask_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "timer_task.proto");
  GOOGLE_CHECK(file != NULL);
  TimerTaskTargetDTO_descriptor_ = file->message_type(0);
  static const int TimerTaskTargetDTO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskTargetDTO, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskTargetDTO, targetid_),
  };
  TimerTaskTargetDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimerTaskTargetDTO_descriptor_,
      TimerTaskTargetDTO::default_instance_,
      TimerTaskTargetDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskTargetDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskTargetDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimerTaskTargetDTO));
  TimerTaskDTO_descriptor_ = file->message_type(1);
  static const int TimerTaskDTO_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskDTO, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskDTO, startts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskDTO, endts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskDTO, target_),
  };
  TimerTaskDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimerTaskDTO_descriptor_,
      TimerTaskDTO::default_instance_,
      TimerTaskDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimerTaskDTO));
  TimerTaskCompleteRequest_descriptor_ = file->message_type(2);
  static const int TimerTaskCompleteRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskCompleteRequest, timertaskid_),
  };
  TimerTaskCompleteRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimerTaskCompleteRequest_descriptor_,
      TimerTaskCompleteRequest::default_instance_,
      TimerTaskCompleteRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskCompleteRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskCompleteRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimerTaskCompleteRequest));
  TimerTaskCompleteResponse_descriptor_ = file->message_type(3);
  static const int TimerTaskCompleteResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskCompleteResponse, timertaskid_),
  };
  TimerTaskCompleteResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimerTaskCompleteResponse_descriptor_,
      TimerTaskCompleteResponse::default_instance_,
      TimerTaskCompleteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskCompleteResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskCompleteResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimerTaskCompleteResponse));
  TimerTaskSpeedUpRequest_descriptor_ = file->message_type(4);
  static const int TimerTaskSpeedUpRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskSpeedUpRequest, timertaskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskSpeedUpRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskSpeedUpRequest, item_),
  };
  TimerTaskSpeedUpRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimerTaskSpeedUpRequest_descriptor_,
      TimerTaskSpeedUpRequest::default_instance_,
      TimerTaskSpeedUpRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskSpeedUpRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskSpeedUpRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimerTaskSpeedUpRequest));
  TimerTaskSpeedUpResponse_descriptor_ = file->message_type(5);
  static const int TimerTaskSpeedUpResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskSpeedUpResponse, timertaskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskSpeedUpResponse, costproperties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskSpeedUpResponse, costitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskSpeedUpResponse, target_),
  };
  TimerTaskSpeedUpResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimerTaskSpeedUpResponse_descriptor_,
      TimerTaskSpeedUpResponse::default_instance_,
      TimerTaskSpeedUpResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskSpeedUpResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskSpeedUpResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimerTaskSpeedUpResponse));
  TimerTaskCancelRequest_descriptor_ = file->message_type(6);
  static const int TimerTaskCancelRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskCancelRequest, timertaskid_),
  };
  TimerTaskCancelRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimerTaskCancelRequest_descriptor_,
      TimerTaskCancelRequest::default_instance_,
      TimerTaskCancelRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskCancelRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskCancelRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimerTaskCancelRequest));
  TimerTaskCancelResponse_descriptor_ = file->message_type(7);
  static const int TimerTaskCancelResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskCancelResponse, timertaskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskCancelResponse, target_),
  };
  TimerTaskCancelResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimerTaskCancelResponse_descriptor_,
      TimerTaskCancelResponse::default_instance_,
      TimerTaskCancelResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskCancelResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskCancelResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimerTaskCancelResponse));
  TimerTaskListPush_descriptor_ = file->message_type(8);
  static const int TimerTaskListPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskListPush, timertasks_),
  };
  TimerTaskListPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimerTaskListPush_descriptor_,
      TimerTaskListPush::default_instance_,
      TimerTaskListPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskListPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskListPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimerTaskListPush));
  TimerTaskCompletePush_descriptor_ = file->message_type(9);
  static const int TimerTaskCompletePush_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskCompletePush, timertaskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskCompletePush, target_),
  };
  TimerTaskCompletePush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimerTaskCompletePush_descriptor_,
      TimerTaskCompletePush::default_instance_,
      TimerTaskCompletePush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskCompletePush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskCompletePush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimerTaskCompletePush));
  TimerTaskAdjustPush_descriptor_ = file->message_type(10);
  static const int TimerTaskAdjustPush_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskAdjustPush, timertaskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskAdjustPush, systime_),
  };
  TimerTaskAdjustPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimerTaskAdjustPush_descriptor_,
      TimerTaskAdjustPush::default_instance_,
      TimerTaskAdjustPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskAdjustPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerTaskAdjustPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimerTaskAdjustPush));
  TimerTaskTargetType_descriptor_ = file->enum_type(0);
  TimerTaskCommandId_descriptor_ = file->enum_type(1);
  TimerTaskSpeedUpType_descriptor_ = file->enum_type(2);
  TimerTaskPushId_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_timer_5ftask_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimerTaskTargetDTO_descriptor_, &TimerTaskTargetDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimerTaskDTO_descriptor_, &TimerTaskDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimerTaskCompleteRequest_descriptor_, &TimerTaskCompleteRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimerTaskCompleteResponse_descriptor_, &TimerTaskCompleteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimerTaskSpeedUpRequest_descriptor_, &TimerTaskSpeedUpRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimerTaskSpeedUpResponse_descriptor_, &TimerTaskSpeedUpResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimerTaskCancelRequest_descriptor_, &TimerTaskCancelRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimerTaskCancelResponse_descriptor_, &TimerTaskCancelResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimerTaskListPush_descriptor_, &TimerTaskListPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimerTaskCompletePush_descriptor_, &TimerTaskCompletePush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimerTaskAdjustPush_descriptor_, &TimerTaskAdjustPush::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_timer_5ftask_2eproto() {
  delete TimerTaskTargetDTO::default_instance_;
  delete TimerTaskTargetDTO_reflection_;
  delete TimerTaskDTO::default_instance_;
  delete TimerTaskDTO_reflection_;
  delete TimerTaskCompleteRequest::default_instance_;
  delete TimerTaskCompleteRequest_reflection_;
  delete TimerTaskCompleteResponse::default_instance_;
  delete TimerTaskCompleteResponse_reflection_;
  delete TimerTaskSpeedUpRequest::default_instance_;
  delete TimerTaskSpeedUpRequest_reflection_;
  delete TimerTaskSpeedUpResponse::default_instance_;
  delete TimerTaskSpeedUpResponse_reflection_;
  delete TimerTaskCancelRequest::default_instance_;
  delete TimerTaskCancelRequest_reflection_;
  delete TimerTaskCancelResponse::default_instance_;
  delete TimerTaskCancelResponse_reflection_;
  delete TimerTaskListPush::default_instance_;
  delete TimerTaskListPush_reflection_;
  delete TimerTaskCompletePush::default_instance_;
  delete TimerTaskCompletePush_reflection_;
  delete TimerTaskAdjustPush::default_instance_;
  delete TimerTaskAdjustPush_reflection_;
}

void protobuf_AddDesc_timer_5ftask_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::slg::protocol::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020timer_task.proto\022\014slg.protocol\032\014common"
    ".proto\"W\n\022TimerTaskTargetDTO\022/\n\004type\030\001 \002"
    "(\0162!.slg.protocol.TimerTaskTargetType\022\020\n"
    "\010targetId\030\002 \002(\005\"l\n\014TimerTaskDTO\022\n\n\002id\030\001 "
    "\002(\005\022\017\n\007startTs\030\002 \002(\005\022\r\n\005endTs\030\003 \002(\005\0220\n\006t"
    "arget\030\004 \002(\0132 .slg.protocol.TimerTaskTarg"
    "etDTO\"/\n\030TimerTaskCompleteRequest\022\023\n\013tim"
    "erTaskId\030\001 \002(\005\"0\n\031TimerTaskCompleteRespo"
    "nse\022\023\n\013timerTaskId\030\002 \002(\005\"\205\001\n\027TimerTaskSp"
    "eedUpRequest\022\023\n\013timerTaskId\030\001 \002(\005\0220\n\004typ"
    "e\030\002 \001(\0162\".slg.protocol.TimerTaskSpeedUpT"
    "ype\022#\n\004item\030\003 \001(\0132\025.slg.protocol.ItemDTO"
    "\"\275\001\n\030TimerTaskSpeedUpResponse\022\023\n\013timerTa"
    "skId\030\001 \002(\005\0221\n\016costProperties\030\002 \003(\0132\031.slg"
    ".protocol.PropertyDTO\022\'\n\010costItem\030\003 \001(\0132"
    "\025.slg.protocol.ItemDTO\0220\n\006target\030\004 \002(\0132 "
    ".slg.protocol.TimerTaskTargetDTO\"-\n\026Time"
    "rTaskCancelRequest\022\023\n\013timerTaskId\030\001 \002(\005\""
    "`\n\027TimerTaskCancelResponse\022\023\n\013timerTaskI"
    "d\030\001 \002(\005\0220\n\006target\030\002 \002(\0132 .slg.protocol.T"
    "imerTaskTargetDTO\"C\n\021TimerTaskListPush\022."
    "\n\ntimerTasks\030\001 \003(\0132\032.slg.protocol.TimerT"
    "askDTO\"^\n\025TimerTaskCompletePush\022\023\n\013timer"
    "TaskId\030\001 \002(\005\0220\n\006target\030\002 \002(\0132 .slg.proto"
    "col.TimerTaskTargetDTO\";\n\023TimerTaskAdjus"
    "tPush\022\023\n\013timerTaskId\030\001 \002(\005\022\017\n\007systime\030\002 "
    "\002(\005*x\n\023TimerTaskTargetType\022\031\n\025TIMER_TARG"
    "ET_BUILDING\020\001\022\025\n\021TIMER_TARGET_TECH\020\002\022\026\n\022"
    "TIMER_TARGET_TRAIN\020\003\022\027\n\023TIMER_SKILL_UPGR"
    "ADE\020\004*`\n\022TimerTaskCommandId\022\030\n\023TIMER_TAS"
    "K_SPEED_UP\020\255\002\022\030\n\023TIMER_TASK_COMPLETE\020\256\002\022"
    "\026\n\021TIMER_TASK_CANCEL\020\257\002*\?\n\024TimerTaskSpee"
    "dUpType\022\010\n\004FREE\020\001\022\017\n\013USE_DIAMOND\020\002\022\014\n\010US"
    "E_ITEM\020\003*k\n\017TimerTaskPushId\022\032\n\024TIMER_TAS"
    "K_LIST_PUSH\020\374\210\003\022\036\n\030TIMER_TASK_COMPLETE_P"
    "USH\020\376\210\003\022\034\n\026TIMER_TASK_ADJUST_PUSH\020\377\210\003B.\n"
    "\034com.bonusstudio.slg.protocolB\016TimerTask"
    "Proto", 1485);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "timer_task.proto", &protobuf_RegisterTypes);
  TimerTaskTargetDTO::default_instance_ = new TimerTaskTargetDTO();
  TimerTaskDTO::default_instance_ = new TimerTaskDTO();
  TimerTaskCompleteRequest::default_instance_ = new TimerTaskCompleteRequest();
  TimerTaskCompleteResponse::default_instance_ = new TimerTaskCompleteResponse();
  TimerTaskSpeedUpRequest::default_instance_ = new TimerTaskSpeedUpRequest();
  TimerTaskSpeedUpResponse::default_instance_ = new TimerTaskSpeedUpResponse();
  TimerTaskCancelRequest::default_instance_ = new TimerTaskCancelRequest();
  TimerTaskCancelResponse::default_instance_ = new TimerTaskCancelResponse();
  TimerTaskListPush::default_instance_ = new TimerTaskListPush();
  TimerTaskCompletePush::default_instance_ = new TimerTaskCompletePush();
  TimerTaskAdjustPush::default_instance_ = new TimerTaskAdjustPush();
  TimerTaskTargetDTO::default_instance_->InitAsDefaultInstance();
  TimerTaskDTO::default_instance_->InitAsDefaultInstance();
  TimerTaskCompleteRequest::default_instance_->InitAsDefaultInstance();
  TimerTaskCompleteResponse::default_instance_->InitAsDefaultInstance();
  TimerTaskSpeedUpRequest::default_instance_->InitAsDefaultInstance();
  TimerTaskSpeedUpResponse::default_instance_->InitAsDefaultInstance();
  TimerTaskCancelRequest::default_instance_->InitAsDefaultInstance();
  TimerTaskCancelResponse::default_instance_->InitAsDefaultInstance();
  TimerTaskListPush::default_instance_->InitAsDefaultInstance();
  TimerTaskCompletePush::default_instance_->InitAsDefaultInstance();
  TimerTaskAdjustPush::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_timer_5ftask_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_timer_5ftask_2eproto {
  StaticDescriptorInitializer_timer_5ftask_2eproto() {
    protobuf_AddDesc_timer_5ftask_2eproto();
  }
} static_descriptor_initializer_timer_5ftask_2eproto_;
const ::google::protobuf::EnumDescriptor* TimerTaskTargetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimerTaskTargetType_descriptor_;
}
bool TimerTaskTargetType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TimerTaskCommandId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimerTaskCommandId_descriptor_;
}
bool TimerTaskCommandId_IsValid(int value) {
  switch(value) {
    case 301:
    case 302:
    case 303:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TimerTaskSpeedUpType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimerTaskSpeedUpType_descriptor_;
}
bool TimerTaskSpeedUpType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TimerTaskPushId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimerTaskPushId_descriptor_;
}
bool TimerTaskPushId_IsValid(int value) {
  switch(value) {
    case 50300:
    case 50302:
    case 50303:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TimerTaskTargetDTO::kTypeFieldNumber;
const int TimerTaskTargetDTO::kTargetIdFieldNumber;
#endif  // !_MSC_VER

TimerTaskTargetDTO::TimerTaskTargetDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TimerTaskTargetDTO::InitAsDefaultInstance() {
}

TimerTaskTargetDTO::TimerTaskTargetDTO(const TimerTaskTargetDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TimerTaskTargetDTO::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  targetid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimerTaskTargetDTO::~TimerTaskTargetDTO() {
  SharedDtor();
}

void TimerTaskTargetDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimerTaskTargetDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimerTaskTargetDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimerTaskTargetDTO_descriptor_;
}

const TimerTaskTargetDTO& TimerTaskTargetDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_timer_5ftask_2eproto();
  return *default_instance_;
}

TimerTaskTargetDTO* TimerTaskTargetDTO::default_instance_ = NULL;

TimerTaskTargetDTO* TimerTaskTargetDTO::New() const {
  return new TimerTaskTargetDTO;
}

void TimerTaskTargetDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    targetid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimerTaskTargetDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .slg.protocol.TimerTaskTargetType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::slg::protocol::TimerTaskTargetType_IsValid(value)) {
            set_type(static_cast< ::slg::protocol::TimerTaskTargetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetId;
        break;
      }

      // required int32 targetId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimerTaskTargetDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .slg.protocol.TimerTaskTargetType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 targetId = 2;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->targetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TimerTaskTargetDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .slg.protocol.TimerTaskTargetType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 targetId = 2;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->targetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TimerTaskTargetDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .slg.protocol.TimerTaskTargetType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 targetId = 2;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimerTaskTargetDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimerTaskTargetDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimerTaskTargetDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimerTaskTargetDTO::MergeFrom(const TimerTaskTargetDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimerTaskTargetDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimerTaskTargetDTO::CopyFrom(const TimerTaskTargetDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimerTaskTargetDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TimerTaskTargetDTO::Swap(TimerTaskTargetDTO* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimerTaskTargetDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimerTaskTargetDTO_descriptor_;
  metadata.reflection = TimerTaskTargetDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimerTaskDTO::kIdFieldNumber;
const int TimerTaskDTO::kStartTsFieldNumber;
const int TimerTaskDTO::kEndTsFieldNumber;
const int TimerTaskDTO::kTargetFieldNumber;
#endif  // !_MSC_VER

TimerTaskDTO::TimerTaskDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TimerTaskDTO::InitAsDefaultInstance() {
  target_ = const_cast< ::slg::protocol::TimerTaskTargetDTO*>(&::slg::protocol::TimerTaskTargetDTO::default_instance());
}

TimerTaskDTO::TimerTaskDTO(const TimerTaskDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TimerTaskDTO::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  startts_ = 0;
  endts_ = 0;
  target_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimerTaskDTO::~TimerTaskDTO() {
  SharedDtor();
}

void TimerTaskDTO::SharedDtor() {
  if (this != default_instance_) {
    delete target_;
  }
}

void TimerTaskDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimerTaskDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimerTaskDTO_descriptor_;
}

const TimerTaskDTO& TimerTaskDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_timer_5ftask_2eproto();
  return *default_instance_;
}

TimerTaskDTO* TimerTaskDTO::default_instance_ = NULL;

TimerTaskDTO* TimerTaskDTO::New() const {
  return new TimerTaskDTO;
}

void TimerTaskDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    startts_ = 0;
    endts_ = 0;
    if (has_target()) {
      if (target_ != NULL) target_->::slg::protocol::TimerTaskTargetDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimerTaskDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_startTs;
        break;
      }

      // required int32 startTs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startts_)));
          set_has_startts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_endTs;
        break;
      }

      // required int32 endTs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endts_)));
          set_has_endts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_target;
        break;
      }

      // required .slg.protocol.TimerTaskTargetDTO target = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimerTaskDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 startTs = 2;
  if (has_startts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->startts(), output);
  }

  // required int32 endTs = 3;
  if (has_endts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->endts(), output);
  }

  // required .slg.protocol.TimerTaskTargetDTO target = 4;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->target(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TimerTaskDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 startTs = 2;
  if (has_startts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->startts(), target);
  }

  // required int32 endTs = 3;
  if (has_endts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->endts(), target);
  }

  // required .slg.protocol.TimerTaskTargetDTO target = 4;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->target(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TimerTaskDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 startTs = 2;
    if (has_startts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startts());
    }

    // required int32 endTs = 3;
    if (has_endts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endts());
    }

    // required .slg.protocol.TimerTaskTargetDTO target = 4;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimerTaskDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimerTaskDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimerTaskDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimerTaskDTO::MergeFrom(const TimerTaskDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_startts()) {
      set_startts(from.startts());
    }
    if (from.has_endts()) {
      set_endts(from.endts());
    }
    if (from.has_target()) {
      mutable_target()->::slg::protocol::TimerTaskTargetDTO::MergeFrom(from.target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimerTaskDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimerTaskDTO::CopyFrom(const TimerTaskDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimerTaskDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_target()) {
    if (!this->target().IsInitialized()) return false;
  }
  return true;
}

void TimerTaskDTO::Swap(TimerTaskDTO* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(startts_, other->startts_);
    std::swap(endts_, other->endts_);
    std::swap(target_, other->target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimerTaskDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimerTaskDTO_descriptor_;
  metadata.reflection = TimerTaskDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimerTaskCompleteRequest::kTimerTaskIdFieldNumber;
#endif  // !_MSC_VER

TimerTaskCompleteRequest::TimerTaskCompleteRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TimerTaskCompleteRequest::InitAsDefaultInstance() {
}

TimerTaskCompleteRequest::TimerTaskCompleteRequest(const TimerTaskCompleteRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TimerTaskCompleteRequest::SharedCtor() {
  _cached_size_ = 0;
  timertaskid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimerTaskCompleteRequest::~TimerTaskCompleteRequest() {
  SharedDtor();
}

void TimerTaskCompleteRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimerTaskCompleteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimerTaskCompleteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimerTaskCompleteRequest_descriptor_;
}

const TimerTaskCompleteRequest& TimerTaskCompleteRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_timer_5ftask_2eproto();
  return *default_instance_;
}

TimerTaskCompleteRequest* TimerTaskCompleteRequest::default_instance_ = NULL;

TimerTaskCompleteRequest* TimerTaskCompleteRequest::New() const {
  return new TimerTaskCompleteRequest;
}

void TimerTaskCompleteRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timertaskid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimerTaskCompleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 timerTaskId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timertaskid_)));
          set_has_timertaskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimerTaskCompleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 timerTaskId = 1;
  if (has_timertaskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timertaskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TimerTaskCompleteRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 timerTaskId = 1;
  if (has_timertaskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->timertaskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TimerTaskCompleteRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 timerTaskId = 1;
    if (has_timertaskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timertaskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimerTaskCompleteRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimerTaskCompleteRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimerTaskCompleteRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimerTaskCompleteRequest::MergeFrom(const TimerTaskCompleteRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timertaskid()) {
      set_timertaskid(from.timertaskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimerTaskCompleteRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimerTaskCompleteRequest::CopyFrom(const TimerTaskCompleteRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimerTaskCompleteRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TimerTaskCompleteRequest::Swap(TimerTaskCompleteRequest* other) {
  if (other != this) {
    std::swap(timertaskid_, other->timertaskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimerTaskCompleteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimerTaskCompleteRequest_descriptor_;
  metadata.reflection = TimerTaskCompleteRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimerTaskCompleteResponse::kTimerTaskIdFieldNumber;
#endif  // !_MSC_VER

TimerTaskCompleteResponse::TimerTaskCompleteResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TimerTaskCompleteResponse::InitAsDefaultInstance() {
}

TimerTaskCompleteResponse::TimerTaskCompleteResponse(const TimerTaskCompleteResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TimerTaskCompleteResponse::SharedCtor() {
  _cached_size_ = 0;
  timertaskid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimerTaskCompleteResponse::~TimerTaskCompleteResponse() {
  SharedDtor();
}

void TimerTaskCompleteResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimerTaskCompleteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimerTaskCompleteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimerTaskCompleteResponse_descriptor_;
}

const TimerTaskCompleteResponse& TimerTaskCompleteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_timer_5ftask_2eproto();
  return *default_instance_;
}

TimerTaskCompleteResponse* TimerTaskCompleteResponse::default_instance_ = NULL;

TimerTaskCompleteResponse* TimerTaskCompleteResponse::New() const {
  return new TimerTaskCompleteResponse;
}

void TimerTaskCompleteResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timertaskid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimerTaskCompleteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 timerTaskId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timertaskid_)));
          set_has_timertaskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimerTaskCompleteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 timerTaskId = 2;
  if (has_timertaskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->timertaskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TimerTaskCompleteResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 timerTaskId = 2;
  if (has_timertaskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->timertaskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TimerTaskCompleteResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 timerTaskId = 2;
    if (has_timertaskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timertaskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimerTaskCompleteResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimerTaskCompleteResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimerTaskCompleteResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimerTaskCompleteResponse::MergeFrom(const TimerTaskCompleteResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timertaskid()) {
      set_timertaskid(from.timertaskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimerTaskCompleteResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimerTaskCompleteResponse::CopyFrom(const TimerTaskCompleteResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimerTaskCompleteResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TimerTaskCompleteResponse::Swap(TimerTaskCompleteResponse* other) {
  if (other != this) {
    std::swap(timertaskid_, other->timertaskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimerTaskCompleteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimerTaskCompleteResponse_descriptor_;
  metadata.reflection = TimerTaskCompleteResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimerTaskSpeedUpRequest::kTimerTaskIdFieldNumber;
const int TimerTaskSpeedUpRequest::kTypeFieldNumber;
const int TimerTaskSpeedUpRequest::kItemFieldNumber;
#endif  // !_MSC_VER

TimerTaskSpeedUpRequest::TimerTaskSpeedUpRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TimerTaskSpeedUpRequest::InitAsDefaultInstance() {
  item_ = const_cast< ::slg::protocol::ItemDTO*>(&::slg::protocol::ItemDTO::default_instance());
}

TimerTaskSpeedUpRequest::TimerTaskSpeedUpRequest(const TimerTaskSpeedUpRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TimerTaskSpeedUpRequest::SharedCtor() {
  _cached_size_ = 0;
  timertaskid_ = 0;
  type_ = 1;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimerTaskSpeedUpRequest::~TimerTaskSpeedUpRequest() {
  SharedDtor();
}

void TimerTaskSpeedUpRequest::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void TimerTaskSpeedUpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimerTaskSpeedUpRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimerTaskSpeedUpRequest_descriptor_;
}

const TimerTaskSpeedUpRequest& TimerTaskSpeedUpRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_timer_5ftask_2eproto();
  return *default_instance_;
}

TimerTaskSpeedUpRequest* TimerTaskSpeedUpRequest::default_instance_ = NULL;

TimerTaskSpeedUpRequest* TimerTaskSpeedUpRequest::New() const {
  return new TimerTaskSpeedUpRequest;
}

void TimerTaskSpeedUpRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timertaskid_ = 0;
    type_ = 1;
    if (has_item()) {
      if (item_ != NULL) item_->::slg::protocol::ItemDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimerTaskSpeedUpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 timerTaskId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timertaskid_)));
          set_has_timertaskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .slg.protocol.TimerTaskSpeedUpType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::slg::protocol::TimerTaskSpeedUpType_IsValid(value)) {
            set_type(static_cast< ::slg::protocol::TimerTaskSpeedUpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // optional .slg.protocol.ItemDTO item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimerTaskSpeedUpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 timerTaskId = 1;
  if (has_timertaskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timertaskid(), output);
  }

  // optional .slg.protocol.TimerTaskSpeedUpType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .slg.protocol.ItemDTO item = 3;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TimerTaskSpeedUpRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 timerTaskId = 1;
  if (has_timertaskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->timertaskid(), target);
  }

  // optional .slg.protocol.TimerTaskSpeedUpType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .slg.protocol.ItemDTO item = 3;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TimerTaskSpeedUpRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 timerTaskId = 1;
    if (has_timertaskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timertaskid());
    }

    // optional .slg.protocol.TimerTaskSpeedUpType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .slg.protocol.ItemDTO item = 3;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimerTaskSpeedUpRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimerTaskSpeedUpRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimerTaskSpeedUpRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimerTaskSpeedUpRequest::MergeFrom(const TimerTaskSpeedUpRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timertaskid()) {
      set_timertaskid(from.timertaskid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_item()) {
      mutable_item()->::slg::protocol::ItemDTO::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimerTaskSpeedUpRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimerTaskSpeedUpRequest::CopyFrom(const TimerTaskSpeedUpRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimerTaskSpeedUpRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  return true;
}

void TimerTaskSpeedUpRequest::Swap(TimerTaskSpeedUpRequest* other) {
  if (other != this) {
    std::swap(timertaskid_, other->timertaskid_);
    std::swap(type_, other->type_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimerTaskSpeedUpRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimerTaskSpeedUpRequest_descriptor_;
  metadata.reflection = TimerTaskSpeedUpRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimerTaskSpeedUpResponse::kTimerTaskIdFieldNumber;
const int TimerTaskSpeedUpResponse::kCostPropertiesFieldNumber;
const int TimerTaskSpeedUpResponse::kCostItemFieldNumber;
const int TimerTaskSpeedUpResponse::kTargetFieldNumber;
#endif  // !_MSC_VER

TimerTaskSpeedUpResponse::TimerTaskSpeedUpResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TimerTaskSpeedUpResponse::InitAsDefaultInstance() {
  costitem_ = const_cast< ::slg::protocol::ItemDTO*>(&::slg::protocol::ItemDTO::default_instance());
  target_ = const_cast< ::slg::protocol::TimerTaskTargetDTO*>(&::slg::protocol::TimerTaskTargetDTO::default_instance());
}

TimerTaskSpeedUpResponse::TimerTaskSpeedUpResponse(const TimerTaskSpeedUpResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TimerTaskSpeedUpResponse::SharedCtor() {
  _cached_size_ = 0;
  timertaskid_ = 0;
  costitem_ = NULL;
  target_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimerTaskSpeedUpResponse::~TimerTaskSpeedUpResponse() {
  SharedDtor();
}

void TimerTaskSpeedUpResponse::SharedDtor() {
  if (this != default_instance_) {
    delete costitem_;
    delete target_;
  }
}

void TimerTaskSpeedUpResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimerTaskSpeedUpResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimerTaskSpeedUpResponse_descriptor_;
}

const TimerTaskSpeedUpResponse& TimerTaskSpeedUpResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_timer_5ftask_2eproto();
  return *default_instance_;
}

TimerTaskSpeedUpResponse* TimerTaskSpeedUpResponse::default_instance_ = NULL;

TimerTaskSpeedUpResponse* TimerTaskSpeedUpResponse::New() const {
  return new TimerTaskSpeedUpResponse;
}

void TimerTaskSpeedUpResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timertaskid_ = 0;
    if (has_costitem()) {
      if (costitem_ != NULL) costitem_->::slg::protocol::ItemDTO::Clear();
    }
    if (has_target()) {
      if (target_ != NULL) target_->::slg::protocol::TimerTaskTargetDTO::Clear();
    }
  }
  costproperties_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimerTaskSpeedUpResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 timerTaskId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timertaskid_)));
          set_has_timertaskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_costProperties;
        break;
      }

      // repeated .slg.protocol.PropertyDTO costProperties = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_costProperties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_costproperties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_costProperties;
        if (input->ExpectTag(26)) goto parse_costItem;
        break;
      }

      // optional .slg.protocol.ItemDTO costItem = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_costItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_costitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_target;
        break;
      }

      // required .slg.protocol.TimerTaskTargetDTO target = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimerTaskSpeedUpResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 timerTaskId = 1;
  if (has_timertaskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timertaskid(), output);
  }

  // repeated .slg.protocol.PropertyDTO costProperties = 2;
  for (int i = 0; i < this->costproperties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->costproperties(i), output);
  }

  // optional .slg.protocol.ItemDTO costItem = 3;
  if (has_costitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->costitem(), output);
  }

  // required .slg.protocol.TimerTaskTargetDTO target = 4;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->target(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TimerTaskSpeedUpResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 timerTaskId = 1;
  if (has_timertaskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->timertaskid(), target);
  }

  // repeated .slg.protocol.PropertyDTO costProperties = 2;
  for (int i = 0; i < this->costproperties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->costproperties(i), target);
  }

  // optional .slg.protocol.ItemDTO costItem = 3;
  if (has_costitem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->costitem(), target);
  }

  // required .slg.protocol.TimerTaskTargetDTO target = 4;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->target(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TimerTaskSpeedUpResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 timerTaskId = 1;
    if (has_timertaskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timertaskid());
    }

    // optional .slg.protocol.ItemDTO costItem = 3;
    if (has_costitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->costitem());
    }

    // required .slg.protocol.TimerTaskTargetDTO target = 4;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }

  }
  // repeated .slg.protocol.PropertyDTO costProperties = 2;
  total_size += 1 * this->costproperties_size();
  for (int i = 0; i < this->costproperties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->costproperties(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimerTaskSpeedUpResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimerTaskSpeedUpResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimerTaskSpeedUpResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimerTaskSpeedUpResponse::MergeFrom(const TimerTaskSpeedUpResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  costproperties_.MergeFrom(from.costproperties_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timertaskid()) {
      set_timertaskid(from.timertaskid());
    }
    if (from.has_costitem()) {
      mutable_costitem()->::slg::protocol::ItemDTO::MergeFrom(from.costitem());
    }
    if (from.has_target()) {
      mutable_target()->::slg::protocol::TimerTaskTargetDTO::MergeFrom(from.target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimerTaskSpeedUpResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimerTaskSpeedUpResponse::CopyFrom(const TimerTaskSpeedUpResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimerTaskSpeedUpResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  for (int i = 0; i < costproperties_size(); i++) {
    if (!this->costproperties(i).IsInitialized()) return false;
  }
  if (has_costitem()) {
    if (!this->costitem().IsInitialized()) return false;
  }
  if (has_target()) {
    if (!this->target().IsInitialized()) return false;
  }
  return true;
}

void TimerTaskSpeedUpResponse::Swap(TimerTaskSpeedUpResponse* other) {
  if (other != this) {
    std::swap(timertaskid_, other->timertaskid_);
    costproperties_.Swap(&other->costproperties_);
    std::swap(costitem_, other->costitem_);
    std::swap(target_, other->target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimerTaskSpeedUpResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimerTaskSpeedUpResponse_descriptor_;
  metadata.reflection = TimerTaskSpeedUpResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimerTaskCancelRequest::kTimerTaskIdFieldNumber;
#endif  // !_MSC_VER

TimerTaskCancelRequest::TimerTaskCancelRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TimerTaskCancelRequest::InitAsDefaultInstance() {
}

TimerTaskCancelRequest::TimerTaskCancelRequest(const TimerTaskCancelRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TimerTaskCancelRequest::SharedCtor() {
  _cached_size_ = 0;
  timertaskid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimerTaskCancelRequest::~TimerTaskCancelRequest() {
  SharedDtor();
}

void TimerTaskCancelRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimerTaskCancelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimerTaskCancelRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimerTaskCancelRequest_descriptor_;
}

const TimerTaskCancelRequest& TimerTaskCancelRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_timer_5ftask_2eproto();
  return *default_instance_;
}

TimerTaskCancelRequest* TimerTaskCancelRequest::default_instance_ = NULL;

TimerTaskCancelRequest* TimerTaskCancelRequest::New() const {
  return new TimerTaskCancelRequest;
}

void TimerTaskCancelRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timertaskid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimerTaskCancelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 timerTaskId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timertaskid_)));
          set_has_timertaskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimerTaskCancelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 timerTaskId = 1;
  if (has_timertaskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timertaskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TimerTaskCancelRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 timerTaskId = 1;
  if (has_timertaskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->timertaskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TimerTaskCancelRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 timerTaskId = 1;
    if (has_timertaskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timertaskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimerTaskCancelRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimerTaskCancelRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimerTaskCancelRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimerTaskCancelRequest::MergeFrom(const TimerTaskCancelRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timertaskid()) {
      set_timertaskid(from.timertaskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimerTaskCancelRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimerTaskCancelRequest::CopyFrom(const TimerTaskCancelRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimerTaskCancelRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TimerTaskCancelRequest::Swap(TimerTaskCancelRequest* other) {
  if (other != this) {
    std::swap(timertaskid_, other->timertaskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimerTaskCancelRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimerTaskCancelRequest_descriptor_;
  metadata.reflection = TimerTaskCancelRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimerTaskCancelResponse::kTimerTaskIdFieldNumber;
const int TimerTaskCancelResponse::kTargetFieldNumber;
#endif  // !_MSC_VER

TimerTaskCancelResponse::TimerTaskCancelResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TimerTaskCancelResponse::InitAsDefaultInstance() {
  target_ = const_cast< ::slg::protocol::TimerTaskTargetDTO*>(&::slg::protocol::TimerTaskTargetDTO::default_instance());
}

TimerTaskCancelResponse::TimerTaskCancelResponse(const TimerTaskCancelResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TimerTaskCancelResponse::SharedCtor() {
  _cached_size_ = 0;
  timertaskid_ = 0;
  target_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimerTaskCancelResponse::~TimerTaskCancelResponse() {
  SharedDtor();
}

void TimerTaskCancelResponse::SharedDtor() {
  if (this != default_instance_) {
    delete target_;
  }
}

void TimerTaskCancelResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimerTaskCancelResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimerTaskCancelResponse_descriptor_;
}

const TimerTaskCancelResponse& TimerTaskCancelResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_timer_5ftask_2eproto();
  return *default_instance_;
}

TimerTaskCancelResponse* TimerTaskCancelResponse::default_instance_ = NULL;

TimerTaskCancelResponse* TimerTaskCancelResponse::New() const {
  return new TimerTaskCancelResponse;
}

void TimerTaskCancelResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timertaskid_ = 0;
    if (has_target()) {
      if (target_ != NULL) target_->::slg::protocol::TimerTaskTargetDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimerTaskCancelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 timerTaskId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timertaskid_)));
          set_has_timertaskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_target;
        break;
      }

      // required .slg.protocol.TimerTaskTargetDTO target = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimerTaskCancelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 timerTaskId = 1;
  if (has_timertaskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timertaskid(), output);
  }

  // required .slg.protocol.TimerTaskTargetDTO target = 2;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->target(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TimerTaskCancelResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 timerTaskId = 1;
  if (has_timertaskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->timertaskid(), target);
  }

  // required .slg.protocol.TimerTaskTargetDTO target = 2;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->target(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TimerTaskCancelResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 timerTaskId = 1;
    if (has_timertaskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timertaskid());
    }

    // required .slg.protocol.TimerTaskTargetDTO target = 2;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimerTaskCancelResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimerTaskCancelResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimerTaskCancelResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimerTaskCancelResponse::MergeFrom(const TimerTaskCancelResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timertaskid()) {
      set_timertaskid(from.timertaskid());
    }
    if (from.has_target()) {
      mutable_target()->::slg::protocol::TimerTaskTargetDTO::MergeFrom(from.target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimerTaskCancelResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimerTaskCancelResponse::CopyFrom(const TimerTaskCancelResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimerTaskCancelResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_target()) {
    if (!this->target().IsInitialized()) return false;
  }
  return true;
}

void TimerTaskCancelResponse::Swap(TimerTaskCancelResponse* other) {
  if (other != this) {
    std::swap(timertaskid_, other->timertaskid_);
    std::swap(target_, other->target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimerTaskCancelResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimerTaskCancelResponse_descriptor_;
  metadata.reflection = TimerTaskCancelResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimerTaskListPush::kTimerTasksFieldNumber;
#endif  // !_MSC_VER

TimerTaskListPush::TimerTaskListPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TimerTaskListPush::InitAsDefaultInstance() {
}

TimerTaskListPush::TimerTaskListPush(const TimerTaskListPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TimerTaskListPush::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimerTaskListPush::~TimerTaskListPush() {
  SharedDtor();
}

void TimerTaskListPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimerTaskListPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimerTaskListPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimerTaskListPush_descriptor_;
}

const TimerTaskListPush& TimerTaskListPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_timer_5ftask_2eproto();
  return *default_instance_;
}

TimerTaskListPush* TimerTaskListPush::default_instance_ = NULL;

TimerTaskListPush* TimerTaskListPush::New() const {
  return new TimerTaskListPush;
}

void TimerTaskListPush::Clear() {
  timertasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimerTaskListPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.TimerTaskDTO timerTasks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timerTasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_timertasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_timerTasks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimerTaskListPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.TimerTaskDTO timerTasks = 1;
  for (int i = 0; i < this->timertasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->timertasks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TimerTaskListPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.TimerTaskDTO timerTasks = 1;
  for (int i = 0; i < this->timertasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->timertasks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TimerTaskListPush::ByteSize() const {
  int total_size = 0;

  // repeated .slg.protocol.TimerTaskDTO timerTasks = 1;
  total_size += 1 * this->timertasks_size();
  for (int i = 0; i < this->timertasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->timertasks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimerTaskListPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimerTaskListPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimerTaskListPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimerTaskListPush::MergeFrom(const TimerTaskListPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  timertasks_.MergeFrom(from.timertasks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimerTaskListPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimerTaskListPush::CopyFrom(const TimerTaskListPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimerTaskListPush::IsInitialized() const {

  for (int i = 0; i < timertasks_size(); i++) {
    if (!this->timertasks(i).IsInitialized()) return false;
  }
  return true;
}

void TimerTaskListPush::Swap(TimerTaskListPush* other) {
  if (other != this) {
    timertasks_.Swap(&other->timertasks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimerTaskListPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimerTaskListPush_descriptor_;
  metadata.reflection = TimerTaskListPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimerTaskCompletePush::kTimerTaskIdFieldNumber;
const int TimerTaskCompletePush::kTargetFieldNumber;
#endif  // !_MSC_VER

TimerTaskCompletePush::TimerTaskCompletePush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TimerTaskCompletePush::InitAsDefaultInstance() {
  target_ = const_cast< ::slg::protocol::TimerTaskTargetDTO*>(&::slg::protocol::TimerTaskTargetDTO::default_instance());
}

TimerTaskCompletePush::TimerTaskCompletePush(const TimerTaskCompletePush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TimerTaskCompletePush::SharedCtor() {
  _cached_size_ = 0;
  timertaskid_ = 0;
  target_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimerTaskCompletePush::~TimerTaskCompletePush() {
  SharedDtor();
}

void TimerTaskCompletePush::SharedDtor() {
  if (this != default_instance_) {
    delete target_;
  }
}

void TimerTaskCompletePush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimerTaskCompletePush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimerTaskCompletePush_descriptor_;
}

const TimerTaskCompletePush& TimerTaskCompletePush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_timer_5ftask_2eproto();
  return *default_instance_;
}

TimerTaskCompletePush* TimerTaskCompletePush::default_instance_ = NULL;

TimerTaskCompletePush* TimerTaskCompletePush::New() const {
  return new TimerTaskCompletePush;
}

void TimerTaskCompletePush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timertaskid_ = 0;
    if (has_target()) {
      if (target_ != NULL) target_->::slg::protocol::TimerTaskTargetDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimerTaskCompletePush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 timerTaskId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timertaskid_)));
          set_has_timertaskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_target;
        break;
      }

      // required .slg.protocol.TimerTaskTargetDTO target = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimerTaskCompletePush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 timerTaskId = 1;
  if (has_timertaskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timertaskid(), output);
  }

  // required .slg.protocol.TimerTaskTargetDTO target = 2;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->target(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TimerTaskCompletePush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 timerTaskId = 1;
  if (has_timertaskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->timertaskid(), target);
  }

  // required .slg.protocol.TimerTaskTargetDTO target = 2;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->target(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TimerTaskCompletePush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 timerTaskId = 1;
    if (has_timertaskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timertaskid());
    }

    // required .slg.protocol.TimerTaskTargetDTO target = 2;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimerTaskCompletePush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimerTaskCompletePush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimerTaskCompletePush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimerTaskCompletePush::MergeFrom(const TimerTaskCompletePush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timertaskid()) {
      set_timertaskid(from.timertaskid());
    }
    if (from.has_target()) {
      mutable_target()->::slg::protocol::TimerTaskTargetDTO::MergeFrom(from.target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimerTaskCompletePush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimerTaskCompletePush::CopyFrom(const TimerTaskCompletePush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimerTaskCompletePush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_target()) {
    if (!this->target().IsInitialized()) return false;
  }
  return true;
}

void TimerTaskCompletePush::Swap(TimerTaskCompletePush* other) {
  if (other != this) {
    std::swap(timertaskid_, other->timertaskid_);
    std::swap(target_, other->target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimerTaskCompletePush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimerTaskCompletePush_descriptor_;
  metadata.reflection = TimerTaskCompletePush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimerTaskAdjustPush::kTimerTaskIdFieldNumber;
const int TimerTaskAdjustPush::kSystimeFieldNumber;
#endif  // !_MSC_VER

TimerTaskAdjustPush::TimerTaskAdjustPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TimerTaskAdjustPush::InitAsDefaultInstance() {
}

TimerTaskAdjustPush::TimerTaskAdjustPush(const TimerTaskAdjustPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TimerTaskAdjustPush::SharedCtor() {
  _cached_size_ = 0;
  timertaskid_ = 0;
  systime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimerTaskAdjustPush::~TimerTaskAdjustPush() {
  SharedDtor();
}

void TimerTaskAdjustPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimerTaskAdjustPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimerTaskAdjustPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimerTaskAdjustPush_descriptor_;
}

const TimerTaskAdjustPush& TimerTaskAdjustPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_timer_5ftask_2eproto();
  return *default_instance_;
}

TimerTaskAdjustPush* TimerTaskAdjustPush::default_instance_ = NULL;

TimerTaskAdjustPush* TimerTaskAdjustPush::New() const {
  return new TimerTaskAdjustPush;
}

void TimerTaskAdjustPush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timertaskid_ = 0;
    systime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimerTaskAdjustPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 timerTaskId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timertaskid_)));
          set_has_timertaskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_systime;
        break;
      }

      // required int32 systime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_systime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &systime_)));
          set_has_systime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimerTaskAdjustPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 timerTaskId = 1;
  if (has_timertaskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timertaskid(), output);
  }

  // required int32 systime = 2;
  if (has_systime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->systime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TimerTaskAdjustPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 timerTaskId = 1;
  if (has_timertaskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->timertaskid(), target);
  }

  // required int32 systime = 2;
  if (has_systime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->systime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TimerTaskAdjustPush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 timerTaskId = 1;
    if (has_timertaskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timertaskid());
    }

    // required int32 systime = 2;
    if (has_systime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->systime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimerTaskAdjustPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimerTaskAdjustPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimerTaskAdjustPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimerTaskAdjustPush::MergeFrom(const TimerTaskAdjustPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timertaskid()) {
      set_timertaskid(from.timertaskid());
    }
    if (from.has_systime()) {
      set_systime(from.systime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimerTaskAdjustPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimerTaskAdjustPush::CopyFrom(const TimerTaskAdjustPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimerTaskAdjustPush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TimerTaskAdjustPush::Swap(TimerTaskAdjustPush* other) {
  if (other != this) {
    std::swap(timertaskid_, other->timertaskid_);
    std::swap(systime_, other->systime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimerTaskAdjustPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimerTaskAdjustPush_descriptor_;
  metadata.reflection = TimerTaskAdjustPush_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace slg

// @@protoc_insertion_point(global_scope)
