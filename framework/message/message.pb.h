// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_message_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsCSocketInfoImpl();
void InitDefaultsCSocketInfo();
void InitDefaultsCMesHeadImpl();
void InitDefaultsCMesHead();
void InitDefaultsCMessageImpl();
void InitDefaultsCMessage();
void InitDefaultsCProxyHeadImpl();
void InitDefaultsCProxyHead();
void InitDefaultsCProxyMessageImpl();
void InitDefaultsCProxyMessage();
inline void InitDefaults() {
  InitDefaultsCSocketInfo();
  InitDefaultsCMesHead();
  InitDefaultsCMessage();
  InitDefaultsCProxyHead();
  InitDefaultsCProxyMessage();
}
}  // namespace protobuf_message_2eproto
class CMesHead;
class CMesHeadDefaultTypeInternal;
extern CMesHeadDefaultTypeInternal _CMesHead_default_instance_;
class CMessage;
class CMessageDefaultTypeInternal;
extern CMessageDefaultTypeInternal _CMessage_default_instance_;
class CProxyHead;
class CProxyHeadDefaultTypeInternal;
extern CProxyHeadDefaultTypeInternal _CProxyHead_default_instance_;
class CProxyMessage;
class CProxyMessageDefaultTypeInternal;
extern CProxyMessageDefaultTypeInternal _CProxyMessage_default_instance_;
class CSocketInfo;
class CSocketInfoDefaultTypeInternal;
extern CSocketInfoDefaultTypeInternal _CSocketInfo_default_instance_;

enum enServerType {
  FE_TIMER = 0,
  FE_CLIENT = 1,
  FE_GAMESERVER = 2,
  FE_LOGINSERVER = 3,
  FE_DBSERVER = 4,
  FE_PROXYSERVER = 5,
  FE_WORLDSERVER = 6,
  FE_WEBSERVER = 7,
  FE_OFFLINESERVER = 8,
  FE_CHECKSERVER = 9,
  FE_HALLSERVER = 10,
  FE_GATESERVER = 11,
  FE_ROOMSERVER = 12
};
bool enServerType_IsValid(int value);
const enServerType enServerType_MIN = FE_TIMER;
const enServerType enServerType_MAX = FE_ROOMSERVER;
const int enServerType_ARRAYSIZE = enServerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* enServerType_descriptor();
inline const ::std::string& enServerType_Name(enServerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    enServerType_descriptor(), value);
}
inline bool enServerType_Parse(
    const ::std::string& name, enServerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<enServerType>(
    enServerType_descriptor(), name, value);
}
enum enMessageCmd {
  MESS_NULL = 0,
  MESS_REGIST = 1,
  MESS_KEEPALIVE = 2,
  MESS_LOGIC = 3
};
bool enMessageCmd_IsValid(int value);
const enMessageCmd enMessageCmd_MIN = MESS_NULL;
const enMessageCmd enMessageCmd_MAX = MESS_LOGIC;
const int enMessageCmd_ARRAYSIZE = enMessageCmd_MAX + 1;

const ::google::protobuf::EnumDescriptor* enMessageCmd_descriptor();
inline const ::std::string& enMessageCmd_Name(enMessageCmd value) {
  return ::google::protobuf::internal::NameOfEnum(
    enMessageCmd_descriptor(), value);
}
inline bool enMessageCmd_Parse(
    const ::std::string& name, enMessageCmd* value) {
  return ::google::protobuf::internal::ParseNamedEnum<enMessageCmd>(
    enMessageCmd_descriptor(), name, value);
}
// ===================================================================

class CSocketInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CSocketInfo) */ {
 public:
  CSocketInfo();
  virtual ~CSocketInfo();

  CSocketInfo(const CSocketInfo& from);

  inline CSocketInfo& operator=(const CSocketInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSocketInfo(CSocketInfo&& from) noexcept
    : CSocketInfo() {
    *this = ::std::move(from);
  }

  inline CSocketInfo& operator=(CSocketInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSocketInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSocketInfo* internal_default_instance() {
    return reinterpret_cast<const CSocketInfo*>(
               &_CSocketInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CSocketInfo* other);
  friend void swap(CSocketInfo& a, CSocketInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSocketInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CSocketInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CSocketInfo& from);
  void MergeFrom(const CSocketInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CSocketInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 createTime = 2;
  bool has_createtime() const;
  void clear_createtime();
  static const int kCreateTimeFieldNumber = 2;
  ::google::protobuf::int64 createtime() const;
  void set_createtime(::google::protobuf::int64 value);

  // optional int32 socketID = 1;
  bool has_socketid() const;
  void clear_socketid();
  static const int kSocketIDFieldNumber = 1;
  ::google::protobuf::int32 socketid() const;
  void set_socketid(::google::protobuf::int32 value);

  // optional int32 state = 3;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CSocketInfo)
 private:
  void set_has_socketid();
  void clear_has_socketid();
  void set_has_createtime();
  void clear_has_createtime();
  void set_has_state();
  void clear_has_state();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int32 socketid_;
  ::google::protobuf::int32 state_;
  friend struct ::protobuf_message_2eproto::TableStruct;
  friend void ::protobuf_message_2eproto::InitDefaultsCSocketInfoImpl();
};
// -------------------------------------------------------------------

class CMesHead : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMesHead) */ {
 public:
  CMesHead();
  virtual ~CMesHead();

  CMesHead(const CMesHead& from);

  inline CMesHead& operator=(const CMesHead& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMesHead(CMesHead&& from) noexcept
    : CMesHead() {
    *this = ::std::move(from);
  }

  inline CMesHead& operator=(CMesHead&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMesHead& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMesHead* internal_default_instance() {
    return reinterpret_cast<const CMesHead*>(
               &_CMesHead_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CMesHead* other);
  friend void swap(CMesHead& a, CMesHead& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMesHead* New() const PROTOBUF_FINAL { return New(NULL); }

  CMesHead* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMesHead& from);
  void MergeFrom(const CMesHead& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMesHead* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CSocketInfo socketInfos = 2;
  int socketinfos_size() const;
  void clear_socketinfos();
  static const int kSocketInfosFieldNumber = 2;
  const ::CSocketInfo& socketinfos(int index) const;
  ::CSocketInfo* mutable_socketinfos(int index);
  ::CSocketInfo* add_socketinfos();
  ::google::protobuf::RepeatedPtrField< ::CSocketInfo >*
      mutable_socketinfos();
  const ::google::protobuf::RepeatedPtrField< ::CSocketInfo >&
      socketinfos() const;

  // required .enMessageCmd opFlag = 1 [default = MESS_NULL];
  bool has_opflag() const;
  void clear_opflag();
  static const int kOpFlagFieldNumber = 1;
  ::enMessageCmd opflag() const;
  void set_opflag(::enMessageCmd value);

  // optional int32 cmd = 3;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 3;
  ::google::protobuf::int32 cmd() const;
  void set_cmd(::google::protobuf::int32 value);

  // optional int32 serial = 4;
  bool has_serial() const;
  void clear_serial();
  static const int kSerialFieldNumber = 4;
  ::google::protobuf::int32 serial() const;
  void set_serial(::google::protobuf::int32 value);

  // optional int32 seq = 5;
  bool has_seq() const;
  void clear_seq();
  static const int kSeqFieldNumber = 5;
  ::google::protobuf::int32 seq() const;
  void set_seq(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMesHead)
 private:
  void set_has_opflag();
  void clear_has_opflag();
  void set_has_cmd();
  void clear_has_cmd();
  void set_has_serial();
  void clear_has_serial();
  void set_has_seq();
  void clear_has_seq();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CSocketInfo > socketinfos_;
  int opflag_;
  ::google::protobuf::int32 cmd_;
  ::google::protobuf::int32 serial_;
  ::google::protobuf::int32 seq_;
  friend struct ::protobuf_message_2eproto::TableStruct;
  friend void ::protobuf_message_2eproto::InitDefaultsCMesHeadImpl();
};
// -------------------------------------------------------------------

class CMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMessage) */ {
 public:
  CMessage();
  virtual ~CMessage();

  CMessage(const CMessage& from);

  inline CMessage& operator=(const CMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMessage(CMessage&& from) noexcept
    : CMessage() {
    *this = ::std::move(from);
  }

  inline CMessage& operator=(CMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMessage* internal_default_instance() {
    return reinterpret_cast<const CMessage*>(
               &_CMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(CMessage* other);
  friend void swap(CMessage& a, CMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  CMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMessage& from);
  void MergeFrom(const CMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .CMesHead msgHead = 1;
  bool has_msghead() const;
  void clear_msghead();
  static const int kMsgHeadFieldNumber = 1;
  const ::CMesHead& msghead() const;
  ::CMesHead* release_msghead();
  ::CMesHead* mutable_msghead();
  void set_allocated_msghead(::CMesHead* msghead);

  // required fixed64 msgPara = 2 [default = 0];
  bool has_msgpara() const;
  void clear_msgpara();
  static const int kMsgParaFieldNumber = 2;
  ::google::protobuf::uint64 msgpara() const;
  void set_msgpara(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMessage)
 private:
  void set_has_msghead();
  void clear_has_msghead();
  void set_has_msgpara();
  void clear_has_msgpara();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::CMesHead* msghead_;
  ::google::protobuf::uint64 msgpara_;
  friend struct ::protobuf_message_2eproto::TableStruct;
  friend void ::protobuf_message_2eproto::InitDefaultsCMessageImpl();
};
// -------------------------------------------------------------------

class CProxyHead : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CProxyHead) */ {
 public:
  CProxyHead();
  virtual ~CProxyHead();

  CProxyHead(const CProxyHead& from);

  inline CProxyHead& operator=(const CProxyHead& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CProxyHead(CProxyHead&& from) noexcept
    : CProxyHead() {
    *this = ::std::move(from);
  }

  inline CProxyHead& operator=(CProxyHead&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProxyHead& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CProxyHead* internal_default_instance() {
    return reinterpret_cast<const CProxyHead*>(
               &_CProxyHead_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(CProxyHead* other);
  friend void swap(CProxyHead& a, CProxyHead& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CProxyHead* New() const PROTOBUF_FINAL { return New(NULL); }

  CProxyHead* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CProxyHead& from);
  void MergeFrom(const CProxyHead& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CProxyHead* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMesHead msgHead = 8;
  bool has_msghead() const;
  void clear_msghead();
  static const int kMsgHeadFieldNumber = 8;
  const ::CMesHead& msghead() const;
  ::CMesHead* release_msghead();
  ::CMesHead* mutable_msghead();
  void set_allocated_msghead(::CMesHead* msghead);

  // required uint32 srcFE = 1;
  bool has_srcfe() const;
  void clear_srcfe();
  static const int kSrcFEFieldNumber = 1;
  ::google::protobuf::uint32 srcfe() const;
  void set_srcfe(::google::protobuf::uint32 value);

  // required uint32 srcID = 2;
  bool has_srcid() const;
  void clear_srcid();
  static const int kSrcIDFieldNumber = 2;
  ::google::protobuf::uint32 srcid() const;
  void set_srcid(::google::protobuf::uint32 value);

  // required uint32 dstFE = 3;
  bool has_dstfe() const;
  void clear_dstfe();
  static const int kDstFEFieldNumber = 3;
  ::google::protobuf::uint32 dstfe() const;
  void set_dstfe(::google::protobuf::uint32 value);

  // required uint32 dstID = 4;
  bool has_dstid() const;
  void clear_dstid();
  static const int kDstIDFieldNumber = 4;
  ::google::protobuf::uint32 dstid() const;
  void set_dstid(::google::protobuf::uint32 value);

  // required uint64 timeStamp = 5;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimeStampFieldNumber = 5;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // optional .enMessageCmd opFlag = 6 [default = MESS_NULL];
  bool has_opflag() const;
  void clear_opflag();
  static const int kOpFlagFieldNumber = 6;
  ::enMessageCmd opflag() const;
  void set_opflag(::enMessageCmd value);

  // optional uint32 messageId = 7;
  bool has_messageid() const;
  void clear_messageid();
  static const int kMessageIdFieldNumber = 7;
  ::google::protobuf::uint32 messageid() const;
  void set_messageid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CProxyHead)
 private:
  void set_has_srcfe();
  void clear_has_srcfe();
  void set_has_srcid();
  void clear_has_srcid();
  void set_has_dstfe();
  void clear_has_dstfe();
  void set_has_dstid();
  void clear_has_dstid();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_opflag();
  void clear_has_opflag();
  void set_has_messageid();
  void clear_has_messageid();
  void set_has_msghead();
  void clear_has_msghead();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::CMesHead* msghead_;
  ::google::protobuf::uint32 srcfe_;
  ::google::protobuf::uint32 srcid_;
  ::google::protobuf::uint32 dstfe_;
  ::google::protobuf::uint32 dstid_;
  ::google::protobuf::uint64 timestamp_;
  int opflag_;
  ::google::protobuf::uint32 messageid_;
  friend struct ::protobuf_message_2eproto::TableStruct;
  friend void ::protobuf_message_2eproto::InitDefaultsCProxyHeadImpl();
};
// -------------------------------------------------------------------

class CProxyMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CProxyMessage) */ {
 public:
  CProxyMessage();
  virtual ~CProxyMessage();

  CProxyMessage(const CProxyMessage& from);

  inline CProxyMessage& operator=(const CProxyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CProxyMessage(CProxyMessage&& from) noexcept
    : CProxyMessage() {
    *this = ::std::move(from);
  }

  inline CProxyMessage& operator=(CProxyMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProxyMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CProxyMessage* internal_default_instance() {
    return reinterpret_cast<const CProxyMessage*>(
               &_CProxyMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(CProxyMessage* other);
  friend void swap(CProxyMessage& a, CProxyMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CProxyMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  CProxyMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CProxyMessage& from);
  void MergeFrom(const CProxyMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CProxyMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .CProxyHead msgHead = 1;
  bool has_msghead() const;
  void clear_msghead();
  static const int kMsgHeadFieldNumber = 1;
  const ::CProxyHead& msghead() const;
  ::CProxyHead* release_msghead();
  ::CProxyHead* mutable_msghead();
  void set_allocated_msghead(::CProxyHead* msghead);

  // optional fixed64 msgPara = 2 [default = 0];
  bool has_msgpara() const;
  void clear_msgpara();
  static const int kMsgParaFieldNumber = 2;
  ::google::protobuf::uint64 msgpara() const;
  void set_msgpara(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CProxyMessage)
 private:
  void set_has_msghead();
  void clear_has_msghead();
  void set_has_msgpara();
  void clear_has_msgpara();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::CProxyHead* msghead_;
  ::google::protobuf::uint64 msgpara_;
  friend struct ::protobuf_message_2eproto::TableStruct;
  friend void ::protobuf_message_2eproto::InitDefaultsCProxyMessageImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSocketInfo

// optional int32 socketID = 1;
inline bool CSocketInfo::has_socketid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSocketInfo::set_has_socketid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSocketInfo::clear_has_socketid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSocketInfo::clear_socketid() {
  socketid_ = 0;
  clear_has_socketid();
}
inline ::google::protobuf::int32 CSocketInfo::socketid() const {
  // @@protoc_insertion_point(field_get:CSocketInfo.socketID)
  return socketid_;
}
inline void CSocketInfo::set_socketid(::google::protobuf::int32 value) {
  set_has_socketid();
  socketid_ = value;
  // @@protoc_insertion_point(field_set:CSocketInfo.socketID)
}

// optional int64 createTime = 2;
inline bool CSocketInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSocketInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSocketInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSocketInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 CSocketInfo::createtime() const {
  // @@protoc_insertion_point(field_get:CSocketInfo.createTime)
  return createtime_;
}
inline void CSocketInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:CSocketInfo.createTime)
}

// optional int32 state = 3;
inline bool CSocketInfo::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSocketInfo::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSocketInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSocketInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 CSocketInfo::state() const {
  // @@protoc_insertion_point(field_get:CSocketInfo.state)
  return state_;
}
inline void CSocketInfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:CSocketInfo.state)
}

// -------------------------------------------------------------------

// CMesHead

// required .enMessageCmd opFlag = 1 [default = MESS_NULL];
inline bool CMesHead::has_opflag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMesHead::set_has_opflag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMesHead::clear_has_opflag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMesHead::clear_opflag() {
  opflag_ = 0;
  clear_has_opflag();
}
inline ::enMessageCmd CMesHead::opflag() const {
  // @@protoc_insertion_point(field_get:CMesHead.opFlag)
  return static_cast< ::enMessageCmd >(opflag_);
}
inline void CMesHead::set_opflag(::enMessageCmd value) {
  assert(::enMessageCmd_IsValid(value));
  set_has_opflag();
  opflag_ = value;
  // @@protoc_insertion_point(field_set:CMesHead.opFlag)
}

// repeated .CSocketInfo socketInfos = 2;
inline int CMesHead::socketinfos_size() const {
  return socketinfos_.size();
}
inline void CMesHead::clear_socketinfos() {
  socketinfos_.Clear();
}
inline const ::CSocketInfo& CMesHead::socketinfos(int index) const {
  // @@protoc_insertion_point(field_get:CMesHead.socketInfos)
  return socketinfos_.Get(index);
}
inline ::CSocketInfo* CMesHead::mutable_socketinfos(int index) {
  // @@protoc_insertion_point(field_mutable:CMesHead.socketInfos)
  return socketinfos_.Mutable(index);
}
inline ::CSocketInfo* CMesHead::add_socketinfos() {
  // @@protoc_insertion_point(field_add:CMesHead.socketInfos)
  return socketinfos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CSocketInfo >*
CMesHead::mutable_socketinfos() {
  // @@protoc_insertion_point(field_mutable_list:CMesHead.socketInfos)
  return &socketinfos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CSocketInfo >&
CMesHead::socketinfos() const {
  // @@protoc_insertion_point(field_list:CMesHead.socketInfos)
  return socketinfos_;
}

// optional int32 cmd = 3;
inline bool CMesHead::has_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMesHead::set_has_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMesHead::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMesHead::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::google::protobuf::int32 CMesHead::cmd() const {
  // @@protoc_insertion_point(field_get:CMesHead.cmd)
  return cmd_;
}
inline void CMesHead::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:CMesHead.cmd)
}

// optional int32 serial = 4;
inline bool CMesHead::has_serial() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMesHead::set_has_serial() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMesHead::clear_has_serial() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMesHead::clear_serial() {
  serial_ = 0;
  clear_has_serial();
}
inline ::google::protobuf::int32 CMesHead::serial() const {
  // @@protoc_insertion_point(field_get:CMesHead.serial)
  return serial_;
}
inline void CMesHead::set_serial(::google::protobuf::int32 value) {
  set_has_serial();
  serial_ = value;
  // @@protoc_insertion_point(field_set:CMesHead.serial)
}

// optional int32 seq = 5;
inline bool CMesHead::has_seq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMesHead::set_has_seq() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMesHead::clear_has_seq() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMesHead::clear_seq() {
  seq_ = 0;
  clear_has_seq();
}
inline ::google::protobuf::int32 CMesHead::seq() const {
  // @@protoc_insertion_point(field_get:CMesHead.seq)
  return seq_;
}
inline void CMesHead::set_seq(::google::protobuf::int32 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:CMesHead.seq)
}

// -------------------------------------------------------------------

// CMessage

// required .CMesHead msgHead = 1;
inline bool CMessage::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMessage::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMessage::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMessage::clear_msghead() {
  if (msghead_ != NULL) msghead_->Clear();
  clear_has_msghead();
}
inline const ::CMesHead& CMessage::msghead() const {
  const ::CMesHead* p = msghead_;
  // @@protoc_insertion_point(field_get:CMessage.msgHead)
  return p != NULL ? *p : *reinterpret_cast<const ::CMesHead*>(
      &::_CMesHead_default_instance_);
}
inline ::CMesHead* CMessage::release_msghead() {
  // @@protoc_insertion_point(field_release:CMessage.msgHead)
  clear_has_msghead();
  ::CMesHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
inline ::CMesHead* CMessage::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::CMesHead;
  }
  // @@protoc_insertion_point(field_mutable:CMessage.msgHead)
  return msghead_;
}
inline void CMessage::set_allocated_msghead(::CMesHead* msghead) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete msghead_;
  }
  if (msghead) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      msghead = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, msghead, submessage_arena);
    }
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  msghead_ = msghead;
  // @@protoc_insertion_point(field_set_allocated:CMessage.msgHead)
}

// required fixed64 msgPara = 2 [default = 0];
inline bool CMessage::has_msgpara() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMessage::set_has_msgpara() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMessage::clear_has_msgpara() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMessage::clear_msgpara() {
  msgpara_ = GOOGLE_ULONGLONG(0);
  clear_has_msgpara();
}
inline ::google::protobuf::uint64 CMessage::msgpara() const {
  // @@protoc_insertion_point(field_get:CMessage.msgPara)
  return msgpara_;
}
inline void CMessage::set_msgpara(::google::protobuf::uint64 value) {
  set_has_msgpara();
  msgpara_ = value;
  // @@protoc_insertion_point(field_set:CMessage.msgPara)
}

// -------------------------------------------------------------------

// CProxyHead

// required uint32 srcFE = 1;
inline bool CProxyHead::has_srcfe() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProxyHead::set_has_srcfe() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProxyHead::clear_has_srcfe() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProxyHead::clear_srcfe() {
  srcfe_ = 0u;
  clear_has_srcfe();
}
inline ::google::protobuf::uint32 CProxyHead::srcfe() const {
  // @@protoc_insertion_point(field_get:CProxyHead.srcFE)
  return srcfe_;
}
inline void CProxyHead::set_srcfe(::google::protobuf::uint32 value) {
  set_has_srcfe();
  srcfe_ = value;
  // @@protoc_insertion_point(field_set:CProxyHead.srcFE)
}

// required uint32 srcID = 2;
inline bool CProxyHead::has_srcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CProxyHead::set_has_srcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CProxyHead::clear_has_srcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CProxyHead::clear_srcid() {
  srcid_ = 0u;
  clear_has_srcid();
}
inline ::google::protobuf::uint32 CProxyHead::srcid() const {
  // @@protoc_insertion_point(field_get:CProxyHead.srcID)
  return srcid_;
}
inline void CProxyHead::set_srcid(::google::protobuf::uint32 value) {
  set_has_srcid();
  srcid_ = value;
  // @@protoc_insertion_point(field_set:CProxyHead.srcID)
}

// required uint32 dstFE = 3;
inline bool CProxyHead::has_dstfe() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CProxyHead::set_has_dstfe() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CProxyHead::clear_has_dstfe() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CProxyHead::clear_dstfe() {
  dstfe_ = 0u;
  clear_has_dstfe();
}
inline ::google::protobuf::uint32 CProxyHead::dstfe() const {
  // @@protoc_insertion_point(field_get:CProxyHead.dstFE)
  return dstfe_;
}
inline void CProxyHead::set_dstfe(::google::protobuf::uint32 value) {
  set_has_dstfe();
  dstfe_ = value;
  // @@protoc_insertion_point(field_set:CProxyHead.dstFE)
}

// required uint32 dstID = 4;
inline bool CProxyHead::has_dstid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CProxyHead::set_has_dstid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CProxyHead::clear_has_dstid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CProxyHead::clear_dstid() {
  dstid_ = 0u;
  clear_has_dstid();
}
inline ::google::protobuf::uint32 CProxyHead::dstid() const {
  // @@protoc_insertion_point(field_get:CProxyHead.dstID)
  return dstid_;
}
inline void CProxyHead::set_dstid(::google::protobuf::uint32 value) {
  set_has_dstid();
  dstid_ = value;
  // @@protoc_insertion_point(field_set:CProxyHead.dstID)
}

// required uint64 timeStamp = 5;
inline bool CProxyHead::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CProxyHead::set_has_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CProxyHead::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CProxyHead::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 CProxyHead::timestamp() const {
  // @@protoc_insertion_point(field_get:CProxyHead.timeStamp)
  return timestamp_;
}
inline void CProxyHead::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:CProxyHead.timeStamp)
}

// optional .enMessageCmd opFlag = 6 [default = MESS_NULL];
inline bool CProxyHead::has_opflag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CProxyHead::set_has_opflag() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CProxyHead::clear_has_opflag() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CProxyHead::clear_opflag() {
  opflag_ = 0;
  clear_has_opflag();
}
inline ::enMessageCmd CProxyHead::opflag() const {
  // @@protoc_insertion_point(field_get:CProxyHead.opFlag)
  return static_cast< ::enMessageCmd >(opflag_);
}
inline void CProxyHead::set_opflag(::enMessageCmd value) {
  assert(::enMessageCmd_IsValid(value));
  set_has_opflag();
  opflag_ = value;
  // @@protoc_insertion_point(field_set:CProxyHead.opFlag)
}

// optional uint32 messageId = 7;
inline bool CProxyHead::has_messageid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CProxyHead::set_has_messageid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CProxyHead::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CProxyHead::clear_messageid() {
  messageid_ = 0u;
  clear_has_messageid();
}
inline ::google::protobuf::uint32 CProxyHead::messageid() const {
  // @@protoc_insertion_point(field_get:CProxyHead.messageId)
  return messageid_;
}
inline void CProxyHead::set_messageid(::google::protobuf::uint32 value) {
  set_has_messageid();
  messageid_ = value;
  // @@protoc_insertion_point(field_set:CProxyHead.messageId)
}

// optional .CMesHead msgHead = 8;
inline bool CProxyHead::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProxyHead::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProxyHead::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProxyHead::clear_msghead() {
  if (msghead_ != NULL) msghead_->Clear();
  clear_has_msghead();
}
inline const ::CMesHead& CProxyHead::msghead() const {
  const ::CMesHead* p = msghead_;
  // @@protoc_insertion_point(field_get:CProxyHead.msgHead)
  return p != NULL ? *p : *reinterpret_cast<const ::CMesHead*>(
      &::_CMesHead_default_instance_);
}
inline ::CMesHead* CProxyHead::release_msghead() {
  // @@protoc_insertion_point(field_release:CProxyHead.msgHead)
  clear_has_msghead();
  ::CMesHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
inline ::CMesHead* CProxyHead::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::CMesHead;
  }
  // @@protoc_insertion_point(field_mutable:CProxyHead.msgHead)
  return msghead_;
}
inline void CProxyHead::set_allocated_msghead(::CMesHead* msghead) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete msghead_;
  }
  if (msghead) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      msghead = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, msghead, submessage_arena);
    }
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  msghead_ = msghead;
  // @@protoc_insertion_point(field_set_allocated:CProxyHead.msgHead)
}

// -------------------------------------------------------------------

// CProxyMessage

// required .CProxyHead msgHead = 1;
inline bool CProxyMessage::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProxyMessage::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProxyMessage::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProxyMessage::clear_msghead() {
  if (msghead_ != NULL) msghead_->Clear();
  clear_has_msghead();
}
inline const ::CProxyHead& CProxyMessage::msghead() const {
  const ::CProxyHead* p = msghead_;
  // @@protoc_insertion_point(field_get:CProxyMessage.msgHead)
  return p != NULL ? *p : *reinterpret_cast<const ::CProxyHead*>(
      &::_CProxyHead_default_instance_);
}
inline ::CProxyHead* CProxyMessage::release_msghead() {
  // @@protoc_insertion_point(field_release:CProxyMessage.msgHead)
  clear_has_msghead();
  ::CProxyHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
inline ::CProxyHead* CProxyMessage::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::CProxyHead;
  }
  // @@protoc_insertion_point(field_mutable:CProxyMessage.msgHead)
  return msghead_;
}
inline void CProxyMessage::set_allocated_msghead(::CProxyHead* msghead) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete msghead_;
  }
  if (msghead) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      msghead = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, msghead, submessage_arena);
    }
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  msghead_ = msghead;
  // @@protoc_insertion_point(field_set_allocated:CProxyMessage.msgHead)
}

// optional fixed64 msgPara = 2 [default = 0];
inline bool CProxyMessage::has_msgpara() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProxyMessage::set_has_msgpara() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProxyMessage::clear_has_msgpara() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProxyMessage::clear_msgpara() {
  msgpara_ = GOOGLE_ULONGLONG(0);
  clear_has_msgpara();
}
inline ::google::protobuf::uint64 CProxyMessage::msgpara() const {
  // @@protoc_insertion_point(field_get:CProxyMessage.msgPara)
  return msgpara_;
}
inline void CProxyMessage::set_msgpara(::google::protobuf::uint64 value) {
  set_has_msgpara();
  msgpara_ = value;
  // @@protoc_insertion_point(field_set:CProxyMessage.msgPara)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::enServerType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::enServerType>() {
  return ::enServerType_descriptor();
}
template <> struct is_proto_enum< ::enMessageCmd> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::enMessageCmd>() {
  return ::enMessageCmd_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
