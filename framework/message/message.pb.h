// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_message_2eproto();
void protobuf_AssignDesc_message_2eproto();
void protobuf_ShutdownFile_message_2eproto();

class CSocketInfo;
class CTcpHead;
class CMessage;
class CMessageSet;
class CMsgPingRequest;

enum CMsgPingRequest_Msg {
  CMsgPingRequest_Msg_MsgID = 16777215
};
bool CMsgPingRequest_Msg_IsValid(int value);
const CMsgPingRequest_Msg CMsgPingRequest_Msg_Msg_MIN = CMsgPingRequest_Msg_MsgID;
const CMsgPingRequest_Msg CMsgPingRequest_Msg_Msg_MAX = CMsgPingRequest_Msg_MsgID;
const int CMsgPingRequest_Msg_Msg_ARRAYSIZE = CMsgPingRequest_Msg_Msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgPingRequest_Msg_descriptor();
inline const ::std::string& CMsgPingRequest_Msg_Name(CMsgPingRequest_Msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgPingRequest_Msg_descriptor(), value);
}
inline bool CMsgPingRequest_Msg_Parse(
    const ::std::string& name, CMsgPingRequest_Msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgPingRequest_Msg>(
    CMsgPingRequest_Msg_descriptor(), name, value);
}
enum enMessageFE {
  FE_TIMER = 0,
  FE_CLIENT = 1,
  FE_GAMESERVER = 2,
  FE_LOGINSERVER = 3,
  FE_DBSERVER = 4,
  FE_PROXYSERVER = 5,
  FE_WORLDSERVER = 6,
  FE_WEBSERVER = 7,
  FE_OFFLINESERVER = 8,
  FE_CHECKSERVER = 9,
  FE_HALLSERVER = 10,
  FE_GATESERVER = 11,
  FE_TCPSERVER = 12,
  FE_ROOMSERVER = 13
};
bool enMessageFE_IsValid(int value);
const enMessageFE enMessageFE_MIN = FE_TIMER;
const enMessageFE enMessageFE_MAX = FE_ROOMSERVER;
const int enMessageFE_ARRAYSIZE = enMessageFE_MAX + 1;

const ::google::protobuf::EnumDescriptor* enMessageFE_descriptor();
inline const ::std::string& enMessageFE_Name(enMessageFE value) {
  return ::google::protobuf::internal::NameOfEnum(
    enMessageFE_descriptor(), value);
}
inline bool enMessageFE_Parse(
    const ::std::string& name, enMessageFE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<enMessageFE>(
    enMessageFE_descriptor(), name, value);
}
enum EGateCmd {
  EGC_NULL = 0,
  EGC_REGIST = 1,
  EGC_KEEPALIVE = 2
};
bool EGateCmd_IsValid(int value);
const EGateCmd EGateCmd_MIN = EGC_NULL;
const EGateCmd EGateCmd_MAX = EGC_KEEPALIVE;
const int EGateCmd_ARRAYSIZE = EGateCmd_MAX + 1;

const ::google::protobuf::EnumDescriptor* EGateCmd_descriptor();
inline const ::std::string& EGateCmd_Name(EGateCmd value) {
  return ::google::protobuf::internal::NameOfEnum(
    EGateCmd_descriptor(), value);
}
inline bool EGateCmd_Parse(
    const ::std::string& name, EGateCmd* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EGateCmd>(
    EGateCmd_descriptor(), name, value);
}
// ===================================================================

class CSocketInfo : public ::google::protobuf::Message {
 public:
  CSocketInfo();
  virtual ~CSocketInfo();

  CSocketInfo(const CSocketInfo& from);

  inline CSocketInfo& operator=(const CSocketInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSocketInfo& default_instance();

  void Swap(CSocketInfo* other);

  // implements Message ----------------------------------------------

  CSocketInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSocketInfo& from);
  void MergeFrom(const CSocketInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 SrcIP = 1;
  inline bool has_srcip() const;
  inline void clear_srcip();
  static const int kSrcIPFieldNumber = 1;
  inline ::google::protobuf::int32 srcip() const;
  inline void set_srcip(::google::protobuf::int32 value);

  // optional int32 SrcPort = 2;
  inline bool has_srcport() const;
  inline void clear_srcport();
  static const int kSrcPortFieldNumber = 2;
  inline ::google::protobuf::int32 srcport() const;
  inline void set_srcport(::google::protobuf::int32 value);

  // optional int32 SocketID = 3;
  inline bool has_socketid() const;
  inline void clear_socketid();
  static const int kSocketIDFieldNumber = 3;
  inline ::google::protobuf::int32 socketid() const;
  inline void set_socketid(::google::protobuf::int32 value);

  // optional int64 CreateTime = 4;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 4;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // optional int32 State = 5;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 5;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CSocketInfo)
 private:
  inline void set_has_srcip();
  inline void clear_has_srcip();
  inline void set_has_srcport();
  inline void clear_has_srcport();
  inline void set_has_socketid();
  inline void clear_has_socketid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 srcip_;
  ::google::protobuf::int32 srcport_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int32 socketid_;
  ::google::protobuf::int32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static CSocketInfo* default_instance_;
};
// -------------------------------------------------------------------

class CTcpHead : public ::google::protobuf::Message {
 public:
  CTcpHead();
  virtual ~CTcpHead();

  CTcpHead(const CTcpHead& from);

  inline CTcpHead& operator=(const CTcpHead& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CTcpHead& default_instance();

  void Swap(CTcpHead* other);

  // implements Message ----------------------------------------------

  CTcpHead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CTcpHead& from);
  void MergeFrom(const CTcpHead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 SrcFE = 1;
  inline bool has_srcfe() const;
  inline void clear_srcfe();
  static const int kSrcFEFieldNumber = 1;
  inline ::google::protobuf::int32 srcfe() const;
  inline void set_srcfe(::google::protobuf::int32 value);

  // optional int32 SrcID = 2;
  inline bool has_srcid() const;
  inline void clear_srcid();
  static const int kSrcIDFieldNumber = 2;
  inline ::google::protobuf::int32 srcid() const;
  inline void set_srcid(::google::protobuf::int32 value);

  // optional int32 DstFE = 3;
  inline bool has_dstfe() const;
  inline void clear_dstfe();
  static const int kDstFEFieldNumber = 3;
  inline ::google::protobuf::int32 dstfe() const;
  inline void set_dstfe(::google::protobuf::int32 value);

  // optional int32 DstID = 4;
  inline bool has_dstid() const;
  inline void clear_dstid();
  static const int kDstIDFieldNumber = 4;
  inline ::google::protobuf::int32 dstid() const;
  inline void set_dstid(::google::protobuf::int32 value);

  // optional .EGateCmd OpFlag = 5 [default = EGC_NULL];
  inline bool has_opflag() const;
  inline void clear_opflag();
  static const int kOpFlagFieldNumber = 5;
  inline ::EGateCmd opflag() const;
  inline void set_opflag(::EGateCmd value);

  // optional int64 TimeStamp = 6;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimeStampFieldNumber = 6;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // repeated .CSocketInfo SocketInfos = 7;
  inline int socketinfos_size() const;
  inline void clear_socketinfos();
  static const int kSocketInfosFieldNumber = 7;
  inline const ::CSocketInfo& socketinfos(int index) const;
  inline ::CSocketInfo* mutable_socketinfos(int index);
  inline ::CSocketInfo* add_socketinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::CSocketInfo >&
      socketinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSocketInfo >*
      mutable_socketinfos();

  // @@protoc_insertion_point(class_scope:CTcpHead)
 private:
  inline void set_has_srcfe();
  inline void clear_has_srcfe();
  inline void set_has_srcid();
  inline void clear_has_srcid();
  inline void set_has_dstfe();
  inline void clear_has_dstfe();
  inline void set_has_dstid();
  inline void clear_has_dstid();
  inline void set_has_opflag();
  inline void clear_has_opflag();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 srcfe_;
  ::google::protobuf::int32 srcid_;
  ::google::protobuf::int32 dstfe_;
  ::google::protobuf::int32 dstid_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::RepeatedPtrField< ::CSocketInfo > socketinfos_;
  int opflag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static CTcpHead* default_instance_;
};
// -------------------------------------------------------------------

class CMessage : public ::google::protobuf::Message {
 public:
  CMessage();
  virtual ~CMessage();

  CMessage(const CMessage& from);

  inline CMessage& operator=(const CMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessage& default_instance();

  void Swap(CMessage* other);

  // implements Message ----------------------------------------------

  CMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessage& from);
  void MergeFrom(const CMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CTcpHead MsgHead = 1;
  inline bool has_msghead() const;
  inline void clear_msghead();
  static const int kMsgHeadFieldNumber = 1;
  inline const ::CTcpHead& msghead() const;
  inline ::CTcpHead* mutable_msghead();
  inline ::CTcpHead* release_msghead();
  inline void set_allocated_msghead(::CTcpHead* msghead);

  // optional fixed64 MsgPara = 2 [default = 0];
  inline bool has_msgpara() const;
  inline void clear_msgpara();
  static const int kMsgParaFieldNumber = 2;
  inline ::google::protobuf::uint64 msgpara() const;
  inline void set_msgpara(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMessage)
 private:
  inline void set_has_msghead();
  inline void clear_has_msghead();
  inline void set_has_msgpara();
  inline void clear_has_msgpara();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CTcpHead* msghead_;
  ::google::protobuf::uint64 msgpara_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static CMessage* default_instance_;
};
// -------------------------------------------------------------------

class CMessageSet : public ::google::protobuf::Message {
 public:
  CMessageSet();
  virtual ~CMessageSet();

  CMessageSet(const CMessageSet& from);

  inline CMessageSet& operator=(const CMessageSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageSet& default_instance();

  void Swap(CMessageSet* other);

  // implements Message ----------------------------------------------

  CMessageSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageSet& from);
  void MergeFrom(const CMessageSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes MsgParas = 1;
  inline int msgparas_size() const;
  inline void clear_msgparas();
  static const int kMsgParasFieldNumber = 1;
  inline const ::std::string& msgparas(int index) const;
  inline ::std::string* mutable_msgparas(int index);
  inline void set_msgparas(int index, const ::std::string& value);
  inline void set_msgparas(int index, const char* value);
  inline void set_msgparas(int index, const void* value, size_t size);
  inline ::std::string* add_msgparas();
  inline void add_msgparas(const ::std::string& value);
  inline void add_msgparas(const char* value);
  inline void add_msgparas(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& msgparas() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_msgparas();

  // @@protoc_insertion_point(class_scope:CMessageSet)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> msgparas_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static CMessageSet* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPingRequest : public ::google::protobuf::Message {
 public:
  CMsgPingRequest();
  virtual ~CMsgPingRequest();

  CMsgPingRequest(const CMsgPingRequest& from);

  inline CMsgPingRequest& operator=(const CMsgPingRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPingRequest& default_instance();

  void Swap(CMsgPingRequest* other);

  // implements Message ----------------------------------------------

  CMsgPingRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPingRequest& from);
  void MergeFrom(const CMsgPingRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgPingRequest_Msg Msg;
  static const Msg MsgID = CMsgPingRequest_Msg_MsgID;
  static inline bool Msg_IsValid(int value) {
    return CMsgPingRequest_Msg_IsValid(value);
  }
  static const Msg Msg_MIN =
    CMsgPingRequest_Msg_Msg_MIN;
  static const Msg Msg_MAX =
    CMsgPingRequest_Msg_Msg_MAX;
  static const int Msg_ARRAYSIZE =
    CMsgPingRequest_Msg_Msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Msg_descriptor() {
    return CMsgPingRequest_Msg_descriptor();
  }
  static inline const ::std::string& Msg_Name(Msg value) {
    return CMsgPingRequest_Msg_Name(value);
  }
  static inline bool Msg_Parse(const ::std::string& name,
      Msg* value) {
    return CMsgPingRequest_Msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgPingRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static CMsgPingRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// CSocketInfo

// optional int32 SrcIP = 1;
inline bool CSocketInfo::has_srcip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSocketInfo::set_has_srcip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSocketInfo::clear_has_srcip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSocketInfo::clear_srcip() {
  srcip_ = 0;
  clear_has_srcip();
}
inline ::google::protobuf::int32 CSocketInfo::srcip() const {
  return srcip_;
}
inline void CSocketInfo::set_srcip(::google::protobuf::int32 value) {
  set_has_srcip();
  srcip_ = value;
}

// optional int32 SrcPort = 2;
inline bool CSocketInfo::has_srcport() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSocketInfo::set_has_srcport() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSocketInfo::clear_has_srcport() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSocketInfo::clear_srcport() {
  srcport_ = 0;
  clear_has_srcport();
}
inline ::google::protobuf::int32 CSocketInfo::srcport() const {
  return srcport_;
}
inline void CSocketInfo::set_srcport(::google::protobuf::int32 value) {
  set_has_srcport();
  srcport_ = value;
}

// optional int32 SocketID = 3;
inline bool CSocketInfo::has_socketid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSocketInfo::set_has_socketid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSocketInfo::clear_has_socketid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSocketInfo::clear_socketid() {
  socketid_ = 0;
  clear_has_socketid();
}
inline ::google::protobuf::int32 CSocketInfo::socketid() const {
  return socketid_;
}
inline void CSocketInfo::set_socketid(::google::protobuf::int32 value) {
  set_has_socketid();
  socketid_ = value;
}

// optional int64 CreateTime = 4;
inline bool CSocketInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSocketInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSocketInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSocketInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 CSocketInfo::createtime() const {
  return createtime_;
}
inline void CSocketInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// optional int32 State = 5;
inline bool CSocketInfo::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSocketInfo::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSocketInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSocketInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 CSocketInfo::state() const {
  return state_;
}
inline void CSocketInfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// CTcpHead

// optional int32 SrcFE = 1;
inline bool CTcpHead::has_srcfe() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CTcpHead::set_has_srcfe() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CTcpHead::clear_has_srcfe() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CTcpHead::clear_srcfe() {
  srcfe_ = 0;
  clear_has_srcfe();
}
inline ::google::protobuf::int32 CTcpHead::srcfe() const {
  return srcfe_;
}
inline void CTcpHead::set_srcfe(::google::protobuf::int32 value) {
  set_has_srcfe();
  srcfe_ = value;
}

// optional int32 SrcID = 2;
inline bool CTcpHead::has_srcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CTcpHead::set_has_srcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CTcpHead::clear_has_srcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CTcpHead::clear_srcid() {
  srcid_ = 0;
  clear_has_srcid();
}
inline ::google::protobuf::int32 CTcpHead::srcid() const {
  return srcid_;
}
inline void CTcpHead::set_srcid(::google::protobuf::int32 value) {
  set_has_srcid();
  srcid_ = value;
}

// optional int32 DstFE = 3;
inline bool CTcpHead::has_dstfe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CTcpHead::set_has_dstfe() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CTcpHead::clear_has_dstfe() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CTcpHead::clear_dstfe() {
  dstfe_ = 0;
  clear_has_dstfe();
}
inline ::google::protobuf::int32 CTcpHead::dstfe() const {
  return dstfe_;
}
inline void CTcpHead::set_dstfe(::google::protobuf::int32 value) {
  set_has_dstfe();
  dstfe_ = value;
}

// optional int32 DstID = 4;
inline bool CTcpHead::has_dstid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CTcpHead::set_has_dstid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CTcpHead::clear_has_dstid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CTcpHead::clear_dstid() {
  dstid_ = 0;
  clear_has_dstid();
}
inline ::google::protobuf::int32 CTcpHead::dstid() const {
  return dstid_;
}
inline void CTcpHead::set_dstid(::google::protobuf::int32 value) {
  set_has_dstid();
  dstid_ = value;
}

// optional .EGateCmd OpFlag = 5 [default = EGC_NULL];
inline bool CTcpHead::has_opflag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CTcpHead::set_has_opflag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CTcpHead::clear_has_opflag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CTcpHead::clear_opflag() {
  opflag_ = 0;
  clear_has_opflag();
}
inline ::EGateCmd CTcpHead::opflag() const {
  return static_cast< ::EGateCmd >(opflag_);
}
inline void CTcpHead::set_opflag(::EGateCmd value) {
  assert(::EGateCmd_IsValid(value));
  set_has_opflag();
  opflag_ = value;
}

// optional int64 TimeStamp = 6;
inline bool CTcpHead::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CTcpHead::set_has_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CTcpHead::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CTcpHead::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 CTcpHead::timestamp() const {
  return timestamp_;
}
inline void CTcpHead::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// repeated .CSocketInfo SocketInfos = 7;
inline int CTcpHead::socketinfos_size() const {
  return socketinfos_.size();
}
inline void CTcpHead::clear_socketinfos() {
  socketinfos_.Clear();
}
inline const ::CSocketInfo& CTcpHead::socketinfos(int index) const {
  return socketinfos_.Get(index);
}
inline ::CSocketInfo* CTcpHead::mutable_socketinfos(int index) {
  return socketinfos_.Mutable(index);
}
inline ::CSocketInfo* CTcpHead::add_socketinfos() {
  return socketinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSocketInfo >&
CTcpHead::socketinfos() const {
  return socketinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSocketInfo >*
CTcpHead::mutable_socketinfos() {
  return &socketinfos_;
}

// -------------------------------------------------------------------

// CMessage

// optional .CTcpHead MsgHead = 1;
inline bool CMessage::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMessage::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMessage::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMessage::clear_msghead() {
  if (msghead_ != NULL) msghead_->::CTcpHead::Clear();
  clear_has_msghead();
}
inline const ::CTcpHead& CMessage::msghead() const {
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
}
inline ::CTcpHead* CMessage::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) msghead_ = new ::CTcpHead;
  return msghead_;
}
inline ::CTcpHead* CMessage::release_msghead() {
  clear_has_msghead();
  ::CTcpHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
inline void CMessage::set_allocated_msghead(::CTcpHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
}

// optional fixed64 MsgPara = 2 [default = 0];
inline bool CMessage::has_msgpara() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMessage::set_has_msgpara() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMessage::clear_has_msgpara() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMessage::clear_msgpara() {
  msgpara_ = GOOGLE_ULONGLONG(0);
  clear_has_msgpara();
}
inline ::google::protobuf::uint64 CMessage::msgpara() const {
  return msgpara_;
}
inline void CMessage::set_msgpara(::google::protobuf::uint64 value) {
  set_has_msgpara();
  msgpara_ = value;
}

// -------------------------------------------------------------------

// CMessageSet

// repeated bytes MsgParas = 1;
inline int CMessageSet::msgparas_size() const {
  return msgparas_.size();
}
inline void CMessageSet::clear_msgparas() {
  msgparas_.Clear();
}
inline const ::std::string& CMessageSet::msgparas(int index) const {
  return msgparas_.Get(index);
}
inline ::std::string* CMessageSet::mutable_msgparas(int index) {
  return msgparas_.Mutable(index);
}
inline void CMessageSet::set_msgparas(int index, const ::std::string& value) {
  msgparas_.Mutable(index)->assign(value);
}
inline void CMessageSet::set_msgparas(int index, const char* value) {
  msgparas_.Mutable(index)->assign(value);
}
inline void CMessageSet::set_msgparas(int index, const void* value, size_t size) {
  msgparas_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageSet::add_msgparas() {
  return msgparas_.Add();
}
inline void CMessageSet::add_msgparas(const ::std::string& value) {
  msgparas_.Add()->assign(value);
}
inline void CMessageSet::add_msgparas(const char* value) {
  msgparas_.Add()->assign(value);
}
inline void CMessageSet::add_msgparas(const void* value, size_t size) {
  msgparas_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CMessageSet::msgparas() const {
  return msgparas_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CMessageSet::mutable_msgparas() {
  return &msgparas_;
}

// -------------------------------------------------------------------

// CMsgPingRequest


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgPingRequest_Msg>() {
  return ::CMsgPingRequest_Msg_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::enMessageFE>() {
  return ::enMessageFE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EGateCmd>() {
  return ::EGateCmd_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
