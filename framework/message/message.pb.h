// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_message_2eproto();
void protobuf_AssignDesc_message_2eproto();
void protobuf_ShutdownFile_message_2eproto();

class CSocketInfo;
class MesHead;
class CMessage;
class CProxyHead;
class CProxyMessage;

enum enServerType {
  FE_TIMER = 0,
  FE_CLIENT = 1,
  FE_GAMESERVER = 2,
  FE_LOGINSERVER = 3,
  FE_DBSERVER = 4,
  FE_PROXYSERVER = 5,
  FE_WORLDSERVER = 6,
  FE_WEBSERVER = 7,
  FE_OFFLINESERVER = 8,
  FE_CHECKSERVER = 9,
  FE_HALLSERVER = 10,
  FE_GATESERVER = 11,
  FE_ROOMSERVER = 12
};
bool enServerType_IsValid(int value);
const enServerType enServerType_MIN = FE_TIMER;
const enServerType enServerType_MAX = FE_ROOMSERVER;
const int enServerType_ARRAYSIZE = enServerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* enServerType_descriptor();
inline const ::std::string& enServerType_Name(enServerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    enServerType_descriptor(), value);
}
inline bool enServerType_Parse(
    const ::std::string& name, enServerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<enServerType>(
    enServerType_descriptor(), name, value);
}
enum enMessageCmd {
  MESS_NULL = 0,
  MESS_REGIST = 1,
  MESS_KEEPALIVE = 2
};
bool enMessageCmd_IsValid(int value);
const enMessageCmd enMessageCmd_MIN = MESS_NULL;
const enMessageCmd enMessageCmd_MAX = MESS_KEEPALIVE;
const int enMessageCmd_ARRAYSIZE = enMessageCmd_MAX + 1;

const ::google::protobuf::EnumDescriptor* enMessageCmd_descriptor();
inline const ::std::string& enMessageCmd_Name(enMessageCmd value) {
  return ::google::protobuf::internal::NameOfEnum(
    enMessageCmd_descriptor(), value);
}
inline bool enMessageCmd_Parse(
    const ::std::string& name, enMessageCmd* value) {
  return ::google::protobuf::internal::ParseNamedEnum<enMessageCmd>(
    enMessageCmd_descriptor(), name, value);
}
// ===================================================================

class CSocketInfo : public ::google::protobuf::Message {
 public:
  CSocketInfo();
  virtual ~CSocketInfo();

  CSocketInfo(const CSocketInfo& from);

  inline CSocketInfo& operator=(const CSocketInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSocketInfo& default_instance();

  void Swap(CSocketInfo* other);

  // implements Message ----------------------------------------------

  CSocketInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSocketInfo& from);
  void MergeFrom(const CSocketInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 SocketID = 1;
  inline bool has_socketid() const;
  inline void clear_socketid();
  static const int kSocketIDFieldNumber = 1;
  inline ::google::protobuf::int32 socketid() const;
  inline void set_socketid(::google::protobuf::int32 value);

  // optional int64 CreateTime = 2;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 2;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // optional int32 State = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CSocketInfo)
 private:
  inline void set_has_socketid();
  inline void clear_has_socketid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int32 socketid_;
  ::google::protobuf::int32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static CSocketInfo* default_instance_;
};
// -------------------------------------------------------------------

class MesHead : public ::google::protobuf::Message {
 public:
  MesHead();
  virtual ~MesHead();

  MesHead(const MesHead& from);

  inline MesHead& operator=(const MesHead& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MesHead& default_instance();

  void Swap(MesHead* other);

  // implements Message ----------------------------------------------

  MesHead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MesHead& from);
  void MergeFrom(const MesHead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CSocketInfo SocketInfos = 1;
  inline int socketinfos_size() const;
  inline void clear_socketinfos();
  static const int kSocketInfosFieldNumber = 1;
  inline const ::CSocketInfo& socketinfos(int index) const;
  inline ::CSocketInfo* mutable_socketinfos(int index);
  inline ::CSocketInfo* add_socketinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::CSocketInfo >&
      socketinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSocketInfo >*
      mutable_socketinfos();

  // optional int32 Cmd = 2;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 2;
  inline ::google::protobuf::int32 cmd() const;
  inline void set_cmd(::google::protobuf::int32 value);

  // optional int32 Serial = 3;
  inline bool has_serial() const;
  inline void clear_serial();
  static const int kSerialFieldNumber = 3;
  inline ::google::protobuf::int32 serial() const;
  inline void set_serial(::google::protobuf::int32 value);

  // optional int32 Seq = 4;
  inline bool has_seq() const;
  inline void clear_seq();
  static const int kSeqFieldNumber = 4;
  inline ::google::protobuf::int32 seq() const;
  inline void set_seq(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MesHead)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_serial();
  inline void clear_has_serial();
  inline void set_has_seq();
  inline void clear_has_seq();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CSocketInfo > socketinfos_;
  ::google::protobuf::int32 cmd_;
  ::google::protobuf::int32 serial_;
  ::google::protobuf::int32 seq_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static MesHead* default_instance_;
};
// -------------------------------------------------------------------

class CMessage : public ::google::protobuf::Message {
 public:
  CMessage();
  virtual ~CMessage();

  CMessage(const CMessage& from);

  inline CMessage& operator=(const CMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessage& default_instance();

  void Swap(CMessage* other);

  // implements Message ----------------------------------------------

  CMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessage& from);
  void MergeFrom(const CMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .MesHead MsgHead = 1;
  inline bool has_msghead() const;
  inline void clear_msghead();
  static const int kMsgHeadFieldNumber = 1;
  inline const ::MesHead& msghead() const;
  inline ::MesHead* mutable_msghead();
  inline ::MesHead* release_msghead();
  inline void set_allocated_msghead(::MesHead* msghead);

  // optional fixed64 MsgPara = 2 [default = 0];
  inline bool has_msgpara() const;
  inline void clear_msgpara();
  static const int kMsgParaFieldNumber = 2;
  inline ::google::protobuf::uint64 msgpara() const;
  inline void set_msgpara(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMessage)
 private:
  inline void set_has_msghead();
  inline void clear_has_msghead();
  inline void set_has_msgpara();
  inline void clear_has_msgpara();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::MesHead* msghead_;
  ::google::protobuf::uint64 msgpara_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static CMessage* default_instance_;
};
// -------------------------------------------------------------------

class CProxyHead : public ::google::protobuf::Message {
 public:
  CProxyHead();
  virtual ~CProxyHead();

  CProxyHead(const CProxyHead& from);

  inline CProxyHead& operator=(const CProxyHead& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProxyHead& default_instance();

  void Swap(CProxyHead* other);

  // implements Message ----------------------------------------------

  CProxyHead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProxyHead& from);
  void MergeFrom(const CProxyHead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 SrcFE = 1;
  inline bool has_srcfe() const;
  inline void clear_srcfe();
  static const int kSrcFEFieldNumber = 1;
  inline ::google::protobuf::uint32 srcfe() const;
  inline void set_srcfe(::google::protobuf::uint32 value);

  // required uint32 SrcID = 2;
  inline bool has_srcid() const;
  inline void clear_srcid();
  static const int kSrcIDFieldNumber = 2;
  inline ::google::protobuf::uint32 srcid() const;
  inline void set_srcid(::google::protobuf::uint32 value);

  // required uint32 DstFE = 3;
  inline bool has_dstfe() const;
  inline void clear_dstfe();
  static const int kDstFEFieldNumber = 3;
  inline ::google::protobuf::uint32 dstfe() const;
  inline void set_dstfe(::google::protobuf::uint32 value);

  // required uint32 DstID = 4;
  inline bool has_dstid() const;
  inline void clear_dstid();
  static const int kDstIDFieldNumber = 4;
  inline ::google::protobuf::uint32 dstid() const;
  inline void set_dstid(::google::protobuf::uint32 value);

  // required uint64 TimeStamp = 5;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimeStampFieldNumber = 5;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);

  // optional .enMessageCmd OpFlag = 6 [default = MESS_NULL];
  inline bool has_opflag() const;
  inline void clear_opflag();
  static const int kOpFlagFieldNumber = 6;
  inline ::enMessageCmd opflag() const;
  inline void set_opflag(::enMessageCmd value);

  // optional uint32 messageId = 7;
  inline bool has_messageid() const;
  inline void clear_messageid();
  static const int kMessageIdFieldNumber = 7;
  inline ::google::protobuf::uint32 messageid() const;
  inline void set_messageid(::google::protobuf::uint32 value);

  // optional .MesHead msgHead = 8;
  inline bool has_msghead() const;
  inline void clear_msghead();
  static const int kMsgHeadFieldNumber = 8;
  inline const ::MesHead& msghead() const;
  inline ::MesHead* mutable_msghead();
  inline ::MesHead* release_msghead();
  inline void set_allocated_msghead(::MesHead* msghead);

  // @@protoc_insertion_point(class_scope:CProxyHead)
 private:
  inline void set_has_srcfe();
  inline void clear_has_srcfe();
  inline void set_has_srcid();
  inline void clear_has_srcid();
  inline void set_has_dstfe();
  inline void clear_has_dstfe();
  inline void set_has_dstid();
  inline void clear_has_dstid();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_opflag();
  inline void clear_has_opflag();
  inline void set_has_messageid();
  inline void clear_has_messageid();
  inline void set_has_msghead();
  inline void clear_has_msghead();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 srcfe_;
  ::google::protobuf::uint32 srcid_;
  ::google::protobuf::uint32 dstfe_;
  ::google::protobuf::uint32 dstid_;
  ::google::protobuf::uint64 timestamp_;
  int opflag_;
  ::google::protobuf::uint32 messageid_;
  ::MesHead* msghead_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static CProxyHead* default_instance_;
};
// -------------------------------------------------------------------

class CProxyMessage : public ::google::protobuf::Message {
 public:
  CProxyMessage();
  virtual ~CProxyMessage();

  CProxyMessage(const CProxyMessage& from);

  inline CProxyMessage& operator=(const CProxyMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProxyMessage& default_instance();

  void Swap(CProxyMessage* other);

  // implements Message ----------------------------------------------

  CProxyMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProxyMessage& from);
  void MergeFrom(const CProxyMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .CProxyHead MsgHead = 1;
  inline bool has_msghead() const;
  inline void clear_msghead();
  static const int kMsgHeadFieldNumber = 1;
  inline const ::CProxyHead& msghead() const;
  inline ::CProxyHead* mutable_msghead();
  inline ::CProxyHead* release_msghead();
  inline void set_allocated_msghead(::CProxyHead* msghead);

  // optional fixed64 MsgPara = 2 [default = 0];
  inline bool has_msgpara() const;
  inline void clear_msgpara();
  static const int kMsgParaFieldNumber = 2;
  inline ::google::protobuf::uint64 msgpara() const;
  inline void set_msgpara(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CProxyMessage)
 private:
  inline void set_has_msghead();
  inline void clear_has_msghead();
  inline void set_has_msgpara();
  inline void clear_has_msgpara();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CProxyHead* msghead_;
  ::google::protobuf::uint64 msgpara_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static CProxyMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// CSocketInfo

// optional int32 SocketID = 1;
inline bool CSocketInfo::has_socketid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSocketInfo::set_has_socketid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSocketInfo::clear_has_socketid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSocketInfo::clear_socketid() {
  socketid_ = 0;
  clear_has_socketid();
}
inline ::google::protobuf::int32 CSocketInfo::socketid() const {
  return socketid_;
}
inline void CSocketInfo::set_socketid(::google::protobuf::int32 value) {
  set_has_socketid();
  socketid_ = value;
}

// optional int64 CreateTime = 2;
inline bool CSocketInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSocketInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSocketInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSocketInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 CSocketInfo::createtime() const {
  return createtime_;
}
inline void CSocketInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// optional int32 State = 3;
inline bool CSocketInfo::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSocketInfo::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSocketInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSocketInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 CSocketInfo::state() const {
  return state_;
}
inline void CSocketInfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// MesHead

// repeated .CSocketInfo SocketInfos = 1;
inline int MesHead::socketinfos_size() const {
  return socketinfos_.size();
}
inline void MesHead::clear_socketinfos() {
  socketinfos_.Clear();
}
inline const ::CSocketInfo& MesHead::socketinfos(int index) const {
  return socketinfos_.Get(index);
}
inline ::CSocketInfo* MesHead::mutable_socketinfos(int index) {
  return socketinfos_.Mutable(index);
}
inline ::CSocketInfo* MesHead::add_socketinfos() {
  return socketinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSocketInfo >&
MesHead::socketinfos() const {
  return socketinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSocketInfo >*
MesHead::mutable_socketinfos() {
  return &socketinfos_;
}

// optional int32 Cmd = 2;
inline bool MesHead::has_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MesHead::set_has_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MesHead::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MesHead::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::google::protobuf::int32 MesHead::cmd() const {
  return cmd_;
}
inline void MesHead::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional int32 Serial = 3;
inline bool MesHead::has_serial() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MesHead::set_has_serial() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MesHead::clear_has_serial() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MesHead::clear_serial() {
  serial_ = 0;
  clear_has_serial();
}
inline ::google::protobuf::int32 MesHead::serial() const {
  return serial_;
}
inline void MesHead::set_serial(::google::protobuf::int32 value) {
  set_has_serial();
  serial_ = value;
}

// optional int32 Seq = 4;
inline bool MesHead::has_seq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MesHead::set_has_seq() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MesHead::clear_has_seq() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MesHead::clear_seq() {
  seq_ = 0;
  clear_has_seq();
}
inline ::google::protobuf::int32 MesHead::seq() const {
  return seq_;
}
inline void MesHead::set_seq(::google::protobuf::int32 value) {
  set_has_seq();
  seq_ = value;
}

// -------------------------------------------------------------------

// CMessage

// required .MesHead MsgHead = 1;
inline bool CMessage::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMessage::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMessage::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMessage::clear_msghead() {
  if (msghead_ != NULL) msghead_->::MesHead::Clear();
  clear_has_msghead();
}
inline const ::MesHead& CMessage::msghead() const {
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
}
inline ::MesHead* CMessage::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) msghead_ = new ::MesHead;
  return msghead_;
}
inline ::MesHead* CMessage::release_msghead() {
  clear_has_msghead();
  ::MesHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
inline void CMessage::set_allocated_msghead(::MesHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
}

// optional fixed64 MsgPara = 2 [default = 0];
inline bool CMessage::has_msgpara() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMessage::set_has_msgpara() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMessage::clear_has_msgpara() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMessage::clear_msgpara() {
  msgpara_ = GOOGLE_ULONGLONG(0);
  clear_has_msgpara();
}
inline ::google::protobuf::uint64 CMessage::msgpara() const {
  return msgpara_;
}
inline void CMessage::set_msgpara(::google::protobuf::uint64 value) {
  set_has_msgpara();
  msgpara_ = value;
}

// -------------------------------------------------------------------

// CProxyHead

// required uint32 SrcFE = 1;
inline bool CProxyHead::has_srcfe() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProxyHead::set_has_srcfe() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProxyHead::clear_has_srcfe() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProxyHead::clear_srcfe() {
  srcfe_ = 0u;
  clear_has_srcfe();
}
inline ::google::protobuf::uint32 CProxyHead::srcfe() const {
  return srcfe_;
}
inline void CProxyHead::set_srcfe(::google::protobuf::uint32 value) {
  set_has_srcfe();
  srcfe_ = value;
}

// required uint32 SrcID = 2;
inline bool CProxyHead::has_srcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProxyHead::set_has_srcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProxyHead::clear_has_srcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProxyHead::clear_srcid() {
  srcid_ = 0u;
  clear_has_srcid();
}
inline ::google::protobuf::uint32 CProxyHead::srcid() const {
  return srcid_;
}
inline void CProxyHead::set_srcid(::google::protobuf::uint32 value) {
  set_has_srcid();
  srcid_ = value;
}

// required uint32 DstFE = 3;
inline bool CProxyHead::has_dstfe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CProxyHead::set_has_dstfe() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CProxyHead::clear_has_dstfe() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CProxyHead::clear_dstfe() {
  dstfe_ = 0u;
  clear_has_dstfe();
}
inline ::google::protobuf::uint32 CProxyHead::dstfe() const {
  return dstfe_;
}
inline void CProxyHead::set_dstfe(::google::protobuf::uint32 value) {
  set_has_dstfe();
  dstfe_ = value;
}

// required uint32 DstID = 4;
inline bool CProxyHead::has_dstid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CProxyHead::set_has_dstid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CProxyHead::clear_has_dstid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CProxyHead::clear_dstid() {
  dstid_ = 0u;
  clear_has_dstid();
}
inline ::google::protobuf::uint32 CProxyHead::dstid() const {
  return dstid_;
}
inline void CProxyHead::set_dstid(::google::protobuf::uint32 value) {
  set_has_dstid();
  dstid_ = value;
}

// required uint64 TimeStamp = 5;
inline bool CProxyHead::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CProxyHead::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CProxyHead::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CProxyHead::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 CProxyHead::timestamp() const {
  return timestamp_;
}
inline void CProxyHead::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional .enMessageCmd OpFlag = 6 [default = MESS_NULL];
inline bool CProxyHead::has_opflag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CProxyHead::set_has_opflag() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CProxyHead::clear_has_opflag() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CProxyHead::clear_opflag() {
  opflag_ = 0;
  clear_has_opflag();
}
inline ::enMessageCmd CProxyHead::opflag() const {
  return static_cast< ::enMessageCmd >(opflag_);
}
inline void CProxyHead::set_opflag(::enMessageCmd value) {
  assert(::enMessageCmd_IsValid(value));
  set_has_opflag();
  opflag_ = value;
}

// optional uint32 messageId = 7;
inline bool CProxyHead::has_messageid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CProxyHead::set_has_messageid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CProxyHead::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CProxyHead::clear_messageid() {
  messageid_ = 0u;
  clear_has_messageid();
}
inline ::google::protobuf::uint32 CProxyHead::messageid() const {
  return messageid_;
}
inline void CProxyHead::set_messageid(::google::protobuf::uint32 value) {
  set_has_messageid();
  messageid_ = value;
}

// optional .MesHead msgHead = 8;
inline bool CProxyHead::has_msghead() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CProxyHead::set_has_msghead() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CProxyHead::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CProxyHead::clear_msghead() {
  if (msghead_ != NULL) msghead_->::MesHead::Clear();
  clear_has_msghead();
}
inline const ::MesHead& CProxyHead::msghead() const {
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
}
inline ::MesHead* CProxyHead::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) msghead_ = new ::MesHead;
  return msghead_;
}
inline ::MesHead* CProxyHead::release_msghead() {
  clear_has_msghead();
  ::MesHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
inline void CProxyHead::set_allocated_msghead(::MesHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
}

// -------------------------------------------------------------------

// CProxyMessage

// required .CProxyHead MsgHead = 1;
inline bool CProxyMessage::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProxyMessage::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProxyMessage::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProxyMessage::clear_msghead() {
  if (msghead_ != NULL) msghead_->::CProxyHead::Clear();
  clear_has_msghead();
}
inline const ::CProxyHead& CProxyMessage::msghead() const {
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
}
inline ::CProxyHead* CProxyMessage::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) msghead_ = new ::CProxyHead;
  return msghead_;
}
inline ::CProxyHead* CProxyMessage::release_msghead() {
  clear_has_msghead();
  ::CProxyHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
inline void CProxyMessage::set_allocated_msghead(::CProxyHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
}

// optional fixed64 MsgPara = 2 [default = 0];
inline bool CProxyMessage::has_msgpara() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProxyMessage::set_has_msgpara() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProxyMessage::clear_has_msgpara() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProxyMessage::clear_msgpara() {
  msgpara_ = GOOGLE_ULONGLONG(0);
  clear_has_msgpara();
}
inline ::google::protobuf::uint64 CProxyMessage::msgpara() const {
  return msgpara_;
}
inline void CProxyMessage::set_msgpara(::google::protobuf::uint64 value) {
  set_has_msgpara();
  msgpara_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::enServerType>() {
  return ::enServerType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::enMessageCmd>() {
  return ::enMessageCmd_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
