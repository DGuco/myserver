// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tower.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tower.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace slg {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* TowerDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TowerDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddAmmunitionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddAmmunitionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddAmmunitionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddAmmunitionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TowerPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TowerPush_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TowerCommandId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TowerPushId_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_tower_2eproto() {
  protobuf_AddDesc_tower_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tower.proto");
  GOOGLE_CHECK(file != NULL);
  TowerDTO_descriptor_ = file->message_type(0);
  static const int TowerDTO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerDTO, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerDTO, count_),
  };
  TowerDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TowerDTO_descriptor_,
      TowerDTO::default_instance_,
      TowerDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TowerDTO));
  AddAmmunitionRequest_descriptor_ = file->message_type(1);
  static const int AddAmmunitionRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAmmunitionRequest, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAmmunitionRequest, oper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAmmunitionRequest, type_),
  };
  AddAmmunitionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddAmmunitionRequest_descriptor_,
      AddAmmunitionRequest::default_instance_,
      AddAmmunitionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAmmunitionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAmmunitionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddAmmunitionRequest));
  AddAmmunitionResponse_descriptor_ = file->message_type(2);
  static const int AddAmmunitionResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAmmunitionResponse, bid_),
  };
  AddAmmunitionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddAmmunitionResponse_descriptor_,
      AddAmmunitionResponse::default_instance_,
      AddAmmunitionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAmmunitionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAmmunitionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddAmmunitionResponse));
  TowerPush_descriptor_ = file->message_type(3);
  static const int TowerPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerPush, towers_),
  };
  TowerPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TowerPush_descriptor_,
      TowerPush::default_instance_,
      TowerPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TowerPush));
  TowerCommandId_descriptor_ = file->enum_type(0);
  TowerPushId_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tower_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TowerDTO_descriptor_, &TowerDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddAmmunitionRequest_descriptor_, &AddAmmunitionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddAmmunitionResponse_descriptor_, &AddAmmunitionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TowerPush_descriptor_, &TowerPush::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tower_2eproto() {
  delete TowerDTO::default_instance_;
  delete TowerDTO_reflection_;
  delete AddAmmunitionRequest::default_instance_;
  delete AddAmmunitionRequest_reflection_;
  delete AddAmmunitionResponse::default_instance_;
  delete AddAmmunitionResponse_reflection_;
  delete TowerPush::default_instance_;
  delete TowerPush_reflection_;
}

void protobuf_AddDesc_tower_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013tower.proto\022\014slg.protocol\"&\n\010TowerDTO\022"
    "\013\n\003bid\030\001 \002(\005\022\r\n\005count\030\002 \002(\005\"\?\n\024AddAmmuni"
    "tionRequest\022\013\n\003bid\030\001 \002(\005\022\014\n\004oper\030\002 \002(\005\022\014"
    "\n\004type\030\003 \002(\005\"$\n\025AddAmmunitionResponse\022\013\n"
    "\003bid\030\001 \002(\005\"3\n\tTowerPush\022&\n\006towers\030\001 \003(\0132"
    "\026.slg.protocol.TowerDTO*+\n\016TowerCommandI"
    "d\022\031\n\024MARCH_ADD_AMMUNITION\020\205\007*&\n\013TowerPus"
    "hId\022\027\n\021TOWER_CHANGE_PUSH\020\325\215\003B*\n\034com.bonu"
    "sstudio.slg.protocolB\nTowerProto", 352);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tower.proto", &protobuf_RegisterTypes);
  TowerDTO::default_instance_ = new TowerDTO();
  AddAmmunitionRequest::default_instance_ = new AddAmmunitionRequest();
  AddAmmunitionResponse::default_instance_ = new AddAmmunitionResponse();
  TowerPush::default_instance_ = new TowerPush();
  TowerDTO::default_instance_->InitAsDefaultInstance();
  AddAmmunitionRequest::default_instance_->InitAsDefaultInstance();
  AddAmmunitionResponse::default_instance_->InitAsDefaultInstance();
  TowerPush::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tower_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tower_2eproto {
  StaticDescriptorInitializer_tower_2eproto() {
    protobuf_AddDesc_tower_2eproto();
  }
} static_descriptor_initializer_tower_2eproto_;
const ::google::protobuf::EnumDescriptor* TowerCommandId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TowerCommandId_descriptor_;
}
bool TowerCommandId_IsValid(int value) {
  switch(value) {
    case 901:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TowerPushId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TowerPushId_descriptor_;
}
bool TowerPushId_IsValid(int value) {
  switch(value) {
    case 50901:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TowerDTO::kBidFieldNumber;
const int TowerDTO::kCountFieldNumber;
#endif  // !_MSC_VER

TowerDTO::TowerDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TowerDTO::InitAsDefaultInstance() {
}

TowerDTO::TowerDTO(const TowerDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TowerDTO::SharedCtor() {
  _cached_size_ = 0;
  bid_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TowerDTO::~TowerDTO() {
  SharedDtor();
}

void TowerDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TowerDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TowerDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TowerDTO_descriptor_;
}

const TowerDTO& TowerDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tower_2eproto();
  return *default_instance_;
}

TowerDTO* TowerDTO::default_instance_ = NULL;

TowerDTO* TowerDTO::New() const {
  return new TowerDTO;
}

void TowerDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bid_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TowerDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_)));
          set_has_bid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TowerDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 bid = 1;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bid(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TowerDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 bid = 1;
  if (has_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bid(), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TowerDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bid = 1;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TowerDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TowerDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TowerDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TowerDTO::MergeFrom(const TowerDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bid()) {
      set_bid(from.bid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TowerDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TowerDTO::CopyFrom(const TowerDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TowerDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TowerDTO::Swap(TowerDTO* other) {
  if (other != this) {
    std::swap(bid_, other->bid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TowerDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TowerDTO_descriptor_;
  metadata.reflection = TowerDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddAmmunitionRequest::kBidFieldNumber;
const int AddAmmunitionRequest::kOperFieldNumber;
const int AddAmmunitionRequest::kTypeFieldNumber;
#endif  // !_MSC_VER

AddAmmunitionRequest::AddAmmunitionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddAmmunitionRequest::InitAsDefaultInstance() {
}

AddAmmunitionRequest::AddAmmunitionRequest(const AddAmmunitionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddAmmunitionRequest::SharedCtor() {
  _cached_size_ = 0;
  bid_ = 0;
  oper_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddAmmunitionRequest::~AddAmmunitionRequest() {
  SharedDtor();
}

void AddAmmunitionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddAmmunitionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddAmmunitionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddAmmunitionRequest_descriptor_;
}

const AddAmmunitionRequest& AddAmmunitionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tower_2eproto();
  return *default_instance_;
}

AddAmmunitionRequest* AddAmmunitionRequest::default_instance_ = NULL;

AddAmmunitionRequest* AddAmmunitionRequest::New() const {
  return new AddAmmunitionRequest;
}

void AddAmmunitionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bid_ = 0;
    oper_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddAmmunitionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_)));
          set_has_bid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_oper;
        break;
      }

      // required int32 oper = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oper_)));
          set_has_oper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddAmmunitionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 bid = 1;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bid(), output);
  }

  // required int32 oper = 2;
  if (has_oper()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oper(), output);
  }

  // required int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddAmmunitionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 bid = 1;
  if (has_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bid(), target);
  }

  // required int32 oper = 2;
  if (has_oper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oper(), target);
  }

  // required int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddAmmunitionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bid = 1;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid());
    }

    // required int32 oper = 2;
    if (has_oper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oper());
    }

    // required int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddAmmunitionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddAmmunitionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddAmmunitionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddAmmunitionRequest::MergeFrom(const AddAmmunitionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bid()) {
      set_bid(from.bid());
    }
    if (from.has_oper()) {
      set_oper(from.oper());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddAmmunitionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddAmmunitionRequest::CopyFrom(const AddAmmunitionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddAmmunitionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AddAmmunitionRequest::Swap(AddAmmunitionRequest* other) {
  if (other != this) {
    std::swap(bid_, other->bid_);
    std::swap(oper_, other->oper_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddAmmunitionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddAmmunitionRequest_descriptor_;
  metadata.reflection = AddAmmunitionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddAmmunitionResponse::kBidFieldNumber;
#endif  // !_MSC_VER

AddAmmunitionResponse::AddAmmunitionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddAmmunitionResponse::InitAsDefaultInstance() {
}

AddAmmunitionResponse::AddAmmunitionResponse(const AddAmmunitionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddAmmunitionResponse::SharedCtor() {
  _cached_size_ = 0;
  bid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddAmmunitionResponse::~AddAmmunitionResponse() {
  SharedDtor();
}

void AddAmmunitionResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddAmmunitionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddAmmunitionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddAmmunitionResponse_descriptor_;
}

const AddAmmunitionResponse& AddAmmunitionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tower_2eproto();
  return *default_instance_;
}

AddAmmunitionResponse* AddAmmunitionResponse::default_instance_ = NULL;

AddAmmunitionResponse* AddAmmunitionResponse::New() const {
  return new AddAmmunitionResponse;
}

void AddAmmunitionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddAmmunitionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_)));
          set_has_bid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddAmmunitionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 bid = 1;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddAmmunitionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 bid = 1;
  if (has_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddAmmunitionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bid = 1;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddAmmunitionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddAmmunitionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddAmmunitionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddAmmunitionResponse::MergeFrom(const AddAmmunitionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bid()) {
      set_bid(from.bid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddAmmunitionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddAmmunitionResponse::CopyFrom(const AddAmmunitionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddAmmunitionResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AddAmmunitionResponse::Swap(AddAmmunitionResponse* other) {
  if (other != this) {
    std::swap(bid_, other->bid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddAmmunitionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddAmmunitionResponse_descriptor_;
  metadata.reflection = AddAmmunitionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TowerPush::kTowersFieldNumber;
#endif  // !_MSC_VER

TowerPush::TowerPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TowerPush::InitAsDefaultInstance() {
}

TowerPush::TowerPush(const TowerPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TowerPush::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TowerPush::~TowerPush() {
  SharedDtor();
}

void TowerPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TowerPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TowerPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TowerPush_descriptor_;
}

const TowerPush& TowerPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tower_2eproto();
  return *default_instance_;
}

TowerPush* TowerPush::default_instance_ = NULL;

TowerPush* TowerPush::New() const {
  return new TowerPush;
}

void TowerPush::Clear() {
  towers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TowerPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.TowerDTO towers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_towers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_towers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_towers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TowerPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.TowerDTO towers = 1;
  for (int i = 0; i < this->towers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->towers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TowerPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.TowerDTO towers = 1;
  for (int i = 0; i < this->towers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->towers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TowerPush::ByteSize() const {
  int total_size = 0;

  // repeated .slg.protocol.TowerDTO towers = 1;
  total_size += 1 * this->towers_size();
  for (int i = 0; i < this->towers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->towers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TowerPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TowerPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TowerPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TowerPush::MergeFrom(const TowerPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  towers_.MergeFrom(from.towers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TowerPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TowerPush::CopyFrom(const TowerPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TowerPush::IsInitialized() const {

  for (int i = 0; i < towers_size(); i++) {
    if (!this->towers(i).IsInitialized()) return false;
  }
  return true;
}

void TowerPush::Swap(TowerPush* other) {
  if (other != this) {
    towers_.Swap(&other->towers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TowerPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TowerPush_descriptor_;
  metadata.reflection = TowerPush_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace slg

// @@protoc_insertion_point(global_scope)
