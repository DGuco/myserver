// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wall.proto

#ifndef PROTOBUF_wall_2eproto__INCLUDED
#define PROTOBUF_wall_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace slg {
namespace protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_wall_2eproto();
void protobuf_AssignDesc_wall_2eproto();
void protobuf_ShutdownFile_wall_2eproto();

class WallStatusDTO;
class WallStatusPush;

enum WallCommandId {
  WALL_UNFIRE = 1301,
  WALL_REPAIR = 1302
};
bool WallCommandId_IsValid(int value);
const WallCommandId WallCommandId_MIN = WALL_UNFIRE;
const WallCommandId WallCommandId_MAX = WALL_REPAIR;
const int WallCommandId_ARRAYSIZE = WallCommandId_MAX + 1;

const ::google::protobuf::EnumDescriptor* WallCommandId_descriptor();
inline const ::std::string& WallCommandId_Name(WallCommandId value) {
  return ::google::protobuf::internal::NameOfEnum(
    WallCommandId_descriptor(), value);
}
inline bool WallCommandId_Parse(
    const ::std::string& name, WallCommandId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WallCommandId>(
    WallCommandId_descriptor(), name, value);
}
enum WallPushId {
  WALL_STATUS_PUSH = 51301
};
bool WallPushId_IsValid(int value);
const WallPushId WallPushId_MIN = WALL_STATUS_PUSH;
const WallPushId WallPushId_MAX = WALL_STATUS_PUSH;
const int WallPushId_ARRAYSIZE = WallPushId_MAX + 1;

const ::google::protobuf::EnumDescriptor* WallPushId_descriptor();
inline const ::std::string& WallPushId_Name(WallPushId value) {
  return ::google::protobuf::internal::NameOfEnum(
    WallPushId_descriptor(), value);
}
inline bool WallPushId_Parse(
    const ::std::string& name, WallPushId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WallPushId>(
    WallPushId_descriptor(), name, value);
}
// ===================================================================

class WallStatusDTO : public ::google::protobuf::Message {
 public:
  WallStatusDTO();
  virtual ~WallStatusDTO();

  WallStatusDTO(const WallStatusDTO& from);

  inline WallStatusDTO& operator=(const WallStatusDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WallStatusDTO& default_instance();

  void Swap(WallStatusDTO* other);

  // implements Message ----------------------------------------------

  WallStatusDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WallStatusDTO& from);
  void MergeFrom(const WallStatusDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 wallValue = 1;
  inline bool has_wallvalue() const;
  inline void clear_wallvalue();
  static const int kWallValueFieldNumber = 1;
  inline ::google::protobuf::int32 wallvalue() const;
  inline void set_wallvalue(::google::protobuf::int32 value);

  // required int32 nextRepairTime = 2;
  inline bool has_nextrepairtime() const;
  inline void clear_nextrepairtime();
  static const int kNextRepairTimeFieldNumber = 2;
  inline ::google::protobuf::int32 nextrepairtime() const;
  inline void set_nextrepairtime(::google::protobuf::int32 value);

  // required int32 fireEndTime = 3;
  inline bool has_fireendtime() const;
  inline void clear_fireendtime();
  static const int kFireEndTimeFieldNumber = 3;
  inline ::google::protobuf::int32 fireendtime() const;
  inline void set_fireendtime(::google::protobuf::int32 value);

  // required int32 perDown = 4;
  inline bool has_perdown() const;
  inline void clear_perdown();
  static const int kPerDownFieldNumber = 4;
  inline ::google::protobuf::int32 perdown() const;
  inline void set_perdown(::google::protobuf::int32 value);

  // required int32 lastFreshTime = 5;
  inline bool has_lastfreshtime() const;
  inline void clear_lastfreshtime();
  static const int kLastFreshTimeFieldNumber = 5;
  inline ::google::protobuf::int32 lastfreshtime() const;
  inline void set_lastfreshtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.WallStatusDTO)
 private:
  inline void set_has_wallvalue();
  inline void clear_has_wallvalue();
  inline void set_has_nextrepairtime();
  inline void clear_has_nextrepairtime();
  inline void set_has_fireendtime();
  inline void clear_has_fireendtime();
  inline void set_has_perdown();
  inline void clear_has_perdown();
  inline void set_has_lastfreshtime();
  inline void clear_has_lastfreshtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 wallvalue_;
  ::google::protobuf::int32 nextrepairtime_;
  ::google::protobuf::int32 fireendtime_;
  ::google::protobuf::int32 perdown_;
  ::google::protobuf::int32 lastfreshtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_wall_2eproto();
  friend void protobuf_AssignDesc_wall_2eproto();
  friend void protobuf_ShutdownFile_wall_2eproto();

  void InitAsDefaultInstance();
  static WallStatusDTO* default_instance_;
};
// -------------------------------------------------------------------

class WallStatusPush : public ::google::protobuf::Message {
 public:
  WallStatusPush();
  virtual ~WallStatusPush();

  WallStatusPush(const WallStatusPush& from);

  inline WallStatusPush& operator=(const WallStatusPush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WallStatusPush& default_instance();

  void Swap(WallStatusPush* other);

  // implements Message ----------------------------------------------

  WallStatusPush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WallStatusPush& from);
  void MergeFrom(const WallStatusPush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .slg.protocol.WallStatusDTO wallStatus = 1;
  inline bool has_wallstatus() const;
  inline void clear_wallstatus();
  static const int kWallStatusFieldNumber = 1;
  inline const ::slg::protocol::WallStatusDTO& wallstatus() const;
  inline ::slg::protocol::WallStatusDTO* mutable_wallstatus();
  inline ::slg::protocol::WallStatusDTO* release_wallstatus();
  inline void set_allocated_wallstatus(::slg::protocol::WallStatusDTO* wallstatus);

  // @@protoc_insertion_point(class_scope:slg.protocol.WallStatusPush)
 private:
  inline void set_has_wallstatus();
  inline void clear_has_wallstatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::slg::protocol::WallStatusDTO* wallstatus_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_wall_2eproto();
  friend void protobuf_AssignDesc_wall_2eproto();
  friend void protobuf_ShutdownFile_wall_2eproto();

  void InitAsDefaultInstance();
  static WallStatusPush* default_instance_;
};
// ===================================================================


// ===================================================================

// WallStatusDTO

// required int32 wallValue = 1;
inline bool WallStatusDTO::has_wallvalue() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WallStatusDTO::set_has_wallvalue() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WallStatusDTO::clear_has_wallvalue() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WallStatusDTO::clear_wallvalue() {
  wallvalue_ = 0;
  clear_has_wallvalue();
}
inline ::google::protobuf::int32 WallStatusDTO::wallvalue() const {
  return wallvalue_;
}
inline void WallStatusDTO::set_wallvalue(::google::protobuf::int32 value) {
  set_has_wallvalue();
  wallvalue_ = value;
}

// required int32 nextRepairTime = 2;
inline bool WallStatusDTO::has_nextrepairtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WallStatusDTO::set_has_nextrepairtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WallStatusDTO::clear_has_nextrepairtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WallStatusDTO::clear_nextrepairtime() {
  nextrepairtime_ = 0;
  clear_has_nextrepairtime();
}
inline ::google::protobuf::int32 WallStatusDTO::nextrepairtime() const {
  return nextrepairtime_;
}
inline void WallStatusDTO::set_nextrepairtime(::google::protobuf::int32 value) {
  set_has_nextrepairtime();
  nextrepairtime_ = value;
}

// required int32 fireEndTime = 3;
inline bool WallStatusDTO::has_fireendtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WallStatusDTO::set_has_fireendtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WallStatusDTO::clear_has_fireendtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WallStatusDTO::clear_fireendtime() {
  fireendtime_ = 0;
  clear_has_fireendtime();
}
inline ::google::protobuf::int32 WallStatusDTO::fireendtime() const {
  return fireendtime_;
}
inline void WallStatusDTO::set_fireendtime(::google::protobuf::int32 value) {
  set_has_fireendtime();
  fireendtime_ = value;
}

// required int32 perDown = 4;
inline bool WallStatusDTO::has_perdown() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WallStatusDTO::set_has_perdown() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WallStatusDTO::clear_has_perdown() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WallStatusDTO::clear_perdown() {
  perdown_ = 0;
  clear_has_perdown();
}
inline ::google::protobuf::int32 WallStatusDTO::perdown() const {
  return perdown_;
}
inline void WallStatusDTO::set_perdown(::google::protobuf::int32 value) {
  set_has_perdown();
  perdown_ = value;
}

// required int32 lastFreshTime = 5;
inline bool WallStatusDTO::has_lastfreshtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WallStatusDTO::set_has_lastfreshtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WallStatusDTO::clear_has_lastfreshtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WallStatusDTO::clear_lastfreshtime() {
  lastfreshtime_ = 0;
  clear_has_lastfreshtime();
}
inline ::google::protobuf::int32 WallStatusDTO::lastfreshtime() const {
  return lastfreshtime_;
}
inline void WallStatusDTO::set_lastfreshtime(::google::protobuf::int32 value) {
  set_has_lastfreshtime();
  lastfreshtime_ = value;
}

// -------------------------------------------------------------------

// WallStatusPush

// required .slg.protocol.WallStatusDTO wallStatus = 1;
inline bool WallStatusPush::has_wallstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WallStatusPush::set_has_wallstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WallStatusPush::clear_has_wallstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WallStatusPush::clear_wallstatus() {
  if (wallstatus_ != NULL) wallstatus_->::slg::protocol::WallStatusDTO::Clear();
  clear_has_wallstatus();
}
inline const ::slg::protocol::WallStatusDTO& WallStatusPush::wallstatus() const {
  return wallstatus_ != NULL ? *wallstatus_ : *default_instance_->wallstatus_;
}
inline ::slg::protocol::WallStatusDTO* WallStatusPush::mutable_wallstatus() {
  set_has_wallstatus();
  if (wallstatus_ == NULL) wallstatus_ = new ::slg::protocol::WallStatusDTO;
  return wallstatus_;
}
inline ::slg::protocol::WallStatusDTO* WallStatusPush::release_wallstatus() {
  clear_has_wallstatus();
  ::slg::protocol::WallStatusDTO* temp = wallstatus_;
  wallstatus_ = NULL;
  return temp;
}
inline void WallStatusPush::set_allocated_wallstatus(::slg::protocol::WallStatusDTO* wallstatus) {
  delete wallstatus_;
  wallstatus_ = wallstatus;
  if (wallstatus) {
    set_has_wallstatus();
  } else {
    clear_has_wallstatus();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace slg

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::slg::protocol::WallCommandId>() {
  return ::slg::protocol::WallCommandId_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::slg::protocol::WallPushId>() {
  return ::slg::protocol::WallPushId_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_wall_2eproto__INCLUDED
