// 客户端需要引用包
// package wing.net.msg;
syntax = "proto2";
option optimize_for = SPEED;

// 服务器类型
enum enMessageFE
{
	FE_TIMER				= 0;		// 内部消息（定时器）(暂时不用)
	FE_CLIENT				= 1;		// 客户端(暂时不用)
	FE_GAMESERVER			= 2;		// 场景服务器(暂时不用)
	FE_LOGINSERVER			= 3;		// 登陆服务器(暂时不用)
	FE_DBSERVER				= 4; 		// 数据服务器
	FE_PROXYSERVER			= 5;		// 代理服务器
	FE_WORLDSERVER			= 6;		// 世界服务器(暂时不用)
	FE_WEBSERVER			= 7;		// 平台服务器
	FE_OFFLINESERVER		= 8;		// 离线服务器(暂时不用)
	FE_CHECKSERVER			= 9; 		// 验证服务器(暂时不用)
	FE_HALLSERVER			= 10;		// 大厅服务器
	FE_GATESERVER			= 11;		// 网关服务器
	FE_ROOMSERVER			= 12;		// 房间服务器
};

enum EMessageCmd
{	
	MESS_NULL			= 0;	// 无指令
	MESS_REGIST			= 1;	// 注册
	MESS_KEEPALIVE		= 2;	// 心跳
}
message CSocketInfo
{
	optional	int32	SocketID		= 1;		// 目标的FD
	optional	int64	CreateTime		= 2;		// 目标的创建时间
	optional	int32	State			= 3;		// 发送后的状态 < 0 说明关闭socket
};

/////////////////////////////////////////GameServer ==> GateServer///////////////////////////////////
// 发送gateserver的消息头
message S2CHead
{
	repeated	CSocketInfo		SocketInfos		= 1;	//发送目标信息(多个用来做多人推送)
	required	int32			Cmd		 		= 2;	//消息id
	required	int32			Seq		 		= 3;	//序列号
	required	bool			isEncry			= 4;	//是否加密
};

//gameserver内部消息传递格式
message CMessage
{
	required	S2CHead		MsgHead		= 1;	// 消息头+
	optional	fixed64		MsgPara		= 2[default = 0];	// 消息体( 指针 4bytes ) 消息传递时是无效的，这是服务器内部自己赋值的，方便获取消息
};

/* 
 * 发送给 gateserver 的消息集合
 */
message CGameServerMessage
{
	required	S2CHead		MsgHead		= 1;	// 消息头+
	required 	bytes		MsgParas 	= 2;	// 消息集合
};

/////////////////////////////////////////GateServer ==> GameServer///////////////////////////////////
//gateServer转发给gameserver的客户端上行消息结构
message C2SHead
{
	required	CSocketInfo		SocketInfos		= 1;	//发送者socket信息
	required	int32			Cmd		 		= 2;	//消息id
	required	int32			Seq		 		= 3;	//序列号
	required	bool			isEncry			= 4;	//是否加密
};

message CClientMessage
{
	required	C2SHead		MsgHead	 		= 1;	//消息头+
	required 	bytes		MsgParas 		= 4;	//消息
};

/////////////////////////////////内部服务器(dbserver,gameserver等等) ==> ProxyServer/////////////////////
//发送给proxyserver的消息头
message S2PHead
{
	required	uint32			SrcFE			= 1;							// 源服务器类型
	required	uint32			SrcID			= 2;							// 源服务器ID
	required	uint32			DstFE			= 3;							// 目标服务器类型
	required	uint32			DstID			= 4;							// 目标服务器ID
	optional	EMessageCmd		OpFlag			= 5[default = MESS_NULL];		// 指令类型
	required	uint64			TimeStamp		= 6;							// 时间戳(毫秒)
};

message CProxyMessage
{
	required	S2PHead			MsgHead	 		= 1;	//消息头+
	required 	bytes			MsgParas 		= 2;	//消息
};

/////////////////////////////////ProxyServer ==> 内部服务器(dbserver,logserver等等) /////////////////////
message P2SHead
{
	required	int32			Cmd				= 1;							//消息id
};

message CServerMessage
{
	required	P2SHead			MsgHead	 		= 1;	//消息头+
	required 	bytes			MsgParas 		= 2;	//消息
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ping消息
message CMsgPingRequest
{
	enum Msg{MsgID	=	0x00FFFFFF;	}
};