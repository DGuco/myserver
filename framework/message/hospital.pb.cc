// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hospital.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hospital.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace slg {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* CureTimesDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CureTimesDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecvSoldierRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecvSoldierRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecvSoldierResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecvSoldierResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CureSoldierRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CureSoldierRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CureSoldierResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CureSoldierResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HospitalInfoPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HospitalInfoPush_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* HospitalCommandId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* HospitalPushId_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_hospital_2eproto() {
  protobuf_AddDesc_hospital_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hospital.proto");
  GOOGLE_CHECK(file != NULL);
  CureTimesDTO_descriptor_ = file->message_type(0);
  static const int CureTimesDTO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CureTimesDTO, soldiertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CureTimesDTO, times_),
  };
  CureTimesDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CureTimesDTO_descriptor_,
      CureTimesDTO::default_instance_,
      CureTimesDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CureTimesDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CureTimesDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CureTimesDTO));
  RecvSoldierRequest_descriptor_ = file->message_type(1);
  static const int RecvSoldierRequest_offsets_[1] = {
  };
  RecvSoldierRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecvSoldierRequest_descriptor_,
      RecvSoldierRequest::default_instance_,
      RecvSoldierRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvSoldierRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvSoldierRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecvSoldierRequest));
  RecvSoldierResponse_descriptor_ = file->message_type(2);
  static const int RecvSoldierResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvSoldierResponse, soldiers_),
  };
  RecvSoldierResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecvSoldierResponse_descriptor_,
      RecvSoldierResponse::default_instance_,
      RecvSoldierResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvSoldierResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvSoldierResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecvSoldierResponse));
  CureSoldierRequest_descriptor_ = file->message_type(3);
  static const int CureSoldierRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CureSoldierRequest, soldiertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CureSoldierRequest, oper_),
  };
  CureSoldierRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CureSoldierRequest_descriptor_,
      CureSoldierRequest::default_instance_,
      CureSoldierRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CureSoldierRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CureSoldierRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CureSoldierRequest));
  CureSoldierResponse_descriptor_ = file->message_type(4);
  static const int CureSoldierResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CureSoldierResponse, soldiertype_),
  };
  CureSoldierResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CureSoldierResponse_descriptor_,
      CureSoldierResponse::default_instance_,
      CureSoldierResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CureSoldierResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CureSoldierResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CureSoldierResponse));
  HospitalInfoPush_descriptor_ = file->message_type(5);
  static const int HospitalInfoPush_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HospitalInfoPush, woundedsoldiers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HospitalInfoPush, curedsoldiers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HospitalInfoPush, curetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HospitalInfoPush, lastrecvtime_),
  };
  HospitalInfoPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HospitalInfoPush_descriptor_,
      HospitalInfoPush::default_instance_,
      HospitalInfoPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HospitalInfoPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HospitalInfoPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HospitalInfoPush));
  HospitalCommandId_descriptor_ = file->enum_type(0);
  HospitalPushId_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hospital_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CureTimesDTO_descriptor_, &CureTimesDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecvSoldierRequest_descriptor_, &RecvSoldierRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecvSoldierResponse_descriptor_, &RecvSoldierResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CureSoldierRequest_descriptor_, &CureSoldierRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CureSoldierResponse_descriptor_, &CureSoldierResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HospitalInfoPush_descriptor_, &HospitalInfoPush::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hospital_2eproto() {
  delete CureTimesDTO::default_instance_;
  delete CureTimesDTO_reflection_;
  delete RecvSoldierRequest::default_instance_;
  delete RecvSoldierRequest_reflection_;
  delete RecvSoldierResponse::default_instance_;
  delete RecvSoldierResponse_reflection_;
  delete CureSoldierRequest::default_instance_;
  delete CureSoldierRequest_reflection_;
  delete CureSoldierResponse::default_instance_;
  delete CureSoldierResponse_reflection_;
  delete HospitalInfoPush::default_instance_;
  delete HospitalInfoPush_reflection_;
}

void protobuf_AddDesc_hospital_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::slg::protocol::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016hospital.proto\022\014slg.protocol\032\014common.p"
    "roto\"2\n\014CureTimesDTO\022\023\n\013soldierType\030\001 \002("
    "\005\022\r\n\005times\030\002 \002(\005\"\024\n\022RecvSoldierRequest\"A"
    "\n\023RecvSoldierResponse\022*\n\010soldiers\030\001 \003(\0132"
    "\030.slg.protocol.SoldierDTO\"7\n\022CureSoldier"
    "Request\022\023\n\013soldierType\030\001 \002(\005\022\014\n\004oper\030\002 \002"
    "(\010\"*\n\023CureSoldierResponse\022\023\n\013soldierType"
    "\030\001 \002(\005\"\300\001\n\020HospitalInfoPush\0226\n\017woundedSo"
    "ldiers\030\001 \003(\0132\035.slg.protocol.LevelSoldier"
    "DTO\022/\n\rcuredSoldiers\030\002 \003(\0132\030.slg.protoco"
    "l.SoldierDTO\022-\n\tcureTimes\030\003 \003(\0132\032.slg.pr"
    "otocol.CureTimesDTO\022\024\n\014lastRecvTime\030\004 \002("
    "\005*K\n\021HospitalCommandId\022\032\n\025HOSPITAL_RECV_"
    "SOLDIER\020\261\t\022\032\n\025HOSPITAL_CURE_SOLDIER\020\262\t**"
    "\n\016HospitalPushId\022\030\n\022HOSPITAL_INFO_PUSH\020\201"
    "\220\003B-\n\034com.bonusstudio.slg.protocolB\rHosp"
    "italProto", 649);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hospital.proto", &protobuf_RegisterTypes);
  CureTimesDTO::default_instance_ = new CureTimesDTO();
  RecvSoldierRequest::default_instance_ = new RecvSoldierRequest();
  RecvSoldierResponse::default_instance_ = new RecvSoldierResponse();
  CureSoldierRequest::default_instance_ = new CureSoldierRequest();
  CureSoldierResponse::default_instance_ = new CureSoldierResponse();
  HospitalInfoPush::default_instance_ = new HospitalInfoPush();
  CureTimesDTO::default_instance_->InitAsDefaultInstance();
  RecvSoldierRequest::default_instance_->InitAsDefaultInstance();
  RecvSoldierResponse::default_instance_->InitAsDefaultInstance();
  CureSoldierRequest::default_instance_->InitAsDefaultInstance();
  CureSoldierResponse::default_instance_->InitAsDefaultInstance();
  HospitalInfoPush::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hospital_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hospital_2eproto {
  StaticDescriptorInitializer_hospital_2eproto() {
    protobuf_AddDesc_hospital_2eproto();
  }
} static_descriptor_initializer_hospital_2eproto_;
const ::google::protobuf::EnumDescriptor* HospitalCommandId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HospitalCommandId_descriptor_;
}
bool HospitalCommandId_IsValid(int value) {
  switch(value) {
    case 1201:
    case 1202:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* HospitalPushId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HospitalPushId_descriptor_;
}
bool HospitalPushId_IsValid(int value) {
  switch(value) {
    case 51201:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CureTimesDTO::kSoldierTypeFieldNumber;
const int CureTimesDTO::kTimesFieldNumber;
#endif  // !_MSC_VER

CureTimesDTO::CureTimesDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CureTimesDTO::InitAsDefaultInstance() {
}

CureTimesDTO::CureTimesDTO(const CureTimesDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CureTimesDTO::SharedCtor() {
  _cached_size_ = 0;
  soldiertype_ = 0;
  times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CureTimesDTO::~CureTimesDTO() {
  SharedDtor();
}

void CureTimesDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CureTimesDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CureTimesDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CureTimesDTO_descriptor_;
}

const CureTimesDTO& CureTimesDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hospital_2eproto();
  return *default_instance_;
}

CureTimesDTO* CureTimesDTO::default_instance_ = NULL;

CureTimesDTO* CureTimesDTO::New() const {
  return new CureTimesDTO;
}

void CureTimesDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    soldiertype_ = 0;
    times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CureTimesDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 soldierType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soldiertype_)));
          set_has_soldiertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_times;
        break;
      }

      // required int32 times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CureTimesDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 soldierType = 1;
  if (has_soldiertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->soldiertype(), output);
  }

  // required int32 times = 2;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CureTimesDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 soldierType = 1;
  if (has_soldiertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->soldiertype(), target);
  }

  // required int32 times = 2;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CureTimesDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 soldierType = 1;
    if (has_soldiertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soldiertype());
    }

    // required int32 times = 2;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CureTimesDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CureTimesDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CureTimesDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CureTimesDTO::MergeFrom(const CureTimesDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_soldiertype()) {
      set_soldiertype(from.soldiertype());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CureTimesDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CureTimesDTO::CopyFrom(const CureTimesDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CureTimesDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CureTimesDTO::Swap(CureTimesDTO* other) {
  if (other != this) {
    std::swap(soldiertype_, other->soldiertype_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CureTimesDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CureTimesDTO_descriptor_;
  metadata.reflection = CureTimesDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RecvSoldierRequest::RecvSoldierRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecvSoldierRequest::InitAsDefaultInstance() {
}

RecvSoldierRequest::RecvSoldierRequest(const RecvSoldierRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecvSoldierRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecvSoldierRequest::~RecvSoldierRequest() {
  SharedDtor();
}

void RecvSoldierRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecvSoldierRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecvSoldierRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecvSoldierRequest_descriptor_;
}

const RecvSoldierRequest& RecvSoldierRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hospital_2eproto();
  return *default_instance_;
}

RecvSoldierRequest* RecvSoldierRequest::default_instance_ = NULL;

RecvSoldierRequest* RecvSoldierRequest::New() const {
  return new RecvSoldierRequest;
}

void RecvSoldierRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecvSoldierRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RecvSoldierRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecvSoldierRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecvSoldierRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecvSoldierRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecvSoldierRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecvSoldierRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecvSoldierRequest::MergeFrom(const RecvSoldierRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecvSoldierRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecvSoldierRequest::CopyFrom(const RecvSoldierRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvSoldierRequest::IsInitialized() const {

  return true;
}

void RecvSoldierRequest::Swap(RecvSoldierRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecvSoldierRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecvSoldierRequest_descriptor_;
  metadata.reflection = RecvSoldierRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecvSoldierResponse::kSoldiersFieldNumber;
#endif  // !_MSC_VER

RecvSoldierResponse::RecvSoldierResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecvSoldierResponse::InitAsDefaultInstance() {
}

RecvSoldierResponse::RecvSoldierResponse(const RecvSoldierResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecvSoldierResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecvSoldierResponse::~RecvSoldierResponse() {
  SharedDtor();
}

void RecvSoldierResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecvSoldierResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecvSoldierResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecvSoldierResponse_descriptor_;
}

const RecvSoldierResponse& RecvSoldierResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hospital_2eproto();
  return *default_instance_;
}

RecvSoldierResponse* RecvSoldierResponse::default_instance_ = NULL;

RecvSoldierResponse* RecvSoldierResponse::New() const {
  return new RecvSoldierResponse;
}

void RecvSoldierResponse::Clear() {
  soldiers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecvSoldierResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.SoldierDTO soldiers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soldiers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_soldiers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_soldiers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecvSoldierResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.SoldierDTO soldiers = 1;
  for (int i = 0; i < this->soldiers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->soldiers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecvSoldierResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.SoldierDTO soldiers = 1;
  for (int i = 0; i < this->soldiers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->soldiers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecvSoldierResponse::ByteSize() const {
  int total_size = 0;

  // repeated .slg.protocol.SoldierDTO soldiers = 1;
  total_size += 1 * this->soldiers_size();
  for (int i = 0; i < this->soldiers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->soldiers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecvSoldierResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecvSoldierResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecvSoldierResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecvSoldierResponse::MergeFrom(const RecvSoldierResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  soldiers_.MergeFrom(from.soldiers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecvSoldierResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecvSoldierResponse::CopyFrom(const RecvSoldierResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvSoldierResponse::IsInitialized() const {

  for (int i = 0; i < soldiers_size(); i++) {
    if (!this->soldiers(i).IsInitialized()) return false;
  }
  return true;
}

void RecvSoldierResponse::Swap(RecvSoldierResponse* other) {
  if (other != this) {
    soldiers_.Swap(&other->soldiers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecvSoldierResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecvSoldierResponse_descriptor_;
  metadata.reflection = RecvSoldierResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CureSoldierRequest::kSoldierTypeFieldNumber;
const int CureSoldierRequest::kOperFieldNumber;
#endif  // !_MSC_VER

CureSoldierRequest::CureSoldierRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CureSoldierRequest::InitAsDefaultInstance() {
}

CureSoldierRequest::CureSoldierRequest(const CureSoldierRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CureSoldierRequest::SharedCtor() {
  _cached_size_ = 0;
  soldiertype_ = 0;
  oper_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CureSoldierRequest::~CureSoldierRequest() {
  SharedDtor();
}

void CureSoldierRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CureSoldierRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CureSoldierRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CureSoldierRequest_descriptor_;
}

const CureSoldierRequest& CureSoldierRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hospital_2eproto();
  return *default_instance_;
}

CureSoldierRequest* CureSoldierRequest::default_instance_ = NULL;

CureSoldierRequest* CureSoldierRequest::New() const {
  return new CureSoldierRequest;
}

void CureSoldierRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    soldiertype_ = 0;
    oper_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CureSoldierRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 soldierType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soldiertype_)));
          set_has_soldiertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_oper;
        break;
      }

      // required bool oper = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &oper_)));
          set_has_oper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CureSoldierRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 soldierType = 1;
  if (has_soldiertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->soldiertype(), output);
  }

  // required bool oper = 2;
  if (has_oper()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->oper(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CureSoldierRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 soldierType = 1;
  if (has_soldiertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->soldiertype(), target);
  }

  // required bool oper = 2;
  if (has_oper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->oper(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CureSoldierRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 soldierType = 1;
    if (has_soldiertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soldiertype());
    }

    // required bool oper = 2;
    if (has_oper()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CureSoldierRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CureSoldierRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CureSoldierRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CureSoldierRequest::MergeFrom(const CureSoldierRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_soldiertype()) {
      set_soldiertype(from.soldiertype());
    }
    if (from.has_oper()) {
      set_oper(from.oper());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CureSoldierRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CureSoldierRequest::CopyFrom(const CureSoldierRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CureSoldierRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CureSoldierRequest::Swap(CureSoldierRequest* other) {
  if (other != this) {
    std::swap(soldiertype_, other->soldiertype_);
    std::swap(oper_, other->oper_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CureSoldierRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CureSoldierRequest_descriptor_;
  metadata.reflection = CureSoldierRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CureSoldierResponse::kSoldierTypeFieldNumber;
#endif  // !_MSC_VER

CureSoldierResponse::CureSoldierResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CureSoldierResponse::InitAsDefaultInstance() {
}

CureSoldierResponse::CureSoldierResponse(const CureSoldierResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CureSoldierResponse::SharedCtor() {
  _cached_size_ = 0;
  soldiertype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CureSoldierResponse::~CureSoldierResponse() {
  SharedDtor();
}

void CureSoldierResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CureSoldierResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CureSoldierResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CureSoldierResponse_descriptor_;
}

const CureSoldierResponse& CureSoldierResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hospital_2eproto();
  return *default_instance_;
}

CureSoldierResponse* CureSoldierResponse::default_instance_ = NULL;

CureSoldierResponse* CureSoldierResponse::New() const {
  return new CureSoldierResponse;
}

void CureSoldierResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    soldiertype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CureSoldierResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 soldierType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soldiertype_)));
          set_has_soldiertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CureSoldierResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 soldierType = 1;
  if (has_soldiertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->soldiertype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CureSoldierResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 soldierType = 1;
  if (has_soldiertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->soldiertype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CureSoldierResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 soldierType = 1;
    if (has_soldiertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soldiertype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CureSoldierResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CureSoldierResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CureSoldierResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CureSoldierResponse::MergeFrom(const CureSoldierResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_soldiertype()) {
      set_soldiertype(from.soldiertype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CureSoldierResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CureSoldierResponse::CopyFrom(const CureSoldierResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CureSoldierResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CureSoldierResponse::Swap(CureSoldierResponse* other) {
  if (other != this) {
    std::swap(soldiertype_, other->soldiertype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CureSoldierResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CureSoldierResponse_descriptor_;
  metadata.reflection = CureSoldierResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HospitalInfoPush::kWoundedSoldiersFieldNumber;
const int HospitalInfoPush::kCuredSoldiersFieldNumber;
const int HospitalInfoPush::kCureTimesFieldNumber;
const int HospitalInfoPush::kLastRecvTimeFieldNumber;
#endif  // !_MSC_VER

HospitalInfoPush::HospitalInfoPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HospitalInfoPush::InitAsDefaultInstance() {
}

HospitalInfoPush::HospitalInfoPush(const HospitalInfoPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HospitalInfoPush::SharedCtor() {
  _cached_size_ = 0;
  lastrecvtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HospitalInfoPush::~HospitalInfoPush() {
  SharedDtor();
}

void HospitalInfoPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HospitalInfoPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HospitalInfoPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HospitalInfoPush_descriptor_;
}

const HospitalInfoPush& HospitalInfoPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hospital_2eproto();
  return *default_instance_;
}

HospitalInfoPush* HospitalInfoPush::default_instance_ = NULL;

HospitalInfoPush* HospitalInfoPush::New() const {
  return new HospitalInfoPush;
}

void HospitalInfoPush::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    lastrecvtime_ = 0;
  }
  woundedsoldiers_.Clear();
  curedsoldiers_.Clear();
  curetimes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HospitalInfoPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.LevelSoldierDTO woundedSoldiers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_woundedSoldiers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_woundedsoldiers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_woundedSoldiers;
        if (input->ExpectTag(18)) goto parse_curedSoldiers;
        break;
      }

      // repeated .slg.protocol.SoldierDTO curedSoldiers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_curedSoldiers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_curedsoldiers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_curedSoldiers;
        if (input->ExpectTag(26)) goto parse_cureTimes;
        break;
      }

      // repeated .slg.protocol.CureTimesDTO cureTimes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cureTimes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_curetimes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cureTimes;
        if (input->ExpectTag(32)) goto parse_lastRecvTime;
        break;
      }

      // required int32 lastRecvTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastRecvTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastrecvtime_)));
          set_has_lastrecvtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HospitalInfoPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.LevelSoldierDTO woundedSoldiers = 1;
  for (int i = 0; i < this->woundedsoldiers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->woundedsoldiers(i), output);
  }

  // repeated .slg.protocol.SoldierDTO curedSoldiers = 2;
  for (int i = 0; i < this->curedsoldiers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->curedsoldiers(i), output);
  }

  // repeated .slg.protocol.CureTimesDTO cureTimes = 3;
  for (int i = 0; i < this->curetimes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->curetimes(i), output);
  }

  // required int32 lastRecvTime = 4;
  if (has_lastrecvtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lastrecvtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HospitalInfoPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.LevelSoldierDTO woundedSoldiers = 1;
  for (int i = 0; i < this->woundedsoldiers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->woundedsoldiers(i), target);
  }

  // repeated .slg.protocol.SoldierDTO curedSoldiers = 2;
  for (int i = 0; i < this->curedsoldiers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->curedsoldiers(i), target);
  }

  // repeated .slg.protocol.CureTimesDTO cureTimes = 3;
  for (int i = 0; i < this->curetimes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->curetimes(i), target);
  }

  // required int32 lastRecvTime = 4;
  if (has_lastrecvtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lastrecvtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HospitalInfoPush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // required int32 lastRecvTime = 4;
    if (has_lastrecvtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastrecvtime());
    }

  }
  // repeated .slg.protocol.LevelSoldierDTO woundedSoldiers = 1;
  total_size += 1 * this->woundedsoldiers_size();
  for (int i = 0; i < this->woundedsoldiers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->woundedsoldiers(i));
  }

  // repeated .slg.protocol.SoldierDTO curedSoldiers = 2;
  total_size += 1 * this->curedsoldiers_size();
  for (int i = 0; i < this->curedsoldiers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->curedsoldiers(i));
  }

  // repeated .slg.protocol.CureTimesDTO cureTimes = 3;
  total_size += 1 * this->curetimes_size();
  for (int i = 0; i < this->curetimes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->curetimes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HospitalInfoPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HospitalInfoPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HospitalInfoPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HospitalInfoPush::MergeFrom(const HospitalInfoPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  woundedsoldiers_.MergeFrom(from.woundedsoldiers_);
  curedsoldiers_.MergeFrom(from.curedsoldiers_);
  curetimes_.MergeFrom(from.curetimes_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_lastrecvtime()) {
      set_lastrecvtime(from.lastrecvtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HospitalInfoPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HospitalInfoPush::CopyFrom(const HospitalInfoPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HospitalInfoPush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;

  for (int i = 0; i < woundedsoldiers_size(); i++) {
    if (!this->woundedsoldiers(i).IsInitialized()) return false;
  }
  for (int i = 0; i < curedsoldiers_size(); i++) {
    if (!this->curedsoldiers(i).IsInitialized()) return false;
  }
  for (int i = 0; i < curetimes_size(); i++) {
    if (!this->curetimes(i).IsInitialized()) return false;
  }
  return true;
}

void HospitalInfoPush::Swap(HospitalInfoPush* other) {
  if (other != this) {
    woundedsoldiers_.Swap(&other->woundedsoldiers_);
    curedsoldiers_.Swap(&other->curedsoldiers_);
    curetimes_.Swap(&other->curetimes_);
    std::swap(lastrecvtime_, other->lastrecvtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HospitalInfoPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HospitalInfoPush_descriptor_;
  metadata.reflection = HospitalInfoPush_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace slg

// @@protoc_insertion_point(global_scope)
