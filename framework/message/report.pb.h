// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: report.proto

#ifndef PROTOBUF_report_2eproto__INCLUDED
#define PROTOBUF_report_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace slg {
namespace protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_report_2eproto();
void protobuf_AssignDesc_report_2eproto();
void protobuf_ShutdownFile_report_2eproto();

class ReportArmyDTO;
class ReportPlayerDTO;
class ReportResourceDTO;
class ReportPVPResourceDTO;
class ReportResourcePillageDTO;
class ReportPVPCityDTO;
class ReportRewardDTO;
class ReportPVEMonsterDTO;
class TradeResultDTO;
class ReportTradeDTO;
class ArmyDeadDTO;
class ReportDeadDTO;
class ReportDTO;
class ReportTargetDTO;
class ReportResultDTO;
class ReportProfileDTO;
class ReportDetailRequest;
class ReportDetailResponse;
class ReportRewardTakeRequest;
class ReportRewardTakeResponse;
class ReportDeleteRequest;
class ReportDeleteResponse;
class ReportProfileListPush;
class ReportSpyPlayerDTO;
class ReportSpyResourceDTO;
class ReportSpyWallDTO;
class ReportSpyArmyDTO;
class ReportSpyAidDTO;
class ReportSpyTowerDTO;
class ReportSpyCityDTO;
class ReportSpyResourceGridProfileDTO;
class ReportSpyResourceGridDTO;
class ReportSpyDTO;
class ReportSpyProfileDTO;
class ReportSpyProfileListPush;
class ReportSpyDetailRequest;
class ReportSpyDetailResponse;
class ReportSpyReadRequest;
class ReportSpyDeleteRequest;

enum ReportType {
  REPORT_RESOURCE = 1,
  REPORT_PVP_RESOURCE = 2,
  REPORT_PVP_CITY = 3,
  REPORT_PVE_MONSTER = 4,
  REPORT_MARKET_TRADE = 5,
  REPORT_HOSPITAL_DEAD = 6
};
bool ReportType_IsValid(int value);
const ReportType ReportType_MIN = REPORT_RESOURCE;
const ReportType ReportType_MAX = REPORT_HOSPITAL_DEAD;
const int ReportType_ARRAYSIZE = ReportType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReportType_descriptor();
inline const ::std::string& ReportType_Name(ReportType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReportType_descriptor(), value);
}
inline bool ReportType_Parse(
    const ::std::string& name, ReportType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReportType>(
    ReportType_descriptor(), name, value);
}
enum ReportCommandId {
  REPORT_REWARD_TAKE = 1702,
  REPORT_DELETE = 1703,
  REPORT_DETAIL = 1705
};
bool ReportCommandId_IsValid(int value);
const ReportCommandId ReportCommandId_MIN = REPORT_REWARD_TAKE;
const ReportCommandId ReportCommandId_MAX = REPORT_DETAIL;
const int ReportCommandId_ARRAYSIZE = ReportCommandId_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReportCommandId_descriptor();
inline const ::std::string& ReportCommandId_Name(ReportCommandId value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReportCommandId_descriptor(), value);
}
inline bool ReportCommandId_Parse(
    const ::std::string& name, ReportCommandId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReportCommandId>(
    ReportCommandId_descriptor(), name, value);
}
enum ReportPushId {
  REPORT_PROFILE_LIST_PUSH = 51701
};
bool ReportPushId_IsValid(int value);
const ReportPushId ReportPushId_MIN = REPORT_PROFILE_LIST_PUSH;
const ReportPushId ReportPushId_MAX = REPORT_PROFILE_LIST_PUSH;
const int ReportPushId_ARRAYSIZE = ReportPushId_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReportPushId_descriptor();
inline const ::std::string& ReportPushId_Name(ReportPushId value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReportPushId_descriptor(), value);
}
inline bool ReportPushId_Parse(
    const ::std::string& name, ReportPushId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReportPushId>(
    ReportPushId_descriptor(), name, value);
}
enum ReportSpyType {
  REPORT_SPY_CITY = 1,
  REPORT_SPY_RESOURCE = 2
};
bool ReportSpyType_IsValid(int value);
const ReportSpyType ReportSpyType_MIN = REPORT_SPY_CITY;
const ReportSpyType ReportSpyType_MAX = REPORT_SPY_RESOURCE;
const int ReportSpyType_ARRAYSIZE = ReportSpyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReportSpyType_descriptor();
inline const ::std::string& ReportSpyType_Name(ReportSpyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReportSpyType_descriptor(), value);
}
inline bool ReportSpyType_Parse(
    const ::std::string& name, ReportSpyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReportSpyType>(
    ReportSpyType_descriptor(), name, value);
}
enum ReportSpyResult {
  REPORT_SPY_SUCCESS = 1,
  REPORT_SPY_ANTI = 2,
  REPORT_SPY_NOT_FOUND = 3
};
bool ReportSpyResult_IsValid(int value);
const ReportSpyResult ReportSpyResult_MIN = REPORT_SPY_SUCCESS;
const ReportSpyResult ReportSpyResult_MAX = REPORT_SPY_NOT_FOUND;
const int ReportSpyResult_ARRAYSIZE = ReportSpyResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReportSpyResult_descriptor();
inline const ::std::string& ReportSpyResult_Name(ReportSpyResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReportSpyResult_descriptor(), value);
}
inline bool ReportSpyResult_Parse(
    const ::std::string& name, ReportSpyResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReportSpyResult>(
    ReportSpyResult_descriptor(), name, value);
}
enum ReportSpyPushId {
  REPORT_SPY_PROFILE_LIST_PUSH = 51710
};
bool ReportSpyPushId_IsValid(int value);
const ReportSpyPushId ReportSpyPushId_MIN = REPORT_SPY_PROFILE_LIST_PUSH;
const ReportSpyPushId ReportSpyPushId_MAX = REPORT_SPY_PROFILE_LIST_PUSH;
const int ReportSpyPushId_ARRAYSIZE = ReportSpyPushId_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReportSpyPushId_descriptor();
inline const ::std::string& ReportSpyPushId_Name(ReportSpyPushId value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReportSpyPushId_descriptor(), value);
}
inline bool ReportSpyPushId_Parse(
    const ::std::string& name, ReportSpyPushId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReportSpyPushId>(
    ReportSpyPushId_descriptor(), name, value);
}
enum ReportSpyCommandId {
  REPORT_SPY_DETAIL = 1710,
  REPORT_SPY_READ = 1711,
  REPORT_SPY_DELETE = 1712
};
bool ReportSpyCommandId_IsValid(int value);
const ReportSpyCommandId ReportSpyCommandId_MIN = REPORT_SPY_DETAIL;
const ReportSpyCommandId ReportSpyCommandId_MAX = REPORT_SPY_DELETE;
const int ReportSpyCommandId_ARRAYSIZE = ReportSpyCommandId_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReportSpyCommandId_descriptor();
inline const ::std::string& ReportSpyCommandId_Name(ReportSpyCommandId value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReportSpyCommandId_descriptor(), value);
}
inline bool ReportSpyCommandId_Parse(
    const ::std::string& name, ReportSpyCommandId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReportSpyCommandId>(
    ReportSpyCommandId_descriptor(), name, value);
}
// ===================================================================

class ReportArmyDTO : public ::google::protobuf::Message {
 public:
  ReportArmyDTO();
  virtual ~ReportArmyDTO();

  ReportArmyDTO(const ReportArmyDTO& from);

  inline ReportArmyDTO& operator=(const ReportArmyDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportArmyDTO& default_instance();

  void Swap(ReportArmyDTO* other);

  // implements Message ----------------------------------------------

  ReportArmyDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportArmyDTO& from);
  void MergeFrom(const ReportArmyDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 armyType = 1;
  inline bool has_armytype() const;
  inline void clear_armytype();
  static const int kArmyTypeFieldNumber = 1;
  inline ::google::protobuf::int32 armytype() const;
  inline void set_armytype(::google::protobuf::int32 value);

  // required int32 armyLevel = 2;
  inline bool has_armylevel() const;
  inline void clear_armylevel();
  static const int kArmyLevelFieldNumber = 2;
  inline ::google::protobuf::int32 armylevel() const;
  inline void set_armylevel(::google::protobuf::int32 value);

  // required int32 dispatch = 3;
  inline bool has_dispatch() const;
  inline void clear_dispatch();
  static const int kDispatchFieldNumber = 3;
  inline ::google::protobuf::int32 dispatch() const;
  inline void set_dispatch(::google::protobuf::int32 value);

  // required int32 death = 4;
  inline bool has_death() const;
  inline void clear_death();
  static const int kDeathFieldNumber = 4;
  inline ::google::protobuf::int32 death() const;
  inline void set_death(::google::protobuf::int32 value);

  // required int32 hurt = 5;
  inline bool has_hurt() const;
  inline void clear_hurt();
  static const int kHurtFieldNumber = 5;
  inline ::google::protobuf::int32 hurt() const;
  inline void set_hurt(::google::protobuf::int32 value);

  // required int32 revive = 6;
  inline bool has_revive() const;
  inline void clear_revive();
  static const int kReviveFieldNumber = 6;
  inline ::google::protobuf::int32 revive() const;
  inline void set_revive(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.ReportArmyDTO)
 private:
  inline void set_has_armytype();
  inline void clear_has_armytype();
  inline void set_has_armylevel();
  inline void clear_has_armylevel();
  inline void set_has_dispatch();
  inline void clear_has_dispatch();
  inline void set_has_death();
  inline void clear_has_death();
  inline void set_has_hurt();
  inline void clear_has_hurt();
  inline void set_has_revive();
  inline void clear_has_revive();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 armytype_;
  ::google::protobuf::int32 armylevel_;
  ::google::protobuf::int32 dispatch_;
  ::google::protobuf::int32 death_;
  ::google::protobuf::int32 hurt_;
  ::google::protobuf::int32 revive_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ReportArmyDTO* default_instance_;
};
// -------------------------------------------------------------------

class ReportPlayerDTO : public ::google::protobuf::Message {
 public:
  ReportPlayerDTO();
  virtual ~ReportPlayerDTO();

  ReportPlayerDTO(const ReportPlayerDTO& from);

  inline ReportPlayerDTO& operator=(const ReportPlayerDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportPlayerDTO& default_instance();

  void Swap(ReportPlayerDTO* other);

  // implements Message ----------------------------------------------

  ReportPlayerDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportPlayerDTO& from);
  void MergeFrom(const ReportPlayerDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // required .slg.protocol.PositionDTO playerPos = 2;
  inline bool has_playerpos() const;
  inline void clear_playerpos();
  static const int kPlayerPosFieldNumber = 2;
  inline const ::slg::protocol::PositionDTO& playerpos() const;
  inline ::slg::protocol::PositionDTO* mutable_playerpos();
  inline ::slg::protocol::PositionDTO* release_playerpos();
  inline void set_allocated_playerpos(::slg::protocol::PositionDTO* playerpos);

  // required string nickName = 3;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 3;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // required int32 battlePowerLose = 4;
  inline bool has_battlepowerlose() const;
  inline void clear_battlepowerlose();
  static const int kBattlePowerLoseFieldNumber = 4;
  inline ::google::protobuf::int32 battlepowerlose() const;
  inline void set_battlepowerlose(::google::protobuf::int32 value);

  // repeated .slg.protocol.PropertyDTO additions = 5;
  inline int additions_size() const;
  inline void clear_additions();
  static const int kAdditionsFieldNumber = 5;
  inline const ::slg::protocol::PropertyDTO& additions(int index) const;
  inline ::slg::protocol::PropertyDTO* mutable_additions(int index);
  inline ::slg::protocol::PropertyDTO* add_additions();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::PropertyDTO >&
      additions() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::PropertyDTO >*
      mutable_additions();

  // repeated .slg.protocol.ReportArmyDTO armies = 6;
  inline int armies_size() const;
  inline void clear_armies();
  static const int kArmiesFieldNumber = 6;
  inline const ::slg::protocol::ReportArmyDTO& armies(int index) const;
  inline ::slg::protocol::ReportArmyDTO* mutable_armies(int index);
  inline ::slg::protocol::ReportArmyDTO* add_armies();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportArmyDTO >&
      armies() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportArmyDTO >*
      mutable_armies();

  // @@protoc_insertion_point(class_scope:slg.protocol.ReportPlayerDTO)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_playerpos();
  inline void clear_has_playerpos();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_battlepowerlose();
  inline void clear_has_battlepowerlose();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 playerid_;
  ::slg::protocol::PositionDTO* playerpos_;
  ::std::string* nickname_;
  ::google::protobuf::RepeatedPtrField< ::slg::protocol::PropertyDTO > additions_;
  ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportArmyDTO > armies_;
  ::google::protobuf::int32 battlepowerlose_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ReportPlayerDTO* default_instance_;
};
// -------------------------------------------------------------------

class ReportResourceDTO : public ::google::protobuf::Message {
 public:
  ReportResourceDTO();
  virtual ~ReportResourceDTO();

  ReportResourceDTO(const ReportResourceDTO& from);

  inline ReportResourceDTO& operator=(const ReportResourceDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportResourceDTO& default_instance();

  void Swap(ReportResourceDTO* other);

  // implements Message ----------------------------------------------

  ReportResourceDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportResourceDTO& from);
  void MergeFrom(const ReportResourceDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // required int32 soldiers = 4;
  inline bool has_soldiers() const;
  inline void clear_soldiers();
  static const int kSoldiersFieldNumber = 4;
  inline ::google::protobuf::int32 soldiers() const;
  inline void set_soldiers(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.ReportResourceDTO)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_soldiers();
  inline void clear_has_soldiers();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 soldiers_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ReportResourceDTO* default_instance_;
};
// -------------------------------------------------------------------

class ReportPVPResourceDTO : public ::google::protobuf::Message {
 public:
  ReportPVPResourceDTO();
  virtual ~ReportPVPResourceDTO();

  ReportPVPResourceDTO(const ReportPVPResourceDTO& from);

  inline ReportPVPResourceDTO& operator=(const ReportPVPResourceDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportPVPResourceDTO& default_instance();

  void Swap(ReportPVPResourceDTO* other);

  // implements Message ----------------------------------------------

  ReportPVPResourceDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportPVPResourceDTO& from);
  void MergeFrom(const ReportPVPResourceDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required .slg.protocol.ReportPlayerDTO attacker = 3;
  inline bool has_attacker() const;
  inline void clear_attacker();
  static const int kAttackerFieldNumber = 3;
  inline const ::slg::protocol::ReportPlayerDTO& attacker() const;
  inline ::slg::protocol::ReportPlayerDTO* mutable_attacker();
  inline ::slg::protocol::ReportPlayerDTO* release_attacker();
  inline void set_allocated_attacker(::slg::protocol::ReportPlayerDTO* attacker);

  // required .slg.protocol.ReportPlayerDTO defender = 4;
  inline bool has_defender() const;
  inline void clear_defender();
  static const int kDefenderFieldNumber = 4;
  inline const ::slg::protocol::ReportPlayerDTO& defender() const;
  inline ::slg::protocol::ReportPlayerDTO* mutable_defender();
  inline ::slg::protocol::ReportPlayerDTO* release_defender();
  inline void set_allocated_defender(::slg::protocol::ReportPlayerDTO* defender);

  // required int64 winnerId = 5;
  inline bool has_winnerid() const;
  inline void clear_winnerid();
  static const int kWinnerIdFieldNumber = 5;
  inline ::google::protobuf::int64 winnerid() const;
  inline void set_winnerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.ReportPVPResourceDTO)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_attacker();
  inline void clear_has_attacker();
  inline void set_has_defender();
  inline void clear_has_defender();
  inline void set_has_winnerid();
  inline void clear_has_winnerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 type_;
  ::slg::protocol::ReportPlayerDTO* attacker_;
  ::slg::protocol::ReportPlayerDTO* defender_;
  ::google::protobuf::int64 winnerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ReportPVPResourceDTO* default_instance_;
};
// -------------------------------------------------------------------

class ReportResourcePillageDTO : public ::google::protobuf::Message {
 public:
  ReportResourcePillageDTO();
  virtual ~ReportResourcePillageDTO();

  ReportResourcePillageDTO(const ReportResourcePillageDTO& from);

  inline ReportResourcePillageDTO& operator=(const ReportResourcePillageDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportResourcePillageDTO& default_instance();

  void Swap(ReportResourcePillageDTO* other);

  // implements Message ----------------------------------------------

  ReportResourcePillageDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportResourcePillageDTO& from);
  void MergeFrom(const ReportResourcePillageDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // required int32 upperBound = 3;
  inline bool has_upperbound() const;
  inline void clear_upperbound();
  static const int kUpperBoundFieldNumber = 3;
  inline ::google::protobuf::int32 upperbound() const;
  inline void set_upperbound(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.ReportResourcePillageDTO)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_upperbound();
  inline void clear_has_upperbound();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 upperbound_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ReportResourcePillageDTO* default_instance_;
};
// -------------------------------------------------------------------

class ReportPVPCityDTO : public ::google::protobuf::Message {
 public:
  ReportPVPCityDTO();
  virtual ~ReportPVPCityDTO();

  ReportPVPCityDTO(const ReportPVPCityDTO& from);

  inline ReportPVPCityDTO& operator=(const ReportPVPCityDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportPVPCityDTO& default_instance();

  void Swap(ReportPVPCityDTO* other);

  // implements Message ----------------------------------------------

  ReportPVPCityDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportPVPCityDTO& from);
  void MergeFrom(const ReportPVPCityDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .slg.protocol.ReportPlayerDTO attacker = 1;
  inline bool has_attacker() const;
  inline void clear_attacker();
  static const int kAttackerFieldNumber = 1;
  inline const ::slg::protocol::ReportPlayerDTO& attacker() const;
  inline ::slg::protocol::ReportPlayerDTO* mutable_attacker();
  inline ::slg::protocol::ReportPlayerDTO* release_attacker();
  inline void set_allocated_attacker(::slg::protocol::ReportPlayerDTO* attacker);

  // required .slg.protocol.ReportPlayerDTO defender = 2;
  inline bool has_defender() const;
  inline void clear_defender();
  static const int kDefenderFieldNumber = 2;
  inline const ::slg::protocol::ReportPlayerDTO& defender() const;
  inline ::slg::protocol::ReportPlayerDTO* mutable_defender();
  inline ::slg::protocol::ReportPlayerDTO* release_defender();
  inline void set_allocated_defender(::slg::protocol::ReportPlayerDTO* defender);

  // repeated .slg.protocol.ReportResourcePillageDTO pillages = 3;
  inline int pillages_size() const;
  inline void clear_pillages();
  static const int kPillagesFieldNumber = 3;
  inline const ::slg::protocol::ReportResourcePillageDTO& pillages(int index) const;
  inline ::slg::protocol::ReportResourcePillageDTO* mutable_pillages(int index);
  inline ::slg::protocol::ReportResourcePillageDTO* add_pillages();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportResourcePillageDTO >&
      pillages() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportResourcePillageDTO >*
      mutable_pillages();

  // required int64 winnerId = 4;
  inline bool has_winnerid() const;
  inline void clear_winnerid();
  static const int kWinnerIdFieldNumber = 4;
  inline ::google::protobuf::int64 winnerid() const;
  inline void set_winnerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.ReportPVPCityDTO)
 private:
  inline void set_has_attacker();
  inline void clear_has_attacker();
  inline void set_has_defender();
  inline void clear_has_defender();
  inline void set_has_winnerid();
  inline void clear_has_winnerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::slg::protocol::ReportPlayerDTO* attacker_;
  ::slg::protocol::ReportPlayerDTO* defender_;
  ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportResourcePillageDTO > pillages_;
  ::google::protobuf::int64 winnerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ReportPVPCityDTO* default_instance_;
};
// -------------------------------------------------------------------

class ReportRewardDTO : public ::google::protobuf::Message {
 public:
  ReportRewardDTO();
  virtual ~ReportRewardDTO();

  ReportRewardDTO(const ReportRewardDTO& from);

  inline ReportRewardDTO& operator=(const ReportRewardDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportRewardDTO& default_instance();

  void Swap(ReportRewardDTO* other);

  // implements Message ----------------------------------------------

  ReportRewardDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportRewardDTO& from);
  void MergeFrom(const ReportRewardDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.ReportRewardDTO)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ReportRewardDTO* default_instance_;
};
// -------------------------------------------------------------------

class ReportPVEMonsterDTO : public ::google::protobuf::Message {
 public:
  ReportPVEMonsterDTO();
  virtual ~ReportPVEMonsterDTO();

  ReportPVEMonsterDTO(const ReportPVEMonsterDTO& from);

  inline ReportPVEMonsterDTO& operator=(const ReportPVEMonsterDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportPVEMonsterDTO& default_instance();

  void Swap(ReportPVEMonsterDTO* other);

  // implements Message ----------------------------------------------

  ReportPVEMonsterDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportPVEMonsterDTO& from);
  void MergeFrom(const ReportPVEMonsterDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 monsterId = 1;
  inline bool has_monsterid() const;
  inline void clear_monsterid();
  static const int kMonsterIdFieldNumber = 1;
  inline ::google::protobuf::int32 monsterid() const;
  inline void set_monsterid(::google::protobuf::int32 value);

  // required bool won = 2;
  inline bool has_won() const;
  inline void clear_won();
  static const int kWonFieldNumber = 2;
  inline bool won() const;
  inline void set_won(bool value);

  // required bool firstKill = 3;
  inline bool has_firstkill() const;
  inline void clear_firstkill();
  static const int kFirstKillFieldNumber = 3;
  inline bool firstkill() const;
  inline void set_firstkill(bool value);

  // required int32 dispatch = 4;
  inline bool has_dispatch() const;
  inline void clear_dispatch();
  static const int kDispatchFieldNumber = 4;
  inline ::google::protobuf::int32 dispatch() const;
  inline void set_dispatch(::google::protobuf::int32 value);

  // required int32 remain = 5;
  inline bool has_remain() const;
  inline void clear_remain();
  static const int kRemainFieldNumber = 5;
  inline ::google::protobuf::int32 remain() const;
  inline void set_remain(::google::protobuf::int32 value);

  // repeated .slg.protocol.ReportRewardDTO rewards = 6;
  inline int rewards_size() const;
  inline void clear_rewards();
  static const int kRewardsFieldNumber = 6;
  inline const ::slg::protocol::ReportRewardDTO& rewards(int index) const;
  inline ::slg::protocol::ReportRewardDTO* mutable_rewards(int index);
  inline ::slg::protocol::ReportRewardDTO* add_rewards();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportRewardDTO >&
      rewards() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportRewardDTO >*
      mutable_rewards();

  // @@protoc_insertion_point(class_scope:slg.protocol.ReportPVEMonsterDTO)
 private:
  inline void set_has_monsterid();
  inline void clear_has_monsterid();
  inline void set_has_won();
  inline void clear_has_won();
  inline void set_has_firstkill();
  inline void clear_has_firstkill();
  inline void set_has_dispatch();
  inline void clear_has_dispatch();
  inline void set_has_remain();
  inline void clear_has_remain();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 monsterid_;
  bool won_;
  bool firstkill_;
  ::google::protobuf::int32 dispatch_;
  ::google::protobuf::int32 remain_;
  ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportRewardDTO > rewards_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ReportPVEMonsterDTO* default_instance_;
};
// -------------------------------------------------------------------

class TradeResultDTO : public ::google::protobuf::Message {
 public:
  TradeResultDTO();
  virtual ~TradeResultDTO();

  TradeResultDTO(const TradeResultDTO& from);

  inline TradeResultDTO& operator=(const TradeResultDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TradeResultDTO& default_instance();

  void Swap(TradeResultDTO* other);

  // implements Message ----------------------------------------------

  TradeResultDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TradeResultDTO& from);
  void MergeFrom(const TradeResultDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string playerName = 1;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 1;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // repeated .slg.protocol.PropertyDTO rewards = 2;
  inline int rewards_size() const;
  inline void clear_rewards();
  static const int kRewardsFieldNumber = 2;
  inline const ::slg::protocol::PropertyDTO& rewards(int index) const;
  inline ::slg::protocol::PropertyDTO* mutable_rewards(int index);
  inline ::slg::protocol::PropertyDTO* add_rewards();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::PropertyDTO >&
      rewards() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::PropertyDTO >*
      mutable_rewards();

  // required int32 envet = 3;
  inline bool has_envet() const;
  inline void clear_envet();
  static const int kEnvetFieldNumber = 3;
  inline ::google::protobuf::int32 envet() const;
  inline void set_envet(::google::protobuf::int32 value);

  // required int32 traderId = 4;
  inline bool has_traderid() const;
  inline void clear_traderid();
  static const int kTraderIdFieldNumber = 4;
  inline ::google::protobuf::int32 traderid() const;
  inline void set_traderid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.TradeResultDTO)
 private:
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_envet();
  inline void clear_has_envet();
  inline void set_has_traderid();
  inline void clear_has_traderid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* playername_;
  ::google::protobuf::RepeatedPtrField< ::slg::protocol::PropertyDTO > rewards_;
  ::google::protobuf::int32 envet_;
  ::google::protobuf::int32 traderid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static TradeResultDTO* default_instance_;
};
// -------------------------------------------------------------------

class ReportTradeDTO : public ::google::protobuf::Message {
 public:
  ReportTradeDTO();
  virtual ~ReportTradeDTO();

  ReportTradeDTO(const ReportTradeDTO& from);

  inline ReportTradeDTO& operator=(const ReportTradeDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportTradeDTO& default_instance();

  void Swap(ReportTradeDTO* other);

  // implements Message ----------------------------------------------

  ReportTradeDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportTradeDTO& from);
  void MergeFrom(const ReportTradeDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .slg.protocol.TradeResultDTO tradeList = 1;
  inline int tradelist_size() const;
  inline void clear_tradelist();
  static const int kTradeListFieldNumber = 1;
  inline const ::slg::protocol::TradeResultDTO& tradelist(int index) const;
  inline ::slg::protocol::TradeResultDTO* mutable_tradelist(int index);
  inline ::slg::protocol::TradeResultDTO* add_tradelist();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::TradeResultDTO >&
      tradelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::TradeResultDTO >*
      mutable_tradelist();

  // @@protoc_insertion_point(class_scope:slg.protocol.ReportTradeDTO)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::slg::protocol::TradeResultDTO > tradelist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ReportTradeDTO* default_instance_;
};
// -------------------------------------------------------------------

class ArmyDeadDTO : public ::google::protobuf::Message {
 public:
  ArmyDeadDTO();
  virtual ~ArmyDeadDTO();

  ArmyDeadDTO(const ArmyDeadDTO& from);

  inline ArmyDeadDTO& operator=(const ArmyDeadDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArmyDeadDTO& default_instance();

  void Swap(ArmyDeadDTO* other);

  // implements Message ----------------------------------------------

  ArmyDeadDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArmyDeadDTO& from);
  void MergeFrom(const ArmyDeadDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 armyType = 1;
  inline bool has_armytype() const;
  inline void clear_armytype();
  static const int kArmyTypeFieldNumber = 1;
  inline ::google::protobuf::int32 armytype() const;
  inline void set_armytype(::google::protobuf::int32 value);

  // required int32 armyLevel = 2;
  inline bool has_armylevel() const;
  inline void clear_armylevel();
  static const int kArmyLevelFieldNumber = 2;
  inline ::google::protobuf::int32 armylevel() const;
  inline void set_armylevel(::google::protobuf::int32 value);

  // required int32 deadNum = 3;
  inline bool has_deadnum() const;
  inline void clear_deadnum();
  static const int kDeadNumFieldNumber = 3;
  inline ::google::protobuf::int32 deadnum() const;
  inline void set_deadnum(::google::protobuf::int32 value);

  // required int32 lastNum = 4;
  inline bool has_lastnum() const;
  inline void clear_lastnum();
  static const int kLastNumFieldNumber = 4;
  inline ::google::protobuf::int32 lastnum() const;
  inline void set_lastnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.ArmyDeadDTO)
 private:
  inline void set_has_armytype();
  inline void clear_has_armytype();
  inline void set_has_armylevel();
  inline void clear_has_armylevel();
  inline void set_has_deadnum();
  inline void clear_has_deadnum();
  inline void set_has_lastnum();
  inline void clear_has_lastnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 armytype_;
  ::google::protobuf::int32 armylevel_;
  ::google::protobuf::int32 deadnum_;
  ::google::protobuf::int32 lastnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ArmyDeadDTO* default_instance_;
};
// -------------------------------------------------------------------

class ReportDeadDTO : public ::google::protobuf::Message {
 public:
  ReportDeadDTO();
  virtual ~ReportDeadDTO();

  ReportDeadDTO(const ReportDeadDTO& from);

  inline ReportDeadDTO& operator=(const ReportDeadDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportDeadDTO& default_instance();

  void Swap(ReportDeadDTO* other);

  // implements Message ----------------------------------------------

  ReportDeadDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportDeadDTO& from);
  void MergeFrom(const ReportDeadDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .slg.protocol.ArmyDeadDTO deadList = 1;
  inline int deadlist_size() const;
  inline void clear_deadlist();
  static const int kDeadListFieldNumber = 1;
  inline const ::slg::protocol::ArmyDeadDTO& deadlist(int index) const;
  inline ::slg::protocol::ArmyDeadDTO* mutable_deadlist(int index);
  inline ::slg::protocol::ArmyDeadDTO* add_deadlist();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::ArmyDeadDTO >&
      deadlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::ArmyDeadDTO >*
      mutable_deadlist();

  // @@protoc_insertion_point(class_scope:slg.protocol.ReportDeadDTO)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::slg::protocol::ArmyDeadDTO > deadlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ReportDeadDTO* default_instance_;
};
// -------------------------------------------------------------------

class ReportDTO : public ::google::protobuf::Message {
 public:
  ReportDTO();
  virtual ~ReportDTO();

  ReportDTO(const ReportDTO& from);

  inline ReportDTO& operator=(const ReportDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportDTO& default_instance();

  void Swap(ReportDTO* other);

  // implements Message ----------------------------------------------

  ReportDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportDTO& from);
  void MergeFrom(const ReportDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 reportId = 1;
  inline bool has_reportid() const;
  inline void clear_reportid();
  static const int kReportIdFieldNumber = 1;
  inline ::google::protobuf::int64 reportid() const;
  inline void set_reportid(::google::protobuf::int64 value);

  // required .slg.protocol.ReportType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::slg::protocol::ReportType type() const;
  inline void set_type(::slg::protocol::ReportType value);

  // required int32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // optional .slg.protocol.ReportResourceDTO resource = 10;
  inline bool has_resource() const;
  inline void clear_resource();
  static const int kResourceFieldNumber = 10;
  inline const ::slg::protocol::ReportResourceDTO& resource() const;
  inline ::slg::protocol::ReportResourceDTO* mutable_resource();
  inline ::slg::protocol::ReportResourceDTO* release_resource();
  inline void set_allocated_resource(::slg::protocol::ReportResourceDTO* resource);

  // optional .slg.protocol.ReportPVPResourceDTO resourcePVP = 11;
  inline bool has_resourcepvp() const;
  inline void clear_resourcepvp();
  static const int kResourcePVPFieldNumber = 11;
  inline const ::slg::protocol::ReportPVPResourceDTO& resourcepvp() const;
  inline ::slg::protocol::ReportPVPResourceDTO* mutable_resourcepvp();
  inline ::slg::protocol::ReportPVPResourceDTO* release_resourcepvp();
  inline void set_allocated_resourcepvp(::slg::protocol::ReportPVPResourceDTO* resourcepvp);

  // optional .slg.protocol.ReportPVPCityDTO cityPVP = 12;
  inline bool has_citypvp() const;
  inline void clear_citypvp();
  static const int kCityPVPFieldNumber = 12;
  inline const ::slg::protocol::ReportPVPCityDTO& citypvp() const;
  inline ::slg::protocol::ReportPVPCityDTO* mutable_citypvp();
  inline ::slg::protocol::ReportPVPCityDTO* release_citypvp();
  inline void set_allocated_citypvp(::slg::protocol::ReportPVPCityDTO* citypvp);

  // optional .slg.protocol.ReportPVEMonsterDTO monster = 13;
  inline bool has_monster() const;
  inline void clear_monster();
  static const int kMonsterFieldNumber = 13;
  inline const ::slg::protocol::ReportPVEMonsterDTO& monster() const;
  inline ::slg::protocol::ReportPVEMonsterDTO* mutable_monster();
  inline ::slg::protocol::ReportPVEMonsterDTO* release_monster();
  inline void set_allocated_monster(::slg::protocol::ReportPVEMonsterDTO* monster);

  // optional .slg.protocol.ReportTradeDTO trade = 14;
  inline bool has_trade() const;
  inline void clear_trade();
  static const int kTradeFieldNumber = 14;
  inline const ::slg::protocol::ReportTradeDTO& trade() const;
  inline ::slg::protocol::ReportTradeDTO* mutable_trade();
  inline ::slg::protocol::ReportTradeDTO* release_trade();
  inline void set_allocated_trade(::slg::protocol::ReportTradeDTO* trade);

  // optional .slg.protocol.ReportDeadDTO dead = 15;
  inline bool has_dead() const;
  inline void clear_dead();
  static const int kDeadFieldNumber = 15;
  inline const ::slg::protocol::ReportDeadDTO& dead() const;
  inline ::slg::protocol::ReportDeadDTO* mutable_dead();
  inline ::slg::protocol::ReportDeadDTO* release_dead();
  inline void set_allocated_dead(::slg::protocol::ReportDeadDTO* dead);

  // @@protoc_insertion_point(class_scope:slg.protocol.ReportDTO)
 private:
  inline void set_has_reportid();
  inline void clear_has_reportid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_resource();
  inline void clear_has_resource();
  inline void set_has_resourcepvp();
  inline void clear_has_resourcepvp();
  inline void set_has_citypvp();
  inline void clear_has_citypvp();
  inline void set_has_monster();
  inline void clear_has_monster();
  inline void set_has_trade();
  inline void clear_has_trade();
  inline void set_has_dead();
  inline void clear_has_dead();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 reportid_;
  int type_;
  ::google::protobuf::int32 time_;
  ::slg::protocol::ReportResourceDTO* resource_;
  ::slg::protocol::ReportPVPResourceDTO* resourcepvp_;
  ::slg::protocol::ReportPVPCityDTO* citypvp_;
  ::slg::protocol::ReportPVEMonsterDTO* monster_;
  ::slg::protocol::ReportTradeDTO* trade_;
  ::slg::protocol::ReportDeadDTO* dead_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ReportDTO* default_instance_;
};
// -------------------------------------------------------------------

class ReportTargetDTO : public ::google::protobuf::Message {
 public:
  ReportTargetDTO();
  virtual ~ReportTargetDTO();

  ReportTargetDTO(const ReportTargetDTO& from);

  inline ReportTargetDTO& operator=(const ReportTargetDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportTargetDTO& default_instance();

  void Swap(ReportTargetDTO* other);

  // implements Message ----------------------------------------------

  ReportTargetDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportTargetDTO& from);
  void MergeFrom(const ReportTargetDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // required int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.ReportTargetDTO)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ReportTargetDTO* default_instance_;
};
// -------------------------------------------------------------------

class ReportResultDTO : public ::google::protobuf::Message {
 public:
  ReportResultDTO();
  virtual ~ReportResultDTO();

  ReportResultDTO(const ReportResultDTO& from);

  inline ReportResultDTO& operator=(const ReportResultDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportResultDTO& default_instance();

  void Swap(ReportResultDTO* other);

  // implements Message ----------------------------------------------

  ReportResultDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportResultDTO& from);
  void MergeFrom(const ReportResultDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool attack = 1;
  inline bool has_attack() const;
  inline void clear_attack();
  static const int kAttackFieldNumber = 1;
  inline bool attack() const;
  inline void set_attack(bool value);

  // required bool win = 2;
  inline bool has_win() const;
  inline void clear_win();
  static const int kWinFieldNumber = 2;
  inline bool win() const;
  inline void set_win(bool value);

  // optional bool first = 3;
  inline bool has_first() const;
  inline void clear_first();
  static const int kFirstFieldNumber = 3;
  inline bool first() const;
  inline void set_first(bool value);

  // @@protoc_insertion_point(class_scope:slg.protocol.ReportResultDTO)
 private:
  inline void set_has_attack();
  inline void clear_has_attack();
  inline void set_has_win();
  inline void clear_has_win();
  inline void set_has_first();
  inline void clear_has_first();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool attack_;
  bool win_;
  bool first_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ReportResultDTO* default_instance_;
};
// -------------------------------------------------------------------

class ReportProfileDTO : public ::google::protobuf::Message {
 public:
  ReportProfileDTO();
  virtual ~ReportProfileDTO();

  ReportProfileDTO(const ReportProfileDTO& from);

  inline ReportProfileDTO& operator=(const ReportProfileDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportProfileDTO& default_instance();

  void Swap(ReportProfileDTO* other);

  // implements Message ----------------------------------------------

  ReportProfileDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportProfileDTO& from);
  void MergeFrom(const ReportProfileDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 reportId = 1;
  inline bool has_reportid() const;
  inline void clear_reportid();
  static const int kReportIdFieldNumber = 1;
  inline ::google::protobuf::int64 reportid() const;
  inline void set_reportid(::google::protobuf::int64 value);

  // required .slg.protocol.ReportType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::slg::protocol::ReportType type() const;
  inline void set_type(::slg::protocol::ReportType value);

  // required .slg.protocol.ReportTargetDTO target = 3;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 3;
  inline const ::slg::protocol::ReportTargetDTO& target() const;
  inline ::slg::protocol::ReportTargetDTO* mutable_target();
  inline ::slg::protocol::ReportTargetDTO* release_target();
  inline void set_allocated_target(::slg::protocol::ReportTargetDTO* target);

  // optional .slg.protocol.ReportResultDTO result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline const ::slg::protocol::ReportResultDTO& result() const;
  inline ::slg::protocol::ReportResultDTO* mutable_result();
  inline ::slg::protocol::ReportResultDTO* release_result();
  inline void set_allocated_result(::slg::protocol::ReportResultDTO* result);

  // required int32 time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // required bool read = 6;
  inline bool has_read() const;
  inline void clear_read();
  static const int kReadFieldNumber = 6;
  inline bool read() const;
  inline void set_read(bool value);

  // optional int32 rewardDiamond = 7;
  inline bool has_rewarddiamond() const;
  inline void clear_rewarddiamond();
  static const int kRewardDiamondFieldNumber = 7;
  inline ::google::protobuf::int32 rewarddiamond() const;
  inline void set_rewarddiamond(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.ReportProfileDTO)
 private:
  inline void set_has_reportid();
  inline void clear_has_reportid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_target();
  inline void clear_has_target();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_read();
  inline void clear_has_read();
  inline void set_has_rewarddiamond();
  inline void clear_has_rewarddiamond();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 reportid_;
  ::slg::protocol::ReportTargetDTO* target_;
  int type_;
  ::google::protobuf::int32 time_;
  ::slg::protocol::ReportResultDTO* result_;
  bool read_;
  ::google::protobuf::int32 rewarddiamond_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ReportProfileDTO* default_instance_;
};
// -------------------------------------------------------------------

class ReportDetailRequest : public ::google::protobuf::Message {
 public:
  ReportDetailRequest();
  virtual ~ReportDetailRequest();

  ReportDetailRequest(const ReportDetailRequest& from);

  inline ReportDetailRequest& operator=(const ReportDetailRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportDetailRequest& default_instance();

  void Swap(ReportDetailRequest* other);

  // implements Message ----------------------------------------------

  ReportDetailRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportDetailRequest& from);
  void MergeFrom(const ReportDetailRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 reportId = 1;
  inline bool has_reportid() const;
  inline void clear_reportid();
  static const int kReportIdFieldNumber = 1;
  inline ::google::protobuf::int64 reportid() const;
  inline void set_reportid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.ReportDetailRequest)
 private:
  inline void set_has_reportid();
  inline void clear_has_reportid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 reportid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ReportDetailRequest* default_instance_;
};
// -------------------------------------------------------------------

class ReportDetailResponse : public ::google::protobuf::Message {
 public:
  ReportDetailResponse();
  virtual ~ReportDetailResponse();

  ReportDetailResponse(const ReportDetailResponse& from);

  inline ReportDetailResponse& operator=(const ReportDetailResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportDetailResponse& default_instance();

  void Swap(ReportDetailResponse* other);

  // implements Message ----------------------------------------------

  ReportDetailResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportDetailResponse& from);
  void MergeFrom(const ReportDetailResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .slg.protocol.ReportDTO report = 1;
  inline bool has_report() const;
  inline void clear_report();
  static const int kReportFieldNumber = 1;
  inline const ::slg::protocol::ReportDTO& report() const;
  inline ::slg::protocol::ReportDTO* mutable_report();
  inline ::slg::protocol::ReportDTO* release_report();
  inline void set_allocated_report(::slg::protocol::ReportDTO* report);

  // @@protoc_insertion_point(class_scope:slg.protocol.ReportDetailResponse)
 private:
  inline void set_has_report();
  inline void clear_has_report();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::slg::protocol::ReportDTO* report_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ReportDetailResponse* default_instance_;
};
// -------------------------------------------------------------------

class ReportRewardTakeRequest : public ::google::protobuf::Message {
 public:
  ReportRewardTakeRequest();
  virtual ~ReportRewardTakeRequest();

  ReportRewardTakeRequest(const ReportRewardTakeRequest& from);

  inline ReportRewardTakeRequest& operator=(const ReportRewardTakeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportRewardTakeRequest& default_instance();

  void Swap(ReportRewardTakeRequest* other);

  // implements Message ----------------------------------------------

  ReportRewardTakeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportRewardTakeRequest& from);
  void MergeFrom(const ReportRewardTakeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 reportId = 1;
  inline bool has_reportid() const;
  inline void clear_reportid();
  static const int kReportIdFieldNumber = 1;
  inline ::google::protobuf::int64 reportid() const;
  inline void set_reportid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.ReportRewardTakeRequest)
 private:
  inline void set_has_reportid();
  inline void clear_has_reportid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 reportid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ReportRewardTakeRequest* default_instance_;
};
// -------------------------------------------------------------------

class ReportRewardTakeResponse : public ::google::protobuf::Message {
 public:
  ReportRewardTakeResponse();
  virtual ~ReportRewardTakeResponse();

  ReportRewardTakeResponse(const ReportRewardTakeResponse& from);

  inline ReportRewardTakeResponse& operator=(const ReportRewardTakeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportRewardTakeResponse& default_instance();

  void Swap(ReportRewardTakeResponse* other);

  // implements Message ----------------------------------------------

  ReportRewardTakeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportRewardTakeResponse& from);
  void MergeFrom(const ReportRewardTakeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 reportId = 1;
  inline bool has_reportid() const;
  inline void clear_reportid();
  static const int kReportIdFieldNumber = 1;
  inline ::google::protobuf::int64 reportid() const;
  inline void set_reportid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.ReportRewardTakeResponse)
 private:
  inline void set_has_reportid();
  inline void clear_has_reportid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 reportid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ReportRewardTakeResponse* default_instance_;
};
// -------------------------------------------------------------------

class ReportDeleteRequest : public ::google::protobuf::Message {
 public:
  ReportDeleteRequest();
  virtual ~ReportDeleteRequest();

  ReportDeleteRequest(const ReportDeleteRequest& from);

  inline ReportDeleteRequest& operator=(const ReportDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportDeleteRequest& default_instance();

  void Swap(ReportDeleteRequest* other);

  // implements Message ----------------------------------------------

  ReportDeleteRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportDeleteRequest& from);
  void MergeFrom(const ReportDeleteRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 reportId = 1;
  inline bool has_reportid() const;
  inline void clear_reportid();
  static const int kReportIdFieldNumber = 1;
  inline ::google::protobuf::int64 reportid() const;
  inline void set_reportid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.ReportDeleteRequest)
 private:
  inline void set_has_reportid();
  inline void clear_has_reportid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 reportid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ReportDeleteRequest* default_instance_;
};
// -------------------------------------------------------------------

class ReportDeleteResponse : public ::google::protobuf::Message {
 public:
  ReportDeleteResponse();
  virtual ~ReportDeleteResponse();

  ReportDeleteResponse(const ReportDeleteResponse& from);

  inline ReportDeleteResponse& operator=(const ReportDeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportDeleteResponse& default_instance();

  void Swap(ReportDeleteResponse* other);

  // implements Message ----------------------------------------------

  ReportDeleteResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportDeleteResponse& from);
  void MergeFrom(const ReportDeleteResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 reportId = 1;
  inline bool has_reportid() const;
  inline void clear_reportid();
  static const int kReportIdFieldNumber = 1;
  inline ::google::protobuf::int64 reportid() const;
  inline void set_reportid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.ReportDeleteResponse)
 private:
  inline void set_has_reportid();
  inline void clear_has_reportid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 reportid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ReportDeleteResponse* default_instance_;
};
// -------------------------------------------------------------------

class ReportProfileListPush : public ::google::protobuf::Message {
 public:
  ReportProfileListPush();
  virtual ~ReportProfileListPush();

  ReportProfileListPush(const ReportProfileListPush& from);

  inline ReportProfileListPush& operator=(const ReportProfileListPush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportProfileListPush& default_instance();

  void Swap(ReportProfileListPush* other);

  // implements Message ----------------------------------------------

  ReportProfileListPush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportProfileListPush& from);
  void MergeFrom(const ReportProfileListPush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .slg.protocol.ReportProfileDTO reportProfiles = 1;
  inline int reportprofiles_size() const;
  inline void clear_reportprofiles();
  static const int kReportProfilesFieldNumber = 1;
  inline const ::slg::protocol::ReportProfileDTO& reportprofiles(int index) const;
  inline ::slg::protocol::ReportProfileDTO* mutable_reportprofiles(int index);
  inline ::slg::protocol::ReportProfileDTO* add_reportprofiles();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportProfileDTO >&
      reportprofiles() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportProfileDTO >*
      mutable_reportprofiles();

  // @@protoc_insertion_point(class_scope:slg.protocol.ReportProfileListPush)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportProfileDTO > reportprofiles_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ReportProfileListPush* default_instance_;
};
// -------------------------------------------------------------------

class ReportSpyPlayerDTO : public ::google::protobuf::Message {
 public:
  ReportSpyPlayerDTO();
  virtual ~ReportSpyPlayerDTO();

  ReportSpyPlayerDTO(const ReportSpyPlayerDTO& from);

  inline ReportSpyPlayerDTO& operator=(const ReportSpyPlayerDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportSpyPlayerDTO& default_instance();

  void Swap(ReportSpyPlayerDTO* other);

  // implements Message ----------------------------------------------

  ReportSpyPlayerDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportSpyPlayerDTO& from);
  void MergeFrom(const ReportSpyPlayerDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string allianceShortName = 3;
  inline bool has_allianceshortname() const;
  inline void clear_allianceshortname();
  static const int kAllianceShortNameFieldNumber = 3;
  inline const ::std::string& allianceshortname() const;
  inline void set_allianceshortname(const ::std::string& value);
  inline void set_allianceshortname(const char* value);
  inline void set_allianceshortname(const char* value, size_t size);
  inline ::std::string* mutable_allianceshortname();
  inline ::std::string* release_allianceshortname();
  inline void set_allocated_allianceshortname(::std::string* allianceshortname);

  // required .slg.protocol.PositionDTO position = 4;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 4;
  inline const ::slg::protocol::PositionDTO& position() const;
  inline ::slg::protocol::PositionDTO* mutable_position();
  inline ::slg::protocol::PositionDTO* release_position();
  inline void set_allocated_position(::slg::protocol::PositionDTO* position);

  // @@protoc_insertion_point(class_scope:slg.protocol.ReportSpyPlayerDTO)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_allianceshortname();
  inline void clear_has_allianceshortname();
  inline void set_has_position();
  inline void clear_has_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* name_;
  ::std::string* allianceshortname_;
  ::slg::protocol::PositionDTO* position_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ReportSpyPlayerDTO* default_instance_;
};
// -------------------------------------------------------------------

class ReportSpyResourceDTO : public ::google::protobuf::Message {
 public:
  ReportSpyResourceDTO();
  virtual ~ReportSpyResourceDTO();

  ReportSpyResourceDTO(const ReportSpyResourceDTO& from);

  inline ReportSpyResourceDTO& operator=(const ReportSpyResourceDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportSpyResourceDTO& default_instance();

  void Swap(ReportSpyResourceDTO* other);

  // implements Message ----------------------------------------------

  ReportSpyResourceDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportSpyResourceDTO& from);
  void MergeFrom(const ReportSpyResourceDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 remaining = 2;
  inline bool has_remaining() const;
  inline void clear_remaining();
  static const int kRemainingFieldNumber = 2;
  inline ::google::protobuf::int32 remaining() const;
  inline void set_remaining(::google::protobuf::int32 value);

  // required int32 canBeRobbed = 3;
  inline bool has_canberobbed() const;
  inline void clear_canberobbed();
  static const int kCanBeRobbedFieldNumber = 3;
  inline ::google::protobuf::int32 canberobbed() const;
  inline void set_canberobbed(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.ReportSpyResourceDTO)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_remaining();
  inline void clear_has_remaining();
  inline void set_has_canberobbed();
  inline void clear_has_canberobbed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 remaining_;
  ::google::protobuf::int32 canberobbed_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ReportSpyResourceDTO* default_instance_;
};
// -------------------------------------------------------------------

class ReportSpyWallDTO : public ::google::protobuf::Message {
 public:
  ReportSpyWallDTO();
  virtual ~ReportSpyWallDTO();

  ReportSpyWallDTO(const ReportSpyWallDTO& from);

  inline ReportSpyWallDTO& operator=(const ReportSpyWallDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportSpyWallDTO& default_instance();

  void Swap(ReportSpyWallDTO* other);

  // implements Message ----------------------------------------------

  ReportSpyWallDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportSpyWallDTO& from);
  void MergeFrom(const ReportSpyWallDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 currentValue = 1;
  inline bool has_currentvalue() const;
  inline void clear_currentvalue();
  static const int kCurrentValueFieldNumber = 1;
  inline ::google::protobuf::int32 currentvalue() const;
  inline void set_currentvalue(::google::protobuf::int32 value);

  // required int32 totalValue = 2;
  inline bool has_totalvalue() const;
  inline void clear_totalvalue();
  static const int kTotalValueFieldNumber = 2;
  inline ::google::protobuf::int32 totalvalue() const;
  inline void set_totalvalue(::google::protobuf::int32 value);

  // optional int32 burnRate = 3;
  inline bool has_burnrate() const;
  inline void clear_burnrate();
  static const int kBurnRateFieldNumber = 3;
  inline ::google::protobuf::int32 burnrate() const;
  inline void set_burnrate(::google::protobuf::int32 value);

  // optional int32 burnRemianingTime = 4;
  inline bool has_burnremianingtime() const;
  inline void clear_burnremianingtime();
  static const int kBurnRemianingTimeFieldNumber = 4;
  inline ::google::protobuf::int32 burnremianingtime() const;
  inline void set_burnremianingtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.ReportSpyWallDTO)
 private:
  inline void set_has_currentvalue();
  inline void clear_has_currentvalue();
  inline void set_has_totalvalue();
  inline void clear_has_totalvalue();
  inline void set_has_burnrate();
  inline void clear_has_burnrate();
  inline void set_has_burnremianingtime();
  inline void clear_has_burnremianingtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 currentvalue_;
  ::google::protobuf::int32 totalvalue_;
  ::google::protobuf::int32 burnrate_;
  ::google::protobuf::int32 burnremianingtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ReportSpyWallDTO* default_instance_;
};
// -------------------------------------------------------------------

class ReportSpyArmyDTO : public ::google::protobuf::Message {
 public:
  ReportSpyArmyDTO();
  virtual ~ReportSpyArmyDTO();

  ReportSpyArmyDTO(const ReportSpyArmyDTO& from);

  inline ReportSpyArmyDTO& operator=(const ReportSpyArmyDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportSpyArmyDTO& default_instance();

  void Swap(ReportSpyArmyDTO* other);

  // implements Message ----------------------------------------------

  ReportSpyArmyDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportSpyArmyDTO& from);
  void MergeFrom(const ReportSpyArmyDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.ReportSpyArmyDTO)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ReportSpyArmyDTO* default_instance_;
};
// -------------------------------------------------------------------

class ReportSpyAidDTO : public ::google::protobuf::Message {
 public:
  ReportSpyAidDTO();
  virtual ~ReportSpyAidDTO();

  ReportSpyAidDTO(const ReportSpyAidDTO& from);

  inline ReportSpyAidDTO& operator=(const ReportSpyAidDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportSpyAidDTO& default_instance();

  void Swap(ReportSpyAidDTO* other);

  // implements Message ----------------------------------------------

  ReportSpyAidDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportSpyAidDTO& from);
  void MergeFrom(const ReportSpyAidDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .slg.protocol.ReportSpyPlayerDTO player = 1;
  inline bool has_player() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 1;
  inline const ::slg::protocol::ReportSpyPlayerDTO& player() const;
  inline ::slg::protocol::ReportSpyPlayerDTO* mutable_player();
  inline ::slg::protocol::ReportSpyPlayerDTO* release_player();
  inline void set_allocated_player(::slg::protocol::ReportSpyPlayerDTO* player);

  // repeated .slg.protocol.ReportSpyArmyDTO armies = 2;
  inline int armies_size() const;
  inline void clear_armies();
  static const int kArmiesFieldNumber = 2;
  inline const ::slg::protocol::ReportSpyArmyDTO& armies(int index) const;
  inline ::slg::protocol::ReportSpyArmyDTO* mutable_armies(int index);
  inline ::slg::protocol::ReportSpyArmyDTO* add_armies();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportSpyArmyDTO >&
      armies() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportSpyArmyDTO >*
      mutable_armies();

  // @@protoc_insertion_point(class_scope:slg.protocol.ReportSpyAidDTO)
 private:
  inline void set_has_player();
  inline void clear_has_player();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::slg::protocol::ReportSpyPlayerDTO* player_;
  ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportSpyArmyDTO > armies_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ReportSpyAidDTO* default_instance_;
};
// -------------------------------------------------------------------

class ReportSpyTowerDTO : public ::google::protobuf::Message {
 public:
  ReportSpyTowerDTO();
  virtual ~ReportSpyTowerDTO();

  ReportSpyTowerDTO(const ReportSpyTowerDTO& from);

  inline ReportSpyTowerDTO& operator=(const ReportSpyTowerDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportSpyTowerDTO& default_instance();

  void Swap(ReportSpyTowerDTO* other);

  // implements Message ----------------------------------------------

  ReportSpyTowerDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportSpyTowerDTO& from);
  void MergeFrom(const ReportSpyTowerDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 atk = 2;
  inline bool has_atk() const;
  inline void clear_atk();
  static const int kAtkFieldNumber = 2;
  inline ::google::protobuf::int32 atk() const;
  inline void set_atk(::google::protobuf::int32 value);

  // required int32 currentNum = 3;
  inline bool has_currentnum() const;
  inline void clear_currentnum();
  static const int kCurrentNumFieldNumber = 3;
  inline ::google::protobuf::int32 currentnum() const;
  inline void set_currentnum(::google::protobuf::int32 value);

  // required int32 capacity = 4;
  inline bool has_capacity() const;
  inline void clear_capacity();
  static const int kCapacityFieldNumber = 4;
  inline ::google::protobuf::int32 capacity() const;
  inline void set_capacity(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.ReportSpyTowerDTO)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_atk();
  inline void clear_has_atk();
  inline void set_has_currentnum();
  inline void clear_has_currentnum();
  inline void set_has_capacity();
  inline void clear_has_capacity();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 atk_;
  ::google::protobuf::int32 currentnum_;
  ::google::protobuf::int32 capacity_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ReportSpyTowerDTO* default_instance_;
};
// -------------------------------------------------------------------

class ReportSpyCityDTO : public ::google::protobuf::Message {
 public:
  ReportSpyCityDTO();
  virtual ~ReportSpyCityDTO();

  ReportSpyCityDTO(const ReportSpyCityDTO& from);

  inline ReportSpyCityDTO& operator=(const ReportSpyCityDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportSpyCityDTO& default_instance();

  void Swap(ReportSpyCityDTO* other);

  // implements Message ----------------------------------------------

  ReportSpyCityDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportSpyCityDTO& from);
  void MergeFrom(const ReportSpyCityDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 protectedPercentage = 1;
  inline bool has_protectedpercentage() const;
  inline void clear_protectedpercentage();
  static const int kProtectedPercentageFieldNumber = 1;
  inline ::google::protobuf::int32 protectedpercentage() const;
  inline void set_protectedpercentage(::google::protobuf::int32 value);

  // repeated .slg.protocol.ReportSpyResourceDTO resources = 2;
  inline int resources_size() const;
  inline void clear_resources();
  static const int kResourcesFieldNumber = 2;
  inline const ::slg::protocol::ReportSpyResourceDTO& resources(int index) const;
  inline ::slg::protocol::ReportSpyResourceDTO* mutable_resources(int index);
  inline ::slg::protocol::ReportSpyResourceDTO* add_resources();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportSpyResourceDTO >&
      resources() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportSpyResourceDTO >*
      mutable_resources();

  // optional .slg.protocol.ReportSpyWallDTO wall = 3;
  inline bool has_wall() const;
  inline void clear_wall();
  static const int kWallFieldNumber = 3;
  inline const ::slg::protocol::ReportSpyWallDTO& wall() const;
  inline ::slg::protocol::ReportSpyWallDTO* mutable_wall();
  inline ::slg::protocol::ReportSpyWallDTO* release_wall();
  inline void set_allocated_wall(::slg::protocol::ReportSpyWallDTO* wall);

  // optional int32 totalArmyCount = 4;
  inline bool has_totalarmycount() const;
  inline void clear_totalarmycount();
  static const int kTotalArmyCountFieldNumber = 4;
  inline ::google::protobuf::int32 totalarmycount() const;
  inline void set_totalarmycount(::google::protobuf::int32 value);

  // repeated .slg.protocol.ReportSpyArmyDTO armies = 6;
  inline int armies_size() const;
  inline void clear_armies();
  static const int kArmiesFieldNumber = 6;
  inline const ::slg::protocol::ReportSpyArmyDTO& armies(int index) const;
  inline ::slg::protocol::ReportSpyArmyDTO* mutable_armies(int index);
  inline ::slg::protocol::ReportSpyArmyDTO* add_armies();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportSpyArmyDTO >&
      armies() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportSpyArmyDTO >*
      mutable_armies();

  // repeated .slg.protocol.ReportSpyTowerDTO towers = 7;
  inline int towers_size() const;
  inline void clear_towers();
  static const int kTowersFieldNumber = 7;
  inline const ::slg::protocol::ReportSpyTowerDTO& towers(int index) const;
  inline ::slg::protocol::ReportSpyTowerDTO* mutable_towers(int index);
  inline ::slg::protocol::ReportSpyTowerDTO* add_towers();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportSpyTowerDTO >&
      towers() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportSpyTowerDTO >*
      mutable_towers();

  // repeated .slg.protocol.ReportSpyAidDTO aids = 8;
  inline int aids_size() const;
  inline void clear_aids();
  static const int kAidsFieldNumber = 8;
  inline const ::slg::protocol::ReportSpyAidDTO& aids(int index) const;
  inline ::slg::protocol::ReportSpyAidDTO* mutable_aids(int index);
  inline ::slg::protocol::ReportSpyAidDTO* add_aids();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportSpyAidDTO >&
      aids() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportSpyAidDTO >*
      mutable_aids();

  // @@protoc_insertion_point(class_scope:slg.protocol.ReportSpyCityDTO)
 private:
  inline void set_has_protectedpercentage();
  inline void clear_has_protectedpercentage();
  inline void set_has_wall();
  inline void clear_has_wall();
  inline void set_has_totalarmycount();
  inline void clear_has_totalarmycount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportSpyResourceDTO > resources_;
  ::google::protobuf::int32 protectedpercentage_;
  ::google::protobuf::int32 totalarmycount_;
  ::slg::protocol::ReportSpyWallDTO* wall_;
  ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportSpyArmyDTO > armies_;
  ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportSpyTowerDTO > towers_;
  ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportSpyAidDTO > aids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ReportSpyCityDTO* default_instance_;
};
// -------------------------------------------------------------------

class ReportSpyResourceGridProfileDTO : public ::google::protobuf::Message {
 public:
  ReportSpyResourceGridProfileDTO();
  virtual ~ReportSpyResourceGridProfileDTO();

  ReportSpyResourceGridProfileDTO(const ReportSpyResourceGridProfileDTO& from);

  inline ReportSpyResourceGridProfileDTO& operator=(const ReportSpyResourceGridProfileDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportSpyResourceGridProfileDTO& default_instance();

  void Swap(ReportSpyResourceGridProfileDTO* other);

  // implements Message ----------------------------------------------

  ReportSpyResourceGridProfileDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportSpyResourceGridProfileDTO& from);
  void MergeFrom(const ReportSpyResourceGridProfileDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.ReportSpyResourceGridProfileDTO)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ReportSpyResourceGridProfileDTO* default_instance_;
};
// -------------------------------------------------------------------

class ReportSpyResourceGridDTO : public ::google::protobuf::Message {
 public:
  ReportSpyResourceGridDTO();
  virtual ~ReportSpyResourceGridDTO();

  ReportSpyResourceGridDTO(const ReportSpyResourceGridDTO& from);

  inline ReportSpyResourceGridDTO& operator=(const ReportSpyResourceGridDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportSpyResourceGridDTO& default_instance();

  void Swap(ReportSpyResourceGridDTO* other);

  // implements Message ----------------------------------------------

  ReportSpyResourceGridDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportSpyResourceGridDTO& from);
  void MergeFrom(const ReportSpyResourceGridDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .slg.protocol.ReportSpyResourceGridProfileDTO profile = 1;
  inline bool has_profile() const;
  inline void clear_profile();
  static const int kProfileFieldNumber = 1;
  inline const ::slg::protocol::ReportSpyResourceGridProfileDTO& profile() const;
  inline ::slg::protocol::ReportSpyResourceGridProfileDTO* mutable_profile();
  inline ::slg::protocol::ReportSpyResourceGridProfileDTO* release_profile();
  inline void set_allocated_profile(::slg::protocol::ReportSpyResourceGridProfileDTO* profile);

  // required .slg.protocol.PositionDTO position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline const ::slg::protocol::PositionDTO& position() const;
  inline ::slg::protocol::PositionDTO* mutable_position();
  inline ::slg::protocol::PositionDTO* release_position();
  inline void set_allocated_position(::slg::protocol::PositionDTO* position);

  // required int32 remaining = 3;
  inline bool has_remaining() const;
  inline void clear_remaining();
  static const int kRemainingFieldNumber = 3;
  inline ::google::protobuf::int32 remaining() const;
  inline void set_remaining(::google::protobuf::int32 value);

  // optional int32 totalArmyCount = 4;
  inline bool has_totalarmycount() const;
  inline void clear_totalarmycount();
  static const int kTotalArmyCountFieldNumber = 4;
  inline ::google::protobuf::int32 totalarmycount() const;
  inline void set_totalarmycount(::google::protobuf::int32 value);

  // repeated .slg.protocol.ReportSpyArmyDTO armies = 5;
  inline int armies_size() const;
  inline void clear_armies();
  static const int kArmiesFieldNumber = 5;
  inline const ::slg::protocol::ReportSpyArmyDTO& armies(int index) const;
  inline ::slg::protocol::ReportSpyArmyDTO* mutable_armies(int index);
  inline ::slg::protocol::ReportSpyArmyDTO* add_armies();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportSpyArmyDTO >&
      armies() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportSpyArmyDTO >*
      mutable_armies();

  // @@protoc_insertion_point(class_scope:slg.protocol.ReportSpyResourceGridDTO)
 private:
  inline void set_has_profile();
  inline void clear_has_profile();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_remaining();
  inline void clear_has_remaining();
  inline void set_has_totalarmycount();
  inline void clear_has_totalarmycount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::slg::protocol::ReportSpyResourceGridProfileDTO* profile_;
  ::slg::protocol::PositionDTO* position_;
  ::google::protobuf::int32 remaining_;
  ::google::protobuf::int32 totalarmycount_;
  ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportSpyArmyDTO > armies_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ReportSpyResourceGridDTO* default_instance_;
};
// -------------------------------------------------------------------

class ReportSpyDTO : public ::google::protobuf::Message {
 public:
  ReportSpyDTO();
  virtual ~ReportSpyDTO();

  ReportSpyDTO(const ReportSpyDTO& from);

  inline ReportSpyDTO& operator=(const ReportSpyDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportSpyDTO& default_instance();

  void Swap(ReportSpyDTO* other);

  // implements Message ----------------------------------------------

  ReportSpyDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportSpyDTO& from);
  void MergeFrom(const ReportSpyDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 reportId = 1;
  inline bool has_reportid() const;
  inline void clear_reportid();
  static const int kReportIdFieldNumber = 1;
  inline ::google::protobuf::int64 reportid() const;
  inline void set_reportid(::google::protobuf::int64 value);

  // required .slg.protocol.ReportSpyType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::slg::protocol::ReportSpyType type() const;
  inline void set_type(::slg::protocol::ReportSpyType value);

  // required int32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // optional .slg.protocol.ReportSpyCityDTO city = 4;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 4;
  inline const ::slg::protocol::ReportSpyCityDTO& city() const;
  inline ::slg::protocol::ReportSpyCityDTO* mutable_city();
  inline ::slg::protocol::ReportSpyCityDTO* release_city();
  inline void set_allocated_city(::slg::protocol::ReportSpyCityDTO* city);

  // optional .slg.protocol.ReportSpyResourceGridDTO resource = 5;
  inline bool has_resource() const;
  inline void clear_resource();
  static const int kResourceFieldNumber = 5;
  inline const ::slg::protocol::ReportSpyResourceGridDTO& resource() const;
  inline ::slg::protocol::ReportSpyResourceGridDTO* mutable_resource();
  inline ::slg::protocol::ReportSpyResourceGridDTO* release_resource();
  inline void set_allocated_resource(::slg::protocol::ReportSpyResourceGridDTO* resource);

  // @@protoc_insertion_point(class_scope:slg.protocol.ReportSpyDTO)
 private:
  inline void set_has_reportid();
  inline void clear_has_reportid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_city();
  inline void clear_has_city();
  inline void set_has_resource();
  inline void clear_has_resource();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 reportid_;
  int type_;
  ::google::protobuf::int32 time_;
  ::slg::protocol::ReportSpyCityDTO* city_;
  ::slg::protocol::ReportSpyResourceGridDTO* resource_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ReportSpyDTO* default_instance_;
};
// -------------------------------------------------------------------

class ReportSpyProfileDTO : public ::google::protobuf::Message {
 public:
  ReportSpyProfileDTO();
  virtual ~ReportSpyProfileDTO();

  ReportSpyProfileDTO(const ReportSpyProfileDTO& from);

  inline ReportSpyProfileDTO& operator=(const ReportSpyProfileDTO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportSpyProfileDTO& default_instance();

  void Swap(ReportSpyProfileDTO* other);

  // implements Message ----------------------------------------------

  ReportSpyProfileDTO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportSpyProfileDTO& from);
  void MergeFrom(const ReportSpyProfileDTO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 reportId = 1;
  inline bool has_reportid() const;
  inline void clear_reportid();
  static const int kReportIdFieldNumber = 1;
  inline ::google::protobuf::int64 reportid() const;
  inline void set_reportid(::google::protobuf::int64 value);

  // required .slg.protocol.ReportSpyType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::slg::protocol::ReportSpyType type() const;
  inline void set_type(::slg::protocol::ReportSpyType value);

  // required .slg.protocol.ReportSpyPlayerDTO target = 3;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 3;
  inline const ::slg::protocol::ReportSpyPlayerDTO& target() const;
  inline ::slg::protocol::ReportSpyPlayerDTO* mutable_target();
  inline ::slg::protocol::ReportSpyPlayerDTO* release_target();
  inline void set_allocated_target(::slg::protocol::ReportSpyPlayerDTO* target);

  // required .slg.protocol.ReportSpyResult result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline ::slg::protocol::ReportSpyResult result() const;
  inline void set_result(::slg::protocol::ReportSpyResult value);

  // required int32 time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // required bool read = 6;
  inline bool has_read() const;
  inline void clear_read();
  static const int kReadFieldNumber = 6;
  inline bool read() const;
  inline void set_read(bool value);

  // required bool beSpied = 7;
  inline bool has_bespied() const;
  inline void clear_bespied();
  static const int kBeSpiedFieldNumber = 7;
  inline bool bespied() const;
  inline void set_bespied(bool value);

  // optional .slg.protocol.ReportSpyResourceGridProfileDTO resourceProfile = 10;
  inline bool has_resourceprofile() const;
  inline void clear_resourceprofile();
  static const int kResourceProfileFieldNumber = 10;
  inline const ::slg::protocol::ReportSpyResourceGridProfileDTO& resourceprofile() const;
  inline ::slg::protocol::ReportSpyResourceGridProfileDTO* mutable_resourceprofile();
  inline ::slg::protocol::ReportSpyResourceGridProfileDTO* release_resourceprofile();
  inline void set_allocated_resourceprofile(::slg::protocol::ReportSpyResourceGridProfileDTO* resourceprofile);

  // @@protoc_insertion_point(class_scope:slg.protocol.ReportSpyProfileDTO)
 private:
  inline void set_has_reportid();
  inline void clear_has_reportid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_target();
  inline void clear_has_target();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_read();
  inline void clear_has_read();
  inline void set_has_bespied();
  inline void clear_has_bespied();
  inline void set_has_resourceprofile();
  inline void clear_has_resourceprofile();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 reportid_;
  ::slg::protocol::ReportSpyPlayerDTO* target_;
  int type_;
  int result_;
  ::google::protobuf::int32 time_;
  bool read_;
  bool bespied_;
  ::slg::protocol::ReportSpyResourceGridProfileDTO* resourceprofile_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ReportSpyProfileDTO* default_instance_;
};
// -------------------------------------------------------------------

class ReportSpyProfileListPush : public ::google::protobuf::Message {
 public:
  ReportSpyProfileListPush();
  virtual ~ReportSpyProfileListPush();

  ReportSpyProfileListPush(const ReportSpyProfileListPush& from);

  inline ReportSpyProfileListPush& operator=(const ReportSpyProfileListPush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportSpyProfileListPush& default_instance();

  void Swap(ReportSpyProfileListPush* other);

  // implements Message ----------------------------------------------

  ReportSpyProfileListPush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportSpyProfileListPush& from);
  void MergeFrom(const ReportSpyProfileListPush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .slg.protocol.ReportSpyProfileDTO profiles = 1;
  inline int profiles_size() const;
  inline void clear_profiles();
  static const int kProfilesFieldNumber = 1;
  inline const ::slg::protocol::ReportSpyProfileDTO& profiles(int index) const;
  inline ::slg::protocol::ReportSpyProfileDTO* mutable_profiles(int index);
  inline ::slg::protocol::ReportSpyProfileDTO* add_profiles();
  inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportSpyProfileDTO >&
      profiles() const;
  inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportSpyProfileDTO >*
      mutable_profiles();

  // @@protoc_insertion_point(class_scope:slg.protocol.ReportSpyProfileListPush)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportSpyProfileDTO > profiles_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ReportSpyProfileListPush* default_instance_;
};
// -------------------------------------------------------------------

class ReportSpyDetailRequest : public ::google::protobuf::Message {
 public:
  ReportSpyDetailRequest();
  virtual ~ReportSpyDetailRequest();

  ReportSpyDetailRequest(const ReportSpyDetailRequest& from);

  inline ReportSpyDetailRequest& operator=(const ReportSpyDetailRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportSpyDetailRequest& default_instance();

  void Swap(ReportSpyDetailRequest* other);

  // implements Message ----------------------------------------------

  ReportSpyDetailRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportSpyDetailRequest& from);
  void MergeFrom(const ReportSpyDetailRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 reportId = 1;
  inline bool has_reportid() const;
  inline void clear_reportid();
  static const int kReportIdFieldNumber = 1;
  inline ::google::protobuf::int64 reportid() const;
  inline void set_reportid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.ReportSpyDetailRequest)
 private:
  inline void set_has_reportid();
  inline void clear_has_reportid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 reportid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ReportSpyDetailRequest* default_instance_;
};
// -------------------------------------------------------------------

class ReportSpyDetailResponse : public ::google::protobuf::Message {
 public:
  ReportSpyDetailResponse();
  virtual ~ReportSpyDetailResponse();

  ReportSpyDetailResponse(const ReportSpyDetailResponse& from);

  inline ReportSpyDetailResponse& operator=(const ReportSpyDetailResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportSpyDetailResponse& default_instance();

  void Swap(ReportSpyDetailResponse* other);

  // implements Message ----------------------------------------------

  ReportSpyDetailResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportSpyDetailResponse& from);
  void MergeFrom(const ReportSpyDetailResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .slg.protocol.ReportSpyDTO report = 1;
  inline bool has_report() const;
  inline void clear_report();
  static const int kReportFieldNumber = 1;
  inline const ::slg::protocol::ReportSpyDTO& report() const;
  inline ::slg::protocol::ReportSpyDTO* mutable_report();
  inline ::slg::protocol::ReportSpyDTO* release_report();
  inline void set_allocated_report(::slg::protocol::ReportSpyDTO* report);

  // @@protoc_insertion_point(class_scope:slg.protocol.ReportSpyDetailResponse)
 private:
  inline void set_has_report();
  inline void clear_has_report();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::slg::protocol::ReportSpyDTO* report_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ReportSpyDetailResponse* default_instance_;
};
// -------------------------------------------------------------------

class ReportSpyReadRequest : public ::google::protobuf::Message {
 public:
  ReportSpyReadRequest();
  virtual ~ReportSpyReadRequest();

  ReportSpyReadRequest(const ReportSpyReadRequest& from);

  inline ReportSpyReadRequest& operator=(const ReportSpyReadRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportSpyReadRequest& default_instance();

  void Swap(ReportSpyReadRequest* other);

  // implements Message ----------------------------------------------

  ReportSpyReadRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportSpyReadRequest& from);
  void MergeFrom(const ReportSpyReadRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 reportId = 1;
  inline bool has_reportid() const;
  inline void clear_reportid();
  static const int kReportIdFieldNumber = 1;
  inline ::google::protobuf::int64 reportid() const;
  inline void set_reportid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.ReportSpyReadRequest)
 private:
  inline void set_has_reportid();
  inline void clear_has_reportid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 reportid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ReportSpyReadRequest* default_instance_;
};
// -------------------------------------------------------------------

class ReportSpyDeleteRequest : public ::google::protobuf::Message {
 public:
  ReportSpyDeleteRequest();
  virtual ~ReportSpyDeleteRequest();

  ReportSpyDeleteRequest(const ReportSpyDeleteRequest& from);

  inline ReportSpyDeleteRequest& operator=(const ReportSpyDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportSpyDeleteRequest& default_instance();

  void Swap(ReportSpyDeleteRequest* other);

  // implements Message ----------------------------------------------

  ReportSpyDeleteRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportSpyDeleteRequest& from);
  void MergeFrom(const ReportSpyDeleteRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 reportId = 1;
  inline bool has_reportid() const;
  inline void clear_reportid();
  static const int kReportIdFieldNumber = 1;
  inline ::google::protobuf::int64 reportid() const;
  inline void set_reportid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:slg.protocol.ReportSpyDeleteRequest)
 private:
  inline void set_has_reportid();
  inline void clear_has_reportid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 reportid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ReportSpyDeleteRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// ReportArmyDTO

// required int32 armyType = 1;
inline bool ReportArmyDTO::has_armytype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportArmyDTO::set_has_armytype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportArmyDTO::clear_has_armytype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportArmyDTO::clear_armytype() {
  armytype_ = 0;
  clear_has_armytype();
}
inline ::google::protobuf::int32 ReportArmyDTO::armytype() const {
  return armytype_;
}
inline void ReportArmyDTO::set_armytype(::google::protobuf::int32 value) {
  set_has_armytype();
  armytype_ = value;
}

// required int32 armyLevel = 2;
inline bool ReportArmyDTO::has_armylevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReportArmyDTO::set_has_armylevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReportArmyDTO::clear_has_armylevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReportArmyDTO::clear_armylevel() {
  armylevel_ = 0;
  clear_has_armylevel();
}
inline ::google::protobuf::int32 ReportArmyDTO::armylevel() const {
  return armylevel_;
}
inline void ReportArmyDTO::set_armylevel(::google::protobuf::int32 value) {
  set_has_armylevel();
  armylevel_ = value;
}

// required int32 dispatch = 3;
inline bool ReportArmyDTO::has_dispatch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReportArmyDTO::set_has_dispatch() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReportArmyDTO::clear_has_dispatch() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReportArmyDTO::clear_dispatch() {
  dispatch_ = 0;
  clear_has_dispatch();
}
inline ::google::protobuf::int32 ReportArmyDTO::dispatch() const {
  return dispatch_;
}
inline void ReportArmyDTO::set_dispatch(::google::protobuf::int32 value) {
  set_has_dispatch();
  dispatch_ = value;
}

// required int32 death = 4;
inline bool ReportArmyDTO::has_death() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReportArmyDTO::set_has_death() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReportArmyDTO::clear_has_death() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReportArmyDTO::clear_death() {
  death_ = 0;
  clear_has_death();
}
inline ::google::protobuf::int32 ReportArmyDTO::death() const {
  return death_;
}
inline void ReportArmyDTO::set_death(::google::protobuf::int32 value) {
  set_has_death();
  death_ = value;
}

// required int32 hurt = 5;
inline bool ReportArmyDTO::has_hurt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReportArmyDTO::set_has_hurt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReportArmyDTO::clear_has_hurt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReportArmyDTO::clear_hurt() {
  hurt_ = 0;
  clear_has_hurt();
}
inline ::google::protobuf::int32 ReportArmyDTO::hurt() const {
  return hurt_;
}
inline void ReportArmyDTO::set_hurt(::google::protobuf::int32 value) {
  set_has_hurt();
  hurt_ = value;
}

// required int32 revive = 6;
inline bool ReportArmyDTO::has_revive() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReportArmyDTO::set_has_revive() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReportArmyDTO::clear_has_revive() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReportArmyDTO::clear_revive() {
  revive_ = 0;
  clear_has_revive();
}
inline ::google::protobuf::int32 ReportArmyDTO::revive() const {
  return revive_;
}
inline void ReportArmyDTO::set_revive(::google::protobuf::int32 value) {
  set_has_revive();
  revive_ = value;
}

// -------------------------------------------------------------------

// ReportPlayerDTO

// required int64 playerId = 1;
inline bool ReportPlayerDTO::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportPlayerDTO::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportPlayerDTO::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportPlayerDTO::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 ReportPlayerDTO::playerid() const {
  return playerid_;
}
inline void ReportPlayerDTO::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// required .slg.protocol.PositionDTO playerPos = 2;
inline bool ReportPlayerDTO::has_playerpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReportPlayerDTO::set_has_playerpos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReportPlayerDTO::clear_has_playerpos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReportPlayerDTO::clear_playerpos() {
  if (playerpos_ != NULL) playerpos_->::slg::protocol::PositionDTO::Clear();
  clear_has_playerpos();
}
inline const ::slg::protocol::PositionDTO& ReportPlayerDTO::playerpos() const {
  return playerpos_ != NULL ? *playerpos_ : *default_instance_->playerpos_;
}
inline ::slg::protocol::PositionDTO* ReportPlayerDTO::mutable_playerpos() {
  set_has_playerpos();
  if (playerpos_ == NULL) playerpos_ = new ::slg::protocol::PositionDTO;
  return playerpos_;
}
inline ::slg::protocol::PositionDTO* ReportPlayerDTO::release_playerpos() {
  clear_has_playerpos();
  ::slg::protocol::PositionDTO* temp = playerpos_;
  playerpos_ = NULL;
  return temp;
}
inline void ReportPlayerDTO::set_allocated_playerpos(::slg::protocol::PositionDTO* playerpos) {
  delete playerpos_;
  playerpos_ = playerpos;
  if (playerpos) {
    set_has_playerpos();
  } else {
    clear_has_playerpos();
  }
}

// required string nickName = 3;
inline bool ReportPlayerDTO::has_nickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReportPlayerDTO::set_has_nickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReportPlayerDTO::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReportPlayerDTO::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& ReportPlayerDTO::nickname() const {
  return *nickname_;
}
inline void ReportPlayerDTO::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void ReportPlayerDTO::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void ReportPlayerDTO::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReportPlayerDTO::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* ReportPlayerDTO::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReportPlayerDTO::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 battlePowerLose = 4;
inline bool ReportPlayerDTO::has_battlepowerlose() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReportPlayerDTO::set_has_battlepowerlose() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReportPlayerDTO::clear_has_battlepowerlose() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReportPlayerDTO::clear_battlepowerlose() {
  battlepowerlose_ = 0;
  clear_has_battlepowerlose();
}
inline ::google::protobuf::int32 ReportPlayerDTO::battlepowerlose() const {
  return battlepowerlose_;
}
inline void ReportPlayerDTO::set_battlepowerlose(::google::protobuf::int32 value) {
  set_has_battlepowerlose();
  battlepowerlose_ = value;
}

// repeated .slg.protocol.PropertyDTO additions = 5;
inline int ReportPlayerDTO::additions_size() const {
  return additions_.size();
}
inline void ReportPlayerDTO::clear_additions() {
  additions_.Clear();
}
inline const ::slg::protocol::PropertyDTO& ReportPlayerDTO::additions(int index) const {
  return additions_.Get(index);
}
inline ::slg::protocol::PropertyDTO* ReportPlayerDTO::mutable_additions(int index) {
  return additions_.Mutable(index);
}
inline ::slg::protocol::PropertyDTO* ReportPlayerDTO::add_additions() {
  return additions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::PropertyDTO >&
ReportPlayerDTO::additions() const {
  return additions_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::PropertyDTO >*
ReportPlayerDTO::mutable_additions() {
  return &additions_;
}

// repeated .slg.protocol.ReportArmyDTO armies = 6;
inline int ReportPlayerDTO::armies_size() const {
  return armies_.size();
}
inline void ReportPlayerDTO::clear_armies() {
  armies_.Clear();
}
inline const ::slg::protocol::ReportArmyDTO& ReportPlayerDTO::armies(int index) const {
  return armies_.Get(index);
}
inline ::slg::protocol::ReportArmyDTO* ReportPlayerDTO::mutable_armies(int index) {
  return armies_.Mutable(index);
}
inline ::slg::protocol::ReportArmyDTO* ReportPlayerDTO::add_armies() {
  return armies_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportArmyDTO >&
ReportPlayerDTO::armies() const {
  return armies_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportArmyDTO >*
ReportPlayerDTO::mutable_armies() {
  return &armies_;
}

// -------------------------------------------------------------------

// ReportResourceDTO

// required int32 level = 1;
inline bool ReportResourceDTO::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportResourceDTO::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportResourceDTO::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportResourceDTO::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ReportResourceDTO::level() const {
  return level_;
}
inline void ReportResourceDTO::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required int32 type = 2;
inline bool ReportResourceDTO::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReportResourceDTO::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReportResourceDTO::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReportResourceDTO::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ReportResourceDTO::type() const {
  return type_;
}
inline void ReportResourceDTO::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 num = 3;
inline bool ReportResourceDTO::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReportResourceDTO::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReportResourceDTO::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReportResourceDTO::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 ReportResourceDTO::num() const {
  return num_;
}
inline void ReportResourceDTO::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// required int32 soldiers = 4;
inline bool ReportResourceDTO::has_soldiers() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReportResourceDTO::set_has_soldiers() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReportResourceDTO::clear_has_soldiers() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReportResourceDTO::clear_soldiers() {
  soldiers_ = 0;
  clear_has_soldiers();
}
inline ::google::protobuf::int32 ReportResourceDTO::soldiers() const {
  return soldiers_;
}
inline void ReportResourceDTO::set_soldiers(::google::protobuf::int32 value) {
  set_has_soldiers();
  soldiers_ = value;
}

// -------------------------------------------------------------------

// ReportPVPResourceDTO

// required int32 level = 1;
inline bool ReportPVPResourceDTO::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportPVPResourceDTO::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportPVPResourceDTO::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportPVPResourceDTO::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ReportPVPResourceDTO::level() const {
  return level_;
}
inline void ReportPVPResourceDTO::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required int32 type = 2;
inline bool ReportPVPResourceDTO::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReportPVPResourceDTO::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReportPVPResourceDTO::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReportPVPResourceDTO::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ReportPVPResourceDTO::type() const {
  return type_;
}
inline void ReportPVPResourceDTO::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required .slg.protocol.ReportPlayerDTO attacker = 3;
inline bool ReportPVPResourceDTO::has_attacker() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReportPVPResourceDTO::set_has_attacker() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReportPVPResourceDTO::clear_has_attacker() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReportPVPResourceDTO::clear_attacker() {
  if (attacker_ != NULL) attacker_->::slg::protocol::ReportPlayerDTO::Clear();
  clear_has_attacker();
}
inline const ::slg::protocol::ReportPlayerDTO& ReportPVPResourceDTO::attacker() const {
  return attacker_ != NULL ? *attacker_ : *default_instance_->attacker_;
}
inline ::slg::protocol::ReportPlayerDTO* ReportPVPResourceDTO::mutable_attacker() {
  set_has_attacker();
  if (attacker_ == NULL) attacker_ = new ::slg::protocol::ReportPlayerDTO;
  return attacker_;
}
inline ::slg::protocol::ReportPlayerDTO* ReportPVPResourceDTO::release_attacker() {
  clear_has_attacker();
  ::slg::protocol::ReportPlayerDTO* temp = attacker_;
  attacker_ = NULL;
  return temp;
}
inline void ReportPVPResourceDTO::set_allocated_attacker(::slg::protocol::ReportPlayerDTO* attacker) {
  delete attacker_;
  attacker_ = attacker;
  if (attacker) {
    set_has_attacker();
  } else {
    clear_has_attacker();
  }
}

// required .slg.protocol.ReportPlayerDTO defender = 4;
inline bool ReportPVPResourceDTO::has_defender() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReportPVPResourceDTO::set_has_defender() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReportPVPResourceDTO::clear_has_defender() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReportPVPResourceDTO::clear_defender() {
  if (defender_ != NULL) defender_->::slg::protocol::ReportPlayerDTO::Clear();
  clear_has_defender();
}
inline const ::slg::protocol::ReportPlayerDTO& ReportPVPResourceDTO::defender() const {
  return defender_ != NULL ? *defender_ : *default_instance_->defender_;
}
inline ::slg::protocol::ReportPlayerDTO* ReportPVPResourceDTO::mutable_defender() {
  set_has_defender();
  if (defender_ == NULL) defender_ = new ::slg::protocol::ReportPlayerDTO;
  return defender_;
}
inline ::slg::protocol::ReportPlayerDTO* ReportPVPResourceDTO::release_defender() {
  clear_has_defender();
  ::slg::protocol::ReportPlayerDTO* temp = defender_;
  defender_ = NULL;
  return temp;
}
inline void ReportPVPResourceDTO::set_allocated_defender(::slg::protocol::ReportPlayerDTO* defender) {
  delete defender_;
  defender_ = defender;
  if (defender) {
    set_has_defender();
  } else {
    clear_has_defender();
  }
}

// required int64 winnerId = 5;
inline bool ReportPVPResourceDTO::has_winnerid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReportPVPResourceDTO::set_has_winnerid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReportPVPResourceDTO::clear_has_winnerid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReportPVPResourceDTO::clear_winnerid() {
  winnerid_ = GOOGLE_LONGLONG(0);
  clear_has_winnerid();
}
inline ::google::protobuf::int64 ReportPVPResourceDTO::winnerid() const {
  return winnerid_;
}
inline void ReportPVPResourceDTO::set_winnerid(::google::protobuf::int64 value) {
  set_has_winnerid();
  winnerid_ = value;
}

// -------------------------------------------------------------------

// ReportResourcePillageDTO

// required int32 type = 1;
inline bool ReportResourcePillageDTO::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportResourcePillageDTO::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportResourcePillageDTO::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportResourcePillageDTO::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ReportResourcePillageDTO::type() const {
  return type_;
}
inline void ReportResourcePillageDTO::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 count = 2;
inline bool ReportResourcePillageDTO::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReportResourcePillageDTO::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReportResourcePillageDTO::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReportResourcePillageDTO::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 ReportResourcePillageDTO::count() const {
  return count_;
}
inline void ReportResourcePillageDTO::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// required int32 upperBound = 3;
inline bool ReportResourcePillageDTO::has_upperbound() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReportResourcePillageDTO::set_has_upperbound() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReportResourcePillageDTO::clear_has_upperbound() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReportResourcePillageDTO::clear_upperbound() {
  upperbound_ = 0;
  clear_has_upperbound();
}
inline ::google::protobuf::int32 ReportResourcePillageDTO::upperbound() const {
  return upperbound_;
}
inline void ReportResourcePillageDTO::set_upperbound(::google::protobuf::int32 value) {
  set_has_upperbound();
  upperbound_ = value;
}

// -------------------------------------------------------------------

// ReportPVPCityDTO

// required .slg.protocol.ReportPlayerDTO attacker = 1;
inline bool ReportPVPCityDTO::has_attacker() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportPVPCityDTO::set_has_attacker() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportPVPCityDTO::clear_has_attacker() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportPVPCityDTO::clear_attacker() {
  if (attacker_ != NULL) attacker_->::slg::protocol::ReportPlayerDTO::Clear();
  clear_has_attacker();
}
inline const ::slg::protocol::ReportPlayerDTO& ReportPVPCityDTO::attacker() const {
  return attacker_ != NULL ? *attacker_ : *default_instance_->attacker_;
}
inline ::slg::protocol::ReportPlayerDTO* ReportPVPCityDTO::mutable_attacker() {
  set_has_attacker();
  if (attacker_ == NULL) attacker_ = new ::slg::protocol::ReportPlayerDTO;
  return attacker_;
}
inline ::slg::protocol::ReportPlayerDTO* ReportPVPCityDTO::release_attacker() {
  clear_has_attacker();
  ::slg::protocol::ReportPlayerDTO* temp = attacker_;
  attacker_ = NULL;
  return temp;
}
inline void ReportPVPCityDTO::set_allocated_attacker(::slg::protocol::ReportPlayerDTO* attacker) {
  delete attacker_;
  attacker_ = attacker;
  if (attacker) {
    set_has_attacker();
  } else {
    clear_has_attacker();
  }
}

// required .slg.protocol.ReportPlayerDTO defender = 2;
inline bool ReportPVPCityDTO::has_defender() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReportPVPCityDTO::set_has_defender() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReportPVPCityDTO::clear_has_defender() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReportPVPCityDTO::clear_defender() {
  if (defender_ != NULL) defender_->::slg::protocol::ReportPlayerDTO::Clear();
  clear_has_defender();
}
inline const ::slg::protocol::ReportPlayerDTO& ReportPVPCityDTO::defender() const {
  return defender_ != NULL ? *defender_ : *default_instance_->defender_;
}
inline ::slg::protocol::ReportPlayerDTO* ReportPVPCityDTO::mutable_defender() {
  set_has_defender();
  if (defender_ == NULL) defender_ = new ::slg::protocol::ReportPlayerDTO;
  return defender_;
}
inline ::slg::protocol::ReportPlayerDTO* ReportPVPCityDTO::release_defender() {
  clear_has_defender();
  ::slg::protocol::ReportPlayerDTO* temp = defender_;
  defender_ = NULL;
  return temp;
}
inline void ReportPVPCityDTO::set_allocated_defender(::slg::protocol::ReportPlayerDTO* defender) {
  delete defender_;
  defender_ = defender;
  if (defender) {
    set_has_defender();
  } else {
    clear_has_defender();
  }
}

// repeated .slg.protocol.ReportResourcePillageDTO pillages = 3;
inline int ReportPVPCityDTO::pillages_size() const {
  return pillages_.size();
}
inline void ReportPVPCityDTO::clear_pillages() {
  pillages_.Clear();
}
inline const ::slg::protocol::ReportResourcePillageDTO& ReportPVPCityDTO::pillages(int index) const {
  return pillages_.Get(index);
}
inline ::slg::protocol::ReportResourcePillageDTO* ReportPVPCityDTO::mutable_pillages(int index) {
  return pillages_.Mutable(index);
}
inline ::slg::protocol::ReportResourcePillageDTO* ReportPVPCityDTO::add_pillages() {
  return pillages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportResourcePillageDTO >&
ReportPVPCityDTO::pillages() const {
  return pillages_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportResourcePillageDTO >*
ReportPVPCityDTO::mutable_pillages() {
  return &pillages_;
}

// required int64 winnerId = 4;
inline bool ReportPVPCityDTO::has_winnerid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReportPVPCityDTO::set_has_winnerid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReportPVPCityDTO::clear_has_winnerid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReportPVPCityDTO::clear_winnerid() {
  winnerid_ = GOOGLE_LONGLONG(0);
  clear_has_winnerid();
}
inline ::google::protobuf::int64 ReportPVPCityDTO::winnerid() const {
  return winnerid_;
}
inline void ReportPVPCityDTO::set_winnerid(::google::protobuf::int64 value) {
  set_has_winnerid();
  winnerid_ = value;
}

// -------------------------------------------------------------------

// ReportRewardDTO

// required int32 id = 1;
inline bool ReportRewardDTO::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportRewardDTO::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportRewardDTO::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportRewardDTO::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ReportRewardDTO::id() const {
  return id_;
}
inline void ReportRewardDTO::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 count = 2;
inline bool ReportRewardDTO::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReportRewardDTO::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReportRewardDTO::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReportRewardDTO::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 ReportRewardDTO::count() const {
  return count_;
}
inline void ReportRewardDTO::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// ReportPVEMonsterDTO

// required int32 monsterId = 1;
inline bool ReportPVEMonsterDTO::has_monsterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportPVEMonsterDTO::set_has_monsterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportPVEMonsterDTO::clear_has_monsterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportPVEMonsterDTO::clear_monsterid() {
  monsterid_ = 0;
  clear_has_monsterid();
}
inline ::google::protobuf::int32 ReportPVEMonsterDTO::monsterid() const {
  return monsterid_;
}
inline void ReportPVEMonsterDTO::set_monsterid(::google::protobuf::int32 value) {
  set_has_monsterid();
  monsterid_ = value;
}

// required bool won = 2;
inline bool ReportPVEMonsterDTO::has_won() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReportPVEMonsterDTO::set_has_won() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReportPVEMonsterDTO::clear_has_won() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReportPVEMonsterDTO::clear_won() {
  won_ = false;
  clear_has_won();
}
inline bool ReportPVEMonsterDTO::won() const {
  return won_;
}
inline void ReportPVEMonsterDTO::set_won(bool value) {
  set_has_won();
  won_ = value;
}

// required bool firstKill = 3;
inline bool ReportPVEMonsterDTO::has_firstkill() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReportPVEMonsterDTO::set_has_firstkill() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReportPVEMonsterDTO::clear_has_firstkill() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReportPVEMonsterDTO::clear_firstkill() {
  firstkill_ = false;
  clear_has_firstkill();
}
inline bool ReportPVEMonsterDTO::firstkill() const {
  return firstkill_;
}
inline void ReportPVEMonsterDTO::set_firstkill(bool value) {
  set_has_firstkill();
  firstkill_ = value;
}

// required int32 dispatch = 4;
inline bool ReportPVEMonsterDTO::has_dispatch() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReportPVEMonsterDTO::set_has_dispatch() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReportPVEMonsterDTO::clear_has_dispatch() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReportPVEMonsterDTO::clear_dispatch() {
  dispatch_ = 0;
  clear_has_dispatch();
}
inline ::google::protobuf::int32 ReportPVEMonsterDTO::dispatch() const {
  return dispatch_;
}
inline void ReportPVEMonsterDTO::set_dispatch(::google::protobuf::int32 value) {
  set_has_dispatch();
  dispatch_ = value;
}

// required int32 remain = 5;
inline bool ReportPVEMonsterDTO::has_remain() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReportPVEMonsterDTO::set_has_remain() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReportPVEMonsterDTO::clear_has_remain() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReportPVEMonsterDTO::clear_remain() {
  remain_ = 0;
  clear_has_remain();
}
inline ::google::protobuf::int32 ReportPVEMonsterDTO::remain() const {
  return remain_;
}
inline void ReportPVEMonsterDTO::set_remain(::google::protobuf::int32 value) {
  set_has_remain();
  remain_ = value;
}

// repeated .slg.protocol.ReportRewardDTO rewards = 6;
inline int ReportPVEMonsterDTO::rewards_size() const {
  return rewards_.size();
}
inline void ReportPVEMonsterDTO::clear_rewards() {
  rewards_.Clear();
}
inline const ::slg::protocol::ReportRewardDTO& ReportPVEMonsterDTO::rewards(int index) const {
  return rewards_.Get(index);
}
inline ::slg::protocol::ReportRewardDTO* ReportPVEMonsterDTO::mutable_rewards(int index) {
  return rewards_.Mutable(index);
}
inline ::slg::protocol::ReportRewardDTO* ReportPVEMonsterDTO::add_rewards() {
  return rewards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportRewardDTO >&
ReportPVEMonsterDTO::rewards() const {
  return rewards_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportRewardDTO >*
ReportPVEMonsterDTO::mutable_rewards() {
  return &rewards_;
}

// -------------------------------------------------------------------

// TradeResultDTO

// required string playerName = 1;
inline bool TradeResultDTO::has_playername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TradeResultDTO::set_has_playername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TradeResultDTO::clear_has_playername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TradeResultDTO::clear_playername() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& TradeResultDTO::playername() const {
  return *playername_;
}
inline void TradeResultDTO::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void TradeResultDTO::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void TradeResultDTO::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TradeResultDTO::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  return playername_;
}
inline ::std::string* TradeResultDTO::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TradeResultDTO::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .slg.protocol.PropertyDTO rewards = 2;
inline int TradeResultDTO::rewards_size() const {
  return rewards_.size();
}
inline void TradeResultDTO::clear_rewards() {
  rewards_.Clear();
}
inline const ::slg::protocol::PropertyDTO& TradeResultDTO::rewards(int index) const {
  return rewards_.Get(index);
}
inline ::slg::protocol::PropertyDTO* TradeResultDTO::mutable_rewards(int index) {
  return rewards_.Mutable(index);
}
inline ::slg::protocol::PropertyDTO* TradeResultDTO::add_rewards() {
  return rewards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::PropertyDTO >&
TradeResultDTO::rewards() const {
  return rewards_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::PropertyDTO >*
TradeResultDTO::mutable_rewards() {
  return &rewards_;
}

// required int32 envet = 3;
inline bool TradeResultDTO::has_envet() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TradeResultDTO::set_has_envet() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TradeResultDTO::clear_has_envet() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TradeResultDTO::clear_envet() {
  envet_ = 0;
  clear_has_envet();
}
inline ::google::protobuf::int32 TradeResultDTO::envet() const {
  return envet_;
}
inline void TradeResultDTO::set_envet(::google::protobuf::int32 value) {
  set_has_envet();
  envet_ = value;
}

// required int32 traderId = 4;
inline bool TradeResultDTO::has_traderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TradeResultDTO::set_has_traderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TradeResultDTO::clear_has_traderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TradeResultDTO::clear_traderid() {
  traderid_ = 0;
  clear_has_traderid();
}
inline ::google::protobuf::int32 TradeResultDTO::traderid() const {
  return traderid_;
}
inline void TradeResultDTO::set_traderid(::google::protobuf::int32 value) {
  set_has_traderid();
  traderid_ = value;
}

// -------------------------------------------------------------------

// ReportTradeDTO

// repeated .slg.protocol.TradeResultDTO tradeList = 1;
inline int ReportTradeDTO::tradelist_size() const {
  return tradelist_.size();
}
inline void ReportTradeDTO::clear_tradelist() {
  tradelist_.Clear();
}
inline const ::slg::protocol::TradeResultDTO& ReportTradeDTO::tradelist(int index) const {
  return tradelist_.Get(index);
}
inline ::slg::protocol::TradeResultDTO* ReportTradeDTO::mutable_tradelist(int index) {
  return tradelist_.Mutable(index);
}
inline ::slg::protocol::TradeResultDTO* ReportTradeDTO::add_tradelist() {
  return tradelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::TradeResultDTO >&
ReportTradeDTO::tradelist() const {
  return tradelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::TradeResultDTO >*
ReportTradeDTO::mutable_tradelist() {
  return &tradelist_;
}

// -------------------------------------------------------------------

// ArmyDeadDTO

// required int32 armyType = 1;
inline bool ArmyDeadDTO::has_armytype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArmyDeadDTO::set_has_armytype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArmyDeadDTO::clear_has_armytype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArmyDeadDTO::clear_armytype() {
  armytype_ = 0;
  clear_has_armytype();
}
inline ::google::protobuf::int32 ArmyDeadDTO::armytype() const {
  return armytype_;
}
inline void ArmyDeadDTO::set_armytype(::google::protobuf::int32 value) {
  set_has_armytype();
  armytype_ = value;
}

// required int32 armyLevel = 2;
inline bool ArmyDeadDTO::has_armylevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArmyDeadDTO::set_has_armylevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArmyDeadDTO::clear_has_armylevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArmyDeadDTO::clear_armylevel() {
  armylevel_ = 0;
  clear_has_armylevel();
}
inline ::google::protobuf::int32 ArmyDeadDTO::armylevel() const {
  return armylevel_;
}
inline void ArmyDeadDTO::set_armylevel(::google::protobuf::int32 value) {
  set_has_armylevel();
  armylevel_ = value;
}

// required int32 deadNum = 3;
inline bool ArmyDeadDTO::has_deadnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArmyDeadDTO::set_has_deadnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArmyDeadDTO::clear_has_deadnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArmyDeadDTO::clear_deadnum() {
  deadnum_ = 0;
  clear_has_deadnum();
}
inline ::google::protobuf::int32 ArmyDeadDTO::deadnum() const {
  return deadnum_;
}
inline void ArmyDeadDTO::set_deadnum(::google::protobuf::int32 value) {
  set_has_deadnum();
  deadnum_ = value;
}

// required int32 lastNum = 4;
inline bool ArmyDeadDTO::has_lastnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ArmyDeadDTO::set_has_lastnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ArmyDeadDTO::clear_has_lastnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ArmyDeadDTO::clear_lastnum() {
  lastnum_ = 0;
  clear_has_lastnum();
}
inline ::google::protobuf::int32 ArmyDeadDTO::lastnum() const {
  return lastnum_;
}
inline void ArmyDeadDTO::set_lastnum(::google::protobuf::int32 value) {
  set_has_lastnum();
  lastnum_ = value;
}

// -------------------------------------------------------------------

// ReportDeadDTO

// repeated .slg.protocol.ArmyDeadDTO deadList = 1;
inline int ReportDeadDTO::deadlist_size() const {
  return deadlist_.size();
}
inline void ReportDeadDTO::clear_deadlist() {
  deadlist_.Clear();
}
inline const ::slg::protocol::ArmyDeadDTO& ReportDeadDTO::deadlist(int index) const {
  return deadlist_.Get(index);
}
inline ::slg::protocol::ArmyDeadDTO* ReportDeadDTO::mutable_deadlist(int index) {
  return deadlist_.Mutable(index);
}
inline ::slg::protocol::ArmyDeadDTO* ReportDeadDTO::add_deadlist() {
  return deadlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::ArmyDeadDTO >&
ReportDeadDTO::deadlist() const {
  return deadlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::ArmyDeadDTO >*
ReportDeadDTO::mutable_deadlist() {
  return &deadlist_;
}

// -------------------------------------------------------------------

// ReportDTO

// required int64 reportId = 1;
inline bool ReportDTO::has_reportid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportDTO::set_has_reportid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportDTO::clear_has_reportid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportDTO::clear_reportid() {
  reportid_ = GOOGLE_LONGLONG(0);
  clear_has_reportid();
}
inline ::google::protobuf::int64 ReportDTO::reportid() const {
  return reportid_;
}
inline void ReportDTO::set_reportid(::google::protobuf::int64 value) {
  set_has_reportid();
  reportid_ = value;
}

// required .slg.protocol.ReportType type = 2;
inline bool ReportDTO::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReportDTO::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReportDTO::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReportDTO::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::slg::protocol::ReportType ReportDTO::type() const {
  return static_cast< ::slg::protocol::ReportType >(type_);
}
inline void ReportDTO::set_type(::slg::protocol::ReportType value) {
  assert(::slg::protocol::ReportType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 time = 3;
inline bool ReportDTO::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReportDTO::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReportDTO::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReportDTO::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 ReportDTO::time() const {
  return time_;
}
inline void ReportDTO::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// optional .slg.protocol.ReportResourceDTO resource = 10;
inline bool ReportDTO::has_resource() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReportDTO::set_has_resource() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReportDTO::clear_has_resource() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReportDTO::clear_resource() {
  if (resource_ != NULL) resource_->::slg::protocol::ReportResourceDTO::Clear();
  clear_has_resource();
}
inline const ::slg::protocol::ReportResourceDTO& ReportDTO::resource() const {
  return resource_ != NULL ? *resource_ : *default_instance_->resource_;
}
inline ::slg::protocol::ReportResourceDTO* ReportDTO::mutable_resource() {
  set_has_resource();
  if (resource_ == NULL) resource_ = new ::slg::protocol::ReportResourceDTO;
  return resource_;
}
inline ::slg::protocol::ReportResourceDTO* ReportDTO::release_resource() {
  clear_has_resource();
  ::slg::protocol::ReportResourceDTO* temp = resource_;
  resource_ = NULL;
  return temp;
}
inline void ReportDTO::set_allocated_resource(::slg::protocol::ReportResourceDTO* resource) {
  delete resource_;
  resource_ = resource;
  if (resource) {
    set_has_resource();
  } else {
    clear_has_resource();
  }
}

// optional .slg.protocol.ReportPVPResourceDTO resourcePVP = 11;
inline bool ReportDTO::has_resourcepvp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReportDTO::set_has_resourcepvp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReportDTO::clear_has_resourcepvp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReportDTO::clear_resourcepvp() {
  if (resourcepvp_ != NULL) resourcepvp_->::slg::protocol::ReportPVPResourceDTO::Clear();
  clear_has_resourcepvp();
}
inline const ::slg::protocol::ReportPVPResourceDTO& ReportDTO::resourcepvp() const {
  return resourcepvp_ != NULL ? *resourcepvp_ : *default_instance_->resourcepvp_;
}
inline ::slg::protocol::ReportPVPResourceDTO* ReportDTO::mutable_resourcepvp() {
  set_has_resourcepvp();
  if (resourcepvp_ == NULL) resourcepvp_ = new ::slg::protocol::ReportPVPResourceDTO;
  return resourcepvp_;
}
inline ::slg::protocol::ReportPVPResourceDTO* ReportDTO::release_resourcepvp() {
  clear_has_resourcepvp();
  ::slg::protocol::ReportPVPResourceDTO* temp = resourcepvp_;
  resourcepvp_ = NULL;
  return temp;
}
inline void ReportDTO::set_allocated_resourcepvp(::slg::protocol::ReportPVPResourceDTO* resourcepvp) {
  delete resourcepvp_;
  resourcepvp_ = resourcepvp;
  if (resourcepvp) {
    set_has_resourcepvp();
  } else {
    clear_has_resourcepvp();
  }
}

// optional .slg.protocol.ReportPVPCityDTO cityPVP = 12;
inline bool ReportDTO::has_citypvp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReportDTO::set_has_citypvp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReportDTO::clear_has_citypvp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReportDTO::clear_citypvp() {
  if (citypvp_ != NULL) citypvp_->::slg::protocol::ReportPVPCityDTO::Clear();
  clear_has_citypvp();
}
inline const ::slg::protocol::ReportPVPCityDTO& ReportDTO::citypvp() const {
  return citypvp_ != NULL ? *citypvp_ : *default_instance_->citypvp_;
}
inline ::slg::protocol::ReportPVPCityDTO* ReportDTO::mutable_citypvp() {
  set_has_citypvp();
  if (citypvp_ == NULL) citypvp_ = new ::slg::protocol::ReportPVPCityDTO;
  return citypvp_;
}
inline ::slg::protocol::ReportPVPCityDTO* ReportDTO::release_citypvp() {
  clear_has_citypvp();
  ::slg::protocol::ReportPVPCityDTO* temp = citypvp_;
  citypvp_ = NULL;
  return temp;
}
inline void ReportDTO::set_allocated_citypvp(::slg::protocol::ReportPVPCityDTO* citypvp) {
  delete citypvp_;
  citypvp_ = citypvp;
  if (citypvp) {
    set_has_citypvp();
  } else {
    clear_has_citypvp();
  }
}

// optional .slg.protocol.ReportPVEMonsterDTO monster = 13;
inline bool ReportDTO::has_monster() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReportDTO::set_has_monster() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReportDTO::clear_has_monster() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReportDTO::clear_monster() {
  if (monster_ != NULL) monster_->::slg::protocol::ReportPVEMonsterDTO::Clear();
  clear_has_monster();
}
inline const ::slg::protocol::ReportPVEMonsterDTO& ReportDTO::monster() const {
  return monster_ != NULL ? *monster_ : *default_instance_->monster_;
}
inline ::slg::protocol::ReportPVEMonsterDTO* ReportDTO::mutable_monster() {
  set_has_monster();
  if (monster_ == NULL) monster_ = new ::slg::protocol::ReportPVEMonsterDTO;
  return monster_;
}
inline ::slg::protocol::ReportPVEMonsterDTO* ReportDTO::release_monster() {
  clear_has_monster();
  ::slg::protocol::ReportPVEMonsterDTO* temp = monster_;
  monster_ = NULL;
  return temp;
}
inline void ReportDTO::set_allocated_monster(::slg::protocol::ReportPVEMonsterDTO* monster) {
  delete monster_;
  monster_ = monster;
  if (monster) {
    set_has_monster();
  } else {
    clear_has_monster();
  }
}

// optional .slg.protocol.ReportTradeDTO trade = 14;
inline bool ReportDTO::has_trade() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ReportDTO::set_has_trade() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ReportDTO::clear_has_trade() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ReportDTO::clear_trade() {
  if (trade_ != NULL) trade_->::slg::protocol::ReportTradeDTO::Clear();
  clear_has_trade();
}
inline const ::slg::protocol::ReportTradeDTO& ReportDTO::trade() const {
  return trade_ != NULL ? *trade_ : *default_instance_->trade_;
}
inline ::slg::protocol::ReportTradeDTO* ReportDTO::mutable_trade() {
  set_has_trade();
  if (trade_ == NULL) trade_ = new ::slg::protocol::ReportTradeDTO;
  return trade_;
}
inline ::slg::protocol::ReportTradeDTO* ReportDTO::release_trade() {
  clear_has_trade();
  ::slg::protocol::ReportTradeDTO* temp = trade_;
  trade_ = NULL;
  return temp;
}
inline void ReportDTO::set_allocated_trade(::slg::protocol::ReportTradeDTO* trade) {
  delete trade_;
  trade_ = trade;
  if (trade) {
    set_has_trade();
  } else {
    clear_has_trade();
  }
}

// optional .slg.protocol.ReportDeadDTO dead = 15;
inline bool ReportDTO::has_dead() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ReportDTO::set_has_dead() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ReportDTO::clear_has_dead() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ReportDTO::clear_dead() {
  if (dead_ != NULL) dead_->::slg::protocol::ReportDeadDTO::Clear();
  clear_has_dead();
}
inline const ::slg::protocol::ReportDeadDTO& ReportDTO::dead() const {
  return dead_ != NULL ? *dead_ : *default_instance_->dead_;
}
inline ::slg::protocol::ReportDeadDTO* ReportDTO::mutable_dead() {
  set_has_dead();
  if (dead_ == NULL) dead_ = new ::slg::protocol::ReportDeadDTO;
  return dead_;
}
inline ::slg::protocol::ReportDeadDTO* ReportDTO::release_dead() {
  clear_has_dead();
  ::slg::protocol::ReportDeadDTO* temp = dead_;
  dead_ = NULL;
  return temp;
}
inline void ReportDTO::set_allocated_dead(::slg::protocol::ReportDeadDTO* dead) {
  delete dead_;
  dead_ = dead;
  if (dead) {
    set_has_dead();
  } else {
    clear_has_dead();
  }
}

// -------------------------------------------------------------------

// ReportTargetDTO

// required int64 id = 1;
inline bool ReportTargetDTO::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportTargetDTO::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportTargetDTO::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportTargetDTO::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 ReportTargetDTO::id() const {
  return id_;
}
inline void ReportTargetDTO::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// required int32 level = 2;
inline bool ReportTargetDTO::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReportTargetDTO::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReportTargetDTO::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReportTargetDTO::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ReportTargetDTO::level() const {
  return level_;
}
inline void ReportTargetDTO::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 value = 3;
inline bool ReportTargetDTO::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReportTargetDTO::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReportTargetDTO::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReportTargetDTO::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 ReportTargetDTO::value() const {
  return value_;
}
inline void ReportTargetDTO::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// ReportResultDTO

// required bool attack = 1;
inline bool ReportResultDTO::has_attack() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportResultDTO::set_has_attack() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportResultDTO::clear_has_attack() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportResultDTO::clear_attack() {
  attack_ = false;
  clear_has_attack();
}
inline bool ReportResultDTO::attack() const {
  return attack_;
}
inline void ReportResultDTO::set_attack(bool value) {
  set_has_attack();
  attack_ = value;
}

// required bool win = 2;
inline bool ReportResultDTO::has_win() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReportResultDTO::set_has_win() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReportResultDTO::clear_has_win() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReportResultDTO::clear_win() {
  win_ = false;
  clear_has_win();
}
inline bool ReportResultDTO::win() const {
  return win_;
}
inline void ReportResultDTO::set_win(bool value) {
  set_has_win();
  win_ = value;
}

// optional bool first = 3;
inline bool ReportResultDTO::has_first() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReportResultDTO::set_has_first() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReportResultDTO::clear_has_first() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReportResultDTO::clear_first() {
  first_ = false;
  clear_has_first();
}
inline bool ReportResultDTO::first() const {
  return first_;
}
inline void ReportResultDTO::set_first(bool value) {
  set_has_first();
  first_ = value;
}

// -------------------------------------------------------------------

// ReportProfileDTO

// required int64 reportId = 1;
inline bool ReportProfileDTO::has_reportid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportProfileDTO::set_has_reportid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportProfileDTO::clear_has_reportid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportProfileDTO::clear_reportid() {
  reportid_ = GOOGLE_LONGLONG(0);
  clear_has_reportid();
}
inline ::google::protobuf::int64 ReportProfileDTO::reportid() const {
  return reportid_;
}
inline void ReportProfileDTO::set_reportid(::google::protobuf::int64 value) {
  set_has_reportid();
  reportid_ = value;
}

// required .slg.protocol.ReportType type = 2;
inline bool ReportProfileDTO::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReportProfileDTO::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReportProfileDTO::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReportProfileDTO::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::slg::protocol::ReportType ReportProfileDTO::type() const {
  return static_cast< ::slg::protocol::ReportType >(type_);
}
inline void ReportProfileDTO::set_type(::slg::protocol::ReportType value) {
  assert(::slg::protocol::ReportType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .slg.protocol.ReportTargetDTO target = 3;
inline bool ReportProfileDTO::has_target() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReportProfileDTO::set_has_target() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReportProfileDTO::clear_has_target() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReportProfileDTO::clear_target() {
  if (target_ != NULL) target_->::slg::protocol::ReportTargetDTO::Clear();
  clear_has_target();
}
inline const ::slg::protocol::ReportTargetDTO& ReportProfileDTO::target() const {
  return target_ != NULL ? *target_ : *default_instance_->target_;
}
inline ::slg::protocol::ReportTargetDTO* ReportProfileDTO::mutable_target() {
  set_has_target();
  if (target_ == NULL) target_ = new ::slg::protocol::ReportTargetDTO;
  return target_;
}
inline ::slg::protocol::ReportTargetDTO* ReportProfileDTO::release_target() {
  clear_has_target();
  ::slg::protocol::ReportTargetDTO* temp = target_;
  target_ = NULL;
  return temp;
}
inline void ReportProfileDTO::set_allocated_target(::slg::protocol::ReportTargetDTO* target) {
  delete target_;
  target_ = target;
  if (target) {
    set_has_target();
  } else {
    clear_has_target();
  }
}

// optional .slg.protocol.ReportResultDTO result = 4;
inline bool ReportProfileDTO::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReportProfileDTO::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReportProfileDTO::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReportProfileDTO::clear_result() {
  if (result_ != NULL) result_->::slg::protocol::ReportResultDTO::Clear();
  clear_has_result();
}
inline const ::slg::protocol::ReportResultDTO& ReportProfileDTO::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::slg::protocol::ReportResultDTO* ReportProfileDTO::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::slg::protocol::ReportResultDTO;
  return result_;
}
inline ::slg::protocol::ReportResultDTO* ReportProfileDTO::release_result() {
  clear_has_result();
  ::slg::protocol::ReportResultDTO* temp = result_;
  result_ = NULL;
  return temp;
}
inline void ReportProfileDTO::set_allocated_result(::slg::protocol::ReportResultDTO* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
}

// required int32 time = 5;
inline bool ReportProfileDTO::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReportProfileDTO::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReportProfileDTO::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReportProfileDTO::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 ReportProfileDTO::time() const {
  return time_;
}
inline void ReportProfileDTO::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// required bool read = 6;
inline bool ReportProfileDTO::has_read() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReportProfileDTO::set_has_read() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReportProfileDTO::clear_has_read() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReportProfileDTO::clear_read() {
  read_ = false;
  clear_has_read();
}
inline bool ReportProfileDTO::read() const {
  return read_;
}
inline void ReportProfileDTO::set_read(bool value) {
  set_has_read();
  read_ = value;
}

// optional int32 rewardDiamond = 7;
inline bool ReportProfileDTO::has_rewarddiamond() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReportProfileDTO::set_has_rewarddiamond() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReportProfileDTO::clear_has_rewarddiamond() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReportProfileDTO::clear_rewarddiamond() {
  rewarddiamond_ = 0;
  clear_has_rewarddiamond();
}
inline ::google::protobuf::int32 ReportProfileDTO::rewarddiamond() const {
  return rewarddiamond_;
}
inline void ReportProfileDTO::set_rewarddiamond(::google::protobuf::int32 value) {
  set_has_rewarddiamond();
  rewarddiamond_ = value;
}

// -------------------------------------------------------------------

// ReportDetailRequest

// required int64 reportId = 1;
inline bool ReportDetailRequest::has_reportid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportDetailRequest::set_has_reportid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportDetailRequest::clear_has_reportid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportDetailRequest::clear_reportid() {
  reportid_ = GOOGLE_LONGLONG(0);
  clear_has_reportid();
}
inline ::google::protobuf::int64 ReportDetailRequest::reportid() const {
  return reportid_;
}
inline void ReportDetailRequest::set_reportid(::google::protobuf::int64 value) {
  set_has_reportid();
  reportid_ = value;
}

// -------------------------------------------------------------------

// ReportDetailResponse

// optional .slg.protocol.ReportDTO report = 1;
inline bool ReportDetailResponse::has_report() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportDetailResponse::set_has_report() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportDetailResponse::clear_has_report() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportDetailResponse::clear_report() {
  if (report_ != NULL) report_->::slg::protocol::ReportDTO::Clear();
  clear_has_report();
}
inline const ::slg::protocol::ReportDTO& ReportDetailResponse::report() const {
  return report_ != NULL ? *report_ : *default_instance_->report_;
}
inline ::slg::protocol::ReportDTO* ReportDetailResponse::mutable_report() {
  set_has_report();
  if (report_ == NULL) report_ = new ::slg::protocol::ReportDTO;
  return report_;
}
inline ::slg::protocol::ReportDTO* ReportDetailResponse::release_report() {
  clear_has_report();
  ::slg::protocol::ReportDTO* temp = report_;
  report_ = NULL;
  return temp;
}
inline void ReportDetailResponse::set_allocated_report(::slg::protocol::ReportDTO* report) {
  delete report_;
  report_ = report;
  if (report) {
    set_has_report();
  } else {
    clear_has_report();
  }
}

// -------------------------------------------------------------------

// ReportRewardTakeRequest

// required int64 reportId = 1;
inline bool ReportRewardTakeRequest::has_reportid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportRewardTakeRequest::set_has_reportid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportRewardTakeRequest::clear_has_reportid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportRewardTakeRequest::clear_reportid() {
  reportid_ = GOOGLE_LONGLONG(0);
  clear_has_reportid();
}
inline ::google::protobuf::int64 ReportRewardTakeRequest::reportid() const {
  return reportid_;
}
inline void ReportRewardTakeRequest::set_reportid(::google::protobuf::int64 value) {
  set_has_reportid();
  reportid_ = value;
}

// -------------------------------------------------------------------

// ReportRewardTakeResponse

// required int64 reportId = 1;
inline bool ReportRewardTakeResponse::has_reportid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportRewardTakeResponse::set_has_reportid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportRewardTakeResponse::clear_has_reportid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportRewardTakeResponse::clear_reportid() {
  reportid_ = GOOGLE_LONGLONG(0);
  clear_has_reportid();
}
inline ::google::protobuf::int64 ReportRewardTakeResponse::reportid() const {
  return reportid_;
}
inline void ReportRewardTakeResponse::set_reportid(::google::protobuf::int64 value) {
  set_has_reportid();
  reportid_ = value;
}

// -------------------------------------------------------------------

// ReportDeleteRequest

// required int64 reportId = 1;
inline bool ReportDeleteRequest::has_reportid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportDeleteRequest::set_has_reportid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportDeleteRequest::clear_has_reportid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportDeleteRequest::clear_reportid() {
  reportid_ = GOOGLE_LONGLONG(0);
  clear_has_reportid();
}
inline ::google::protobuf::int64 ReportDeleteRequest::reportid() const {
  return reportid_;
}
inline void ReportDeleteRequest::set_reportid(::google::protobuf::int64 value) {
  set_has_reportid();
  reportid_ = value;
}

// -------------------------------------------------------------------

// ReportDeleteResponse

// required int64 reportId = 1;
inline bool ReportDeleteResponse::has_reportid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportDeleteResponse::set_has_reportid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportDeleteResponse::clear_has_reportid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportDeleteResponse::clear_reportid() {
  reportid_ = GOOGLE_LONGLONG(0);
  clear_has_reportid();
}
inline ::google::protobuf::int64 ReportDeleteResponse::reportid() const {
  return reportid_;
}
inline void ReportDeleteResponse::set_reportid(::google::protobuf::int64 value) {
  set_has_reportid();
  reportid_ = value;
}

// -------------------------------------------------------------------

// ReportProfileListPush

// repeated .slg.protocol.ReportProfileDTO reportProfiles = 1;
inline int ReportProfileListPush::reportprofiles_size() const {
  return reportprofiles_.size();
}
inline void ReportProfileListPush::clear_reportprofiles() {
  reportprofiles_.Clear();
}
inline const ::slg::protocol::ReportProfileDTO& ReportProfileListPush::reportprofiles(int index) const {
  return reportprofiles_.Get(index);
}
inline ::slg::protocol::ReportProfileDTO* ReportProfileListPush::mutable_reportprofiles(int index) {
  return reportprofiles_.Mutable(index);
}
inline ::slg::protocol::ReportProfileDTO* ReportProfileListPush::add_reportprofiles() {
  return reportprofiles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportProfileDTO >&
ReportProfileListPush::reportprofiles() const {
  return reportprofiles_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportProfileDTO >*
ReportProfileListPush::mutable_reportprofiles() {
  return &reportprofiles_;
}

// -------------------------------------------------------------------

// ReportSpyPlayerDTO

// required int64 id = 1;
inline bool ReportSpyPlayerDTO::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportSpyPlayerDTO::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportSpyPlayerDTO::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportSpyPlayerDTO::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 ReportSpyPlayerDTO::id() const {
  return id_;
}
inline void ReportSpyPlayerDTO::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool ReportSpyPlayerDTO::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReportSpyPlayerDTO::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReportSpyPlayerDTO::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReportSpyPlayerDTO::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ReportSpyPlayerDTO::name() const {
  return *name_;
}
inline void ReportSpyPlayerDTO::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ReportSpyPlayerDTO::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ReportSpyPlayerDTO::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReportSpyPlayerDTO::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ReportSpyPlayerDTO::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReportSpyPlayerDTO::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string allianceShortName = 3;
inline bool ReportSpyPlayerDTO::has_allianceshortname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReportSpyPlayerDTO::set_has_allianceshortname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReportSpyPlayerDTO::clear_has_allianceshortname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReportSpyPlayerDTO::clear_allianceshortname() {
  if (allianceshortname_ != &::google::protobuf::internal::kEmptyString) {
    allianceshortname_->clear();
  }
  clear_has_allianceshortname();
}
inline const ::std::string& ReportSpyPlayerDTO::allianceshortname() const {
  return *allianceshortname_;
}
inline void ReportSpyPlayerDTO::set_allianceshortname(const ::std::string& value) {
  set_has_allianceshortname();
  if (allianceshortname_ == &::google::protobuf::internal::kEmptyString) {
    allianceshortname_ = new ::std::string;
  }
  allianceshortname_->assign(value);
}
inline void ReportSpyPlayerDTO::set_allianceshortname(const char* value) {
  set_has_allianceshortname();
  if (allianceshortname_ == &::google::protobuf::internal::kEmptyString) {
    allianceshortname_ = new ::std::string;
  }
  allianceshortname_->assign(value);
}
inline void ReportSpyPlayerDTO::set_allianceshortname(const char* value, size_t size) {
  set_has_allianceshortname();
  if (allianceshortname_ == &::google::protobuf::internal::kEmptyString) {
    allianceshortname_ = new ::std::string;
  }
  allianceshortname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReportSpyPlayerDTO::mutable_allianceshortname() {
  set_has_allianceshortname();
  if (allianceshortname_ == &::google::protobuf::internal::kEmptyString) {
    allianceshortname_ = new ::std::string;
  }
  return allianceshortname_;
}
inline ::std::string* ReportSpyPlayerDTO::release_allianceshortname() {
  clear_has_allianceshortname();
  if (allianceshortname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = allianceshortname_;
    allianceshortname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReportSpyPlayerDTO::set_allocated_allianceshortname(::std::string* allianceshortname) {
  if (allianceshortname_ != &::google::protobuf::internal::kEmptyString) {
    delete allianceshortname_;
  }
  if (allianceshortname) {
    set_has_allianceshortname();
    allianceshortname_ = allianceshortname;
  } else {
    clear_has_allianceshortname();
    allianceshortname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .slg.protocol.PositionDTO position = 4;
inline bool ReportSpyPlayerDTO::has_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReportSpyPlayerDTO::set_has_position() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReportSpyPlayerDTO::clear_has_position() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReportSpyPlayerDTO::clear_position() {
  if (position_ != NULL) position_->::slg::protocol::PositionDTO::Clear();
  clear_has_position();
}
inline const ::slg::protocol::PositionDTO& ReportSpyPlayerDTO::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::slg::protocol::PositionDTO* ReportSpyPlayerDTO::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::slg::protocol::PositionDTO;
  return position_;
}
inline ::slg::protocol::PositionDTO* ReportSpyPlayerDTO::release_position() {
  clear_has_position();
  ::slg::protocol::PositionDTO* temp = position_;
  position_ = NULL;
  return temp;
}
inline void ReportSpyPlayerDTO::set_allocated_position(::slg::protocol::PositionDTO* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
}

// -------------------------------------------------------------------

// ReportSpyResourceDTO

// required int32 type = 1;
inline bool ReportSpyResourceDTO::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportSpyResourceDTO::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportSpyResourceDTO::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportSpyResourceDTO::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ReportSpyResourceDTO::type() const {
  return type_;
}
inline void ReportSpyResourceDTO::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 remaining = 2;
inline bool ReportSpyResourceDTO::has_remaining() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReportSpyResourceDTO::set_has_remaining() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReportSpyResourceDTO::clear_has_remaining() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReportSpyResourceDTO::clear_remaining() {
  remaining_ = 0;
  clear_has_remaining();
}
inline ::google::protobuf::int32 ReportSpyResourceDTO::remaining() const {
  return remaining_;
}
inline void ReportSpyResourceDTO::set_remaining(::google::protobuf::int32 value) {
  set_has_remaining();
  remaining_ = value;
}

// required int32 canBeRobbed = 3;
inline bool ReportSpyResourceDTO::has_canberobbed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReportSpyResourceDTO::set_has_canberobbed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReportSpyResourceDTO::clear_has_canberobbed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReportSpyResourceDTO::clear_canberobbed() {
  canberobbed_ = 0;
  clear_has_canberobbed();
}
inline ::google::protobuf::int32 ReportSpyResourceDTO::canberobbed() const {
  return canberobbed_;
}
inline void ReportSpyResourceDTO::set_canberobbed(::google::protobuf::int32 value) {
  set_has_canberobbed();
  canberobbed_ = value;
}

// -------------------------------------------------------------------

// ReportSpyWallDTO

// required int32 currentValue = 1;
inline bool ReportSpyWallDTO::has_currentvalue() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportSpyWallDTO::set_has_currentvalue() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportSpyWallDTO::clear_has_currentvalue() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportSpyWallDTO::clear_currentvalue() {
  currentvalue_ = 0;
  clear_has_currentvalue();
}
inline ::google::protobuf::int32 ReportSpyWallDTO::currentvalue() const {
  return currentvalue_;
}
inline void ReportSpyWallDTO::set_currentvalue(::google::protobuf::int32 value) {
  set_has_currentvalue();
  currentvalue_ = value;
}

// required int32 totalValue = 2;
inline bool ReportSpyWallDTO::has_totalvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReportSpyWallDTO::set_has_totalvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReportSpyWallDTO::clear_has_totalvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReportSpyWallDTO::clear_totalvalue() {
  totalvalue_ = 0;
  clear_has_totalvalue();
}
inline ::google::protobuf::int32 ReportSpyWallDTO::totalvalue() const {
  return totalvalue_;
}
inline void ReportSpyWallDTO::set_totalvalue(::google::protobuf::int32 value) {
  set_has_totalvalue();
  totalvalue_ = value;
}

// optional int32 burnRate = 3;
inline bool ReportSpyWallDTO::has_burnrate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReportSpyWallDTO::set_has_burnrate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReportSpyWallDTO::clear_has_burnrate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReportSpyWallDTO::clear_burnrate() {
  burnrate_ = 0;
  clear_has_burnrate();
}
inline ::google::protobuf::int32 ReportSpyWallDTO::burnrate() const {
  return burnrate_;
}
inline void ReportSpyWallDTO::set_burnrate(::google::protobuf::int32 value) {
  set_has_burnrate();
  burnrate_ = value;
}

// optional int32 burnRemianingTime = 4;
inline bool ReportSpyWallDTO::has_burnremianingtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReportSpyWallDTO::set_has_burnremianingtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReportSpyWallDTO::clear_has_burnremianingtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReportSpyWallDTO::clear_burnremianingtime() {
  burnremianingtime_ = 0;
  clear_has_burnremianingtime();
}
inline ::google::protobuf::int32 ReportSpyWallDTO::burnremianingtime() const {
  return burnremianingtime_;
}
inline void ReportSpyWallDTO::set_burnremianingtime(::google::protobuf::int32 value) {
  set_has_burnremianingtime();
  burnremianingtime_ = value;
}

// -------------------------------------------------------------------

// ReportSpyArmyDTO

// required int32 type = 1;
inline bool ReportSpyArmyDTO::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportSpyArmyDTO::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportSpyArmyDTO::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportSpyArmyDTO::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ReportSpyArmyDTO::type() const {
  return type_;
}
inline void ReportSpyArmyDTO::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 level = 2;
inline bool ReportSpyArmyDTO::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReportSpyArmyDTO::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReportSpyArmyDTO::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReportSpyArmyDTO::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ReportSpyArmyDTO::level() const {
  return level_;
}
inline void ReportSpyArmyDTO::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required int32 num = 3;
inline bool ReportSpyArmyDTO::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReportSpyArmyDTO::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReportSpyArmyDTO::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReportSpyArmyDTO::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 ReportSpyArmyDTO::num() const {
  return num_;
}
inline void ReportSpyArmyDTO::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// ReportSpyAidDTO

// required .slg.protocol.ReportSpyPlayerDTO player = 1;
inline bool ReportSpyAidDTO::has_player() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportSpyAidDTO::set_has_player() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportSpyAidDTO::clear_has_player() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportSpyAidDTO::clear_player() {
  if (player_ != NULL) player_->::slg::protocol::ReportSpyPlayerDTO::Clear();
  clear_has_player();
}
inline const ::slg::protocol::ReportSpyPlayerDTO& ReportSpyAidDTO::player() const {
  return player_ != NULL ? *player_ : *default_instance_->player_;
}
inline ::slg::protocol::ReportSpyPlayerDTO* ReportSpyAidDTO::mutable_player() {
  set_has_player();
  if (player_ == NULL) player_ = new ::slg::protocol::ReportSpyPlayerDTO;
  return player_;
}
inline ::slg::protocol::ReportSpyPlayerDTO* ReportSpyAidDTO::release_player() {
  clear_has_player();
  ::slg::protocol::ReportSpyPlayerDTO* temp = player_;
  player_ = NULL;
  return temp;
}
inline void ReportSpyAidDTO::set_allocated_player(::slg::protocol::ReportSpyPlayerDTO* player) {
  delete player_;
  player_ = player;
  if (player) {
    set_has_player();
  } else {
    clear_has_player();
  }
}

// repeated .slg.protocol.ReportSpyArmyDTO armies = 2;
inline int ReportSpyAidDTO::armies_size() const {
  return armies_.size();
}
inline void ReportSpyAidDTO::clear_armies() {
  armies_.Clear();
}
inline const ::slg::protocol::ReportSpyArmyDTO& ReportSpyAidDTO::armies(int index) const {
  return armies_.Get(index);
}
inline ::slg::protocol::ReportSpyArmyDTO* ReportSpyAidDTO::mutable_armies(int index) {
  return armies_.Mutable(index);
}
inline ::slg::protocol::ReportSpyArmyDTO* ReportSpyAidDTO::add_armies() {
  return armies_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportSpyArmyDTO >&
ReportSpyAidDTO::armies() const {
  return armies_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportSpyArmyDTO >*
ReportSpyAidDTO::mutable_armies() {
  return &armies_;
}

// -------------------------------------------------------------------

// ReportSpyTowerDTO

// required int32 level = 1;
inline bool ReportSpyTowerDTO::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportSpyTowerDTO::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportSpyTowerDTO::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportSpyTowerDTO::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ReportSpyTowerDTO::level() const {
  return level_;
}
inline void ReportSpyTowerDTO::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 atk = 2;
inline bool ReportSpyTowerDTO::has_atk() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReportSpyTowerDTO::set_has_atk() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReportSpyTowerDTO::clear_has_atk() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReportSpyTowerDTO::clear_atk() {
  atk_ = 0;
  clear_has_atk();
}
inline ::google::protobuf::int32 ReportSpyTowerDTO::atk() const {
  return atk_;
}
inline void ReportSpyTowerDTO::set_atk(::google::protobuf::int32 value) {
  set_has_atk();
  atk_ = value;
}

// required int32 currentNum = 3;
inline bool ReportSpyTowerDTO::has_currentnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReportSpyTowerDTO::set_has_currentnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReportSpyTowerDTO::clear_has_currentnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReportSpyTowerDTO::clear_currentnum() {
  currentnum_ = 0;
  clear_has_currentnum();
}
inline ::google::protobuf::int32 ReportSpyTowerDTO::currentnum() const {
  return currentnum_;
}
inline void ReportSpyTowerDTO::set_currentnum(::google::protobuf::int32 value) {
  set_has_currentnum();
  currentnum_ = value;
}

// required int32 capacity = 4;
inline bool ReportSpyTowerDTO::has_capacity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReportSpyTowerDTO::set_has_capacity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReportSpyTowerDTO::clear_has_capacity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReportSpyTowerDTO::clear_capacity() {
  capacity_ = 0;
  clear_has_capacity();
}
inline ::google::protobuf::int32 ReportSpyTowerDTO::capacity() const {
  return capacity_;
}
inline void ReportSpyTowerDTO::set_capacity(::google::protobuf::int32 value) {
  set_has_capacity();
  capacity_ = value;
}

// -------------------------------------------------------------------

// ReportSpyCityDTO

// optional int32 protectedPercentage = 1;
inline bool ReportSpyCityDTO::has_protectedpercentage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportSpyCityDTO::set_has_protectedpercentage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportSpyCityDTO::clear_has_protectedpercentage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportSpyCityDTO::clear_protectedpercentage() {
  protectedpercentage_ = 0;
  clear_has_protectedpercentage();
}
inline ::google::protobuf::int32 ReportSpyCityDTO::protectedpercentage() const {
  return protectedpercentage_;
}
inline void ReportSpyCityDTO::set_protectedpercentage(::google::protobuf::int32 value) {
  set_has_protectedpercentage();
  protectedpercentage_ = value;
}

// repeated .slg.protocol.ReportSpyResourceDTO resources = 2;
inline int ReportSpyCityDTO::resources_size() const {
  return resources_.size();
}
inline void ReportSpyCityDTO::clear_resources() {
  resources_.Clear();
}
inline const ::slg::protocol::ReportSpyResourceDTO& ReportSpyCityDTO::resources(int index) const {
  return resources_.Get(index);
}
inline ::slg::protocol::ReportSpyResourceDTO* ReportSpyCityDTO::mutable_resources(int index) {
  return resources_.Mutable(index);
}
inline ::slg::protocol::ReportSpyResourceDTO* ReportSpyCityDTO::add_resources() {
  return resources_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportSpyResourceDTO >&
ReportSpyCityDTO::resources() const {
  return resources_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportSpyResourceDTO >*
ReportSpyCityDTO::mutable_resources() {
  return &resources_;
}

// optional .slg.protocol.ReportSpyWallDTO wall = 3;
inline bool ReportSpyCityDTO::has_wall() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReportSpyCityDTO::set_has_wall() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReportSpyCityDTO::clear_has_wall() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReportSpyCityDTO::clear_wall() {
  if (wall_ != NULL) wall_->::slg::protocol::ReportSpyWallDTO::Clear();
  clear_has_wall();
}
inline const ::slg::protocol::ReportSpyWallDTO& ReportSpyCityDTO::wall() const {
  return wall_ != NULL ? *wall_ : *default_instance_->wall_;
}
inline ::slg::protocol::ReportSpyWallDTO* ReportSpyCityDTO::mutable_wall() {
  set_has_wall();
  if (wall_ == NULL) wall_ = new ::slg::protocol::ReportSpyWallDTO;
  return wall_;
}
inline ::slg::protocol::ReportSpyWallDTO* ReportSpyCityDTO::release_wall() {
  clear_has_wall();
  ::slg::protocol::ReportSpyWallDTO* temp = wall_;
  wall_ = NULL;
  return temp;
}
inline void ReportSpyCityDTO::set_allocated_wall(::slg::protocol::ReportSpyWallDTO* wall) {
  delete wall_;
  wall_ = wall;
  if (wall) {
    set_has_wall();
  } else {
    clear_has_wall();
  }
}

// optional int32 totalArmyCount = 4;
inline bool ReportSpyCityDTO::has_totalarmycount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReportSpyCityDTO::set_has_totalarmycount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReportSpyCityDTO::clear_has_totalarmycount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReportSpyCityDTO::clear_totalarmycount() {
  totalarmycount_ = 0;
  clear_has_totalarmycount();
}
inline ::google::protobuf::int32 ReportSpyCityDTO::totalarmycount() const {
  return totalarmycount_;
}
inline void ReportSpyCityDTO::set_totalarmycount(::google::protobuf::int32 value) {
  set_has_totalarmycount();
  totalarmycount_ = value;
}

// repeated .slg.protocol.ReportSpyArmyDTO armies = 6;
inline int ReportSpyCityDTO::armies_size() const {
  return armies_.size();
}
inline void ReportSpyCityDTO::clear_armies() {
  armies_.Clear();
}
inline const ::slg::protocol::ReportSpyArmyDTO& ReportSpyCityDTO::armies(int index) const {
  return armies_.Get(index);
}
inline ::slg::protocol::ReportSpyArmyDTO* ReportSpyCityDTO::mutable_armies(int index) {
  return armies_.Mutable(index);
}
inline ::slg::protocol::ReportSpyArmyDTO* ReportSpyCityDTO::add_armies() {
  return armies_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportSpyArmyDTO >&
ReportSpyCityDTO::armies() const {
  return armies_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportSpyArmyDTO >*
ReportSpyCityDTO::mutable_armies() {
  return &armies_;
}

// repeated .slg.protocol.ReportSpyTowerDTO towers = 7;
inline int ReportSpyCityDTO::towers_size() const {
  return towers_.size();
}
inline void ReportSpyCityDTO::clear_towers() {
  towers_.Clear();
}
inline const ::slg::protocol::ReportSpyTowerDTO& ReportSpyCityDTO::towers(int index) const {
  return towers_.Get(index);
}
inline ::slg::protocol::ReportSpyTowerDTO* ReportSpyCityDTO::mutable_towers(int index) {
  return towers_.Mutable(index);
}
inline ::slg::protocol::ReportSpyTowerDTO* ReportSpyCityDTO::add_towers() {
  return towers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportSpyTowerDTO >&
ReportSpyCityDTO::towers() const {
  return towers_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportSpyTowerDTO >*
ReportSpyCityDTO::mutable_towers() {
  return &towers_;
}

// repeated .slg.protocol.ReportSpyAidDTO aids = 8;
inline int ReportSpyCityDTO::aids_size() const {
  return aids_.size();
}
inline void ReportSpyCityDTO::clear_aids() {
  aids_.Clear();
}
inline const ::slg::protocol::ReportSpyAidDTO& ReportSpyCityDTO::aids(int index) const {
  return aids_.Get(index);
}
inline ::slg::protocol::ReportSpyAidDTO* ReportSpyCityDTO::mutable_aids(int index) {
  return aids_.Mutable(index);
}
inline ::slg::protocol::ReportSpyAidDTO* ReportSpyCityDTO::add_aids() {
  return aids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportSpyAidDTO >&
ReportSpyCityDTO::aids() const {
  return aids_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportSpyAidDTO >*
ReportSpyCityDTO::mutable_aids() {
  return &aids_;
}

// -------------------------------------------------------------------

// ReportSpyResourceGridProfileDTO

// required int32 type = 1;
inline bool ReportSpyResourceGridProfileDTO::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportSpyResourceGridProfileDTO::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportSpyResourceGridProfileDTO::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportSpyResourceGridProfileDTO::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ReportSpyResourceGridProfileDTO::type() const {
  return type_;
}
inline void ReportSpyResourceGridProfileDTO::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 level = 2;
inline bool ReportSpyResourceGridProfileDTO::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReportSpyResourceGridProfileDTO::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReportSpyResourceGridProfileDTO::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReportSpyResourceGridProfileDTO::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ReportSpyResourceGridProfileDTO::level() const {
  return level_;
}
inline void ReportSpyResourceGridProfileDTO::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// ReportSpyResourceGridDTO

// required .slg.protocol.ReportSpyResourceGridProfileDTO profile = 1;
inline bool ReportSpyResourceGridDTO::has_profile() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportSpyResourceGridDTO::set_has_profile() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportSpyResourceGridDTO::clear_has_profile() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportSpyResourceGridDTO::clear_profile() {
  if (profile_ != NULL) profile_->::slg::protocol::ReportSpyResourceGridProfileDTO::Clear();
  clear_has_profile();
}
inline const ::slg::protocol::ReportSpyResourceGridProfileDTO& ReportSpyResourceGridDTO::profile() const {
  return profile_ != NULL ? *profile_ : *default_instance_->profile_;
}
inline ::slg::protocol::ReportSpyResourceGridProfileDTO* ReportSpyResourceGridDTO::mutable_profile() {
  set_has_profile();
  if (profile_ == NULL) profile_ = new ::slg::protocol::ReportSpyResourceGridProfileDTO;
  return profile_;
}
inline ::slg::protocol::ReportSpyResourceGridProfileDTO* ReportSpyResourceGridDTO::release_profile() {
  clear_has_profile();
  ::slg::protocol::ReportSpyResourceGridProfileDTO* temp = profile_;
  profile_ = NULL;
  return temp;
}
inline void ReportSpyResourceGridDTO::set_allocated_profile(::slg::protocol::ReportSpyResourceGridProfileDTO* profile) {
  delete profile_;
  profile_ = profile;
  if (profile) {
    set_has_profile();
  } else {
    clear_has_profile();
  }
}

// required .slg.protocol.PositionDTO position = 2;
inline bool ReportSpyResourceGridDTO::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReportSpyResourceGridDTO::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReportSpyResourceGridDTO::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReportSpyResourceGridDTO::clear_position() {
  if (position_ != NULL) position_->::slg::protocol::PositionDTO::Clear();
  clear_has_position();
}
inline const ::slg::protocol::PositionDTO& ReportSpyResourceGridDTO::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::slg::protocol::PositionDTO* ReportSpyResourceGridDTO::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::slg::protocol::PositionDTO;
  return position_;
}
inline ::slg::protocol::PositionDTO* ReportSpyResourceGridDTO::release_position() {
  clear_has_position();
  ::slg::protocol::PositionDTO* temp = position_;
  position_ = NULL;
  return temp;
}
inline void ReportSpyResourceGridDTO::set_allocated_position(::slg::protocol::PositionDTO* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
}

// required int32 remaining = 3;
inline bool ReportSpyResourceGridDTO::has_remaining() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReportSpyResourceGridDTO::set_has_remaining() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReportSpyResourceGridDTO::clear_has_remaining() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReportSpyResourceGridDTO::clear_remaining() {
  remaining_ = 0;
  clear_has_remaining();
}
inline ::google::protobuf::int32 ReportSpyResourceGridDTO::remaining() const {
  return remaining_;
}
inline void ReportSpyResourceGridDTO::set_remaining(::google::protobuf::int32 value) {
  set_has_remaining();
  remaining_ = value;
}

// optional int32 totalArmyCount = 4;
inline bool ReportSpyResourceGridDTO::has_totalarmycount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReportSpyResourceGridDTO::set_has_totalarmycount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReportSpyResourceGridDTO::clear_has_totalarmycount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReportSpyResourceGridDTO::clear_totalarmycount() {
  totalarmycount_ = 0;
  clear_has_totalarmycount();
}
inline ::google::protobuf::int32 ReportSpyResourceGridDTO::totalarmycount() const {
  return totalarmycount_;
}
inline void ReportSpyResourceGridDTO::set_totalarmycount(::google::protobuf::int32 value) {
  set_has_totalarmycount();
  totalarmycount_ = value;
}

// repeated .slg.protocol.ReportSpyArmyDTO armies = 5;
inline int ReportSpyResourceGridDTO::armies_size() const {
  return armies_.size();
}
inline void ReportSpyResourceGridDTO::clear_armies() {
  armies_.Clear();
}
inline const ::slg::protocol::ReportSpyArmyDTO& ReportSpyResourceGridDTO::armies(int index) const {
  return armies_.Get(index);
}
inline ::slg::protocol::ReportSpyArmyDTO* ReportSpyResourceGridDTO::mutable_armies(int index) {
  return armies_.Mutable(index);
}
inline ::slg::protocol::ReportSpyArmyDTO* ReportSpyResourceGridDTO::add_armies() {
  return armies_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportSpyArmyDTO >&
ReportSpyResourceGridDTO::armies() const {
  return armies_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportSpyArmyDTO >*
ReportSpyResourceGridDTO::mutable_armies() {
  return &armies_;
}

// -------------------------------------------------------------------

// ReportSpyDTO

// required int64 reportId = 1;
inline bool ReportSpyDTO::has_reportid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportSpyDTO::set_has_reportid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportSpyDTO::clear_has_reportid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportSpyDTO::clear_reportid() {
  reportid_ = GOOGLE_LONGLONG(0);
  clear_has_reportid();
}
inline ::google::protobuf::int64 ReportSpyDTO::reportid() const {
  return reportid_;
}
inline void ReportSpyDTO::set_reportid(::google::protobuf::int64 value) {
  set_has_reportid();
  reportid_ = value;
}

// required .slg.protocol.ReportSpyType type = 2;
inline bool ReportSpyDTO::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReportSpyDTO::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReportSpyDTO::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReportSpyDTO::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::slg::protocol::ReportSpyType ReportSpyDTO::type() const {
  return static_cast< ::slg::protocol::ReportSpyType >(type_);
}
inline void ReportSpyDTO::set_type(::slg::protocol::ReportSpyType value) {
  assert(::slg::protocol::ReportSpyType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 time = 3;
inline bool ReportSpyDTO::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReportSpyDTO::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReportSpyDTO::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReportSpyDTO::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 ReportSpyDTO::time() const {
  return time_;
}
inline void ReportSpyDTO::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// optional .slg.protocol.ReportSpyCityDTO city = 4;
inline bool ReportSpyDTO::has_city() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReportSpyDTO::set_has_city() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReportSpyDTO::clear_has_city() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReportSpyDTO::clear_city() {
  if (city_ != NULL) city_->::slg::protocol::ReportSpyCityDTO::Clear();
  clear_has_city();
}
inline const ::slg::protocol::ReportSpyCityDTO& ReportSpyDTO::city() const {
  return city_ != NULL ? *city_ : *default_instance_->city_;
}
inline ::slg::protocol::ReportSpyCityDTO* ReportSpyDTO::mutable_city() {
  set_has_city();
  if (city_ == NULL) city_ = new ::slg::protocol::ReportSpyCityDTO;
  return city_;
}
inline ::slg::protocol::ReportSpyCityDTO* ReportSpyDTO::release_city() {
  clear_has_city();
  ::slg::protocol::ReportSpyCityDTO* temp = city_;
  city_ = NULL;
  return temp;
}
inline void ReportSpyDTO::set_allocated_city(::slg::protocol::ReportSpyCityDTO* city) {
  delete city_;
  city_ = city;
  if (city) {
    set_has_city();
  } else {
    clear_has_city();
  }
}

// optional .slg.protocol.ReportSpyResourceGridDTO resource = 5;
inline bool ReportSpyDTO::has_resource() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReportSpyDTO::set_has_resource() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReportSpyDTO::clear_has_resource() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReportSpyDTO::clear_resource() {
  if (resource_ != NULL) resource_->::slg::protocol::ReportSpyResourceGridDTO::Clear();
  clear_has_resource();
}
inline const ::slg::protocol::ReportSpyResourceGridDTO& ReportSpyDTO::resource() const {
  return resource_ != NULL ? *resource_ : *default_instance_->resource_;
}
inline ::slg::protocol::ReportSpyResourceGridDTO* ReportSpyDTO::mutable_resource() {
  set_has_resource();
  if (resource_ == NULL) resource_ = new ::slg::protocol::ReportSpyResourceGridDTO;
  return resource_;
}
inline ::slg::protocol::ReportSpyResourceGridDTO* ReportSpyDTO::release_resource() {
  clear_has_resource();
  ::slg::protocol::ReportSpyResourceGridDTO* temp = resource_;
  resource_ = NULL;
  return temp;
}
inline void ReportSpyDTO::set_allocated_resource(::slg::protocol::ReportSpyResourceGridDTO* resource) {
  delete resource_;
  resource_ = resource;
  if (resource) {
    set_has_resource();
  } else {
    clear_has_resource();
  }
}

// -------------------------------------------------------------------

// ReportSpyProfileDTO

// required int64 reportId = 1;
inline bool ReportSpyProfileDTO::has_reportid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportSpyProfileDTO::set_has_reportid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportSpyProfileDTO::clear_has_reportid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportSpyProfileDTO::clear_reportid() {
  reportid_ = GOOGLE_LONGLONG(0);
  clear_has_reportid();
}
inline ::google::protobuf::int64 ReportSpyProfileDTO::reportid() const {
  return reportid_;
}
inline void ReportSpyProfileDTO::set_reportid(::google::protobuf::int64 value) {
  set_has_reportid();
  reportid_ = value;
}

// required .slg.protocol.ReportSpyType type = 2;
inline bool ReportSpyProfileDTO::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReportSpyProfileDTO::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReportSpyProfileDTO::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReportSpyProfileDTO::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::slg::protocol::ReportSpyType ReportSpyProfileDTO::type() const {
  return static_cast< ::slg::protocol::ReportSpyType >(type_);
}
inline void ReportSpyProfileDTO::set_type(::slg::protocol::ReportSpyType value) {
  assert(::slg::protocol::ReportSpyType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .slg.protocol.ReportSpyPlayerDTO target = 3;
inline bool ReportSpyProfileDTO::has_target() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReportSpyProfileDTO::set_has_target() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReportSpyProfileDTO::clear_has_target() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReportSpyProfileDTO::clear_target() {
  if (target_ != NULL) target_->::slg::protocol::ReportSpyPlayerDTO::Clear();
  clear_has_target();
}
inline const ::slg::protocol::ReportSpyPlayerDTO& ReportSpyProfileDTO::target() const {
  return target_ != NULL ? *target_ : *default_instance_->target_;
}
inline ::slg::protocol::ReportSpyPlayerDTO* ReportSpyProfileDTO::mutable_target() {
  set_has_target();
  if (target_ == NULL) target_ = new ::slg::protocol::ReportSpyPlayerDTO;
  return target_;
}
inline ::slg::protocol::ReportSpyPlayerDTO* ReportSpyProfileDTO::release_target() {
  clear_has_target();
  ::slg::protocol::ReportSpyPlayerDTO* temp = target_;
  target_ = NULL;
  return temp;
}
inline void ReportSpyProfileDTO::set_allocated_target(::slg::protocol::ReportSpyPlayerDTO* target) {
  delete target_;
  target_ = target;
  if (target) {
    set_has_target();
  } else {
    clear_has_target();
  }
}

// required .slg.protocol.ReportSpyResult result = 4;
inline bool ReportSpyProfileDTO::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReportSpyProfileDTO::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReportSpyProfileDTO::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReportSpyProfileDTO::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::slg::protocol::ReportSpyResult ReportSpyProfileDTO::result() const {
  return static_cast< ::slg::protocol::ReportSpyResult >(result_);
}
inline void ReportSpyProfileDTO::set_result(::slg::protocol::ReportSpyResult value) {
  assert(::slg::protocol::ReportSpyResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// required int32 time = 5;
inline bool ReportSpyProfileDTO::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReportSpyProfileDTO::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReportSpyProfileDTO::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReportSpyProfileDTO::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 ReportSpyProfileDTO::time() const {
  return time_;
}
inline void ReportSpyProfileDTO::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// required bool read = 6;
inline bool ReportSpyProfileDTO::has_read() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReportSpyProfileDTO::set_has_read() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReportSpyProfileDTO::clear_has_read() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReportSpyProfileDTO::clear_read() {
  read_ = false;
  clear_has_read();
}
inline bool ReportSpyProfileDTO::read() const {
  return read_;
}
inline void ReportSpyProfileDTO::set_read(bool value) {
  set_has_read();
  read_ = value;
}

// required bool beSpied = 7;
inline bool ReportSpyProfileDTO::has_bespied() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReportSpyProfileDTO::set_has_bespied() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReportSpyProfileDTO::clear_has_bespied() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReportSpyProfileDTO::clear_bespied() {
  bespied_ = false;
  clear_has_bespied();
}
inline bool ReportSpyProfileDTO::bespied() const {
  return bespied_;
}
inline void ReportSpyProfileDTO::set_bespied(bool value) {
  set_has_bespied();
  bespied_ = value;
}

// optional .slg.protocol.ReportSpyResourceGridProfileDTO resourceProfile = 10;
inline bool ReportSpyProfileDTO::has_resourceprofile() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ReportSpyProfileDTO::set_has_resourceprofile() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ReportSpyProfileDTO::clear_has_resourceprofile() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ReportSpyProfileDTO::clear_resourceprofile() {
  if (resourceprofile_ != NULL) resourceprofile_->::slg::protocol::ReportSpyResourceGridProfileDTO::Clear();
  clear_has_resourceprofile();
}
inline const ::slg::protocol::ReportSpyResourceGridProfileDTO& ReportSpyProfileDTO::resourceprofile() const {
  return resourceprofile_ != NULL ? *resourceprofile_ : *default_instance_->resourceprofile_;
}
inline ::slg::protocol::ReportSpyResourceGridProfileDTO* ReportSpyProfileDTO::mutable_resourceprofile() {
  set_has_resourceprofile();
  if (resourceprofile_ == NULL) resourceprofile_ = new ::slg::protocol::ReportSpyResourceGridProfileDTO;
  return resourceprofile_;
}
inline ::slg::protocol::ReportSpyResourceGridProfileDTO* ReportSpyProfileDTO::release_resourceprofile() {
  clear_has_resourceprofile();
  ::slg::protocol::ReportSpyResourceGridProfileDTO* temp = resourceprofile_;
  resourceprofile_ = NULL;
  return temp;
}
inline void ReportSpyProfileDTO::set_allocated_resourceprofile(::slg::protocol::ReportSpyResourceGridProfileDTO* resourceprofile) {
  delete resourceprofile_;
  resourceprofile_ = resourceprofile;
  if (resourceprofile) {
    set_has_resourceprofile();
  } else {
    clear_has_resourceprofile();
  }
}

// -------------------------------------------------------------------

// ReportSpyProfileListPush

// repeated .slg.protocol.ReportSpyProfileDTO profiles = 1;
inline int ReportSpyProfileListPush::profiles_size() const {
  return profiles_.size();
}
inline void ReportSpyProfileListPush::clear_profiles() {
  profiles_.Clear();
}
inline const ::slg::protocol::ReportSpyProfileDTO& ReportSpyProfileListPush::profiles(int index) const {
  return profiles_.Get(index);
}
inline ::slg::protocol::ReportSpyProfileDTO* ReportSpyProfileListPush::mutable_profiles(int index) {
  return profiles_.Mutable(index);
}
inline ::slg::protocol::ReportSpyProfileDTO* ReportSpyProfileListPush::add_profiles() {
  return profiles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportSpyProfileDTO >&
ReportSpyProfileListPush::profiles() const {
  return profiles_;
}
inline ::google::protobuf::RepeatedPtrField< ::slg::protocol::ReportSpyProfileDTO >*
ReportSpyProfileListPush::mutable_profiles() {
  return &profiles_;
}

// -------------------------------------------------------------------

// ReportSpyDetailRequest

// required int64 reportId = 1;
inline bool ReportSpyDetailRequest::has_reportid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportSpyDetailRequest::set_has_reportid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportSpyDetailRequest::clear_has_reportid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportSpyDetailRequest::clear_reportid() {
  reportid_ = GOOGLE_LONGLONG(0);
  clear_has_reportid();
}
inline ::google::protobuf::int64 ReportSpyDetailRequest::reportid() const {
  return reportid_;
}
inline void ReportSpyDetailRequest::set_reportid(::google::protobuf::int64 value) {
  set_has_reportid();
  reportid_ = value;
}

// -------------------------------------------------------------------

// ReportSpyDetailResponse

// required .slg.protocol.ReportSpyDTO report = 1;
inline bool ReportSpyDetailResponse::has_report() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportSpyDetailResponse::set_has_report() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportSpyDetailResponse::clear_has_report() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportSpyDetailResponse::clear_report() {
  if (report_ != NULL) report_->::slg::protocol::ReportSpyDTO::Clear();
  clear_has_report();
}
inline const ::slg::protocol::ReportSpyDTO& ReportSpyDetailResponse::report() const {
  return report_ != NULL ? *report_ : *default_instance_->report_;
}
inline ::slg::protocol::ReportSpyDTO* ReportSpyDetailResponse::mutable_report() {
  set_has_report();
  if (report_ == NULL) report_ = new ::slg::protocol::ReportSpyDTO;
  return report_;
}
inline ::slg::protocol::ReportSpyDTO* ReportSpyDetailResponse::release_report() {
  clear_has_report();
  ::slg::protocol::ReportSpyDTO* temp = report_;
  report_ = NULL;
  return temp;
}
inline void ReportSpyDetailResponse::set_allocated_report(::slg::protocol::ReportSpyDTO* report) {
  delete report_;
  report_ = report;
  if (report) {
    set_has_report();
  } else {
    clear_has_report();
  }
}

// -------------------------------------------------------------------

// ReportSpyReadRequest

// required int64 reportId = 1;
inline bool ReportSpyReadRequest::has_reportid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportSpyReadRequest::set_has_reportid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportSpyReadRequest::clear_has_reportid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportSpyReadRequest::clear_reportid() {
  reportid_ = GOOGLE_LONGLONG(0);
  clear_has_reportid();
}
inline ::google::protobuf::int64 ReportSpyReadRequest::reportid() const {
  return reportid_;
}
inline void ReportSpyReadRequest::set_reportid(::google::protobuf::int64 value) {
  set_has_reportid();
  reportid_ = value;
}

// -------------------------------------------------------------------

// ReportSpyDeleteRequest

// required int64 reportId = 1;
inline bool ReportSpyDeleteRequest::has_reportid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportSpyDeleteRequest::set_has_reportid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportSpyDeleteRequest::clear_has_reportid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportSpyDeleteRequest::clear_reportid() {
  reportid_ = GOOGLE_LONGLONG(0);
  clear_has_reportid();
}
inline ::google::protobuf::int64 ReportSpyDeleteRequest::reportid() const {
  return reportid_;
}
inline void ReportSpyDeleteRequest::set_reportid(::google::protobuf::int64 value) {
  set_has_reportid();
  reportid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace slg

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::slg::protocol::ReportType>() {
  return ::slg::protocol::ReportType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::slg::protocol::ReportCommandId>() {
  return ::slg::protocol::ReportCommandId_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::slg::protocol::ReportPushId>() {
  return ::slg::protocol::ReportPushId_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::slg::protocol::ReportSpyType>() {
  return ::slg::protocol::ReportSpyType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::slg::protocol::ReportSpyResult>() {
  return ::slg::protocol::ReportSpyResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::slg::protocol::ReportSpyPushId>() {
  return ::slg::protocol::ReportSpyPushId_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::slg::protocol::ReportSpyCommandId>() {
  return ::slg::protocol::ReportSpyCommandId_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_report_2eproto__INCLUDED
