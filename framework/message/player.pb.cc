// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "player.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace slg {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* PlayerDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuideDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuideDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserAccountLoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserAccountLoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserAccountLoginResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserAccountLoginResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerLoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerLoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerLoginResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerLoginResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerReconnectRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerReconnectRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerReconnectResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerReconnectResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerReloadRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerReloadRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerReloadResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerReloadResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerHeartBeatRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerHeartBeatRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerHeartBeatResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerHeartBeatResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetTalentRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetTalentRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetTalentResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetTalentResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetImageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetImageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetImageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetImageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryLordInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryLordInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryLordInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryLordInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetIconRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetIconRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetIconResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetIconResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeNameRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeNameRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeNameResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeNameResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetGuideRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetGuideRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerDataPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerDataPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerPropertyChangePush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerPropertyChangePush_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerLevelUpPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerLevelUpPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerProtectPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerProtectPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerCountPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerCountPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayeBattlePush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayeBattlePush_reflection_ = NULL;
const ::google::protobuf::Descriptor* TalentPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TalentPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* VipInfoPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VipInfoPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* VipActiveInfoPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VipActiveInfoPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* SysTimePush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SysTimePush_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuidePush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuidePush_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PlayerCommandId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ReconnectState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PlayerPushId_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_player_2eproto() {
  protobuf_AddDesc_player_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "player.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerDTO_descriptor_ = file->message_type(0);
  static const int PlayerDTO_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDTO, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDTO, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDTO, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDTO, properties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDTO, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDTO, mapgridposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDTO, haschangedname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDTO, icon_),
  };
  PlayerDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerDTO_descriptor_,
      PlayerDTO::default_instance_,
      PlayerDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerDTO));
  GuideDTO_descriptor_ = file->message_type(1);
  static const int GuideDTO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideDTO, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideDTO, jump_),
  };
  GuideDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuideDTO_descriptor_,
      GuideDTO::default_instance_,
      GuideDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuideDTO));
  UserAccountLoginRequest_descriptor_ = file->message_type(2);
  static const int UserAccountLoginRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAccountLoginRequest, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAccountLoginRequest, puid_),
  };
  UserAccountLoginRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserAccountLoginRequest_descriptor_,
      UserAccountLoginRequest::default_instance_,
      UserAccountLoginRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAccountLoginRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAccountLoginRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserAccountLoginRequest));
  UserAccountLoginResponse_descriptor_ = file->message_type(3);
  static const int UserAccountLoginResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAccountLoginResponse, playerid_),
  };
  UserAccountLoginResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserAccountLoginResponse_descriptor_,
      UserAccountLoginResponse::default_instance_,
      UserAccountLoginResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAccountLoginResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAccountLoginResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserAccountLoginResponse));
  PlayerLoginRequest_descriptor_ = file->message_type(4);
  static const int PlayerLoginRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginRequest, playerid_),
  };
  PlayerLoginRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerLoginRequest_descriptor_,
      PlayerLoginRequest::default_instance_,
      PlayerLoginRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerLoginRequest));
  PlayerLoginResponse_descriptor_ = file->message_type(5);
  static const int PlayerLoginResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginResponse, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginResponse, systime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginResponse, timezoneoffset_),
  };
  PlayerLoginResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerLoginResponse_descriptor_,
      PlayerLoginResponse::default_instance_,
      PlayerLoginResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerLoginResponse));
  PlayerReconnectRequest_descriptor_ = file->message_type(6);
  static const int PlayerReconnectRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReconnectRequest, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReconnectRequest, lastpushid_),
  };
  PlayerReconnectRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerReconnectRequest_descriptor_,
      PlayerReconnectRequest::default_instance_,
      PlayerReconnectRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReconnectRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReconnectRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerReconnectRequest));
  PlayerReconnectResponse_descriptor_ = file->message_type(7);
  static const int PlayerReconnectResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReconnectResponse, state_),
  };
  PlayerReconnectResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerReconnectResponse_descriptor_,
      PlayerReconnectResponse::default_instance_,
      PlayerReconnectResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReconnectResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReconnectResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerReconnectResponse));
  PlayerReloadRequest_descriptor_ = file->message_type(8);
  static const int PlayerReloadRequest_offsets_[1] = {
  };
  PlayerReloadRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerReloadRequest_descriptor_,
      PlayerReloadRequest::default_instance_,
      PlayerReloadRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReloadRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReloadRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerReloadRequest));
  PlayerReloadResponse_descriptor_ = file->message_type(9);
  static const int PlayerReloadResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReloadResponse, systime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReloadResponse, timezoneoffset_),
  };
  PlayerReloadResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerReloadResponse_descriptor_,
      PlayerReloadResponse::default_instance_,
      PlayerReloadResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReloadResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReloadResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerReloadResponse));
  PlayerHeartBeatRequest_descriptor_ = file->message_type(10);
  static const int PlayerHeartBeatRequest_offsets_[1] = {
  };
  PlayerHeartBeatRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerHeartBeatRequest_descriptor_,
      PlayerHeartBeatRequest::default_instance_,
      PlayerHeartBeatRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHeartBeatRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHeartBeatRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerHeartBeatRequest));
  PlayerHeartBeatResponse_descriptor_ = file->message_type(11);
  static const int PlayerHeartBeatResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHeartBeatResponse, systime_),
  };
  PlayerHeartBeatResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerHeartBeatResponse_descriptor_,
      PlayerHeartBeatResponse::default_instance_,
      PlayerHeartBeatResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHeartBeatResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHeartBeatResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerHeartBeatResponse));
  SetTalentRequest_descriptor_ = file->message_type(12);
  static const int SetTalentRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTalentRequest, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTalentRequest, talentid_),
  };
  SetTalentRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetTalentRequest_descriptor_,
      SetTalentRequest::default_instance_,
      SetTalentRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTalentRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTalentRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetTalentRequest));
  SetTalentResponse_descriptor_ = file->message_type(13);
  static const int SetTalentResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTalentResponse, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTalentResponse, talentid_),
  };
  SetTalentResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetTalentResponse_descriptor_,
      SetTalentResponse::default_instance_,
      SetTalentResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTalentResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTalentResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetTalentResponse));
  SetImageRequest_descriptor_ = file->message_type(14);
  static const int SetImageRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetImageRequest, image_),
  };
  SetImageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetImageRequest_descriptor_,
      SetImageRequest::default_instance_,
      SetImageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetImageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetImageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetImageRequest));
  SetImageResponse_descriptor_ = file->message_type(15);
  static const int SetImageResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetImageResponse, image_),
  };
  SetImageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetImageResponse_descriptor_,
      SetImageResponse::default_instance_,
      SetImageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetImageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetImageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetImageResponse));
  QueryLordInfoRequest_descriptor_ = file->message_type(16);
  static const int QueryLordInfoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLordInfoRequest, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLordInfoRequest, name_),
  };
  QueryLordInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryLordInfoRequest_descriptor_,
      QueryLordInfoRequest::default_instance_,
      QueryLordInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLordInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLordInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryLordInfoRequest));
  QueryLordInfoResponse_descriptor_ = file->message_type(17);
  static const int QueryLordInfoResponse_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLordInfoResponse, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLordInfoResponse, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLordInfoResponse, allianceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLordInfoResponse, alliancename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLordInfoResponse, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLordInfoResponse, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLordInfoResponse, isfriend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLordInfoResponse, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLordInfoResponse, equipmentlist_),
  };
  QueryLordInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryLordInfoResponse_descriptor_,
      QueryLordInfoResponse::default_instance_,
      QueryLordInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLordInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLordInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryLordInfoResponse));
  SetIconRequest_descriptor_ = file->message_type(18);
  static const int SetIconRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetIconRequest, iconid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetIconRequest, oper_),
  };
  SetIconRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetIconRequest_descriptor_,
      SetIconRequest::default_instance_,
      SetIconRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetIconRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetIconRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetIconRequest));
  SetIconResponse_descriptor_ = file->message_type(19);
  static const int SetIconResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetIconResponse, iconid_),
  };
  SetIconResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetIconResponse_descriptor_,
      SetIconResponse::default_instance_,
      SetIconResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetIconResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetIconResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetIconResponse));
  ChangeNameRequest_descriptor_ = file->message_type(20);
  static const int ChangeNameRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNameRequest, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNameRequest, useitem_),
  };
  ChangeNameRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeNameRequest_descriptor_,
      ChangeNameRequest::default_instance_,
      ChangeNameRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNameRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNameRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeNameRequest));
  ChangeNameResponse_descriptor_ = file->message_type(21);
  static const int ChangeNameResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNameResponse, isavailable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNameResponse, reward_),
  };
  ChangeNameResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeNameResponse_descriptor_,
      ChangeNameResponse::default_instance_,
      ChangeNameResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNameResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNameResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeNameResponse));
  SetGuideRequest_descriptor_ = file->message_type(22);
  static const int SetGuideRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuideRequest, id_),
  };
  SetGuideRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetGuideRequest_descriptor_,
      SetGuideRequest::default_instance_,
      SetGuideRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuideRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuideRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetGuideRequest));
  PlayerDataPush_descriptor_ = file->message_type(23);
  static const int PlayerDataPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDataPush, player_),
  };
  PlayerDataPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerDataPush_descriptor_,
      PlayerDataPush::default_instance_,
      PlayerDataPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDataPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDataPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerDataPush));
  PlayerPropertyChangePush_descriptor_ = file->message_type(24);
  static const int PlayerPropertyChangePush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPropertyChangePush, properties_),
  };
  PlayerPropertyChangePush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerPropertyChangePush_descriptor_,
      PlayerPropertyChangePush::default_instance_,
      PlayerPropertyChangePush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPropertyChangePush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPropertyChangePush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerPropertyChangePush));
  PlayerLevelUpPush_descriptor_ = file->message_type(25);
  static const int PlayerLevelUpPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLevelUpPush, level_),
  };
  PlayerLevelUpPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerLevelUpPush_descriptor_,
      PlayerLevelUpPush::default_instance_,
      PlayerLevelUpPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLevelUpPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLevelUpPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerLevelUpPush));
  PlayerProtectPush_descriptor_ = file->message_type(26);
  static const int PlayerProtectPush_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerProtectPush, bornprotectendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerProtectPush, atkprotectendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerProtectPush, spyprotectendtime_),
  };
  PlayerProtectPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerProtectPush_descriptor_,
      PlayerProtectPush::default_instance_,
      PlayerProtectPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerProtectPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerProtectPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerProtectPush));
  PlayerCount_descriptor_ = file->message_type(27);
  static const int PlayerCount_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCount, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCount, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCount, defcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCount, addcount_),
  };
  PlayerCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerCount_descriptor_,
      PlayerCount::default_instance_,
      PlayerCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerCount));
  PlayerCountPush_descriptor_ = file->message_type(28);
  static const int PlayerCountPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCountPush, counts_),
  };
  PlayerCountPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerCountPush_descriptor_,
      PlayerCountPush::default_instance_,
      PlayerCountPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCountPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCountPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerCountPush));
  PlayeBattlePush_descriptor_ = file->message_type(29);
  static const int PlayeBattlePush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayeBattlePush, battlevalue_),
  };
  PlayeBattlePush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayeBattlePush_descriptor_,
      PlayeBattlePush::default_instance_,
      PlayeBattlePush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayeBattlePush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayeBattlePush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayeBattlePush));
  TalentPush_descriptor_ = file->message_type(30);
  static const int TalentPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalentPush, talentids_),
  };
  TalentPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TalentPush_descriptor_,
      TalentPush::default_instance_,
      TalentPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalentPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalentPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TalentPush));
  VipInfoPush_descriptor_ = file->message_type(31);
  static const int VipInfoPush_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInfoPush, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInfoPush, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInfoPush, sign_),
  };
  VipInfoPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VipInfoPush_descriptor_,
      VipInfoPush::default_instance_,
      VipInfoPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInfoPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInfoPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VipInfoPush));
  VipActiveInfoPush_descriptor_ = file->message_type(32);
  static const int VipActiveInfoPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipActiveInfoPush, activeend_),
  };
  VipActiveInfoPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VipActiveInfoPush_descriptor_,
      VipActiveInfoPush::default_instance_,
      VipActiveInfoPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipActiveInfoPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipActiveInfoPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VipActiveInfoPush));
  SysTimePush_descriptor_ = file->message_type(33);
  static const int SysTimePush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysTimePush, currtime_),
  };
  SysTimePush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SysTimePush_descriptor_,
      SysTimePush::default_instance_,
      SysTimePush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysTimePush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysTimePush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SysTimePush));
  GuidePush_descriptor_ = file->message_type(34);
  static const int GuidePush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuidePush, guide_),
  };
  GuidePush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuidePush_descriptor_,
      GuidePush::default_instance_,
      GuidePush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuidePush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuidePush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuidePush));
  PlayerCommandId_descriptor_ = file->enum_type(0);
  ReconnectState_descriptor_ = file->enum_type(1);
  PlayerPushId_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_player_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerDTO_descriptor_, &PlayerDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuideDTO_descriptor_, &GuideDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserAccountLoginRequest_descriptor_, &UserAccountLoginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserAccountLoginResponse_descriptor_, &UserAccountLoginResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerLoginRequest_descriptor_, &PlayerLoginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerLoginResponse_descriptor_, &PlayerLoginResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerReconnectRequest_descriptor_, &PlayerReconnectRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerReconnectResponse_descriptor_, &PlayerReconnectResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerReloadRequest_descriptor_, &PlayerReloadRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerReloadResponse_descriptor_, &PlayerReloadResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerHeartBeatRequest_descriptor_, &PlayerHeartBeatRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerHeartBeatResponse_descriptor_, &PlayerHeartBeatResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetTalentRequest_descriptor_, &SetTalentRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetTalentResponse_descriptor_, &SetTalentResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetImageRequest_descriptor_, &SetImageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetImageResponse_descriptor_, &SetImageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryLordInfoRequest_descriptor_, &QueryLordInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryLordInfoResponse_descriptor_, &QueryLordInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetIconRequest_descriptor_, &SetIconRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetIconResponse_descriptor_, &SetIconResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeNameRequest_descriptor_, &ChangeNameRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeNameResponse_descriptor_, &ChangeNameResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetGuideRequest_descriptor_, &SetGuideRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerDataPush_descriptor_, &PlayerDataPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerPropertyChangePush_descriptor_, &PlayerPropertyChangePush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerLevelUpPush_descriptor_, &PlayerLevelUpPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerProtectPush_descriptor_, &PlayerProtectPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerCount_descriptor_, &PlayerCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerCountPush_descriptor_, &PlayerCountPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayeBattlePush_descriptor_, &PlayeBattlePush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TalentPush_descriptor_, &TalentPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VipInfoPush_descriptor_, &VipInfoPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VipActiveInfoPush_descriptor_, &VipActiveInfoPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SysTimePush_descriptor_, &SysTimePush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuidePush_descriptor_, &GuidePush::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_player_2eproto() {
  delete PlayerDTO::default_instance_;
  delete PlayerDTO_reflection_;
  delete GuideDTO::default_instance_;
  delete GuideDTO_reflection_;
  delete UserAccountLoginRequest::default_instance_;
  delete UserAccountLoginRequest_reflection_;
  delete UserAccountLoginResponse::default_instance_;
  delete UserAccountLoginResponse_reflection_;
  delete PlayerLoginRequest::default_instance_;
  delete PlayerLoginRequest_reflection_;
  delete PlayerLoginResponse::default_instance_;
  delete PlayerLoginResponse_reflection_;
  delete PlayerReconnectRequest::default_instance_;
  delete PlayerReconnectRequest_reflection_;
  delete PlayerReconnectResponse::default_instance_;
  delete PlayerReconnectResponse_reflection_;
  delete PlayerReloadRequest::default_instance_;
  delete PlayerReloadRequest_reflection_;
  delete PlayerReloadResponse::default_instance_;
  delete PlayerReloadResponse_reflection_;
  delete PlayerHeartBeatRequest::default_instance_;
  delete PlayerHeartBeatRequest_reflection_;
  delete PlayerHeartBeatResponse::default_instance_;
  delete PlayerHeartBeatResponse_reflection_;
  delete SetTalentRequest::default_instance_;
  delete SetTalentRequest_reflection_;
  delete SetTalentResponse::default_instance_;
  delete SetTalentResponse_reflection_;
  delete SetImageRequest::default_instance_;
  delete SetImageRequest_reflection_;
  delete SetImageResponse::default_instance_;
  delete SetImageResponse_reflection_;
  delete QueryLordInfoRequest::default_instance_;
  delete QueryLordInfoRequest_reflection_;
  delete QueryLordInfoResponse::default_instance_;
  delete QueryLordInfoResponse_reflection_;
  delete SetIconRequest::default_instance_;
  delete SetIconRequest_reflection_;
  delete SetIconResponse::default_instance_;
  delete SetIconResponse_reflection_;
  delete ChangeNameRequest::default_instance_;
  delete ChangeNameRequest_reflection_;
  delete ChangeNameResponse::default_instance_;
  delete ChangeNameResponse_reflection_;
  delete SetGuideRequest::default_instance_;
  delete SetGuideRequest_reflection_;
  delete PlayerDataPush::default_instance_;
  delete PlayerDataPush_reflection_;
  delete PlayerPropertyChangePush::default_instance_;
  delete PlayerPropertyChangePush_reflection_;
  delete PlayerLevelUpPush::default_instance_;
  delete PlayerLevelUpPush_reflection_;
  delete PlayerProtectPush::default_instance_;
  delete PlayerProtectPush_reflection_;
  delete PlayerCount::default_instance_;
  delete PlayerCount_reflection_;
  delete PlayerCountPush::default_instance_;
  delete PlayerCountPush_reflection_;
  delete PlayeBattlePush::default_instance_;
  delete PlayeBattlePush_reflection_;
  delete TalentPush::default_instance_;
  delete TalentPush_reflection_;
  delete VipInfoPush::default_instance_;
  delete VipInfoPush_reflection_;
  delete VipActiveInfoPush::default_instance_;
  delete VipActiveInfoPush_reflection_;
  delete SysTimePush::default_instance_;
  delete SysTimePush_reflection_;
  delete GuidePush::default_instance_;
  delete GuidePush_reflection_;
}

void protobuf_AddDesc_player_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::slg::protocol::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014player.proto\022\014slg.protocol\032\014common.pro"
    "to\"\325\001\n\tPlayerDTO\022\020\n\010playerId\030\001 \002(\004\022\014\n\004na"
    "me\030\002 \001(\t\022\r\n\005level\030\003 \002(\005\022-\n\nproperties\030\004 "
    "\003(\0132\031.slg.protocol.PropertyDTO\022\020\n\010langua"
    "ge\030\005 \001(\t\0222\n\017mapGridPosition\030\006 \002(\0132\031.slg."
    "protocol.PositionDTO\022\026\n\016hasChangedName\030\007"
    " \002(\010\022\014\n\004icon\030\010 \002(\t\"$\n\010GuideDTO\022\n\n\002id\030\002 \002"
    "(\005\022\014\n\004jump\030\003 \002(\010\"9\n\027UserAccountLoginRequ"
    "est\022\020\n\010platform\030\001 \002(\t\022\014\n\004puid\030\002 \002(\t\",\n\030U"
    "serAccountLoginResponse\022\020\n\010playerId\030\001 \002("
    "\004\"&\n\022PlayerLoginRequest\022\020\n\010playerId\030\001 \002("
    "\004\"Q\n\023PlayerLoginResponse\022\021\n\tsessionId\030\001 "
    "\002(\004\022\017\n\007systime\030\002 \002(\003\022\026\n\016timeZoneOffset\030\003"
    " \002(\005\"\?\n\026PlayerReconnectRequest\022\021\n\tsessio"
    "nId\030\001 \002(\004\022\022\n\nlastPushId\030\002 \002(\005\"F\n\027PlayerR"
    "econnectResponse\022+\n\005state\030\001 \001(\0162\034.slg.pr"
    "otocol.ReconnectState\"\025\n\023PlayerReloadReq"
    "uest\"\?\n\024PlayerReloadResponse\022\017\n\007systime\030"
    "\001 \002(\003\022\026\n\016timeZoneOffset\030\002 \002(\005\"\030\n\026PlayerH"
    "eartBeatRequest\"*\n\027PlayerHeartBeatRespon"
    "se\022\017\n\007systime\030\001 \002(\003\"3\n\020SetTalentRequest\022"
    "\r\n\005level\030\001 \002(\005\022\020\n\010talentId\030\002 \002(\005\"4\n\021SetT"
    "alentResponse\022\r\n\005level\030\001 \002(\005\022\020\n\010talentId"
    "\030\002 \002(\005\" \n\017SetImageRequest\022\r\n\005image\030\001 \002(\005"
    "\"!\n\020SetImageResponse\022\r\n\005image\030\002 \001(\005\"6\n\024Q"
    "ueryLordInfoRequest\022\020\n\010playerId\030\001 \001(\003\022\014\n"
    "\004name\030\002 \001(\t\"\325\001\n\025QueryLordInfoResponse\022\020\n"
    "\010playerId\030\001 \001(\003\022\020\n\010nickname\030\002 \001(\t\022\022\n\nall"
    "ianceid\030\003 \001(\005\022\024\n\014alliancename\030\004 \001(\t\022\013\n\003e"
    "xp\030\005 \001(\005\022\r\n\005level\030\006 \001(\005\022\020\n\010isfriend\030\007 \001("
    "\010\022\r\n\005image\030\010 \001(\005\0221\n\requipmentlist\030\t \003(\0132"
    "\032.slg.protocol.EquipmentDTO\".\n\016SetIconRe"
    "quest\022\016\n\006iconID\030\001 \002(\t\022\014\n\004oper\030\002 \002(\005\"!\n\017S"
    "etIconResponse\022\016\n\006iconID\030\002 \001(\t\"6\n\021Change"
    "NameRequest\022\020\n\010nickname\030\001 \002(\t\022\017\n\007useItem"
    "\030\002 \002(\010\"T\n\022ChangeNameResponse\022\023\n\013isAvaila"
    "ble\030\001 \002(\010\022)\n\006reward\030\002 \001(\0132\031.slg.protocol"
    ".PropertyDTO\"\035\n\017SetGuideRequest\022\n\n\002id\030\001 "
    "\002(\005\"9\n\016PlayerDataPush\022\'\n\006player\030\001 \002(\0132\027."
    "slg.protocol.PlayerDTO\"I\n\030PlayerProperty"
    "ChangePush\022-\n\nproperties\030\001 \003(\0132\031.slg.pro"
    "tocol.PropertyDTO\"\"\n\021PlayerLevelUpPush\022\r"
    "\n\005level\030\001 \002(\005\"e\n\021PlayerProtectPush\022\032\n\022bo"
    "rnProtectEndTime\030\001 \002(\005\022\031\n\021atkProtectEndT"
    "ime\030\002 \002(\005\022\031\n\021spyProtectEndTime\030\003 \002(\005\"N\n\013"
    "PlayerCount\022\014\n\004type\030\001 \002(\005\022\r\n\005point\030\002 \002(\005"
    "\022\020\n\010defCount\030\003 \002(\005\022\020\n\010addCount\030\004 \001(\005\"<\n\017"
    "PlayerCountPush\022)\n\006counts\030\001 \003(\0132\031.slg.pr"
    "otocol.PlayerCount\"&\n\017PlayeBattlePush\022\023\n"
    "\013battleValue\030\001 \002(\005\"\037\n\nTalentPush\022\021\n\ttale"
    "ntIds\030\001 \003(\005\"4\n\013VipInfoPush\022\n\n\002lv\030\001 \002(\005\022\013"
    "\n\003exp\030\002 \002(\005\022\014\n\004sign\030\003 \002(\005\"&\n\021VipActiveIn"
    "foPush\022\021\n\tactiveEnd\030\001 \002(\005\"\037\n\013SysTimePush"
    "\022\020\n\010currTime\030\001 \002(\003\"2\n\tGuidePush\022%\n\005guide"
    "\030\001 \002(\0132\026.slg.protocol.GuideDTO*\232\002\n\017Playe"
    "rCommandId\022\026\n\022USER_ACCOUNT_LOGIN\020d\022\020\n\014PL"
    "AYER_LOGIN\020e\022\024\n\020PLAYER_RECONNECT\020f\022\024\n\020PL"
    "AYRE_HEARTBEAT\020g\022\021\n\rPLAYRE_RELOAD\020h\022\025\n\021P"
    "LAYER_TALENT_SET\020i\022\024\n\020PLAYER_IMAGE_SET\020j"
    "\022\027\n\023PLAYER_QUERY_PLAYER\020k\022\023\n\017PLAYER_ICON"
    "_SET\020l\022\026\n\022PLAYER_CHANGE_NAME\020m\022\024\n\020PLAYER"
    "_SET_GUIDE\020n\022\025\n\021PLAYER_JUMP_GUIDE\020o*7\n\016R"
    "econnectState\022\014\n\010CONTINUE\020\001\022\n\n\006RELOAD\020\002\022"
    "\013\n\007RELOGIN\020\003*\345\002\n\014PlayerPushId\022\026\n\020PLAYRE_"
    "DATA_PUSH\020\265\207\003\022\032\n\024PROPERTY_CHANGE_PUSH\020\266\207"
    "\003\022\032\n\024PLAYER_LEVEL_UP_PUSH\020\267\207\003\022\031\n\023PLAYER_"
    "PROTECT_PUSH\020\270\207\003\022\024\n\016PLAYER_RELOGIN\020\276\207\003\022\027"
    "\n\021PLAYER_COUNT_PUSH\020\310\207\003\022\030\n\022PLAYER_BATTLE"
    "_PUSH\020\311\207\003\022\030\n\022PLAYER_TALENT_PUSH\020\312\207\003\022\025\n\017P"
    "LAYER_VIP_PUSH\020\313\207\003\022\034\n\026PLAYER_VIP_ACTIVE_"
    "PUSH\020\314\207\003\022\032\n\024PLAYER_SYS_TIME_PUSH\020\315\207\003\022\035\n\027"
    "PLAYER_ONLINE_OTHER_DAY\020\316\207\003\022\027\n\021PLAYER_GU"
    "IDE_PUSH\020\317\207\003B+\n\034com.bonusstudio.slg.prot"
    "ocolB\013PlayerProto", 2937);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "player.proto", &protobuf_RegisterTypes);
  PlayerDTO::default_instance_ = new PlayerDTO();
  GuideDTO::default_instance_ = new GuideDTO();
  UserAccountLoginRequest::default_instance_ = new UserAccountLoginRequest();
  UserAccountLoginResponse::default_instance_ = new UserAccountLoginResponse();
  PlayerLoginRequest::default_instance_ = new PlayerLoginRequest();
  PlayerLoginResponse::default_instance_ = new PlayerLoginResponse();
  PlayerReconnectRequest::default_instance_ = new PlayerReconnectRequest();
  PlayerReconnectResponse::default_instance_ = new PlayerReconnectResponse();
  PlayerReloadRequest::default_instance_ = new PlayerReloadRequest();
  PlayerReloadResponse::default_instance_ = new PlayerReloadResponse();
  PlayerHeartBeatRequest::default_instance_ = new PlayerHeartBeatRequest();
  PlayerHeartBeatResponse::default_instance_ = new PlayerHeartBeatResponse();
  SetTalentRequest::default_instance_ = new SetTalentRequest();
  SetTalentResponse::default_instance_ = new SetTalentResponse();
  SetImageRequest::default_instance_ = new SetImageRequest();
  SetImageResponse::default_instance_ = new SetImageResponse();
  QueryLordInfoRequest::default_instance_ = new QueryLordInfoRequest();
  QueryLordInfoResponse::default_instance_ = new QueryLordInfoResponse();
  SetIconRequest::default_instance_ = new SetIconRequest();
  SetIconResponse::default_instance_ = new SetIconResponse();
  ChangeNameRequest::default_instance_ = new ChangeNameRequest();
  ChangeNameResponse::default_instance_ = new ChangeNameResponse();
  SetGuideRequest::default_instance_ = new SetGuideRequest();
  PlayerDataPush::default_instance_ = new PlayerDataPush();
  PlayerPropertyChangePush::default_instance_ = new PlayerPropertyChangePush();
  PlayerLevelUpPush::default_instance_ = new PlayerLevelUpPush();
  PlayerProtectPush::default_instance_ = new PlayerProtectPush();
  PlayerCount::default_instance_ = new PlayerCount();
  PlayerCountPush::default_instance_ = new PlayerCountPush();
  PlayeBattlePush::default_instance_ = new PlayeBattlePush();
  TalentPush::default_instance_ = new TalentPush();
  VipInfoPush::default_instance_ = new VipInfoPush();
  VipActiveInfoPush::default_instance_ = new VipActiveInfoPush();
  SysTimePush::default_instance_ = new SysTimePush();
  GuidePush::default_instance_ = new GuidePush();
  PlayerDTO::default_instance_->InitAsDefaultInstance();
  GuideDTO::default_instance_->InitAsDefaultInstance();
  UserAccountLoginRequest::default_instance_->InitAsDefaultInstance();
  UserAccountLoginResponse::default_instance_->InitAsDefaultInstance();
  PlayerLoginRequest::default_instance_->InitAsDefaultInstance();
  PlayerLoginResponse::default_instance_->InitAsDefaultInstance();
  PlayerReconnectRequest::default_instance_->InitAsDefaultInstance();
  PlayerReconnectResponse::default_instance_->InitAsDefaultInstance();
  PlayerReloadRequest::default_instance_->InitAsDefaultInstance();
  PlayerReloadResponse::default_instance_->InitAsDefaultInstance();
  PlayerHeartBeatRequest::default_instance_->InitAsDefaultInstance();
  PlayerHeartBeatResponse::default_instance_->InitAsDefaultInstance();
  SetTalentRequest::default_instance_->InitAsDefaultInstance();
  SetTalentResponse::default_instance_->InitAsDefaultInstance();
  SetImageRequest::default_instance_->InitAsDefaultInstance();
  SetImageResponse::default_instance_->InitAsDefaultInstance();
  QueryLordInfoRequest::default_instance_->InitAsDefaultInstance();
  QueryLordInfoResponse::default_instance_->InitAsDefaultInstance();
  SetIconRequest::default_instance_->InitAsDefaultInstance();
  SetIconResponse::default_instance_->InitAsDefaultInstance();
  ChangeNameRequest::default_instance_->InitAsDefaultInstance();
  ChangeNameResponse::default_instance_->InitAsDefaultInstance();
  SetGuideRequest::default_instance_->InitAsDefaultInstance();
  PlayerDataPush::default_instance_->InitAsDefaultInstance();
  PlayerPropertyChangePush::default_instance_->InitAsDefaultInstance();
  PlayerLevelUpPush::default_instance_->InitAsDefaultInstance();
  PlayerProtectPush::default_instance_->InitAsDefaultInstance();
  PlayerCount::default_instance_->InitAsDefaultInstance();
  PlayerCountPush::default_instance_->InitAsDefaultInstance();
  PlayeBattlePush::default_instance_->InitAsDefaultInstance();
  TalentPush::default_instance_->InitAsDefaultInstance();
  VipInfoPush::default_instance_->InitAsDefaultInstance();
  VipActiveInfoPush::default_instance_->InitAsDefaultInstance();
  SysTimePush::default_instance_->InitAsDefaultInstance();
  GuidePush::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_player_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_player_2eproto {
  StaticDescriptorInitializer_player_2eproto() {
    protobuf_AddDesc_player_2eproto();
  }
} static_descriptor_initializer_player_2eproto_;
const ::google::protobuf::EnumDescriptor* PlayerCommandId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerCommandId_descriptor_;
}
bool PlayerCommandId_IsValid(int value) {
  switch(value) {
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReconnectState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReconnectState_descriptor_;
}
bool ReconnectState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PlayerPushId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerPushId_descriptor_;
}
bool PlayerPushId_IsValid(int value) {
  switch(value) {
    case 50101:
    case 50102:
    case 50103:
    case 50104:
    case 50110:
    case 50120:
    case 50121:
    case 50122:
    case 50123:
    case 50124:
    case 50125:
    case 50126:
    case 50127:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerDTO::kPlayerIdFieldNumber;
const int PlayerDTO::kNameFieldNumber;
const int PlayerDTO::kLevelFieldNumber;
const int PlayerDTO::kPropertiesFieldNumber;
const int PlayerDTO::kLanguageFieldNumber;
const int PlayerDTO::kMapGridPositionFieldNumber;
const int PlayerDTO::kHasChangedNameFieldNumber;
const int PlayerDTO::kIconFieldNumber;
#endif  // !_MSC_VER

PlayerDTO::PlayerDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerDTO::InitAsDefaultInstance() {
  mapgridposition_ = const_cast< ::slg::protocol::PositionDTO*>(&::slg::protocol::PositionDTO::default_instance());
}

PlayerDTO::PlayerDTO(const PlayerDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerDTO::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mapgridposition_ = NULL;
  haschangedname_ = false;
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerDTO::~PlayerDTO() {
  SharedDtor();
}

void PlayerDTO::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    delete language_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (this != default_instance_) {
    delete mapgridposition_;
  }
}

void PlayerDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerDTO_descriptor_;
}

const PlayerDTO& PlayerDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

PlayerDTO* PlayerDTO::default_instance_ = NULL;

PlayerDTO* PlayerDTO::New() const {
  return new PlayerDTO;
}

void PlayerDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    if (has_language()) {
      if (language_ != &::google::protobuf::internal::kEmptyString) {
        language_->clear();
      }
    }
    if (has_mapgridposition()) {
      if (mapgridposition_ != NULL) mapgridposition_->::slg::protocol::PositionDTO::Clear();
    }
    haschangedname_ = false;
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
  }
  properties_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_properties;
        break;
      }

      // repeated .slg.protocol.PropertyDTO properties = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_properties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_properties;
        if (input->ExpectTag(42)) goto parse_language;
        break;
      }

      // optional string language = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_mapGridPosition;
        break;
      }

      // required .slg.protocol.PositionDTO mapGridPosition = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mapGridPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mapgridposition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_hasChangedName;
        break;
      }

      // required bool hasChangedName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasChangedName:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &haschangedname_)));
          set_has_haschangedname();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_icon;
        break;
      }

      // required string icon = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // repeated .slg.protocol.PropertyDTO properties = 4;
  for (int i = 0; i < this->properties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->properties(i), output);
  }

  // optional string language = 5;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->language(), output);
  }

  // required .slg.protocol.PositionDTO mapGridPosition = 6;
  if (has_mapgridposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->mapgridposition(), output);
  }

  // required bool hasChangedName = 7;
  if (has_haschangedname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->haschangedname(), output);
  }

  // required string icon = 8;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->icon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // repeated .slg.protocol.PropertyDTO properties = 4;
  for (int i = 0; i < this->properties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->properties(i), target);
  }

  // optional string language = 5;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->language(), target);
  }

  // required .slg.protocol.PositionDTO mapGridPosition = 6;
  if (has_mapgridposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->mapgridposition(), target);
  }

  // required bool hasChangedName = 7;
  if (has_haschangedname()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->haschangedname(), target);
  }

  // required string icon = 8;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->icon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional string language = 5;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

    // required .slg.protocol.PositionDTO mapGridPosition = 6;
    if (has_mapgridposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mapgridposition());
    }

    // required bool hasChangedName = 7;
    if (has_haschangedname()) {
      total_size += 1 + 1;
    }

    // required string icon = 8;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

  }
  // repeated .slg.protocol.PropertyDTO properties = 4;
  total_size += 1 * this->properties_size();
  for (int i = 0; i < this->properties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->properties(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerDTO::MergeFrom(const PlayerDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  properties_.MergeFrom(from.properties_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_mapgridposition()) {
      mutable_mapgridposition()->::slg::protocol::PositionDTO::MergeFrom(from.mapgridposition());
    }
    if (from.has_haschangedname()) {
      set_haschangedname(from.haschangedname());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerDTO::CopyFrom(const PlayerDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000e5) != 0x000000e5) return false;

  for (int i = 0; i < properties_size(); i++) {
    if (!this->properties(i).IsInitialized()) return false;
  }
  if (has_mapgridposition()) {
    if (!this->mapgridposition().IsInitialized()) return false;
  }
  return true;
}

void PlayerDTO::Swap(PlayerDTO* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    properties_.Swap(&other->properties_);
    std::swap(language_, other->language_);
    std::swap(mapgridposition_, other->mapgridposition_);
    std::swap(haschangedname_, other->haschangedname_);
    std::swap(icon_, other->icon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerDTO_descriptor_;
  metadata.reflection = PlayerDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuideDTO::kIdFieldNumber;
const int GuideDTO::kJumpFieldNumber;
#endif  // !_MSC_VER

GuideDTO::GuideDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuideDTO::InitAsDefaultInstance() {
}

GuideDTO::GuideDTO(const GuideDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuideDTO::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  jump_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuideDTO::~GuideDTO() {
  SharedDtor();
}

void GuideDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuideDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuideDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuideDTO_descriptor_;
}

const GuideDTO& GuideDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

GuideDTO* GuideDTO::default_instance_ = NULL;

GuideDTO* GuideDTO::New() const {
  return new GuideDTO;
}

void GuideDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    jump_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuideDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_jump;
        break;
      }

      // required bool jump = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jump:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &jump_)));
          set_has_jump();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuideDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // required bool jump = 3;
  if (has_jump()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->jump(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuideDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // required bool jump = 3;
  if (has_jump()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->jump(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuideDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required bool jump = 3;
    if (has_jump()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuideDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuideDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuideDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuideDTO::MergeFrom(const GuideDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_jump()) {
      set_jump(from.jump());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuideDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuideDTO::CopyFrom(const GuideDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuideDTO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GuideDTO::Swap(GuideDTO* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(jump_, other->jump_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuideDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuideDTO_descriptor_;
  metadata.reflection = GuideDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserAccountLoginRequest::kPlatformFieldNumber;
const int UserAccountLoginRequest::kPuidFieldNumber;
#endif  // !_MSC_VER

UserAccountLoginRequest::UserAccountLoginRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserAccountLoginRequest::InitAsDefaultInstance() {
}

UserAccountLoginRequest::UserAccountLoginRequest(const UserAccountLoginRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserAccountLoginRequest::SharedCtor() {
  _cached_size_ = 0;
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  puid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserAccountLoginRequest::~UserAccountLoginRequest() {
  SharedDtor();
}

void UserAccountLoginRequest::SharedDtor() {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (puid_ != &::google::protobuf::internal::kEmptyString) {
    delete puid_;
  }
  if (this != default_instance_) {
  }
}

void UserAccountLoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserAccountLoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserAccountLoginRequest_descriptor_;
}

const UserAccountLoginRequest& UserAccountLoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

UserAccountLoginRequest* UserAccountLoginRequest::default_instance_ = NULL;

UserAccountLoginRequest* UserAccountLoginRequest::New() const {
  return new UserAccountLoginRequest;
}

void UserAccountLoginRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::kEmptyString) {
        platform_->clear();
      }
    }
    if (has_puid()) {
      if (puid_ != &::google::protobuf::internal::kEmptyString) {
        puid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserAccountLoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string platform = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_puid;
        break;
      }

      // required string puid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_puid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_puid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->puid().data(), this->puid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserAccountLoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string platform = 1;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->platform(), output);
  }

  // required string puid = 2;
  if (has_puid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->puid().data(), this->puid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->puid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserAccountLoginRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string platform = 1;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->platform(), target);
  }

  // required string puid = 2;
  if (has_puid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->puid().data(), this->puid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->puid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserAccountLoginRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string platform = 1;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // required string puid = 2;
    if (has_puid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->puid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserAccountLoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserAccountLoginRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserAccountLoginRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserAccountLoginRequest::MergeFrom(const UserAccountLoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_puid()) {
      set_puid(from.puid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserAccountLoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAccountLoginRequest::CopyFrom(const UserAccountLoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAccountLoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UserAccountLoginRequest::Swap(UserAccountLoginRequest* other) {
  if (other != this) {
    std::swap(platform_, other->platform_);
    std::swap(puid_, other->puid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserAccountLoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserAccountLoginRequest_descriptor_;
  metadata.reflection = UserAccountLoginRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserAccountLoginResponse::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

UserAccountLoginResponse::UserAccountLoginResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserAccountLoginResponse::InitAsDefaultInstance() {
}

UserAccountLoginResponse::UserAccountLoginResponse(const UserAccountLoginResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserAccountLoginResponse::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserAccountLoginResponse::~UserAccountLoginResponse() {
  SharedDtor();
}

void UserAccountLoginResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserAccountLoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserAccountLoginResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserAccountLoginResponse_descriptor_;
}

const UserAccountLoginResponse& UserAccountLoginResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

UserAccountLoginResponse* UserAccountLoginResponse::default_instance_ = NULL;

UserAccountLoginResponse* UserAccountLoginResponse::New() const {
  return new UserAccountLoginResponse;
}

void UserAccountLoginResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserAccountLoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserAccountLoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserAccountLoginResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserAccountLoginResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserAccountLoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserAccountLoginResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserAccountLoginResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserAccountLoginResponse::MergeFrom(const UserAccountLoginResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserAccountLoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAccountLoginResponse::CopyFrom(const UserAccountLoginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAccountLoginResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UserAccountLoginResponse::Swap(UserAccountLoginResponse* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserAccountLoginResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserAccountLoginResponse_descriptor_;
  metadata.reflection = UserAccountLoginResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerLoginRequest::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

PlayerLoginRequest::PlayerLoginRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerLoginRequest::InitAsDefaultInstance() {
}

PlayerLoginRequest::PlayerLoginRequest(const PlayerLoginRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerLoginRequest::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerLoginRequest::~PlayerLoginRequest() {
  SharedDtor();
}

void PlayerLoginRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerLoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerLoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerLoginRequest_descriptor_;
}

const PlayerLoginRequest& PlayerLoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

PlayerLoginRequest* PlayerLoginRequest::default_instance_ = NULL;

PlayerLoginRequest* PlayerLoginRequest::New() const {
  return new PlayerLoginRequest;
}

void PlayerLoginRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerLoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerLoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerLoginRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerLoginRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerLoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerLoginRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerLoginRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerLoginRequest::MergeFrom(const PlayerLoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerLoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLoginRequest::CopyFrom(const PlayerLoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayerLoginRequest::Swap(PlayerLoginRequest* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerLoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerLoginRequest_descriptor_;
  metadata.reflection = PlayerLoginRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerLoginResponse::kSessionIdFieldNumber;
const int PlayerLoginResponse::kSystimeFieldNumber;
const int PlayerLoginResponse::kTimeZoneOffsetFieldNumber;
#endif  // !_MSC_VER

PlayerLoginResponse::PlayerLoginResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerLoginResponse::InitAsDefaultInstance() {
}

PlayerLoginResponse::PlayerLoginResponse(const PlayerLoginResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerLoginResponse::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = GOOGLE_ULONGLONG(0);
  systime_ = GOOGLE_LONGLONG(0);
  timezoneoffset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerLoginResponse::~PlayerLoginResponse() {
  SharedDtor();
}

void PlayerLoginResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerLoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerLoginResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerLoginResponse_descriptor_;
}

const PlayerLoginResponse& PlayerLoginResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

PlayerLoginResponse* PlayerLoginResponse::default_instance_ = NULL;

PlayerLoginResponse* PlayerLoginResponse::New() const {
  return new PlayerLoginResponse;
}

void PlayerLoginResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sessionid_ = GOOGLE_ULONGLONG(0);
    systime_ = GOOGLE_LONGLONG(0);
    timezoneoffset_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerLoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 sessionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_systime;
        break;
      }

      // required int64 systime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_systime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &systime_)));
          set_has_systime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_timeZoneOffset;
        break;
      }

      // required int32 timeZoneOffset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeZoneOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timezoneoffset_)));
          set_has_timezoneoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerLoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 sessionId = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sessionid(), output);
  }

  // required int64 systime = 2;
  if (has_systime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->systime(), output);
  }

  // required int32 timeZoneOffset = 3;
  if (has_timezoneoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->timezoneoffset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerLoginResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 sessionId = 1;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sessionid(), target);
  }

  // required int64 systime = 2;
  if (has_systime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->systime(), target);
  }

  // required int32 timeZoneOffset = 3;
  if (has_timezoneoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->timezoneoffset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerLoginResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 sessionId = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sessionid());
    }

    // required int64 systime = 2;
    if (has_systime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->systime());
    }

    // required int32 timeZoneOffset = 3;
    if (has_timezoneoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timezoneoffset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerLoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerLoginResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerLoginResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerLoginResponse::MergeFrom(const PlayerLoginResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_systime()) {
      set_systime(from.systime());
    }
    if (from.has_timezoneoffset()) {
      set_timezoneoffset(from.timezoneoffset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerLoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLoginResponse::CopyFrom(const PlayerLoginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLoginResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PlayerLoginResponse::Swap(PlayerLoginResponse* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(systime_, other->systime_);
    std::swap(timezoneoffset_, other->timezoneoffset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerLoginResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerLoginResponse_descriptor_;
  metadata.reflection = PlayerLoginResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerReconnectRequest::kSessionIdFieldNumber;
const int PlayerReconnectRequest::kLastPushIdFieldNumber;
#endif  // !_MSC_VER

PlayerReconnectRequest::PlayerReconnectRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerReconnectRequest::InitAsDefaultInstance() {
}

PlayerReconnectRequest::PlayerReconnectRequest(const PlayerReconnectRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerReconnectRequest::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = GOOGLE_ULONGLONG(0);
  lastpushid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerReconnectRequest::~PlayerReconnectRequest() {
  SharedDtor();
}

void PlayerReconnectRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerReconnectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerReconnectRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerReconnectRequest_descriptor_;
}

const PlayerReconnectRequest& PlayerReconnectRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

PlayerReconnectRequest* PlayerReconnectRequest::default_instance_ = NULL;

PlayerReconnectRequest* PlayerReconnectRequest::New() const {
  return new PlayerReconnectRequest;
}

void PlayerReconnectRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sessionid_ = GOOGLE_ULONGLONG(0);
    lastpushid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerReconnectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 sessionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lastPushId;
        break;
      }

      // required int32 lastPushId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastPushId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastpushid_)));
          set_has_lastpushid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerReconnectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 sessionId = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sessionid(), output);
  }

  // required int32 lastPushId = 2;
  if (has_lastpushid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lastpushid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerReconnectRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 sessionId = 1;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sessionid(), target);
  }

  // required int32 lastPushId = 2;
  if (has_lastpushid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lastpushid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerReconnectRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 sessionId = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sessionid());
    }

    // required int32 lastPushId = 2;
    if (has_lastpushid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastpushid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerReconnectRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerReconnectRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerReconnectRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerReconnectRequest::MergeFrom(const PlayerReconnectRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_lastpushid()) {
      set_lastpushid(from.lastpushid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerReconnectRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerReconnectRequest::CopyFrom(const PlayerReconnectRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerReconnectRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PlayerReconnectRequest::Swap(PlayerReconnectRequest* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(lastpushid_, other->lastpushid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerReconnectRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerReconnectRequest_descriptor_;
  metadata.reflection = PlayerReconnectRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerReconnectResponse::kStateFieldNumber;
#endif  // !_MSC_VER

PlayerReconnectResponse::PlayerReconnectResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerReconnectResponse::InitAsDefaultInstance() {
}

PlayerReconnectResponse::PlayerReconnectResponse(const PlayerReconnectResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerReconnectResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerReconnectResponse::~PlayerReconnectResponse() {
  SharedDtor();
}

void PlayerReconnectResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerReconnectResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerReconnectResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerReconnectResponse_descriptor_;
}

const PlayerReconnectResponse& PlayerReconnectResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

PlayerReconnectResponse* PlayerReconnectResponse::default_instance_ = NULL;

PlayerReconnectResponse* PlayerReconnectResponse::New() const {
  return new PlayerReconnectResponse;
}

void PlayerReconnectResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerReconnectResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .slg.protocol.ReconnectState state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::slg::protocol::ReconnectState_IsValid(value)) {
            set_state(static_cast< ::slg::protocol::ReconnectState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerReconnectResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .slg.protocol.ReconnectState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerReconnectResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .slg.protocol.ReconnectState state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerReconnectResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .slg.protocol.ReconnectState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerReconnectResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerReconnectResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerReconnectResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerReconnectResponse::MergeFrom(const PlayerReconnectResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerReconnectResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerReconnectResponse::CopyFrom(const PlayerReconnectResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerReconnectResponse::IsInitialized() const {

  return true;
}

void PlayerReconnectResponse::Swap(PlayerReconnectResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerReconnectResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerReconnectResponse_descriptor_;
  metadata.reflection = PlayerReconnectResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PlayerReloadRequest::PlayerReloadRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerReloadRequest::InitAsDefaultInstance() {
}

PlayerReloadRequest::PlayerReloadRequest(const PlayerReloadRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerReloadRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerReloadRequest::~PlayerReloadRequest() {
  SharedDtor();
}

void PlayerReloadRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerReloadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerReloadRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerReloadRequest_descriptor_;
}

const PlayerReloadRequest& PlayerReloadRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

PlayerReloadRequest* PlayerReloadRequest::default_instance_ = NULL;

PlayerReloadRequest* PlayerReloadRequest::New() const {
  return new PlayerReloadRequest;
}

void PlayerReloadRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerReloadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PlayerReloadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerReloadRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerReloadRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerReloadRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerReloadRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerReloadRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerReloadRequest::MergeFrom(const PlayerReloadRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerReloadRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerReloadRequest::CopyFrom(const PlayerReloadRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerReloadRequest::IsInitialized() const {

  return true;
}

void PlayerReloadRequest::Swap(PlayerReloadRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerReloadRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerReloadRequest_descriptor_;
  metadata.reflection = PlayerReloadRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerReloadResponse::kSystimeFieldNumber;
const int PlayerReloadResponse::kTimeZoneOffsetFieldNumber;
#endif  // !_MSC_VER

PlayerReloadResponse::PlayerReloadResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerReloadResponse::InitAsDefaultInstance() {
}

PlayerReloadResponse::PlayerReloadResponse(const PlayerReloadResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerReloadResponse::SharedCtor() {
  _cached_size_ = 0;
  systime_ = GOOGLE_LONGLONG(0);
  timezoneoffset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerReloadResponse::~PlayerReloadResponse() {
  SharedDtor();
}

void PlayerReloadResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerReloadResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerReloadResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerReloadResponse_descriptor_;
}

const PlayerReloadResponse& PlayerReloadResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

PlayerReloadResponse* PlayerReloadResponse::default_instance_ = NULL;

PlayerReloadResponse* PlayerReloadResponse::New() const {
  return new PlayerReloadResponse;
}

void PlayerReloadResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    systime_ = GOOGLE_LONGLONG(0);
    timezoneoffset_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerReloadResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 systime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &systime_)));
          set_has_systime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timeZoneOffset;
        break;
      }

      // required int32 timeZoneOffset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeZoneOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timezoneoffset_)));
          set_has_timezoneoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerReloadResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 systime = 1;
  if (has_systime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->systime(), output);
  }

  // required int32 timeZoneOffset = 2;
  if (has_timezoneoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->timezoneoffset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerReloadResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 systime = 1;
  if (has_systime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->systime(), target);
  }

  // required int32 timeZoneOffset = 2;
  if (has_timezoneoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->timezoneoffset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerReloadResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 systime = 1;
    if (has_systime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->systime());
    }

    // required int32 timeZoneOffset = 2;
    if (has_timezoneoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timezoneoffset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerReloadResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerReloadResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerReloadResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerReloadResponse::MergeFrom(const PlayerReloadResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_systime()) {
      set_systime(from.systime());
    }
    if (from.has_timezoneoffset()) {
      set_timezoneoffset(from.timezoneoffset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerReloadResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerReloadResponse::CopyFrom(const PlayerReloadResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerReloadResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PlayerReloadResponse::Swap(PlayerReloadResponse* other) {
  if (other != this) {
    std::swap(systime_, other->systime_);
    std::swap(timezoneoffset_, other->timezoneoffset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerReloadResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerReloadResponse_descriptor_;
  metadata.reflection = PlayerReloadResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PlayerHeartBeatRequest::PlayerHeartBeatRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerHeartBeatRequest::InitAsDefaultInstance() {
}

PlayerHeartBeatRequest::PlayerHeartBeatRequest(const PlayerHeartBeatRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerHeartBeatRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerHeartBeatRequest::~PlayerHeartBeatRequest() {
  SharedDtor();
}

void PlayerHeartBeatRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerHeartBeatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerHeartBeatRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerHeartBeatRequest_descriptor_;
}

const PlayerHeartBeatRequest& PlayerHeartBeatRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

PlayerHeartBeatRequest* PlayerHeartBeatRequest::default_instance_ = NULL;

PlayerHeartBeatRequest* PlayerHeartBeatRequest::New() const {
  return new PlayerHeartBeatRequest;
}

void PlayerHeartBeatRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerHeartBeatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PlayerHeartBeatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerHeartBeatRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerHeartBeatRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerHeartBeatRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerHeartBeatRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerHeartBeatRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerHeartBeatRequest::MergeFrom(const PlayerHeartBeatRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerHeartBeatRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerHeartBeatRequest::CopyFrom(const PlayerHeartBeatRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerHeartBeatRequest::IsInitialized() const {

  return true;
}

void PlayerHeartBeatRequest::Swap(PlayerHeartBeatRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerHeartBeatRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerHeartBeatRequest_descriptor_;
  metadata.reflection = PlayerHeartBeatRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerHeartBeatResponse::kSystimeFieldNumber;
#endif  // !_MSC_VER

PlayerHeartBeatResponse::PlayerHeartBeatResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerHeartBeatResponse::InitAsDefaultInstance() {
}

PlayerHeartBeatResponse::PlayerHeartBeatResponse(const PlayerHeartBeatResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerHeartBeatResponse::SharedCtor() {
  _cached_size_ = 0;
  systime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerHeartBeatResponse::~PlayerHeartBeatResponse() {
  SharedDtor();
}

void PlayerHeartBeatResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerHeartBeatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerHeartBeatResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerHeartBeatResponse_descriptor_;
}

const PlayerHeartBeatResponse& PlayerHeartBeatResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

PlayerHeartBeatResponse* PlayerHeartBeatResponse::default_instance_ = NULL;

PlayerHeartBeatResponse* PlayerHeartBeatResponse::New() const {
  return new PlayerHeartBeatResponse;
}

void PlayerHeartBeatResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    systime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerHeartBeatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 systime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &systime_)));
          set_has_systime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerHeartBeatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 systime = 1;
  if (has_systime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->systime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerHeartBeatResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 systime = 1;
  if (has_systime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->systime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerHeartBeatResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 systime = 1;
    if (has_systime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->systime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerHeartBeatResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerHeartBeatResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerHeartBeatResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerHeartBeatResponse::MergeFrom(const PlayerHeartBeatResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_systime()) {
      set_systime(from.systime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerHeartBeatResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerHeartBeatResponse::CopyFrom(const PlayerHeartBeatResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerHeartBeatResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayerHeartBeatResponse::Swap(PlayerHeartBeatResponse* other) {
  if (other != this) {
    std::swap(systime_, other->systime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerHeartBeatResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerHeartBeatResponse_descriptor_;
  metadata.reflection = PlayerHeartBeatResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetTalentRequest::kLevelFieldNumber;
const int SetTalentRequest::kTalentIdFieldNumber;
#endif  // !_MSC_VER

SetTalentRequest::SetTalentRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetTalentRequest::InitAsDefaultInstance() {
}

SetTalentRequest::SetTalentRequest(const SetTalentRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetTalentRequest::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  talentid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetTalentRequest::~SetTalentRequest() {
  SharedDtor();
}

void SetTalentRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetTalentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetTalentRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetTalentRequest_descriptor_;
}

const SetTalentRequest& SetTalentRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

SetTalentRequest* SetTalentRequest::default_instance_ = NULL;

SetTalentRequest* SetTalentRequest::New() const {
  return new SetTalentRequest;
}

void SetTalentRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    talentid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetTalentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_talentId;
        break;
      }

      // required int32 talentId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_talentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &talentid_)));
          set_has_talentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetTalentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // required int32 talentId = 2;
  if (has_talentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->talentid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetTalentRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // required int32 talentId = 2;
  if (has_talentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->talentid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetTalentRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 talentId = 2;
    if (has_talentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->talentid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetTalentRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetTalentRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetTalentRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetTalentRequest::MergeFrom(const SetTalentRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_talentid()) {
      set_talentid(from.talentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetTalentRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTalentRequest::CopyFrom(const SetTalentRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTalentRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SetTalentRequest::Swap(SetTalentRequest* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(talentid_, other->talentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetTalentRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetTalentRequest_descriptor_;
  metadata.reflection = SetTalentRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetTalentResponse::kLevelFieldNumber;
const int SetTalentResponse::kTalentIdFieldNumber;
#endif  // !_MSC_VER

SetTalentResponse::SetTalentResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetTalentResponse::InitAsDefaultInstance() {
}

SetTalentResponse::SetTalentResponse(const SetTalentResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetTalentResponse::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  talentid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetTalentResponse::~SetTalentResponse() {
  SharedDtor();
}

void SetTalentResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetTalentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetTalentResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetTalentResponse_descriptor_;
}

const SetTalentResponse& SetTalentResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

SetTalentResponse* SetTalentResponse::default_instance_ = NULL;

SetTalentResponse* SetTalentResponse::New() const {
  return new SetTalentResponse;
}

void SetTalentResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    talentid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetTalentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_talentId;
        break;
      }

      // required int32 talentId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_talentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &talentid_)));
          set_has_talentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetTalentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // required int32 talentId = 2;
  if (has_talentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->talentid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetTalentResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // required int32 talentId = 2;
  if (has_talentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->talentid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetTalentResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 talentId = 2;
    if (has_talentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->talentid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetTalentResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetTalentResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetTalentResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetTalentResponse::MergeFrom(const SetTalentResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_talentid()) {
      set_talentid(from.talentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetTalentResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTalentResponse::CopyFrom(const SetTalentResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTalentResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SetTalentResponse::Swap(SetTalentResponse* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(talentid_, other->talentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetTalentResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetTalentResponse_descriptor_;
  metadata.reflection = SetTalentResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetImageRequest::kImageFieldNumber;
#endif  // !_MSC_VER

SetImageRequest::SetImageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetImageRequest::InitAsDefaultInstance() {
}

SetImageRequest::SetImageRequest(const SetImageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetImageRequest::SharedCtor() {
  _cached_size_ = 0;
  image_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetImageRequest::~SetImageRequest() {
  SharedDtor();
}

void SetImageRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetImageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetImageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetImageRequest_descriptor_;
}

const SetImageRequest& SetImageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

SetImageRequest* SetImageRequest::default_instance_ = NULL;

SetImageRequest* SetImageRequest::New() const {
  return new SetImageRequest;
}

void SetImageRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    image_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetImageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 image = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_)));
          set_has_image();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetImageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 image = 1;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->image(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetImageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 image = 1;
  if (has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->image(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetImageRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 image = 1;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->image());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetImageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetImageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetImageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetImageRequest::MergeFrom(const SetImageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_image()) {
      set_image(from.image());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetImageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetImageRequest::CopyFrom(const SetImageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetImageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetImageRequest::Swap(SetImageRequest* other) {
  if (other != this) {
    std::swap(image_, other->image_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetImageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetImageRequest_descriptor_;
  metadata.reflection = SetImageRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetImageResponse::kImageFieldNumber;
#endif  // !_MSC_VER

SetImageResponse::SetImageResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetImageResponse::InitAsDefaultInstance() {
}

SetImageResponse::SetImageResponse(const SetImageResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetImageResponse::SharedCtor() {
  _cached_size_ = 0;
  image_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetImageResponse::~SetImageResponse() {
  SharedDtor();
}

void SetImageResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetImageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetImageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetImageResponse_descriptor_;
}

const SetImageResponse& SetImageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

SetImageResponse* SetImageResponse::default_instance_ = NULL;

SetImageResponse* SetImageResponse::New() const {
  return new SetImageResponse;
}

void SetImageResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    image_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetImageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 image = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_)));
          set_has_image();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetImageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 image = 2;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->image(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetImageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 image = 2;
  if (has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->image(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetImageResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 image = 2;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->image());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetImageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetImageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetImageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetImageResponse::MergeFrom(const SetImageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_image()) {
      set_image(from.image());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetImageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetImageResponse::CopyFrom(const SetImageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetImageResponse::IsInitialized() const {

  return true;
}

void SetImageResponse::Swap(SetImageResponse* other) {
  if (other != this) {
    std::swap(image_, other->image_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetImageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetImageResponse_descriptor_;
  metadata.reflection = SetImageResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryLordInfoRequest::kPlayerIdFieldNumber;
const int QueryLordInfoRequest::kNameFieldNumber;
#endif  // !_MSC_VER

QueryLordInfoRequest::QueryLordInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryLordInfoRequest::InitAsDefaultInstance() {
}

QueryLordInfoRequest::QueryLordInfoRequest(const QueryLordInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryLordInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryLordInfoRequest::~QueryLordInfoRequest() {
  SharedDtor();
}

void QueryLordInfoRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void QueryLordInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryLordInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryLordInfoRequest_descriptor_;
}

const QueryLordInfoRequest& QueryLordInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

QueryLordInfoRequest* QueryLordInfoRequest::default_instance_ = NULL;

QueryLordInfoRequest* QueryLordInfoRequest::New() const {
  return new QueryLordInfoRequest;
}

void QueryLordInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryLordInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryLordInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryLordInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryLordInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryLordInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryLordInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryLordInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryLordInfoRequest::MergeFrom(const QueryLordInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryLordInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryLordInfoRequest::CopyFrom(const QueryLordInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryLordInfoRequest::IsInitialized() const {

  return true;
}

void QueryLordInfoRequest::Swap(QueryLordInfoRequest* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryLordInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryLordInfoRequest_descriptor_;
  metadata.reflection = QueryLordInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryLordInfoResponse::kPlayerIdFieldNumber;
const int QueryLordInfoResponse::kNicknameFieldNumber;
const int QueryLordInfoResponse::kAllianceidFieldNumber;
const int QueryLordInfoResponse::kAlliancenameFieldNumber;
const int QueryLordInfoResponse::kExpFieldNumber;
const int QueryLordInfoResponse::kLevelFieldNumber;
const int QueryLordInfoResponse::kIsfriendFieldNumber;
const int QueryLordInfoResponse::kImageFieldNumber;
const int QueryLordInfoResponse::kEquipmentlistFieldNumber;
#endif  // !_MSC_VER

QueryLordInfoResponse::QueryLordInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryLordInfoResponse::InitAsDefaultInstance() {
}

QueryLordInfoResponse::QueryLordInfoResponse(const QueryLordInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryLordInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  allianceid_ = 0;
  alliancename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exp_ = 0;
  level_ = 0;
  isfriend_ = false;
  image_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryLordInfoResponse::~QueryLordInfoResponse() {
  SharedDtor();
}

void QueryLordInfoResponse::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (alliancename_ != &::google::protobuf::internal::kEmptyString) {
    delete alliancename_;
  }
  if (this != default_instance_) {
  }
}

void QueryLordInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryLordInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryLordInfoResponse_descriptor_;
}

const QueryLordInfoResponse& QueryLordInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

QueryLordInfoResponse* QueryLordInfoResponse::default_instance_ = NULL;

QueryLordInfoResponse* QueryLordInfoResponse::New() const {
  return new QueryLordInfoResponse;
}

void QueryLordInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    allianceid_ = 0;
    if (has_alliancename()) {
      if (alliancename_ != &::google::protobuf::internal::kEmptyString) {
        alliancename_->clear();
      }
    }
    exp_ = 0;
    level_ = 0;
    isfriend_ = false;
    image_ = 0;
  }
  equipmentlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryLordInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_allianceid;
        break;
      }

      // optional int32 allianceid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allianceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allianceid_)));
          set_has_allianceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_alliancename;
        break;
      }

      // optional string alliancename = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alliancename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alliancename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alliancename().data(), this->alliancename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_exp;
        break;
      }

      // optional int32 exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional int32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isfriend;
        break;
      }

      // optional bool isfriend = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isfriend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfriend_)));
          set_has_isfriend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_image;
        break;
      }

      // optional int32 image = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_image:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_)));
          set_has_image();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_equipmentlist;
        break;
      }

      // repeated .slg.protocol.EquipmentDTO equipmentlist = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipmentlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipmentlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_equipmentlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryLordInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  // optional int32 allianceid = 3;
  if (has_allianceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->allianceid(), output);
  }

  // optional string alliancename = 4;
  if (has_alliancename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alliancename().data(), this->alliancename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->alliancename(), output);
  }

  // optional int32 exp = 5;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->exp(), output);
  }

  // optional int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }

  // optional bool isfriend = 7;
  if (has_isfriend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isfriend(), output);
  }

  // optional int32 image = 8;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->image(), output);
  }

  // repeated .slg.protocol.EquipmentDTO equipmentlist = 9;
  for (int i = 0; i < this->equipmentlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->equipmentlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryLordInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional int32 allianceid = 3;
  if (has_allianceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->allianceid(), target);
  }

  // optional string alliancename = 4;
  if (has_alliancename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alliancename().data(), this->alliancename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->alliancename(), target);
  }

  // optional int32 exp = 5;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->exp(), target);
  }

  // optional int32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }

  // optional bool isfriend = 7;
  if (has_isfriend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isfriend(), target);
  }

  // optional int32 image = 8;
  if (has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->image(), target);
  }

  // repeated .slg.protocol.EquipmentDTO equipmentlist = 9;
  for (int i = 0; i < this->equipmentlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->equipmentlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryLordInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 allianceid = 3;
    if (has_allianceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allianceid());
    }

    // optional string alliancename = 4;
    if (has_alliancename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alliancename());
    }

    // optional int32 exp = 5;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional bool isfriend = 7;
    if (has_isfriend()) {
      total_size += 1 + 1;
    }

    // optional int32 image = 8;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->image());
    }

  }
  // repeated .slg.protocol.EquipmentDTO equipmentlist = 9;
  total_size += 1 * this->equipmentlist_size();
  for (int i = 0; i < this->equipmentlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipmentlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryLordInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryLordInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryLordInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryLordInfoResponse::MergeFrom(const QueryLordInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipmentlist_.MergeFrom(from.equipmentlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_allianceid()) {
      set_allianceid(from.allianceid());
    }
    if (from.has_alliancename()) {
      set_alliancename(from.alliancename());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_isfriend()) {
      set_isfriend(from.isfriend());
    }
    if (from.has_image()) {
      set_image(from.image());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryLordInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryLordInfoResponse::CopyFrom(const QueryLordInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryLordInfoResponse::IsInitialized() const {

  for (int i = 0; i < equipmentlist_size(); i++) {
    if (!this->equipmentlist(i).IsInitialized()) return false;
  }
  return true;
}

void QueryLordInfoResponse::Swap(QueryLordInfoResponse* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(nickname_, other->nickname_);
    std::swap(allianceid_, other->allianceid_);
    std::swap(alliancename_, other->alliancename_);
    std::swap(exp_, other->exp_);
    std::swap(level_, other->level_);
    std::swap(isfriend_, other->isfriend_);
    std::swap(image_, other->image_);
    equipmentlist_.Swap(&other->equipmentlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryLordInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryLordInfoResponse_descriptor_;
  metadata.reflection = QueryLordInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetIconRequest::kIconIDFieldNumber;
const int SetIconRequest::kOperFieldNumber;
#endif  // !_MSC_VER

SetIconRequest::SetIconRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetIconRequest::InitAsDefaultInstance() {
}

SetIconRequest::SetIconRequest(const SetIconRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetIconRequest::SharedCtor() {
  _cached_size_ = 0;
  iconid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  oper_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetIconRequest::~SetIconRequest() {
  SharedDtor();
}

void SetIconRequest::SharedDtor() {
  if (iconid_ != &::google::protobuf::internal::kEmptyString) {
    delete iconid_;
  }
  if (this != default_instance_) {
  }
}

void SetIconRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetIconRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetIconRequest_descriptor_;
}

const SetIconRequest& SetIconRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

SetIconRequest* SetIconRequest::default_instance_ = NULL;

SetIconRequest* SetIconRequest::New() const {
  return new SetIconRequest;
}

void SetIconRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_iconid()) {
      if (iconid_ != &::google::protobuf::internal::kEmptyString) {
        iconid_->clear();
      }
    }
    oper_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetIconRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string iconID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iconid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->iconid().data(), this->iconid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_oper;
        break;
      }

      // required int32 oper = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oper_)));
          set_has_oper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetIconRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string iconID = 1;
  if (has_iconid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->iconid().data(), this->iconid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->iconid(), output);
  }

  // required int32 oper = 2;
  if (has_oper()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oper(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetIconRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string iconID = 1;
  if (has_iconid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->iconid().data(), this->iconid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->iconid(), target);
  }

  // required int32 oper = 2;
  if (has_oper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oper(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetIconRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string iconID = 1;
    if (has_iconid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iconid());
    }

    // required int32 oper = 2;
    if (has_oper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oper());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetIconRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetIconRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetIconRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetIconRequest::MergeFrom(const SetIconRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iconid()) {
      set_iconid(from.iconid());
    }
    if (from.has_oper()) {
      set_oper(from.oper());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetIconRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetIconRequest::CopyFrom(const SetIconRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetIconRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SetIconRequest::Swap(SetIconRequest* other) {
  if (other != this) {
    std::swap(iconid_, other->iconid_);
    std::swap(oper_, other->oper_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetIconRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetIconRequest_descriptor_;
  metadata.reflection = SetIconRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetIconResponse::kIconIDFieldNumber;
#endif  // !_MSC_VER

SetIconResponse::SetIconResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetIconResponse::InitAsDefaultInstance() {
}

SetIconResponse::SetIconResponse(const SetIconResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetIconResponse::SharedCtor() {
  _cached_size_ = 0;
  iconid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetIconResponse::~SetIconResponse() {
  SharedDtor();
}

void SetIconResponse::SharedDtor() {
  if (iconid_ != &::google::protobuf::internal::kEmptyString) {
    delete iconid_;
  }
  if (this != default_instance_) {
  }
}

void SetIconResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetIconResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetIconResponse_descriptor_;
}

const SetIconResponse& SetIconResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

SetIconResponse* SetIconResponse::default_instance_ = NULL;

SetIconResponse* SetIconResponse::New() const {
  return new SetIconResponse;
}

void SetIconResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_iconid()) {
      if (iconid_ != &::google::protobuf::internal::kEmptyString) {
        iconid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetIconResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string iconID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iconid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->iconid().data(), this->iconid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetIconResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string iconID = 2;
  if (has_iconid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->iconid().data(), this->iconid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->iconid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetIconResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string iconID = 2;
  if (has_iconid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->iconid().data(), this->iconid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->iconid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetIconResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string iconID = 2;
    if (has_iconid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iconid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetIconResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetIconResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetIconResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetIconResponse::MergeFrom(const SetIconResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iconid()) {
      set_iconid(from.iconid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetIconResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetIconResponse::CopyFrom(const SetIconResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetIconResponse::IsInitialized() const {

  return true;
}

void SetIconResponse::Swap(SetIconResponse* other) {
  if (other != this) {
    std::swap(iconid_, other->iconid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetIconResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetIconResponse_descriptor_;
  metadata.reflection = SetIconResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeNameRequest::kNicknameFieldNumber;
const int ChangeNameRequest::kUseItemFieldNumber;
#endif  // !_MSC_VER

ChangeNameRequest::ChangeNameRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeNameRequest::InitAsDefaultInstance() {
}

ChangeNameRequest::ChangeNameRequest(const ChangeNameRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeNameRequest::SharedCtor() {
  _cached_size_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  useitem_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeNameRequest::~ChangeNameRequest() {
  SharedDtor();
}

void ChangeNameRequest::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void ChangeNameRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeNameRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeNameRequest_descriptor_;
}

const ChangeNameRequest& ChangeNameRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

ChangeNameRequest* ChangeNameRequest::default_instance_ = NULL;

ChangeNameRequest* ChangeNameRequest::New() const {
  return new ChangeNameRequest;
}

void ChangeNameRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    useitem_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeNameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string nickname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_useItem;
        break;
      }

      // required bool useItem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &useitem_)));
          set_has_useitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeNameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nickname(), output);
  }

  // required bool useItem = 2;
  if (has_useitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->useitem(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeNameRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nickname(), target);
  }

  // required bool useItem = 2;
  if (has_useitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->useitem(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeNameRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string nickname = 1;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // required bool useItem = 2;
    if (has_useitem()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeNameRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeNameRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeNameRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeNameRequest::MergeFrom(const ChangeNameRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_useitem()) {
      set_useitem(from.useitem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeNameRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeNameRequest::CopyFrom(const ChangeNameRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeNameRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ChangeNameRequest::Swap(ChangeNameRequest* other) {
  if (other != this) {
    std::swap(nickname_, other->nickname_);
    std::swap(useitem_, other->useitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeNameRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeNameRequest_descriptor_;
  metadata.reflection = ChangeNameRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeNameResponse::kIsAvailableFieldNumber;
const int ChangeNameResponse::kRewardFieldNumber;
#endif  // !_MSC_VER

ChangeNameResponse::ChangeNameResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeNameResponse::InitAsDefaultInstance() {
  reward_ = const_cast< ::slg::protocol::PropertyDTO*>(&::slg::protocol::PropertyDTO::default_instance());
}

ChangeNameResponse::ChangeNameResponse(const ChangeNameResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeNameResponse::SharedCtor() {
  _cached_size_ = 0;
  isavailable_ = false;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeNameResponse::~ChangeNameResponse() {
  SharedDtor();
}

void ChangeNameResponse::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void ChangeNameResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeNameResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeNameResponse_descriptor_;
}

const ChangeNameResponse& ChangeNameResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

ChangeNameResponse* ChangeNameResponse::default_instance_ = NULL;

ChangeNameResponse* ChangeNameResponse::New() const {
  return new ChangeNameResponse;
}

void ChangeNameResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isavailable_ = false;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::slg::protocol::PropertyDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeNameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isAvailable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isavailable_)));
          set_has_isavailable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // optional .slg.protocol.PropertyDTO reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeNameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isAvailable = 1;
  if (has_isavailable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isavailable(), output);
  }

  // optional .slg.protocol.PropertyDTO reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeNameResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isAvailable = 1;
  if (has_isavailable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isavailable(), target);
  }

  // optional .slg.protocol.PropertyDTO reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeNameResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isAvailable = 1;
    if (has_isavailable()) {
      total_size += 1 + 1;
    }

    // optional .slg.protocol.PropertyDTO reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeNameResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeNameResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeNameResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeNameResponse::MergeFrom(const ChangeNameResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isavailable()) {
      set_isavailable(from.isavailable());
    }
    if (from.has_reward()) {
      mutable_reward()->::slg::protocol::PropertyDTO::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeNameResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeNameResponse::CopyFrom(const ChangeNameResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeNameResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void ChangeNameResponse::Swap(ChangeNameResponse* other) {
  if (other != this) {
    std::swap(isavailable_, other->isavailable_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeNameResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeNameResponse_descriptor_;
  metadata.reflection = ChangeNameResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetGuideRequest::kIdFieldNumber;
#endif  // !_MSC_VER

SetGuideRequest::SetGuideRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetGuideRequest::InitAsDefaultInstance() {
}

SetGuideRequest::SetGuideRequest(const SetGuideRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetGuideRequest::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetGuideRequest::~SetGuideRequest() {
  SharedDtor();
}

void SetGuideRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetGuideRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetGuideRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetGuideRequest_descriptor_;
}

const SetGuideRequest& SetGuideRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

SetGuideRequest* SetGuideRequest::default_instance_ = NULL;

SetGuideRequest* SetGuideRequest::New() const {
  return new SetGuideRequest;
}

void SetGuideRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetGuideRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetGuideRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetGuideRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetGuideRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetGuideRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetGuideRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetGuideRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetGuideRequest::MergeFrom(const SetGuideRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetGuideRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetGuideRequest::CopyFrom(const SetGuideRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetGuideRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetGuideRequest::Swap(SetGuideRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetGuideRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetGuideRequest_descriptor_;
  metadata.reflection = SetGuideRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerDataPush::kPlayerFieldNumber;
#endif  // !_MSC_VER

PlayerDataPush::PlayerDataPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerDataPush::InitAsDefaultInstance() {
  player_ = const_cast< ::slg::protocol::PlayerDTO*>(&::slg::protocol::PlayerDTO::default_instance());
}

PlayerDataPush::PlayerDataPush(const PlayerDataPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerDataPush::SharedCtor() {
  _cached_size_ = 0;
  player_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerDataPush::~PlayerDataPush() {
  SharedDtor();
}

void PlayerDataPush::SharedDtor() {
  if (this != default_instance_) {
    delete player_;
  }
}

void PlayerDataPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerDataPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerDataPush_descriptor_;
}

const PlayerDataPush& PlayerDataPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

PlayerDataPush* PlayerDataPush::default_instance_ = NULL;

PlayerDataPush* PlayerDataPush::New() const {
  return new PlayerDataPush;
}

void PlayerDataPush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player()) {
      if (player_ != NULL) player_->::slg::protocol::PlayerDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerDataPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .slg.protocol.PlayerDTO player = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerDataPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .slg.protocol.PlayerDTO player = 1;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerDataPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .slg.protocol.PlayerDTO player = 1;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerDataPush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .slg.protocol.PlayerDTO player = 1;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerDataPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerDataPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerDataPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerDataPush::MergeFrom(const PlayerDataPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player()) {
      mutable_player()->::slg::protocol::PlayerDTO::MergeFrom(from.player());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerDataPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerDataPush::CopyFrom(const PlayerDataPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDataPush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_player()) {
    if (!this->player().IsInitialized()) return false;
  }
  return true;
}

void PlayerDataPush::Swap(PlayerDataPush* other) {
  if (other != this) {
    std::swap(player_, other->player_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerDataPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerDataPush_descriptor_;
  metadata.reflection = PlayerDataPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerPropertyChangePush::kPropertiesFieldNumber;
#endif  // !_MSC_VER

PlayerPropertyChangePush::PlayerPropertyChangePush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerPropertyChangePush::InitAsDefaultInstance() {
}

PlayerPropertyChangePush::PlayerPropertyChangePush(const PlayerPropertyChangePush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerPropertyChangePush::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerPropertyChangePush::~PlayerPropertyChangePush() {
  SharedDtor();
}

void PlayerPropertyChangePush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerPropertyChangePush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerPropertyChangePush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerPropertyChangePush_descriptor_;
}

const PlayerPropertyChangePush& PlayerPropertyChangePush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

PlayerPropertyChangePush* PlayerPropertyChangePush::default_instance_ = NULL;

PlayerPropertyChangePush* PlayerPropertyChangePush::New() const {
  return new PlayerPropertyChangePush;
}

void PlayerPropertyChangePush::Clear() {
  properties_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerPropertyChangePush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.PropertyDTO properties = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_properties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_properties;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerPropertyChangePush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.PropertyDTO properties = 1;
  for (int i = 0; i < this->properties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->properties(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerPropertyChangePush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.PropertyDTO properties = 1;
  for (int i = 0; i < this->properties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->properties(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerPropertyChangePush::ByteSize() const {
  int total_size = 0;

  // repeated .slg.protocol.PropertyDTO properties = 1;
  total_size += 1 * this->properties_size();
  for (int i = 0; i < this->properties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->properties(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerPropertyChangePush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerPropertyChangePush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerPropertyChangePush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerPropertyChangePush::MergeFrom(const PlayerPropertyChangePush& from) {
  GOOGLE_CHECK_NE(&from, this);
  properties_.MergeFrom(from.properties_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerPropertyChangePush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerPropertyChangePush::CopyFrom(const PlayerPropertyChangePush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerPropertyChangePush::IsInitialized() const {

  for (int i = 0; i < properties_size(); i++) {
    if (!this->properties(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerPropertyChangePush::Swap(PlayerPropertyChangePush* other) {
  if (other != this) {
    properties_.Swap(&other->properties_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerPropertyChangePush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerPropertyChangePush_descriptor_;
  metadata.reflection = PlayerPropertyChangePush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerLevelUpPush::kLevelFieldNumber;
#endif  // !_MSC_VER

PlayerLevelUpPush::PlayerLevelUpPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerLevelUpPush::InitAsDefaultInstance() {
}

PlayerLevelUpPush::PlayerLevelUpPush(const PlayerLevelUpPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerLevelUpPush::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerLevelUpPush::~PlayerLevelUpPush() {
  SharedDtor();
}

void PlayerLevelUpPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerLevelUpPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerLevelUpPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerLevelUpPush_descriptor_;
}

const PlayerLevelUpPush& PlayerLevelUpPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

PlayerLevelUpPush* PlayerLevelUpPush::default_instance_ = NULL;

PlayerLevelUpPush* PlayerLevelUpPush::New() const {
  return new PlayerLevelUpPush;
}

void PlayerLevelUpPush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerLevelUpPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerLevelUpPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerLevelUpPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerLevelUpPush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerLevelUpPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerLevelUpPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerLevelUpPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerLevelUpPush::MergeFrom(const PlayerLevelUpPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerLevelUpPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLevelUpPush::CopyFrom(const PlayerLevelUpPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLevelUpPush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayerLevelUpPush::Swap(PlayerLevelUpPush* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerLevelUpPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerLevelUpPush_descriptor_;
  metadata.reflection = PlayerLevelUpPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerProtectPush::kBornProtectEndTimeFieldNumber;
const int PlayerProtectPush::kAtkProtectEndTimeFieldNumber;
const int PlayerProtectPush::kSpyProtectEndTimeFieldNumber;
#endif  // !_MSC_VER

PlayerProtectPush::PlayerProtectPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerProtectPush::InitAsDefaultInstance() {
}

PlayerProtectPush::PlayerProtectPush(const PlayerProtectPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerProtectPush::SharedCtor() {
  _cached_size_ = 0;
  bornprotectendtime_ = 0;
  atkprotectendtime_ = 0;
  spyprotectendtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerProtectPush::~PlayerProtectPush() {
  SharedDtor();
}

void PlayerProtectPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerProtectPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerProtectPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerProtectPush_descriptor_;
}

const PlayerProtectPush& PlayerProtectPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

PlayerProtectPush* PlayerProtectPush::default_instance_ = NULL;

PlayerProtectPush* PlayerProtectPush::New() const {
  return new PlayerProtectPush;
}

void PlayerProtectPush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bornprotectendtime_ = 0;
    atkprotectendtime_ = 0;
    spyprotectendtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerProtectPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bornProtectEndTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bornprotectendtime_)));
          set_has_bornprotectendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_atkProtectEndTime;
        break;
      }

      // required int32 atkProtectEndTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atkProtectEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atkprotectendtime_)));
          set_has_atkprotectendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_spyProtectEndTime;
        break;
      }

      // required int32 spyProtectEndTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spyProtectEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spyprotectendtime_)));
          set_has_spyprotectendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerProtectPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 bornProtectEndTime = 1;
  if (has_bornprotectendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bornprotectendtime(), output);
  }

  // required int32 atkProtectEndTime = 2;
  if (has_atkprotectendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->atkprotectendtime(), output);
  }

  // required int32 spyProtectEndTime = 3;
  if (has_spyprotectendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->spyprotectendtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerProtectPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 bornProtectEndTime = 1;
  if (has_bornprotectendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bornprotectendtime(), target);
  }

  // required int32 atkProtectEndTime = 2;
  if (has_atkprotectendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->atkprotectendtime(), target);
  }

  // required int32 spyProtectEndTime = 3;
  if (has_spyprotectendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->spyprotectendtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerProtectPush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bornProtectEndTime = 1;
    if (has_bornprotectendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bornprotectendtime());
    }

    // required int32 atkProtectEndTime = 2;
    if (has_atkprotectendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atkprotectendtime());
    }

    // required int32 spyProtectEndTime = 3;
    if (has_spyprotectendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spyprotectendtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerProtectPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerProtectPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerProtectPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerProtectPush::MergeFrom(const PlayerProtectPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bornprotectendtime()) {
      set_bornprotectendtime(from.bornprotectendtime());
    }
    if (from.has_atkprotectendtime()) {
      set_atkprotectendtime(from.atkprotectendtime());
    }
    if (from.has_spyprotectendtime()) {
      set_spyprotectendtime(from.spyprotectendtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerProtectPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerProtectPush::CopyFrom(const PlayerProtectPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerProtectPush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PlayerProtectPush::Swap(PlayerProtectPush* other) {
  if (other != this) {
    std::swap(bornprotectendtime_, other->bornprotectendtime_);
    std::swap(atkprotectendtime_, other->atkprotectendtime_);
    std::swap(spyprotectendtime_, other->spyprotectendtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerProtectPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerProtectPush_descriptor_;
  metadata.reflection = PlayerProtectPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerCount::kTypeFieldNumber;
const int PlayerCount::kPointFieldNumber;
const int PlayerCount::kDefCountFieldNumber;
const int PlayerCount::kAddCountFieldNumber;
#endif  // !_MSC_VER

PlayerCount::PlayerCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerCount::InitAsDefaultInstance() {
}

PlayerCount::PlayerCount(const PlayerCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerCount::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  point_ = 0;
  defcount_ = 0;
  addcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerCount::~PlayerCount() {
  SharedDtor();
}

void PlayerCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerCount_descriptor_;
}

const PlayerCount& PlayerCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

PlayerCount* PlayerCount::default_instance_ = NULL;

PlayerCount* PlayerCount::New() const {
  return new PlayerCount;
}

void PlayerCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    point_ = 0;
    defcount_ = 0;
    addcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_point;
        break;
      }

      // required int32 point = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_defCount;
        break;
      }

      // required int32 defCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defcount_)));
          set_has_defcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_addCount;
        break;
      }

      // optional int32 addCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addcount_)));
          set_has_addcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 point = 2;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->point(), output);
  }

  // required int32 defCount = 3;
  if (has_defcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->defcount(), output);
  }

  // optional int32 addCount = 4;
  if (has_addcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->addcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 point = 2;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->point(), target);
  }

  // required int32 defCount = 3;
  if (has_defcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->defcount(), target);
  }

  // optional int32 addCount = 4;
  if (has_addcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->addcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 point = 2;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point());
    }

    // required int32 defCount = 3;
    if (has_defcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defcount());
    }

    // optional int32 addCount = 4;
    if (has_addcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerCount::MergeFrom(const PlayerCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
    if (from.has_defcount()) {
      set_defcount(from.defcount());
    }
    if (from.has_addcount()) {
      set_addcount(from.addcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerCount::CopyFrom(const PlayerCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerCount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PlayerCount::Swap(PlayerCount* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(point_, other->point_);
    std::swap(defcount_, other->defcount_);
    std::swap(addcount_, other->addcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerCount_descriptor_;
  metadata.reflection = PlayerCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerCountPush::kCountsFieldNumber;
#endif  // !_MSC_VER

PlayerCountPush::PlayerCountPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerCountPush::InitAsDefaultInstance() {
}

PlayerCountPush::PlayerCountPush(const PlayerCountPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerCountPush::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerCountPush::~PlayerCountPush() {
  SharedDtor();
}

void PlayerCountPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerCountPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerCountPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerCountPush_descriptor_;
}

const PlayerCountPush& PlayerCountPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

PlayerCountPush* PlayerCountPush::default_instance_ = NULL;

PlayerCountPush* PlayerCountPush::New() const {
  return new PlayerCountPush;
}

void PlayerCountPush::Clear() {
  counts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerCountPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.PlayerCount counts = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_counts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_counts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_counts;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerCountPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.PlayerCount counts = 1;
  for (int i = 0; i < this->counts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->counts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerCountPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.PlayerCount counts = 1;
  for (int i = 0; i < this->counts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->counts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerCountPush::ByteSize() const {
  int total_size = 0;

  // repeated .slg.protocol.PlayerCount counts = 1;
  total_size += 1 * this->counts_size();
  for (int i = 0; i < this->counts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->counts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerCountPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerCountPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerCountPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerCountPush::MergeFrom(const PlayerCountPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  counts_.MergeFrom(from.counts_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerCountPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerCountPush::CopyFrom(const PlayerCountPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerCountPush::IsInitialized() const {

  for (int i = 0; i < counts_size(); i++) {
    if (!this->counts(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerCountPush::Swap(PlayerCountPush* other) {
  if (other != this) {
    counts_.Swap(&other->counts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerCountPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerCountPush_descriptor_;
  metadata.reflection = PlayerCountPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayeBattlePush::kBattleValueFieldNumber;
#endif  // !_MSC_VER

PlayeBattlePush::PlayeBattlePush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayeBattlePush::InitAsDefaultInstance() {
}

PlayeBattlePush::PlayeBattlePush(const PlayeBattlePush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayeBattlePush::SharedCtor() {
  _cached_size_ = 0;
  battlevalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayeBattlePush::~PlayeBattlePush() {
  SharedDtor();
}

void PlayeBattlePush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayeBattlePush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayeBattlePush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayeBattlePush_descriptor_;
}

const PlayeBattlePush& PlayeBattlePush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

PlayeBattlePush* PlayeBattlePush::default_instance_ = NULL;

PlayeBattlePush* PlayeBattlePush::New() const {
  return new PlayeBattlePush;
}

void PlayeBattlePush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battlevalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayeBattlePush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 battleValue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battlevalue_)));
          set_has_battlevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayeBattlePush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 battleValue = 1;
  if (has_battlevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->battlevalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayeBattlePush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 battleValue = 1;
  if (has_battlevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->battlevalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayeBattlePush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 battleValue = 1;
    if (has_battlevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battlevalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayeBattlePush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayeBattlePush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayeBattlePush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayeBattlePush::MergeFrom(const PlayeBattlePush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battlevalue()) {
      set_battlevalue(from.battlevalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayeBattlePush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayeBattlePush::CopyFrom(const PlayeBattlePush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayeBattlePush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayeBattlePush::Swap(PlayeBattlePush* other) {
  if (other != this) {
    std::swap(battlevalue_, other->battlevalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayeBattlePush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayeBattlePush_descriptor_;
  metadata.reflection = PlayeBattlePush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TalentPush::kTalentIdsFieldNumber;
#endif  // !_MSC_VER

TalentPush::TalentPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TalentPush::InitAsDefaultInstance() {
}

TalentPush::TalentPush(const TalentPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TalentPush::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TalentPush::~TalentPush() {
  SharedDtor();
}

void TalentPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TalentPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalentPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TalentPush_descriptor_;
}

const TalentPush& TalentPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

TalentPush* TalentPush::default_instance_ = NULL;

TalentPush* TalentPush::New() const {
  return new TalentPush;
}

void TalentPush::Clear() {
  talentids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TalentPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 talentIds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_talentIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_talentids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_talentids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_talentIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TalentPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 talentIds = 1;
  for (int i = 0; i < this->talentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->talentids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TalentPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 talentIds = 1;
  for (int i = 0; i < this->talentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->talentids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TalentPush::ByteSize() const {
  int total_size = 0;

  // repeated int32 talentIds = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->talentids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->talentids(i));
    }
    total_size += 1 * this->talentids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalentPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TalentPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TalentPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TalentPush::MergeFrom(const TalentPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  talentids_.MergeFrom(from.talentids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TalentPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalentPush::CopyFrom(const TalentPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalentPush::IsInitialized() const {

  return true;
}

void TalentPush::Swap(TalentPush* other) {
  if (other != this) {
    talentids_.Swap(&other->talentids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TalentPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TalentPush_descriptor_;
  metadata.reflection = TalentPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VipInfoPush::kLvFieldNumber;
const int VipInfoPush::kExpFieldNumber;
const int VipInfoPush::kSignFieldNumber;
#endif  // !_MSC_VER

VipInfoPush::VipInfoPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VipInfoPush::InitAsDefaultInstance() {
}

VipInfoPush::VipInfoPush(const VipInfoPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VipInfoPush::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0;
  exp_ = 0;
  sign_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VipInfoPush::~VipInfoPush() {
  SharedDtor();
}

void VipInfoPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VipInfoPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VipInfoPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VipInfoPush_descriptor_;
}

const VipInfoPush& VipInfoPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

VipInfoPush* VipInfoPush::default_instance_ = NULL;

VipInfoPush* VipInfoPush::New() const {
  return new VipInfoPush;
}

void VipInfoPush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0;
    exp_ = 0;
    sign_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VipInfoPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // required int32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sign;
        break;
      }

      // required int32 sign = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sign_)));
          set_has_sign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VipInfoPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lv(), output);
  }

  // required int32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }

  // required int32 sign = 3;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VipInfoPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lv(), target);
  }

  // required int32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }

  // required int32 sign = 3;
  if (has_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VipInfoPush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // required int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // required int32 sign = 3;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sign());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VipInfoPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VipInfoPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VipInfoPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VipInfoPush::MergeFrom(const VipInfoPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VipInfoPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VipInfoPush::CopyFrom(const VipInfoPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VipInfoPush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void VipInfoPush::Swap(VipInfoPush* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(exp_, other->exp_);
    std::swap(sign_, other->sign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VipInfoPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VipInfoPush_descriptor_;
  metadata.reflection = VipInfoPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VipActiveInfoPush::kActiveEndFieldNumber;
#endif  // !_MSC_VER

VipActiveInfoPush::VipActiveInfoPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VipActiveInfoPush::InitAsDefaultInstance() {
}

VipActiveInfoPush::VipActiveInfoPush(const VipActiveInfoPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VipActiveInfoPush::SharedCtor() {
  _cached_size_ = 0;
  activeend_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VipActiveInfoPush::~VipActiveInfoPush() {
  SharedDtor();
}

void VipActiveInfoPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VipActiveInfoPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VipActiveInfoPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VipActiveInfoPush_descriptor_;
}

const VipActiveInfoPush& VipActiveInfoPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

VipActiveInfoPush* VipActiveInfoPush::default_instance_ = NULL;

VipActiveInfoPush* VipActiveInfoPush::New() const {
  return new VipActiveInfoPush;
}

void VipActiveInfoPush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activeend_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VipActiveInfoPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 activeEnd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activeend_)));
          set_has_activeend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VipActiveInfoPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 activeEnd = 1;
  if (has_activeend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->activeend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VipActiveInfoPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 activeEnd = 1;
  if (has_activeend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->activeend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VipActiveInfoPush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 activeEnd = 1;
    if (has_activeend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activeend());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VipActiveInfoPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VipActiveInfoPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VipActiveInfoPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VipActiveInfoPush::MergeFrom(const VipActiveInfoPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activeend()) {
      set_activeend(from.activeend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VipActiveInfoPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VipActiveInfoPush::CopyFrom(const VipActiveInfoPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VipActiveInfoPush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void VipActiveInfoPush::Swap(VipActiveInfoPush* other) {
  if (other != this) {
    std::swap(activeend_, other->activeend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VipActiveInfoPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VipActiveInfoPush_descriptor_;
  metadata.reflection = VipActiveInfoPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SysTimePush::kCurrTimeFieldNumber;
#endif  // !_MSC_VER

SysTimePush::SysTimePush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SysTimePush::InitAsDefaultInstance() {
}

SysTimePush::SysTimePush(const SysTimePush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SysTimePush::SharedCtor() {
  _cached_size_ = 0;
  currtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SysTimePush::~SysTimePush() {
  SharedDtor();
}

void SysTimePush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SysTimePush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SysTimePush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SysTimePush_descriptor_;
}

const SysTimePush& SysTimePush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

SysTimePush* SysTimePush::default_instance_ = NULL;

SysTimePush* SysTimePush::New() const {
  return new SysTimePush;
}

void SysTimePush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    currtime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SysTimePush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 currTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &currtime_)));
          set_has_currtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SysTimePush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 currTime = 1;
  if (has_currtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->currtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SysTimePush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 currTime = 1;
  if (has_currtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->currtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SysTimePush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 currTime = 1;
    if (has_currtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->currtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SysTimePush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SysTimePush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SysTimePush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SysTimePush::MergeFrom(const SysTimePush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_currtime()) {
      set_currtime(from.currtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SysTimePush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SysTimePush::CopyFrom(const SysTimePush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysTimePush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SysTimePush::Swap(SysTimePush* other) {
  if (other != this) {
    std::swap(currtime_, other->currtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SysTimePush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SysTimePush_descriptor_;
  metadata.reflection = SysTimePush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuidePush::kGuideFieldNumber;
#endif  // !_MSC_VER

GuidePush::GuidePush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuidePush::InitAsDefaultInstance() {
  guide_ = const_cast< ::slg::protocol::GuideDTO*>(&::slg::protocol::GuideDTO::default_instance());
}

GuidePush::GuidePush(const GuidePush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuidePush::SharedCtor() {
  _cached_size_ = 0;
  guide_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuidePush::~GuidePush() {
  SharedDtor();
}

void GuidePush::SharedDtor() {
  if (this != default_instance_) {
    delete guide_;
  }
}

void GuidePush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuidePush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuidePush_descriptor_;
}

const GuidePush& GuidePush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

GuidePush* GuidePush::default_instance_ = NULL;

GuidePush* GuidePush::New() const {
  return new GuidePush;
}

void GuidePush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guide()) {
      if (guide_ != NULL) guide_->::slg::protocol::GuideDTO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuidePush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .slg.protocol.GuideDTO guide = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guide()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuidePush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .slg.protocol.GuideDTO guide = 1;
  if (has_guide()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guide(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuidePush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .slg.protocol.GuideDTO guide = 1;
  if (has_guide()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guide(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuidePush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .slg.protocol.GuideDTO guide = 1;
    if (has_guide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guide());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuidePush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuidePush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuidePush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuidePush::MergeFrom(const GuidePush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guide()) {
      mutable_guide()->::slg::protocol::GuideDTO::MergeFrom(from.guide());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuidePush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuidePush::CopyFrom(const GuidePush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuidePush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_guide()) {
    if (!this->guide().IsInitialized()) return false;
  }
  return true;
}

void GuidePush::Swap(GuidePush* other) {
  if (other != this) {
    std::swap(guide_, other->guide_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuidePush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuidePush_descriptor_;
  metadata.reflection = GuidePush_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace slg

// @@protoc_insertion_point(global_scope)
