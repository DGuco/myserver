// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player.proto

#include "player.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR PlayerDTO::PlayerDTO(
    ::_pbi::ConstantInitialized)
  : properties_()
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , language_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , icon_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , mapgridposition_(nullptr)
  , playerid_(uint64_t{0u})
  , level_(0)
  , haschangedname_(false){}
struct PlayerDTODefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerDTODefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerDTODefaultTypeInternal() {}
  union {
    PlayerDTO _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerDTODefaultTypeInternal _PlayerDTO_default_instance_;
PROTOBUF_CONSTEXPR GuideDTO::GuideDTO(
    ::_pbi::ConstantInitialized)
  : id_(0)
  , jump_(false){}
struct GuideDTODefaultTypeInternal {
  PROTOBUF_CONSTEXPR GuideDTODefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GuideDTODefaultTypeInternal() {}
  union {
    GuideDTO _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GuideDTODefaultTypeInternal _GuideDTO_default_instance_;
PROTOBUF_CONSTEXPR UserAccountLoginRequest::UserAccountLoginRequest(
    ::_pbi::ConstantInitialized)
  : platform_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , puid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct UserAccountLoginRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserAccountLoginRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserAccountLoginRequestDefaultTypeInternal() {}
  union {
    UserAccountLoginRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserAccountLoginRequestDefaultTypeInternal _UserAccountLoginRequest_default_instance_;
PROTOBUF_CONSTEXPR UserAccountLoginResponse::UserAccountLoginResponse(
    ::_pbi::ConstantInitialized)
  : playerid_(uint64_t{0u}){}
struct UserAccountLoginResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserAccountLoginResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserAccountLoginResponseDefaultTypeInternal() {}
  union {
    UserAccountLoginResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserAccountLoginResponseDefaultTypeInternal _UserAccountLoginResponse_default_instance_;
PROTOBUF_CONSTEXPR PlayerLoginRequest::PlayerLoginRequest(
    ::_pbi::ConstantInitialized)
  : playerid_(uint64_t{0u}){}
struct PlayerLoginRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerLoginRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerLoginRequestDefaultTypeInternal() {}
  union {
    PlayerLoginRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerLoginRequestDefaultTypeInternal _PlayerLoginRequest_default_instance_;
PROTOBUF_CONSTEXPR PlayerLoginResponse::PlayerLoginResponse(
    ::_pbi::ConstantInitialized)
  : sessionid_(uint64_t{0u})
  , systime_(int64_t{0})
  , timezoneoffset_(0){}
struct PlayerLoginResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerLoginResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerLoginResponseDefaultTypeInternal() {}
  union {
    PlayerLoginResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerLoginResponseDefaultTypeInternal _PlayerLoginResponse_default_instance_;
PROTOBUF_CONSTEXPR PlayerReconnectRequest::PlayerReconnectRequest(
    ::_pbi::ConstantInitialized)
  : sessionid_(uint64_t{0u})
  , lastpushid_(0){}
struct PlayerReconnectRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerReconnectRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerReconnectRequestDefaultTypeInternal() {}
  union {
    PlayerReconnectRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerReconnectRequestDefaultTypeInternal _PlayerReconnectRequest_default_instance_;
PROTOBUF_CONSTEXPR PlayerReconnectResponse::PlayerReconnectResponse(
    ::_pbi::ConstantInitialized)
  : state_(1)
{}
struct PlayerReconnectResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerReconnectResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerReconnectResponseDefaultTypeInternal() {}
  union {
    PlayerReconnectResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerReconnectResponseDefaultTypeInternal _PlayerReconnectResponse_default_instance_;
PROTOBUF_CONSTEXPR PlayerReloadRequest::PlayerReloadRequest(
    ::_pbi::ConstantInitialized){}
struct PlayerReloadRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerReloadRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerReloadRequestDefaultTypeInternal() {}
  union {
    PlayerReloadRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerReloadRequestDefaultTypeInternal _PlayerReloadRequest_default_instance_;
PROTOBUF_CONSTEXPR PlayerReloadResponse::PlayerReloadResponse(
    ::_pbi::ConstantInitialized)
  : systime_(int64_t{0})
  , timezoneoffset_(0){}
struct PlayerReloadResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerReloadResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerReloadResponseDefaultTypeInternal() {}
  union {
    PlayerReloadResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerReloadResponseDefaultTypeInternal _PlayerReloadResponse_default_instance_;
PROTOBUF_CONSTEXPR PlayerHeartBeatRequest::PlayerHeartBeatRequest(
    ::_pbi::ConstantInitialized){}
struct PlayerHeartBeatRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerHeartBeatRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerHeartBeatRequestDefaultTypeInternal() {}
  union {
    PlayerHeartBeatRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerHeartBeatRequestDefaultTypeInternal _PlayerHeartBeatRequest_default_instance_;
PROTOBUF_CONSTEXPR PlayerHeartBeatResponse::PlayerHeartBeatResponse(
    ::_pbi::ConstantInitialized)
  : systime_(int64_t{0}){}
struct PlayerHeartBeatResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerHeartBeatResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerHeartBeatResponseDefaultTypeInternal() {}
  union {
    PlayerHeartBeatResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerHeartBeatResponseDefaultTypeInternal _PlayerHeartBeatResponse_default_instance_;
PROTOBUF_CONSTEXPR SetTalentRequest::SetTalentRequest(
    ::_pbi::ConstantInitialized)
  : level_(0)
  , talentid_(0){}
struct SetTalentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetTalentRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetTalentRequestDefaultTypeInternal() {}
  union {
    SetTalentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetTalentRequestDefaultTypeInternal _SetTalentRequest_default_instance_;
PROTOBUF_CONSTEXPR SetTalentResponse::SetTalentResponse(
    ::_pbi::ConstantInitialized)
  : level_(0)
  , talentid_(0){}
struct SetTalentResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetTalentResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetTalentResponseDefaultTypeInternal() {}
  union {
    SetTalentResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetTalentResponseDefaultTypeInternal _SetTalentResponse_default_instance_;
PROTOBUF_CONSTEXPR SetImageRequest::SetImageRequest(
    ::_pbi::ConstantInitialized)
  : image_(0){}
struct SetImageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetImageRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetImageRequestDefaultTypeInternal() {}
  union {
    SetImageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetImageRequestDefaultTypeInternal _SetImageRequest_default_instance_;
PROTOBUF_CONSTEXPR SetImageResponse::SetImageResponse(
    ::_pbi::ConstantInitialized)
  : image_(0){}
struct SetImageResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetImageResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetImageResponseDefaultTypeInternal() {}
  union {
    SetImageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetImageResponseDefaultTypeInternal _SetImageResponse_default_instance_;
PROTOBUF_CONSTEXPR QueryLordInfoRequest::QueryLordInfoRequest(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , playerid_(int64_t{0}){}
struct QueryLordInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryLordInfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryLordInfoRequestDefaultTypeInternal() {}
  union {
    QueryLordInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryLordInfoRequestDefaultTypeInternal _QueryLordInfoRequest_default_instance_;
PROTOBUF_CONSTEXPR QueryLordInfoResponse::QueryLordInfoResponse(
    ::_pbi::ConstantInitialized)
  : equipmentlist_()
  , nickname_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , alliancename_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , playerid_(int64_t{0})
  , allianceid_(0)
  , exp_(0)
  , level_(0)
  , isfriend_(false)
  , image_(0){}
struct QueryLordInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryLordInfoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryLordInfoResponseDefaultTypeInternal() {}
  union {
    QueryLordInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryLordInfoResponseDefaultTypeInternal _QueryLordInfoResponse_default_instance_;
PROTOBUF_CONSTEXPR SetIconRequest::SetIconRequest(
    ::_pbi::ConstantInitialized)
  : iconid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , oper_(0){}
struct SetIconRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetIconRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetIconRequestDefaultTypeInternal() {}
  union {
    SetIconRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetIconRequestDefaultTypeInternal _SetIconRequest_default_instance_;
PROTOBUF_CONSTEXPR SetIconResponse::SetIconResponse(
    ::_pbi::ConstantInitialized)
  : iconid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct SetIconResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetIconResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetIconResponseDefaultTypeInternal() {}
  union {
    SetIconResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetIconResponseDefaultTypeInternal _SetIconResponse_default_instance_;
PROTOBUF_CONSTEXPR ChangeNameRequest::ChangeNameRequest(
    ::_pbi::ConstantInitialized)
  : nickname_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , useitem_(false){}
struct ChangeNameRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChangeNameRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChangeNameRequestDefaultTypeInternal() {}
  union {
    ChangeNameRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChangeNameRequestDefaultTypeInternal _ChangeNameRequest_default_instance_;
PROTOBUF_CONSTEXPR ChangeNameResponse::ChangeNameResponse(
    ::_pbi::ConstantInitialized)
  : reward_(nullptr)
  , isavailable_(false){}
struct ChangeNameResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChangeNameResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChangeNameResponseDefaultTypeInternal() {}
  union {
    ChangeNameResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChangeNameResponseDefaultTypeInternal _ChangeNameResponse_default_instance_;
PROTOBUF_CONSTEXPR SetGuideRequest::SetGuideRequest(
    ::_pbi::ConstantInitialized)
  : id_(0){}
struct SetGuideRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetGuideRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetGuideRequestDefaultTypeInternal() {}
  union {
    SetGuideRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetGuideRequestDefaultTypeInternal _SetGuideRequest_default_instance_;
PROTOBUF_CONSTEXPR PlayerDataPush::PlayerDataPush(
    ::_pbi::ConstantInitialized)
  : player_(nullptr){}
struct PlayerDataPushDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerDataPushDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerDataPushDefaultTypeInternal() {}
  union {
    PlayerDataPush _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerDataPushDefaultTypeInternal _PlayerDataPush_default_instance_;
PROTOBUF_CONSTEXPR PlayerPropertyChangePush::PlayerPropertyChangePush(
    ::_pbi::ConstantInitialized)
  : properties_(){}
struct PlayerPropertyChangePushDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerPropertyChangePushDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerPropertyChangePushDefaultTypeInternal() {}
  union {
    PlayerPropertyChangePush _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerPropertyChangePushDefaultTypeInternal _PlayerPropertyChangePush_default_instance_;
PROTOBUF_CONSTEXPR PlayerLevelUpPush::PlayerLevelUpPush(
    ::_pbi::ConstantInitialized)
  : level_(0){}
struct PlayerLevelUpPushDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerLevelUpPushDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerLevelUpPushDefaultTypeInternal() {}
  union {
    PlayerLevelUpPush _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerLevelUpPushDefaultTypeInternal _PlayerLevelUpPush_default_instance_;
PROTOBUF_CONSTEXPR PlayerProtectPush::PlayerProtectPush(
    ::_pbi::ConstantInitialized)
  : bornprotectendtime_(0)
  , atkprotectendtime_(0)
  , spyprotectendtime_(0){}
struct PlayerProtectPushDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerProtectPushDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerProtectPushDefaultTypeInternal() {}
  union {
    PlayerProtectPush _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerProtectPushDefaultTypeInternal _PlayerProtectPush_default_instance_;
PROTOBUF_CONSTEXPR PlayerCount::PlayerCount(
    ::_pbi::ConstantInitialized)
  : type_(0)
  , point_(0)
  , defcount_(0)
  , addcount_(0){}
struct PlayerCountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerCountDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerCountDefaultTypeInternal() {}
  union {
    PlayerCount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerCountDefaultTypeInternal _PlayerCount_default_instance_;
PROTOBUF_CONSTEXPR PlayerCountPush::PlayerCountPush(
    ::_pbi::ConstantInitialized)
  : counts_(){}
struct PlayerCountPushDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerCountPushDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerCountPushDefaultTypeInternal() {}
  union {
    PlayerCountPush _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerCountPushDefaultTypeInternal _PlayerCountPush_default_instance_;
PROTOBUF_CONSTEXPR PlayeBattlePush::PlayeBattlePush(
    ::_pbi::ConstantInitialized)
  : battlevalue_(0){}
struct PlayeBattlePushDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayeBattlePushDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayeBattlePushDefaultTypeInternal() {}
  union {
    PlayeBattlePush _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayeBattlePushDefaultTypeInternal _PlayeBattlePush_default_instance_;
PROTOBUF_CONSTEXPR TalentPush::TalentPush(
    ::_pbi::ConstantInitialized)
  : talentids_(){}
struct TalentPushDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TalentPushDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TalentPushDefaultTypeInternal() {}
  union {
    TalentPush _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TalentPushDefaultTypeInternal _TalentPush_default_instance_;
PROTOBUF_CONSTEXPR VipInfoPush::VipInfoPush(
    ::_pbi::ConstantInitialized)
  : lv_(0)
  , exp_(0)
  , sign_(0){}
struct VipInfoPushDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VipInfoPushDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VipInfoPushDefaultTypeInternal() {}
  union {
    VipInfoPush _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VipInfoPushDefaultTypeInternal _VipInfoPush_default_instance_;
PROTOBUF_CONSTEXPR VipActiveInfoPush::VipActiveInfoPush(
    ::_pbi::ConstantInitialized)
  : activeend_(0){}
struct VipActiveInfoPushDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VipActiveInfoPushDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VipActiveInfoPushDefaultTypeInternal() {}
  union {
    VipActiveInfoPush _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VipActiveInfoPushDefaultTypeInternal _VipActiveInfoPush_default_instance_;
PROTOBUF_CONSTEXPR SysTimePush::SysTimePush(
    ::_pbi::ConstantInitialized)
  : currtime_(int64_t{0}){}
struct SysTimePushDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SysTimePushDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SysTimePushDefaultTypeInternal() {}
  union {
    SysTimePush _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SysTimePushDefaultTypeInternal _SysTimePush_default_instance_;
PROTOBUF_CONSTEXPR GuidePush::GuidePush(
    ::_pbi::ConstantInitialized)
  : guide_(nullptr){}
struct GuidePushDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GuidePushDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GuidePushDefaultTypeInternal() {}
  union {
    GuidePush _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GuidePushDefaultTypeInternal _GuidePush_default_instance_;
static ::_pb::Metadata file_level_metadata_player_2eproto[35];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_player_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_player_2eproto = nullptr;

const uint32_t TableStruct_player_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::PlayerDTO, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayerDTO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerDTO, playerid_),
  PROTOBUF_FIELD_OFFSET(::PlayerDTO, name_),
  PROTOBUF_FIELD_OFFSET(::PlayerDTO, level_),
  PROTOBUF_FIELD_OFFSET(::PlayerDTO, properties_),
  PROTOBUF_FIELD_OFFSET(::PlayerDTO, language_),
  PROTOBUF_FIELD_OFFSET(::PlayerDTO, mapgridposition_),
  PROTOBUF_FIELD_OFFSET(::PlayerDTO, haschangedname_),
  PROTOBUF_FIELD_OFFSET(::PlayerDTO, icon_),
  4,
  0,
  5,
  ~0u,
  1,
  3,
  6,
  2,
  PROTOBUF_FIELD_OFFSET(::GuideDTO, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GuideDTO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GuideDTO, id_),
  PROTOBUF_FIELD_OFFSET(::GuideDTO, jump_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::UserAccountLoginRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UserAccountLoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserAccountLoginRequest, platform_),
  PROTOBUF_FIELD_OFFSET(::UserAccountLoginRequest, puid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::UserAccountLoginResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UserAccountLoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserAccountLoginResponse, playerid_),
  0,
  PROTOBUF_FIELD_OFFSET(::PlayerLoginRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayerLoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerLoginRequest, playerid_),
  0,
  PROTOBUF_FIELD_OFFSET(::PlayerLoginResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayerLoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerLoginResponse, sessionid_),
  PROTOBUF_FIELD_OFFSET(::PlayerLoginResponse, systime_),
  PROTOBUF_FIELD_OFFSET(::PlayerLoginResponse, timezoneoffset_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::PlayerReconnectRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayerReconnectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerReconnectRequest, sessionid_),
  PROTOBUF_FIELD_OFFSET(::PlayerReconnectRequest, lastpushid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::PlayerReconnectResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayerReconnectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerReconnectResponse, state_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlayerReloadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerReloadResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayerReloadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerReloadResponse, systime_),
  PROTOBUF_FIELD_OFFSET(::PlayerReloadResponse, timezoneoffset_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlayerHeartBeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerHeartBeatResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayerHeartBeatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerHeartBeatResponse, systime_),
  0,
  PROTOBUF_FIELD_OFFSET(::SetTalentRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SetTalentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SetTalentRequest, level_),
  PROTOBUF_FIELD_OFFSET(::SetTalentRequest, talentid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SetTalentResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SetTalentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SetTalentResponse, level_),
  PROTOBUF_FIELD_OFFSET(::SetTalentResponse, talentid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SetImageRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SetImageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SetImageRequest, image_),
  0,
  PROTOBUF_FIELD_OFFSET(::SetImageResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SetImageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SetImageResponse, image_),
  0,
  PROTOBUF_FIELD_OFFSET(::QueryLordInfoRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::QueryLordInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::QueryLordInfoRequest, playerid_),
  PROTOBUF_FIELD_OFFSET(::QueryLordInfoRequest, name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::QueryLordInfoResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::QueryLordInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::QueryLordInfoResponse, playerid_),
  PROTOBUF_FIELD_OFFSET(::QueryLordInfoResponse, nickname_),
  PROTOBUF_FIELD_OFFSET(::QueryLordInfoResponse, allianceid_),
  PROTOBUF_FIELD_OFFSET(::QueryLordInfoResponse, alliancename_),
  PROTOBUF_FIELD_OFFSET(::QueryLordInfoResponse, exp_),
  PROTOBUF_FIELD_OFFSET(::QueryLordInfoResponse, level_),
  PROTOBUF_FIELD_OFFSET(::QueryLordInfoResponse, isfriend_),
  PROTOBUF_FIELD_OFFSET(::QueryLordInfoResponse, image_),
  PROTOBUF_FIELD_OFFSET(::QueryLordInfoResponse, equipmentlist_),
  2,
  0,
  3,
  1,
  4,
  5,
  6,
  7,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::SetIconRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SetIconRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SetIconRequest, iconid_),
  PROTOBUF_FIELD_OFFSET(::SetIconRequest, oper_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SetIconResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SetIconResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SetIconResponse, iconid_),
  0,
  PROTOBUF_FIELD_OFFSET(::ChangeNameRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ChangeNameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChangeNameRequest, nickname_),
  PROTOBUF_FIELD_OFFSET(::ChangeNameRequest, useitem_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ChangeNameResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ChangeNameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChangeNameResponse, isavailable_),
  PROTOBUF_FIELD_OFFSET(::ChangeNameResponse, reward_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::SetGuideRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SetGuideRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SetGuideRequest, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::PlayerDataPush, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayerDataPush, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerDataPush, player_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlayerPropertyChangePush, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerPropertyChangePush, properties_),
  PROTOBUF_FIELD_OFFSET(::PlayerLevelUpPush, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayerLevelUpPush, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerLevelUpPush, level_),
  0,
  PROTOBUF_FIELD_OFFSET(::PlayerProtectPush, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayerProtectPush, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerProtectPush, bornprotectendtime_),
  PROTOBUF_FIELD_OFFSET(::PlayerProtectPush, atkprotectendtime_),
  PROTOBUF_FIELD_OFFSET(::PlayerProtectPush, spyprotectendtime_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::PlayerCount, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayerCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerCount, type_),
  PROTOBUF_FIELD_OFFSET(::PlayerCount, point_),
  PROTOBUF_FIELD_OFFSET(::PlayerCount, defcount_),
  PROTOBUF_FIELD_OFFSET(::PlayerCount, addcount_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlayerCountPush, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerCountPush, counts_),
  PROTOBUF_FIELD_OFFSET(::PlayeBattlePush, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayeBattlePush, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayeBattlePush, battlevalue_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TalentPush, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TalentPush, talentids_),
  PROTOBUF_FIELD_OFFSET(::VipInfoPush, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::VipInfoPush, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::VipInfoPush, lv_),
  PROTOBUF_FIELD_OFFSET(::VipInfoPush, exp_),
  PROTOBUF_FIELD_OFFSET(::VipInfoPush, sign_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::VipActiveInfoPush, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::VipActiveInfoPush, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::VipActiveInfoPush, activeend_),
  0,
  PROTOBUF_FIELD_OFFSET(::SysTimePush, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SysTimePush, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SysTimePush, currtime_),
  0,
  PROTOBUF_FIELD_OFFSET(::GuidePush, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GuidePush, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GuidePush, guide_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, -1, sizeof(::PlayerDTO)},
  { 22, 30, -1, sizeof(::GuideDTO)},
  { 32, 40, -1, sizeof(::UserAccountLoginRequest)},
  { 42, 49, -1, sizeof(::UserAccountLoginResponse)},
  { 50, 57, -1, sizeof(::PlayerLoginRequest)},
  { 58, 67, -1, sizeof(::PlayerLoginResponse)},
  { 70, 78, -1, sizeof(::PlayerReconnectRequest)},
  { 80, 87, -1, sizeof(::PlayerReconnectResponse)},
  { 88, -1, -1, sizeof(::PlayerReloadRequest)},
  { 94, 102, -1, sizeof(::PlayerReloadResponse)},
  { 104, -1, -1, sizeof(::PlayerHeartBeatRequest)},
  { 110, 117, -1, sizeof(::PlayerHeartBeatResponse)},
  { 118, 126, -1, sizeof(::SetTalentRequest)},
  { 128, 136, -1, sizeof(::SetTalentResponse)},
  { 138, 145, -1, sizeof(::SetImageRequest)},
  { 146, 153, -1, sizeof(::SetImageResponse)},
  { 154, 162, -1, sizeof(::QueryLordInfoRequest)},
  { 164, 179, -1, sizeof(::QueryLordInfoResponse)},
  { 188, 196, -1, sizeof(::SetIconRequest)},
  { 198, 205, -1, sizeof(::SetIconResponse)},
  { 206, 214, -1, sizeof(::ChangeNameRequest)},
  { 216, 224, -1, sizeof(::ChangeNameResponse)},
  { 226, 233, -1, sizeof(::SetGuideRequest)},
  { 234, 241, -1, sizeof(::PlayerDataPush)},
  { 242, -1, -1, sizeof(::PlayerPropertyChangePush)},
  { 249, 256, -1, sizeof(::PlayerLevelUpPush)},
  { 257, 266, -1, sizeof(::PlayerProtectPush)},
  { 269, 279, -1, sizeof(::PlayerCount)},
  { 283, -1, -1, sizeof(::PlayerCountPush)},
  { 290, 297, -1, sizeof(::PlayeBattlePush)},
  { 298, -1, -1, sizeof(::TalentPush)},
  { 305, 314, -1, sizeof(::VipInfoPush)},
  { 317, 324, -1, sizeof(::VipActiveInfoPush)},
  { 325, 332, -1, sizeof(::SysTimePush)},
  { 333, 340, -1, sizeof(::GuidePush)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_PlayerDTO_default_instance_._instance,
  &::_GuideDTO_default_instance_._instance,
  &::_UserAccountLoginRequest_default_instance_._instance,
  &::_UserAccountLoginResponse_default_instance_._instance,
  &::_PlayerLoginRequest_default_instance_._instance,
  &::_PlayerLoginResponse_default_instance_._instance,
  &::_PlayerReconnectRequest_default_instance_._instance,
  &::_PlayerReconnectResponse_default_instance_._instance,
  &::_PlayerReloadRequest_default_instance_._instance,
  &::_PlayerReloadResponse_default_instance_._instance,
  &::_PlayerHeartBeatRequest_default_instance_._instance,
  &::_PlayerHeartBeatResponse_default_instance_._instance,
  &::_SetTalentRequest_default_instance_._instance,
  &::_SetTalentResponse_default_instance_._instance,
  &::_SetImageRequest_default_instance_._instance,
  &::_SetImageResponse_default_instance_._instance,
  &::_QueryLordInfoRequest_default_instance_._instance,
  &::_QueryLordInfoResponse_default_instance_._instance,
  &::_SetIconRequest_default_instance_._instance,
  &::_SetIconResponse_default_instance_._instance,
  &::_ChangeNameRequest_default_instance_._instance,
  &::_ChangeNameResponse_default_instance_._instance,
  &::_SetGuideRequest_default_instance_._instance,
  &::_PlayerDataPush_default_instance_._instance,
  &::_PlayerPropertyChangePush_default_instance_._instance,
  &::_PlayerLevelUpPush_default_instance_._instance,
  &::_PlayerProtectPush_default_instance_._instance,
  &::_PlayerCount_default_instance_._instance,
  &::_PlayerCountPush_default_instance_._instance,
  &::_PlayeBattlePush_default_instance_._instance,
  &::_TalentPush_default_instance_._instance,
  &::_VipInfoPush_default_instance_._instance,
  &::_VipActiveInfoPush_default_instance_._instance,
  &::_SysTimePush_default_instance_._instance,
  &::_GuidePush_default_instance_._instance,
};

const char descriptor_table_protodef_player_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014player.proto\032\014common.proto\"\273\001\n\tPlayerD"
  "TO\022\020\n\010playerId\030\001 \002(\004\022\014\n\004name\030\002 \001(\t\022\r\n\005le"
  "vel\030\003 \002(\005\022 \n\nproperties\030\004 \003(\0132\014.Property"
  "DTO\022\020\n\010language\030\005 \001(\t\022%\n\017mapGridPosition"
  "\030\006 \002(\0132\014.PositionDTO\022\026\n\016hasChangedName\030\007"
  " \002(\010\022\014\n\004icon\030\010 \002(\t\"$\n\010GuideDTO\022\n\n\002id\030\002 \002"
  "(\005\022\014\n\004jump\030\003 \002(\010\"9\n\027UserAccountLoginRequ"
  "est\022\020\n\010platform\030\001 \002(\t\022\014\n\004puid\030\002 \002(\t\",\n\030U"
  "serAccountLoginResponse\022\020\n\010playerId\030\001 \002("
  "\004\"&\n\022PlayerLoginRequest\022\020\n\010playerId\030\001 \002("
  "\004\"Q\n\023PlayerLoginResponse\022\021\n\tsessionId\030\001 "
  "\002(\004\022\017\n\007systime\030\002 \002(\003\022\026\n\016timeZoneOffset\030\003"
  " \002(\005\"\?\n\026PlayerReconnectRequest\022\021\n\tsessio"
  "nId\030\001 \002(\004\022\022\n\nlastPushId\030\002 \002(\005\"9\n\027PlayerR"
  "econnectResponse\022\036\n\005state\030\001 \001(\0162\017.Reconn"
  "ectState\"\025\n\023PlayerReloadRequest\"\?\n\024Playe"
  "rReloadResponse\022\017\n\007systime\030\001 \002(\003\022\026\n\016time"
  "ZoneOffset\030\002 \002(\005\"\030\n\026PlayerHeartBeatReque"
  "st\"*\n\027PlayerHeartBeatResponse\022\017\n\007systime"
  "\030\001 \002(\003\"3\n\020SetTalentRequest\022\r\n\005level\030\001 \002("
  "\005\022\020\n\010talentId\030\002 \002(\005\"4\n\021SetTalentResponse"
  "\022\r\n\005level\030\001 \002(\005\022\020\n\010talentId\030\002 \002(\005\" \n\017Set"
  "ImageRequest\022\r\n\005image\030\001 \002(\005\"!\n\020SetImageR"
  "esponse\022\r\n\005image\030\002 \001(\005\"6\n\024QueryLordInfoR"
  "equest\022\020\n\010playerId\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\"\310"
  "\001\n\025QueryLordInfoResponse\022\020\n\010playerId\030\001 \001"
  "(\003\022\020\n\010nickname\030\002 \001(\t\022\022\n\nallianceid\030\003 \001(\005"
  "\022\024\n\014alliancename\030\004 \001(\t\022\013\n\003exp\030\005 \001(\005\022\r\n\005l"
  "evel\030\006 \001(\005\022\020\n\010isfriend\030\007 \001(\010\022\r\n\005image\030\010 "
  "\001(\005\022$\n\requipmentlist\030\t \003(\0132\r.EquipmentDT"
  "O\".\n\016SetIconRequest\022\016\n\006iconID\030\001 \002(\t\022\014\n\004o"
  "per\030\002 \002(\005\"!\n\017SetIconResponse\022\016\n\006iconID\030\002"
  " \001(\t\"6\n\021ChangeNameRequest\022\020\n\010nickname\030\001 "
  "\002(\t\022\017\n\007useItem\030\002 \002(\010\"G\n\022ChangeNameRespon"
  "se\022\023\n\013isAvailable\030\001 \002(\010\022\034\n\006reward\030\002 \001(\0132"
  "\014.PropertyDTO\"\035\n\017SetGuideRequest\022\n\n\002id\030\001"
  " \002(\005\",\n\016PlayerDataPush\022\032\n\006player\030\001 \002(\0132\n"
  ".PlayerDTO\"<\n\030PlayerPropertyChangePush\022 "
  "\n\nproperties\030\001 \003(\0132\014.PropertyDTO\"\"\n\021Play"
  "erLevelUpPush\022\r\n\005level\030\001 \002(\005\"e\n\021PlayerPr"
  "otectPush\022\032\n\022bornProtectEndTime\030\001 \002(\005\022\031\n"
  "\021atkProtectEndTime\030\002 \002(\005\022\031\n\021spyProtectEn"
  "dTime\030\003 \002(\005\"N\n\013PlayerCount\022\014\n\004type\030\001 \002(\005"
  "\022\r\n\005point\030\002 \002(\005\022\020\n\010defCount\030\003 \002(\005\022\020\n\010add"
  "Count\030\004 \001(\005\"/\n\017PlayerCountPush\022\034\n\006counts"
  "\030\001 \003(\0132\014.PlayerCount\"&\n\017PlayeBattlePush\022"
  "\023\n\013battleValue\030\001 \002(\005\"\037\n\nTalentPush\022\021\n\tta"
  "lentIds\030\001 \003(\005\"4\n\013VipInfoPush\022\n\n\002lv\030\001 \002(\005"
  "\022\013\n\003exp\030\002 \002(\005\022\014\n\004sign\030\003 \002(\005\"&\n\021VipActive"
  "InfoPush\022\021\n\tactiveEnd\030\001 \002(\005\"\037\n\013SysTimePu"
  "sh\022\020\n\010currTime\030\001 \002(\003\"%\n\tGuidePush\022\030\n\005gui"
  "de\030\001 \002(\0132\t.GuideDTO*\232\002\n\017PlayerCommandId\022"
  "\026\n\022USER_ACCOUNT_LOGIN\020d\022\020\n\014PLAYER_LOGIN\020"
  "e\022\024\n\020PLAYER_RECONNECT\020f\022\024\n\020PLAYRE_HEARTB"
  "EAT\020g\022\021\n\rPLAYRE_RELOAD\020h\022\025\n\021PLAYER_TALEN"
  "T_SET\020i\022\024\n\020PLAYER_IMAGE_SET\020j\022\027\n\023PLAYER_"
  "QUERY_PLAYER\020k\022\023\n\017PLAYER_ICON_SET\020l\022\026\n\022P"
  "LAYER_CHANGE_NAME\020m\022\024\n\020PLAYER_SET_GUIDE\020"
  "n\022\025\n\021PLAYER_JUMP_GUIDE\020o*7\n\016ReconnectSta"
  "te\022\014\n\010CONTINUE\020\001\022\n\n\006RELOAD\020\002\022\013\n\007RELOGIN\020"
  "\003*\345\002\n\014PlayerPushId\022\026\n\020PLAYRE_DATA_PUSH\020\265"
  "\207\003\022\032\n\024PROPERTY_CHANGE_PUSH\020\266\207\003\022\032\n\024PLAYER"
  "_LEVEL_UP_PUSH\020\267\207\003\022\031\n\023PLAYER_PROTECT_PUS"
  "H\020\270\207\003\022\024\n\016PLAYER_RELOGIN\020\276\207\003\022\027\n\021PLAYER_CO"
  "UNT_PUSH\020\310\207\003\022\030\n\022PLAYER_BATTLE_PUSH\020\311\207\003\022\030"
  "\n\022PLAYER_TALENT_PUSH\020\312\207\003\022\025\n\017PLAYER_VIP_P"
  "USH\020\313\207\003\022\034\n\026PLAYER_VIP_ACTIVE_PUSH\020\314\207\003\022\032\n"
  "\024PLAYER_SYS_TIME_PUSH\020\315\207\003\022\035\n\027PLAYER_ONLI"
  "NE_OTHER_DAY\020\316\207\003\022\027\n\021PLAYER_GUIDE_PUSH\020\317\207"
  "\003B\002H\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_player_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::_pbi::once_flag descriptor_table_player_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_player_2eproto = {
    false, false, 2765, descriptor_table_protodef_player_2eproto,
    "player.proto",
    &descriptor_table_player_2eproto_once, descriptor_table_player_2eproto_deps, 1, 35,
    schemas, file_default_instances, TableStruct_player_2eproto::offsets,
    file_level_metadata_player_2eproto, file_level_enum_descriptors_player_2eproto,
    file_level_service_descriptors_player_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_player_2eproto_getter() {
  return &descriptor_table_player_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_player_2eproto(&descriptor_table_player_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerCommandId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_player_2eproto);
  return file_level_enum_descriptors_player_2eproto[0];
}
bool PlayerCommandId_IsValid(int value) {
  switch (value) {
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReconnectState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_player_2eproto);
  return file_level_enum_descriptors_player_2eproto[1];
}
bool ReconnectState_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerPushId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_player_2eproto);
  return file_level_enum_descriptors_player_2eproto[2];
}
bool PlayerPushId_IsValid(int value) {
  switch (value) {
    case 50101:
    case 50102:
    case 50103:
    case 50104:
    case 50110:
    case 50120:
    case 50121:
    case 50122:
    case 50123:
    case 50124:
    case 50125:
    case 50126:
    case 50127:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class PlayerDTO::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerDTO>()._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PositionDTO& mapgridposition(const PlayerDTO* msg);
  static void set_has_mapgridposition(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_haschangedname(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007c) ^ 0x0000007c) != 0;
  }
};

const ::PositionDTO&
PlayerDTO::_Internal::mapgridposition(const PlayerDTO* msg) {
  return *msg->mapgridposition_;
}
void PlayerDTO::clear_properties() {
  properties_.Clear();
}
void PlayerDTO::clear_mapgridposition() {
  if (mapgridposition_ != nullptr) mapgridposition_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
PlayerDTO::PlayerDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  properties_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:PlayerDTO)
}
PlayerDTO::PlayerDTO(const PlayerDTO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      properties_(from.properties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_language()) {
    language_.Set(from._internal_language(), 
      GetArenaForAllocation());
  }
  icon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    icon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_icon()) {
    icon_.Set(from._internal_icon(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_mapgridposition()) {
    mapgridposition_ = new ::PositionDTO(*from.mapgridposition_);
  } else {
    mapgridposition_ = nullptr;
  }
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&haschangedname_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(haschangedname_));
  // @@protoc_insertion_point(copy_constructor:PlayerDTO)
}

inline void PlayerDTO::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
language_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  language_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
icon_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  icon_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mapgridposition_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&haschangedname_) -
    reinterpret_cast<char*>(&mapgridposition_)) + sizeof(haschangedname_));
}

PlayerDTO::~PlayerDTO() {
  // @@protoc_insertion_point(destructor:PlayerDTO)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerDTO::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  language_.Destroy();
  icon_.Destroy();
  if (this != internal_default_instance()) delete mapgridposition_;
}

void PlayerDTO::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerDTO::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerDTO)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      language_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      icon_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(mapgridposition_ != nullptr);
      mapgridposition_->Clear();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&playerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&haschangedname_) -
        reinterpret_cast<char*>(&playerid_)) + sizeof(haschangedname_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerDTO::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "PlayerDTO.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PropertyDTO properties = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string language = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "PlayerDTO.language");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .PositionDTO mapGridPosition = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_mapgridposition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool hasChangedName = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_haschangedname(&has_bits);
          haschangedname_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string icon = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_icon();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "PlayerDTO.icon");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerDTO::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerDTO)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 playerId = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_playerid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PlayerDTO.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // required int32 level = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_level(), target);
  }

  // repeated .PropertyDTO properties = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_properties_size()); i < n; i++) {
    const auto& repfield = this->_internal_properties(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string language = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PlayerDTO.language");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_language(), target);
  }

  // required .PositionDTO mapGridPosition = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::mapgridposition(this),
        _Internal::mapgridposition(this).GetCachedSize(), target, stream);
  }

  // required bool hasChangedName = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_haschangedname(), target);
  }

  // required string icon = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PlayerDTO.icon");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_icon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerDTO)
  return target;
}

size_t PlayerDTO::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PlayerDTO)
  size_t total_size = 0;

  if (_internal_has_icon()) {
    // required string icon = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icon());
  }

  if (_internal_has_mapgridposition()) {
    // required .PositionDTO mapGridPosition = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mapgridposition_);
  }

  if (_internal_has_playerid()) {
    // required uint64 playerId = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_playerid());
  }

  if (_internal_has_level()) {
    // required int32 level = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  if (_internal_has_haschangedname()) {
    // required bool hasChangedName = 7;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t PlayerDTO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerDTO)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007c) ^ 0x0000007c) == 0) {  // All required fields are present.
    // required string icon = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icon());

    // required .PositionDTO mapGridPosition = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mapgridposition_);

    // required uint64 playerId = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_playerid());

    // required int32 level = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());

    // required bool hasChangedName = 7;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PropertyDTO properties = 4;
  total_size += 1UL * this->_internal_properties_size();
  for (const auto& msg : this->properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string language = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerDTO::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerDTO::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerDTO::GetClassData() const { return &_class_data_; }

void PlayerDTO::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerDTO *>(to)->MergeFrom(
      static_cast<const PlayerDTO &>(from));
}


void PlayerDTO::MergeFrom(const PlayerDTO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerDTO)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_language(from._internal_language());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_icon(from._internal_icon());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_mapgridposition()->::PositionDTO::MergeFrom(from._internal_mapgridposition());
    }
    if (cached_has_bits & 0x00000010u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000020u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000040u) {
      haschangedname_ = from.haschangedname_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerDTO::CopyFrom(const PlayerDTO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerDTO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDTO::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(properties_))
    return false;
  if (_internal_has_mapgridposition()) {
    if (!mapgridposition_->IsInitialized()) return false;
  }
  return true;
}

void PlayerDTO::InternalSwap(PlayerDTO* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  properties_.InternalSwap(&other->properties_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &language_, lhs_arena,
      &other->language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &icon_, lhs_arena,
      &other->icon_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerDTO, haschangedname_)
      + sizeof(PlayerDTO::haschangedname_)
      - PROTOBUF_FIELD_OFFSET(PlayerDTO, mapgridposition_)>(
          reinterpret_cast<char*>(&mapgridposition_),
          reinterpret_cast<char*>(&other->mapgridposition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerDTO::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[0]);
}

// ===================================================================

class GuideDTO::_Internal {
 public:
  using HasBits = decltype(std::declval<GuideDTO>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_jump(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

GuideDTO::GuideDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:GuideDTO)
}
GuideDTO::GuideDTO(const GuideDTO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&jump_) -
    reinterpret_cast<char*>(&id_)) + sizeof(jump_));
  // @@protoc_insertion_point(copy_constructor:GuideDTO)
}

inline void GuideDTO::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&jump_) -
    reinterpret_cast<char*>(&id_)) + sizeof(jump_));
}

GuideDTO::~GuideDTO() {
  // @@protoc_insertion_point(destructor:GuideDTO)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GuideDTO::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GuideDTO::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GuideDTO::Clear() {
// @@protoc_insertion_point(message_clear_start:GuideDTO)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&jump_) -
        reinterpret_cast<char*>(&id_)) + sizeof(jump_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GuideDTO::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool jump = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_jump(&has_bits);
          jump_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GuideDTO::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GuideDTO)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // required bool jump = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_jump(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GuideDTO)
  return target;
}

size_t GuideDTO::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GuideDTO)
  size_t total_size = 0;

  if (_internal_has_id()) {
    // required int32 id = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  if (_internal_has_jump()) {
    // required bool jump = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t GuideDTO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GuideDTO)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 id = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());

    // required bool jump = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GuideDTO::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GuideDTO::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GuideDTO::GetClassData() const { return &_class_data_; }

void GuideDTO::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GuideDTO *>(to)->MergeFrom(
      static_cast<const GuideDTO &>(from));
}


void GuideDTO::MergeFrom(const GuideDTO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GuideDTO)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      jump_ = from.jump_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GuideDTO::CopyFrom(const GuideDTO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GuideDTO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuideDTO::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GuideDTO::InternalSwap(GuideDTO* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GuideDTO, jump_)
      + sizeof(GuideDTO::jump_)
      - PROTOBUF_FIELD_OFFSET(GuideDTO, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GuideDTO::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[1]);
}

// ===================================================================

class UserAccountLoginRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UserAccountLoginRequest>()._has_bits_);
  static void set_has_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_puid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

UserAccountLoginRequest::UserAccountLoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:UserAccountLoginRequest)
}
UserAccountLoginRequest::UserAccountLoginRequest(const UserAccountLoginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  platform_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    platform_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_platform()) {
    platform_.Set(from._internal_platform(), 
      GetArenaForAllocation());
  }
  puid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    puid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_puid()) {
    puid_.Set(from._internal_puid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:UserAccountLoginRequest)
}

inline void UserAccountLoginRequest::SharedCtor() {
platform_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  platform_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
puid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  puid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserAccountLoginRequest::~UserAccountLoginRequest() {
  // @@protoc_insertion_point(destructor:UserAccountLoginRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserAccountLoginRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  platform_.Destroy();
  puid_.Destroy();
}

void UserAccountLoginRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserAccountLoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:UserAccountLoginRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      platform_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      puid_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserAccountLoginRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string platform = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_platform();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "UserAccountLoginRequest.platform");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string puid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_puid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "UserAccountLoginRequest.puid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserAccountLoginRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserAccountLoginRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string platform = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_platform().data(), static_cast<int>(this->_internal_platform().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "UserAccountLoginRequest.platform");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_platform(), target);
  }

  // required string puid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_puid().data(), static_cast<int>(this->_internal_puid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "UserAccountLoginRequest.puid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_puid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserAccountLoginRequest)
  return target;
}

size_t UserAccountLoginRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:UserAccountLoginRequest)
  size_t total_size = 0;

  if (_internal_has_platform()) {
    // required string platform = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_platform());
  }

  if (_internal_has_puid()) {
    // required string puid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_puid());
  }

  return total_size;
}
size_t UserAccountLoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserAccountLoginRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string platform = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_platform());

    // required string puid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_puid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserAccountLoginRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserAccountLoginRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserAccountLoginRequest::GetClassData() const { return &_class_data_; }

void UserAccountLoginRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserAccountLoginRequest *>(to)->MergeFrom(
      static_cast<const UserAccountLoginRequest &>(from));
}


void UserAccountLoginRequest::MergeFrom(const UserAccountLoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserAccountLoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_platform(from._internal_platform());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_puid(from._internal_puid());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserAccountLoginRequest::CopyFrom(const UserAccountLoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserAccountLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAccountLoginRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UserAccountLoginRequest::InternalSwap(UserAccountLoginRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &platform_, lhs_arena,
      &other->platform_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &puid_, lhs_arena,
      &other->puid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserAccountLoginRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[2]);
}

// ===================================================================

class UserAccountLoginResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<UserAccountLoginResponse>()._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

UserAccountLoginResponse::UserAccountLoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:UserAccountLoginResponse)
}
UserAccountLoginResponse::UserAccountLoginResponse(const UserAccountLoginResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:UserAccountLoginResponse)
}

inline void UserAccountLoginResponse::SharedCtor() {
playerid_ = uint64_t{0u};
}

UserAccountLoginResponse::~UserAccountLoginResponse() {
  // @@protoc_insertion_point(destructor:UserAccountLoginResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserAccountLoginResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UserAccountLoginResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserAccountLoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:UserAccountLoginResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserAccountLoginResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserAccountLoginResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserAccountLoginResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 playerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserAccountLoginResponse)
  return target;
}

size_t UserAccountLoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserAccountLoginResponse)
  size_t total_size = 0;

  // required uint64 playerId = 1;
  if (_internal_has_playerid()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_playerid());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserAccountLoginResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserAccountLoginResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserAccountLoginResponse::GetClassData() const { return &_class_data_; }

void UserAccountLoginResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserAccountLoginResponse *>(to)->MergeFrom(
      static_cast<const UserAccountLoginResponse &>(from));
}


void UserAccountLoginResponse::MergeFrom(const UserAccountLoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserAccountLoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_playerid()) {
    _internal_set_playerid(from._internal_playerid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserAccountLoginResponse::CopyFrom(const UserAccountLoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserAccountLoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAccountLoginResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UserAccountLoginResponse::InternalSwap(UserAccountLoginResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(playerid_, other->playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserAccountLoginResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[3]);
}

// ===================================================================

class PlayerLoginRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerLoginRequest>()._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

PlayerLoginRequest::PlayerLoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:PlayerLoginRequest)
}
PlayerLoginRequest::PlayerLoginRequest(const PlayerLoginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:PlayerLoginRequest)
}

inline void PlayerLoginRequest::SharedCtor() {
playerid_ = uint64_t{0u};
}

PlayerLoginRequest::~PlayerLoginRequest() {
  // @@protoc_insertion_point(destructor:PlayerLoginRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerLoginRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerLoginRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerLoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerLoginRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerLoginRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerLoginRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerLoginRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 playerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerLoginRequest)
  return target;
}

size_t PlayerLoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerLoginRequest)
  size_t total_size = 0;

  // required uint64 playerId = 1;
  if (_internal_has_playerid()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_playerid());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerLoginRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerLoginRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerLoginRequest::GetClassData() const { return &_class_data_; }

void PlayerLoginRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerLoginRequest *>(to)->MergeFrom(
      static_cast<const PlayerLoginRequest &>(from));
}


void PlayerLoginRequest::MergeFrom(const PlayerLoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerLoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_playerid()) {
    _internal_set_playerid(from._internal_playerid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerLoginRequest::CopyFrom(const PlayerLoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLoginRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PlayerLoginRequest::InternalSwap(PlayerLoginRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(playerid_, other->playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerLoginRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[4]);
}

// ===================================================================

class PlayerLoginResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerLoginResponse>()._has_bits_);
  static void set_has_sessionid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_systime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timezoneoffset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

PlayerLoginResponse::PlayerLoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:PlayerLoginResponse)
}
PlayerLoginResponse::PlayerLoginResponse(const PlayerLoginResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sessionid_, &from.sessionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&timezoneoffset_) -
    reinterpret_cast<char*>(&sessionid_)) + sizeof(timezoneoffset_));
  // @@protoc_insertion_point(copy_constructor:PlayerLoginResponse)
}

inline void PlayerLoginResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sessionid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timezoneoffset_) -
    reinterpret_cast<char*>(&sessionid_)) + sizeof(timezoneoffset_));
}

PlayerLoginResponse::~PlayerLoginResponse() {
  // @@protoc_insertion_point(destructor:PlayerLoginResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerLoginResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerLoginResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerLoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerLoginResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&sessionid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timezoneoffset_) -
        reinterpret_cast<char*>(&sessionid_)) + sizeof(timezoneoffset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerLoginResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 sessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sessionid(&has_bits);
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 systime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_systime(&has_bits);
          systime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 timeZoneOffset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_timezoneoffset(&has_bits);
          timezoneoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerLoginResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerLoginResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 sessionId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sessionid(), target);
  }

  // required int64 systime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_systime(), target);
  }

  // required int32 timeZoneOffset = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_timezoneoffset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerLoginResponse)
  return target;
}

size_t PlayerLoginResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PlayerLoginResponse)
  size_t total_size = 0;

  if (_internal_has_sessionid()) {
    // required uint64 sessionId = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sessionid());
  }

  if (_internal_has_systime()) {
    // required int64 systime = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_systime());
  }

  if (_internal_has_timezoneoffset()) {
    // required int32 timeZoneOffset = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_timezoneoffset());
  }

  return total_size;
}
size_t PlayerLoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerLoginResponse)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint64 sessionId = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sessionid());

    // required int64 systime = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_systime());

    // required int32 timeZoneOffset = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_timezoneoffset());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerLoginResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerLoginResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerLoginResponse::GetClassData() const { return &_class_data_; }

void PlayerLoginResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerLoginResponse *>(to)->MergeFrom(
      static_cast<const PlayerLoginResponse &>(from));
}


void PlayerLoginResponse::MergeFrom(const PlayerLoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerLoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      sessionid_ = from.sessionid_;
    }
    if (cached_has_bits & 0x00000002u) {
      systime_ = from.systime_;
    }
    if (cached_has_bits & 0x00000004u) {
      timezoneoffset_ = from.timezoneoffset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerLoginResponse::CopyFrom(const PlayerLoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerLoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLoginResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PlayerLoginResponse::InternalSwap(PlayerLoginResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerLoginResponse, timezoneoffset_)
      + sizeof(PlayerLoginResponse::timezoneoffset_)
      - PROTOBUF_FIELD_OFFSET(PlayerLoginResponse, sessionid_)>(
          reinterpret_cast<char*>(&sessionid_),
          reinterpret_cast<char*>(&other->sessionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerLoginResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[5]);
}

// ===================================================================

class PlayerReconnectRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerReconnectRequest>()._has_bits_);
  static void set_has_sessionid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lastpushid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

PlayerReconnectRequest::PlayerReconnectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:PlayerReconnectRequest)
}
PlayerReconnectRequest::PlayerReconnectRequest(const PlayerReconnectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sessionid_, &from.sessionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&lastpushid_) -
    reinterpret_cast<char*>(&sessionid_)) + sizeof(lastpushid_));
  // @@protoc_insertion_point(copy_constructor:PlayerReconnectRequest)
}

inline void PlayerReconnectRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sessionid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lastpushid_) -
    reinterpret_cast<char*>(&sessionid_)) + sizeof(lastpushid_));
}

PlayerReconnectRequest::~PlayerReconnectRequest() {
  // @@protoc_insertion_point(destructor:PlayerReconnectRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerReconnectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerReconnectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerReconnectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerReconnectRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&sessionid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lastpushid_) -
        reinterpret_cast<char*>(&sessionid_)) + sizeof(lastpushid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerReconnectRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 sessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sessionid(&has_bits);
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 lastPushId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_lastpushid(&has_bits);
          lastpushid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerReconnectRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerReconnectRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 sessionId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sessionid(), target);
  }

  // required int32 lastPushId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_lastpushid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerReconnectRequest)
  return target;
}

size_t PlayerReconnectRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PlayerReconnectRequest)
  size_t total_size = 0;

  if (_internal_has_sessionid()) {
    // required uint64 sessionId = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sessionid());
  }

  if (_internal_has_lastpushid()) {
    // required int32 lastPushId = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lastpushid());
  }

  return total_size;
}
size_t PlayerReconnectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerReconnectRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 sessionId = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sessionid());

    // required int32 lastPushId = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lastpushid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerReconnectRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerReconnectRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerReconnectRequest::GetClassData() const { return &_class_data_; }

void PlayerReconnectRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerReconnectRequest *>(to)->MergeFrom(
      static_cast<const PlayerReconnectRequest &>(from));
}


void PlayerReconnectRequest::MergeFrom(const PlayerReconnectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerReconnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sessionid_ = from.sessionid_;
    }
    if (cached_has_bits & 0x00000002u) {
      lastpushid_ = from.lastpushid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerReconnectRequest::CopyFrom(const PlayerReconnectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerReconnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerReconnectRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PlayerReconnectRequest::InternalSwap(PlayerReconnectRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerReconnectRequest, lastpushid_)
      + sizeof(PlayerReconnectRequest::lastpushid_)
      - PROTOBUF_FIELD_OFFSET(PlayerReconnectRequest, sessionid_)>(
          reinterpret_cast<char*>(&sessionid_),
          reinterpret_cast<char*>(&other->sessionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerReconnectRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[6]);
}

// ===================================================================

class PlayerReconnectResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerReconnectResponse>()._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PlayerReconnectResponse::PlayerReconnectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:PlayerReconnectResponse)
}
PlayerReconnectResponse::PlayerReconnectResponse(const PlayerReconnectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:PlayerReconnectResponse)
}

inline void PlayerReconnectResponse::SharedCtor() {
state_ = 1;
}

PlayerReconnectResponse::~PlayerReconnectResponse() {
  // @@protoc_insertion_point(destructor:PlayerReconnectResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerReconnectResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerReconnectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerReconnectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerReconnectResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerReconnectResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ReconnectState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ReconnectState_IsValid(val))) {
            _internal_set_state(static_cast<::ReconnectState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerReconnectResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerReconnectResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ReconnectState state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerReconnectResponse)
  return target;
}

size_t PlayerReconnectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerReconnectResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ReconnectState state = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerReconnectResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerReconnectResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerReconnectResponse::GetClassData() const { return &_class_data_; }

void PlayerReconnectResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerReconnectResponse *>(to)->MergeFrom(
      static_cast<const PlayerReconnectResponse &>(from));
}


void PlayerReconnectResponse::MergeFrom(const PlayerReconnectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerReconnectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_state()) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerReconnectResponse::CopyFrom(const PlayerReconnectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerReconnectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerReconnectResponse::IsInitialized() const {
  return true;
}

void PlayerReconnectResponse::InternalSwap(PlayerReconnectResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerReconnectResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[7]);
}

// ===================================================================

class PlayerReloadRequest::_Internal {
 public:
};

PlayerReloadRequest::PlayerReloadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:PlayerReloadRequest)
}
PlayerReloadRequest::PlayerReloadRequest(const PlayerReloadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlayerReloadRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerReloadRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerReloadRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PlayerReloadRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[8]);
}

// ===================================================================

class PlayerReloadResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerReloadResponse>()._has_bits_);
  static void set_has_systime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timezoneoffset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

PlayerReloadResponse::PlayerReloadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:PlayerReloadResponse)
}
PlayerReloadResponse::PlayerReloadResponse(const PlayerReloadResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&systime_, &from.systime_,
    static_cast<size_t>(reinterpret_cast<char*>(&timezoneoffset_) -
    reinterpret_cast<char*>(&systime_)) + sizeof(timezoneoffset_));
  // @@protoc_insertion_point(copy_constructor:PlayerReloadResponse)
}

inline void PlayerReloadResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&systime_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timezoneoffset_) -
    reinterpret_cast<char*>(&systime_)) + sizeof(timezoneoffset_));
}

PlayerReloadResponse::~PlayerReloadResponse() {
  // @@protoc_insertion_point(destructor:PlayerReloadResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerReloadResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerReloadResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerReloadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerReloadResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&systime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timezoneoffset_) -
        reinterpret_cast<char*>(&systime_)) + sizeof(timezoneoffset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerReloadResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 systime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_systime(&has_bits);
          systime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 timeZoneOffset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_timezoneoffset(&has_bits);
          timezoneoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerReloadResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerReloadResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 systime = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_systime(), target);
  }

  // required int32 timeZoneOffset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_timezoneoffset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerReloadResponse)
  return target;
}

size_t PlayerReloadResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PlayerReloadResponse)
  size_t total_size = 0;

  if (_internal_has_systime()) {
    // required int64 systime = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_systime());
  }

  if (_internal_has_timezoneoffset()) {
    // required int32 timeZoneOffset = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_timezoneoffset());
  }

  return total_size;
}
size_t PlayerReloadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerReloadResponse)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 systime = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_systime());

    // required int32 timeZoneOffset = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_timezoneoffset());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerReloadResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerReloadResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerReloadResponse::GetClassData() const { return &_class_data_; }

void PlayerReloadResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerReloadResponse *>(to)->MergeFrom(
      static_cast<const PlayerReloadResponse &>(from));
}


void PlayerReloadResponse::MergeFrom(const PlayerReloadResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerReloadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      systime_ = from.systime_;
    }
    if (cached_has_bits & 0x00000002u) {
      timezoneoffset_ = from.timezoneoffset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerReloadResponse::CopyFrom(const PlayerReloadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerReloadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerReloadResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PlayerReloadResponse::InternalSwap(PlayerReloadResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerReloadResponse, timezoneoffset_)
      + sizeof(PlayerReloadResponse::timezoneoffset_)
      - PROTOBUF_FIELD_OFFSET(PlayerReloadResponse, systime_)>(
          reinterpret_cast<char*>(&systime_),
          reinterpret_cast<char*>(&other->systime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerReloadResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[9]);
}

// ===================================================================

class PlayerHeartBeatRequest::_Internal {
 public:
};

PlayerHeartBeatRequest::PlayerHeartBeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:PlayerHeartBeatRequest)
}
PlayerHeartBeatRequest::PlayerHeartBeatRequest(const PlayerHeartBeatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlayerHeartBeatRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerHeartBeatRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerHeartBeatRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PlayerHeartBeatRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[10]);
}

// ===================================================================

class PlayerHeartBeatResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerHeartBeatResponse>()._has_bits_);
  static void set_has_systime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

PlayerHeartBeatResponse::PlayerHeartBeatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:PlayerHeartBeatResponse)
}
PlayerHeartBeatResponse::PlayerHeartBeatResponse(const PlayerHeartBeatResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  systime_ = from.systime_;
  // @@protoc_insertion_point(copy_constructor:PlayerHeartBeatResponse)
}

inline void PlayerHeartBeatResponse::SharedCtor() {
systime_ = int64_t{0};
}

PlayerHeartBeatResponse::~PlayerHeartBeatResponse() {
  // @@protoc_insertion_point(destructor:PlayerHeartBeatResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerHeartBeatResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerHeartBeatResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerHeartBeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerHeartBeatResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  systime_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerHeartBeatResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 systime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_systime(&has_bits);
          systime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerHeartBeatResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerHeartBeatResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 systime = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_systime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerHeartBeatResponse)
  return target;
}

size_t PlayerHeartBeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerHeartBeatResponse)
  size_t total_size = 0;

  // required int64 systime = 1;
  if (_internal_has_systime()) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_systime());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerHeartBeatResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerHeartBeatResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerHeartBeatResponse::GetClassData() const { return &_class_data_; }

void PlayerHeartBeatResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerHeartBeatResponse *>(to)->MergeFrom(
      static_cast<const PlayerHeartBeatResponse &>(from));
}


void PlayerHeartBeatResponse::MergeFrom(const PlayerHeartBeatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerHeartBeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_systime()) {
    _internal_set_systime(from._internal_systime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerHeartBeatResponse::CopyFrom(const PlayerHeartBeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerHeartBeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerHeartBeatResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PlayerHeartBeatResponse::InternalSwap(PlayerHeartBeatResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(systime_, other->systime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerHeartBeatResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[11]);
}

// ===================================================================

class SetTalentRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SetTalentRequest>()._has_bits_);
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_talentid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SetTalentRequest::SetTalentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SetTalentRequest)
}
SetTalentRequest::SetTalentRequest(const SetTalentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&talentid_) -
    reinterpret_cast<char*>(&level_)) + sizeof(talentid_));
  // @@protoc_insertion_point(copy_constructor:SetTalentRequest)
}

inline void SetTalentRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&level_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&talentid_) -
    reinterpret_cast<char*>(&level_)) + sizeof(talentid_));
}

SetTalentRequest::~SetTalentRequest() {
  // @@protoc_insertion_point(destructor:SetTalentRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetTalentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetTalentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetTalentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SetTalentRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&talentid_) -
        reinterpret_cast<char*>(&level_)) + sizeof(talentid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetTalentRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 talentId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_talentid(&has_bits);
          talentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetTalentRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetTalentRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_level(), target);
  }

  // required int32 talentId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_talentid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetTalentRequest)
  return target;
}

size_t SetTalentRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SetTalentRequest)
  size_t total_size = 0;

  if (_internal_has_level()) {
    // required int32 level = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  if (_internal_has_talentid()) {
    // required int32 talentId = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_talentid());
  }

  return total_size;
}
size_t SetTalentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetTalentRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 level = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());

    // required int32 talentId = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_talentid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetTalentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetTalentRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetTalentRequest::GetClassData() const { return &_class_data_; }

void SetTalentRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetTalentRequest *>(to)->MergeFrom(
      static_cast<const SetTalentRequest &>(from));
}


void SetTalentRequest::MergeFrom(const SetTalentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetTalentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000002u) {
      talentid_ = from.talentid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetTalentRequest::CopyFrom(const SetTalentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetTalentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTalentRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SetTalentRequest::InternalSwap(SetTalentRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetTalentRequest, talentid_)
      + sizeof(SetTalentRequest::talentid_)
      - PROTOBUF_FIELD_OFFSET(SetTalentRequest, level_)>(
          reinterpret_cast<char*>(&level_),
          reinterpret_cast<char*>(&other->level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetTalentRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[12]);
}

// ===================================================================

class SetTalentResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetTalentResponse>()._has_bits_);
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_talentid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SetTalentResponse::SetTalentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SetTalentResponse)
}
SetTalentResponse::SetTalentResponse(const SetTalentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&talentid_) -
    reinterpret_cast<char*>(&level_)) + sizeof(talentid_));
  // @@protoc_insertion_point(copy_constructor:SetTalentResponse)
}

inline void SetTalentResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&level_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&talentid_) -
    reinterpret_cast<char*>(&level_)) + sizeof(talentid_));
}

SetTalentResponse::~SetTalentResponse() {
  // @@protoc_insertion_point(destructor:SetTalentResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetTalentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetTalentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetTalentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SetTalentResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&talentid_) -
        reinterpret_cast<char*>(&level_)) + sizeof(talentid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetTalentResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 talentId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_talentid(&has_bits);
          talentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetTalentResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetTalentResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_level(), target);
  }

  // required int32 talentId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_talentid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetTalentResponse)
  return target;
}

size_t SetTalentResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SetTalentResponse)
  size_t total_size = 0;

  if (_internal_has_level()) {
    // required int32 level = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  if (_internal_has_talentid()) {
    // required int32 talentId = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_talentid());
  }

  return total_size;
}
size_t SetTalentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetTalentResponse)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 level = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());

    // required int32 talentId = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_talentid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetTalentResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetTalentResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetTalentResponse::GetClassData() const { return &_class_data_; }

void SetTalentResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetTalentResponse *>(to)->MergeFrom(
      static_cast<const SetTalentResponse &>(from));
}


void SetTalentResponse::MergeFrom(const SetTalentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetTalentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000002u) {
      talentid_ = from.talentid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetTalentResponse::CopyFrom(const SetTalentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetTalentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTalentResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SetTalentResponse::InternalSwap(SetTalentResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetTalentResponse, talentid_)
      + sizeof(SetTalentResponse::talentid_)
      - PROTOBUF_FIELD_OFFSET(SetTalentResponse, level_)>(
          reinterpret_cast<char*>(&level_),
          reinterpret_cast<char*>(&other->level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetTalentResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[13]);
}

// ===================================================================

class SetImageRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SetImageRequest>()._has_bits_);
  static void set_has_image(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SetImageRequest::SetImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SetImageRequest)
}
SetImageRequest::SetImageRequest(const SetImageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  image_ = from.image_;
  // @@protoc_insertion_point(copy_constructor:SetImageRequest)
}

inline void SetImageRequest::SharedCtor() {
image_ = 0;
}

SetImageRequest::~SetImageRequest() {
  // @@protoc_insertion_point(destructor:SetImageRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetImageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetImageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetImageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SetImageRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetImageRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_image(&has_bits);
          image_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetImageRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetImageRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 image = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_image(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetImageRequest)
  return target;
}

size_t SetImageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetImageRequest)
  size_t total_size = 0;

  // required int32 image = 1;
  if (_internal_has_image()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_image());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetImageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetImageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetImageRequest::GetClassData() const { return &_class_data_; }

void SetImageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetImageRequest *>(to)->MergeFrom(
      static_cast<const SetImageRequest &>(from));
}


void SetImageRequest::MergeFrom(const SetImageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_image()) {
    _internal_set_image(from._internal_image());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetImageRequest::CopyFrom(const SetImageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetImageRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SetImageRequest::InternalSwap(SetImageRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(image_, other->image_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetImageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[14]);
}

// ===================================================================

class SetImageResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetImageResponse>()._has_bits_);
  static void set_has_image(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetImageResponse::SetImageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SetImageResponse)
}
SetImageResponse::SetImageResponse(const SetImageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  image_ = from.image_;
  // @@protoc_insertion_point(copy_constructor:SetImageResponse)
}

inline void SetImageResponse::SharedCtor() {
image_ = 0;
}

SetImageResponse::~SetImageResponse() {
  // @@protoc_insertion_point(destructor:SetImageResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetImageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetImageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetImageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SetImageResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetImageResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_image(&has_bits);
          image_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetImageResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetImageResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 image = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_image(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetImageResponse)
  return target;
}

size_t SetImageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetImageResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 image = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_image());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetImageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetImageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetImageResponse::GetClassData() const { return &_class_data_; }

void SetImageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetImageResponse *>(to)->MergeFrom(
      static_cast<const SetImageResponse &>(from));
}


void SetImageResponse::MergeFrom(const SetImageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetImageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_image()) {
    _internal_set_image(from._internal_image());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetImageResponse::CopyFrom(const SetImageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetImageResponse::IsInitialized() const {
  return true;
}

void SetImageResponse::InternalSwap(SetImageResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(image_, other->image_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetImageResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[15]);
}

// ===================================================================

class QueryLordInfoRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryLordInfoRequest>()._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

QueryLordInfoRequest::QueryLordInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:QueryLordInfoRequest)
}
QueryLordInfoRequest::QueryLordInfoRequest(const QueryLordInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:QueryLordInfoRequest)
}

inline void QueryLordInfoRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
playerid_ = int64_t{0};
}

QueryLordInfoRequest::~QueryLordInfoRequest() {
  // @@protoc_insertion_point(destructor:QueryLordInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryLordInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
}

void QueryLordInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryLordInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:QueryLordInfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  playerid_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryLordInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "QueryLordInfoRequest.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryLordInfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:QueryLordInfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 playerId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_playerid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "QueryLordInfoRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QueryLordInfoRequest)
  return target;
}

size_t QueryLordInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:QueryLordInfoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int64 playerId = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_playerid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryLordInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QueryLordInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryLordInfoRequest::GetClassData() const { return &_class_data_; }

void QueryLordInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QueryLordInfoRequest *>(to)->MergeFrom(
      static_cast<const QueryLordInfoRequest &>(from));
}


void QueryLordInfoRequest::MergeFrom(const QueryLordInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:QueryLordInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_ = from.playerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryLordInfoRequest::CopyFrom(const QueryLordInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QueryLordInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryLordInfoRequest::IsInitialized() const {
  return true;
}

void QueryLordInfoRequest::InternalSwap(QueryLordInfoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(playerid_, other->playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryLordInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[16]);
}

// ===================================================================

class QueryLordInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryLordInfoResponse>()._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_nickname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_allianceid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_alliancename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_exp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_isfriend(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_image(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

void QueryLordInfoResponse::clear_equipmentlist() {
  equipmentlist_.Clear();
}
QueryLordInfoResponse::QueryLordInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  equipmentlist_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:QueryLordInfoResponse)
}
QueryLordInfoResponse::QueryLordInfoResponse(const QueryLordInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      equipmentlist_(from.equipmentlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_nickname()) {
    nickname_.Set(from._internal_nickname(), 
      GetArenaForAllocation());
  }
  alliancename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    alliancename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_alliancename()) {
    alliancename_.Set(from._internal_alliancename(), 
      GetArenaForAllocation());
  }
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&image_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(image_));
  // @@protoc_insertion_point(copy_constructor:QueryLordInfoResponse)
}

inline void QueryLordInfoResponse::SharedCtor() {
nickname_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nickname_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
alliancename_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  alliancename_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&playerid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&image_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(image_));
}

QueryLordInfoResponse::~QueryLordInfoResponse() {
  // @@protoc_insertion_point(destructor:QueryLordInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryLordInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nickname_.Destroy();
  alliancename_.Destroy();
}

void QueryLordInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryLordInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:QueryLordInfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  equipmentlist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      nickname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      alliancename_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&playerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&image_) -
        reinterpret_cast<char*>(&playerid_)) + sizeof(image_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryLordInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "QueryLordInfoResponse.nickname");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 allianceid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_allianceid(&has_bits);
          allianceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string alliancename = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_alliancename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "QueryLordInfoResponse.alliancename");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 exp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_exp(&has_bits);
          exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool isfriend = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_isfriend(&has_bits);
          isfriend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 image = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_image(&has_bits);
          image_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .EquipmentDTO equipmentlist = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_equipmentlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryLordInfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:QueryLordInfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 playerId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_playerid(), target);
  }

  // optional string nickname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "QueryLordInfoResponse.nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // optional int32 allianceid = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_allianceid(), target);
  }

  // optional string alliancename = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_alliancename().data(), static_cast<int>(this->_internal_alliancename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "QueryLordInfoResponse.alliancename");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_alliancename(), target);
  }

  // optional int32 exp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_exp(), target);
  }

  // optional int32 level = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_level(), target);
  }

  // optional bool isfriend = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_isfriend(), target);
  }

  // optional int32 image = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_image(), target);
  }

  // repeated .EquipmentDTO equipmentlist = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_equipmentlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_equipmentlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QueryLordInfoResponse)
  return target;
}

size_t QueryLordInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:QueryLordInfoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .EquipmentDTO equipmentlist = 9;
  total_size += 1UL * this->_internal_equipmentlist_size();
  for (const auto& msg : this->equipmentlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string nickname = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nickname());
    }

    // optional string alliancename = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_alliancename());
    }

    // optional int64 playerId = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_playerid());
    }

    // optional int32 allianceid = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_allianceid());
    }

    // optional int32 exp = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_exp());
    }

    // optional int32 level = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
    }

    // optional bool isfriend = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional int32 image = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_image());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryLordInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QueryLordInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryLordInfoResponse::GetClassData() const { return &_class_data_; }

void QueryLordInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QueryLordInfoResponse *>(to)->MergeFrom(
      static_cast<const QueryLordInfoResponse &>(from));
}


void QueryLordInfoResponse::MergeFrom(const QueryLordInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:QueryLordInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  equipmentlist_.MergeFrom(from.equipmentlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_nickname(from._internal_nickname());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_alliancename(from._internal_alliancename());
    }
    if (cached_has_bits & 0x00000004u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000008u) {
      allianceid_ = from.allianceid_;
    }
    if (cached_has_bits & 0x00000010u) {
      exp_ = from.exp_;
    }
    if (cached_has_bits & 0x00000020u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000040u) {
      isfriend_ = from.isfriend_;
    }
    if (cached_has_bits & 0x00000080u) {
      image_ = from.image_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryLordInfoResponse::CopyFrom(const QueryLordInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QueryLordInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryLordInfoResponse::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(equipmentlist_))
    return false;
  return true;
}

void QueryLordInfoResponse::InternalSwap(QueryLordInfoResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  equipmentlist_.InternalSwap(&other->equipmentlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &nickname_, lhs_arena,
      &other->nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &alliancename_, lhs_arena,
      &other->alliancename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryLordInfoResponse, image_)
      + sizeof(QueryLordInfoResponse::image_)
      - PROTOBUF_FIELD_OFFSET(QueryLordInfoResponse, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryLordInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[17]);
}

// ===================================================================

class SetIconRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SetIconRequest>()._has_bits_);
  static void set_has_iconid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_oper(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SetIconRequest::SetIconRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SetIconRequest)
}
SetIconRequest::SetIconRequest(const SetIconRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  iconid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    iconid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_iconid()) {
    iconid_.Set(from._internal_iconid(), 
      GetArenaForAllocation());
  }
  oper_ = from.oper_;
  // @@protoc_insertion_point(copy_constructor:SetIconRequest)
}

inline void SetIconRequest::SharedCtor() {
iconid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  iconid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
oper_ = 0;
}

SetIconRequest::~SetIconRequest() {
  // @@protoc_insertion_point(destructor:SetIconRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetIconRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  iconid_.Destroy();
}

void SetIconRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetIconRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SetIconRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    iconid_.ClearNonDefaultToEmpty();
  }
  oper_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetIconRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string iconID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_iconid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SetIconRequest.iconID");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int32 oper = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_oper(&has_bits);
          oper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetIconRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetIconRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string iconID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_iconid().data(), static_cast<int>(this->_internal_iconid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SetIconRequest.iconID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_iconid(), target);
  }

  // required int32 oper = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_oper(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetIconRequest)
  return target;
}

size_t SetIconRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SetIconRequest)
  size_t total_size = 0;

  if (_internal_has_iconid()) {
    // required string iconID = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iconid());
  }

  if (_internal_has_oper()) {
    // required int32 oper = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_oper());
  }

  return total_size;
}
size_t SetIconRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetIconRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string iconID = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iconid());

    // required int32 oper = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_oper());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetIconRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetIconRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetIconRequest::GetClassData() const { return &_class_data_; }

void SetIconRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetIconRequest *>(to)->MergeFrom(
      static_cast<const SetIconRequest &>(from));
}


void SetIconRequest::MergeFrom(const SetIconRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetIconRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_iconid(from._internal_iconid());
    }
    if (cached_has_bits & 0x00000002u) {
      oper_ = from.oper_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetIconRequest::CopyFrom(const SetIconRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetIconRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetIconRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SetIconRequest::InternalSwap(SetIconRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &iconid_, lhs_arena,
      &other->iconid_, rhs_arena
  );
  swap(oper_, other->oper_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetIconRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[18]);
}

// ===================================================================

class SetIconResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetIconResponse>()._has_bits_);
  static void set_has_iconid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetIconResponse::SetIconResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SetIconResponse)
}
SetIconResponse::SetIconResponse(const SetIconResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  iconid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    iconid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_iconid()) {
    iconid_.Set(from._internal_iconid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SetIconResponse)
}

inline void SetIconResponse::SharedCtor() {
iconid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  iconid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetIconResponse::~SetIconResponse() {
  // @@protoc_insertion_point(destructor:SetIconResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetIconResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  iconid_.Destroy();
}

void SetIconResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetIconResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SetIconResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    iconid_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetIconResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string iconID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_iconid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SetIconResponse.iconID");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetIconResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetIconResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string iconID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_iconid().data(), static_cast<int>(this->_internal_iconid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SetIconResponse.iconID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_iconid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetIconResponse)
  return target;
}

size_t SetIconResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetIconResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string iconID = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iconid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetIconResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetIconResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetIconResponse::GetClassData() const { return &_class_data_; }

void SetIconResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetIconResponse *>(to)->MergeFrom(
      static_cast<const SetIconResponse &>(from));
}


void SetIconResponse::MergeFrom(const SetIconResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetIconResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_iconid()) {
    _internal_set_iconid(from._internal_iconid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetIconResponse::CopyFrom(const SetIconResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetIconResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetIconResponse::IsInitialized() const {
  return true;
}

void SetIconResponse::InternalSwap(SetIconResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &iconid_, lhs_arena,
      &other->iconid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SetIconResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[19]);
}

// ===================================================================

class ChangeNameRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangeNameRequest>()._has_bits_);
  static void set_has_nickname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_useitem(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ChangeNameRequest::ChangeNameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ChangeNameRequest)
}
ChangeNameRequest::ChangeNameRequest(const ChangeNameRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_nickname()) {
    nickname_.Set(from._internal_nickname(), 
      GetArenaForAllocation());
  }
  useitem_ = from.useitem_;
  // @@protoc_insertion_point(copy_constructor:ChangeNameRequest)
}

inline void ChangeNameRequest::SharedCtor() {
nickname_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nickname_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
useitem_ = false;
}

ChangeNameRequest::~ChangeNameRequest() {
  // @@protoc_insertion_point(destructor:ChangeNameRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChangeNameRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nickname_.Destroy();
}

void ChangeNameRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChangeNameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ChangeNameRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    nickname_.ClearNonDefaultToEmpty();
  }
  useitem_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeNameRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string nickname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ChangeNameRequest.nickname");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required bool useItem = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_useitem(&has_bits);
          useitem_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChangeNameRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChangeNameRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string nickname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ChangeNameRequest.nickname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nickname(), target);
  }

  // required bool useItem = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_useitem(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChangeNameRequest)
  return target;
}

size_t ChangeNameRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ChangeNameRequest)
  size_t total_size = 0;

  if (_internal_has_nickname()) {
    // required string nickname = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  if (_internal_has_useitem()) {
    // required bool useItem = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ChangeNameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChangeNameRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string nickname = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());

    // required bool useItem = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChangeNameRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChangeNameRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChangeNameRequest::GetClassData() const { return &_class_data_; }

void ChangeNameRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChangeNameRequest *>(to)->MergeFrom(
      static_cast<const ChangeNameRequest &>(from));
}


void ChangeNameRequest::MergeFrom(const ChangeNameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChangeNameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_nickname(from._internal_nickname());
    }
    if (cached_has_bits & 0x00000002u) {
      useitem_ = from.useitem_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChangeNameRequest::CopyFrom(const ChangeNameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChangeNameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeNameRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ChangeNameRequest::InternalSwap(ChangeNameRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &nickname_, lhs_arena,
      &other->nickname_, rhs_arena
  );
  swap(useitem_, other->useitem_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeNameRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[20]);
}

// ===================================================================

class ChangeNameResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangeNameResponse>()._has_bits_);
  static void set_has_isavailable(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PropertyDTO& reward(const ChangeNameResponse* msg);
  static void set_has_reward(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::PropertyDTO&
ChangeNameResponse::_Internal::reward(const ChangeNameResponse* msg) {
  return *msg->reward_;
}
void ChangeNameResponse::clear_reward() {
  if (reward_ != nullptr) reward_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ChangeNameResponse::ChangeNameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ChangeNameResponse)
}
ChangeNameResponse::ChangeNameResponse(const ChangeNameResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reward()) {
    reward_ = new ::PropertyDTO(*from.reward_);
  } else {
    reward_ = nullptr;
  }
  isavailable_ = from.isavailable_;
  // @@protoc_insertion_point(copy_constructor:ChangeNameResponse)
}

inline void ChangeNameResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reward_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&isavailable_) -
    reinterpret_cast<char*>(&reward_)) + sizeof(isavailable_));
}

ChangeNameResponse::~ChangeNameResponse() {
  // @@protoc_insertion_point(destructor:ChangeNameResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChangeNameResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete reward_;
}

void ChangeNameResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChangeNameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ChangeNameResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(reward_ != nullptr);
    reward_->Clear();
  }
  isavailable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeNameResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool isAvailable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_isavailable(&has_bits);
          isavailable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PropertyDTO reward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChangeNameResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChangeNameResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool isAvailable = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_isavailable(), target);
  }

  // optional .PropertyDTO reward = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::reward(this),
        _Internal::reward(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChangeNameResponse)
  return target;
}

size_t ChangeNameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChangeNameResponse)
  size_t total_size = 0;

  // required bool isAvailable = 1;
  if (_internal_has_isavailable()) {
    total_size += 1 + 1;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PropertyDTO reward = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reward_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChangeNameResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChangeNameResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChangeNameResponse::GetClassData() const { return &_class_data_; }

void ChangeNameResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChangeNameResponse *>(to)->MergeFrom(
      static_cast<const ChangeNameResponse &>(from));
}


void ChangeNameResponse::MergeFrom(const ChangeNameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChangeNameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_reward()->::PropertyDTO::MergeFrom(from._internal_reward());
    }
    if (cached_has_bits & 0x00000002u) {
      isavailable_ = from.isavailable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChangeNameResponse::CopyFrom(const ChangeNameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChangeNameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeNameResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_reward()) {
    if (!reward_->IsInitialized()) return false;
  }
  return true;
}

void ChangeNameResponse::InternalSwap(ChangeNameResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangeNameResponse, isavailable_)
      + sizeof(ChangeNameResponse::isavailable_)
      - PROTOBUF_FIELD_OFFSET(ChangeNameResponse, reward_)>(
          reinterpret_cast<char*>(&reward_),
          reinterpret_cast<char*>(&other->reward_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeNameResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[21]);
}

// ===================================================================

class SetGuideRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SetGuideRequest>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SetGuideRequest::SetGuideRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SetGuideRequest)
}
SetGuideRequest::SetGuideRequest(const SetGuideRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:SetGuideRequest)
}

inline void SetGuideRequest::SharedCtor() {
id_ = 0;
}

SetGuideRequest::~SetGuideRequest() {
  // @@protoc_insertion_point(destructor:SetGuideRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetGuideRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetGuideRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetGuideRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SetGuideRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetGuideRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetGuideRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetGuideRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetGuideRequest)
  return target;
}

size_t SetGuideRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetGuideRequest)
  size_t total_size = 0;

  // required int32 id = 1;
  if (_internal_has_id()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetGuideRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetGuideRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetGuideRequest::GetClassData() const { return &_class_data_; }

void SetGuideRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetGuideRequest *>(to)->MergeFrom(
      static_cast<const SetGuideRequest &>(from));
}


void SetGuideRequest::MergeFrom(const SetGuideRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetGuideRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetGuideRequest::CopyFrom(const SetGuideRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetGuideRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetGuideRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SetGuideRequest::InternalSwap(SetGuideRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetGuideRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[22]);
}

// ===================================================================

class PlayerDataPush::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerDataPush>()._has_bits_);
  static const ::PlayerDTO& player(const PlayerDataPush* msg);
  static void set_has_player(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::PlayerDTO&
PlayerDataPush::_Internal::player(const PlayerDataPush* msg) {
  return *msg->player_;
}
PlayerDataPush::PlayerDataPush(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:PlayerDataPush)
}
PlayerDataPush::PlayerDataPush(const PlayerDataPush& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    player_ = new ::PlayerDTO(*from.player_);
  } else {
    player_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PlayerDataPush)
}

inline void PlayerDataPush::SharedCtor() {
player_ = nullptr;
}

PlayerDataPush::~PlayerDataPush() {
  // @@protoc_insertion_point(destructor:PlayerDataPush)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerDataPush::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_;
}

void PlayerDataPush::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerDataPush::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerDataPush)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(player_ != nullptr);
    player_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerDataPush::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .PlayerDTO player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerDataPush::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerDataPush)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .PlayerDTO player = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerDataPush)
  return target;
}

size_t PlayerDataPush::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerDataPush)
  size_t total_size = 0;

  // required .PlayerDTO player = 1;
  if (_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerDataPush::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerDataPush::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerDataPush::GetClassData() const { return &_class_data_; }

void PlayerDataPush::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerDataPush *>(to)->MergeFrom(
      static_cast<const PlayerDataPush &>(from));
}


void PlayerDataPush::MergeFrom(const PlayerDataPush& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerDataPush)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _internal_mutable_player()->::PlayerDTO::MergeFrom(from._internal_player());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerDataPush::CopyFrom(const PlayerDataPush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerDataPush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDataPush::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_player()) {
    if (!player_->IsInitialized()) return false;
  }
  return true;
}

void PlayerDataPush::InternalSwap(PlayerDataPush* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(player_, other->player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerDataPush::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[23]);
}

// ===================================================================

class PlayerPropertyChangePush::_Internal {
 public:
};

void PlayerPropertyChangePush::clear_properties() {
  properties_.Clear();
}
PlayerPropertyChangePush::PlayerPropertyChangePush(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  properties_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:PlayerPropertyChangePush)
}
PlayerPropertyChangePush::PlayerPropertyChangePush(const PlayerPropertyChangePush& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      properties_(from.properties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlayerPropertyChangePush)
}

inline void PlayerPropertyChangePush::SharedCtor() {
}

PlayerPropertyChangePush::~PlayerPropertyChangePush() {
  // @@protoc_insertion_point(destructor:PlayerPropertyChangePush)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerPropertyChangePush::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerPropertyChangePush::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerPropertyChangePush::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerPropertyChangePush)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerPropertyChangePush::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .PropertyDTO properties = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerPropertyChangePush::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerPropertyChangePush)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PropertyDTO properties = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_properties_size()); i < n; i++) {
    const auto& repfield = this->_internal_properties(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerPropertyChangePush)
  return target;
}

size_t PlayerPropertyChangePush::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerPropertyChangePush)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PropertyDTO properties = 1;
  total_size += 1UL * this->_internal_properties_size();
  for (const auto& msg : this->properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerPropertyChangePush::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerPropertyChangePush::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerPropertyChangePush::GetClassData() const { return &_class_data_; }

void PlayerPropertyChangePush::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerPropertyChangePush *>(to)->MergeFrom(
      static_cast<const PlayerPropertyChangePush &>(from));
}


void PlayerPropertyChangePush::MergeFrom(const PlayerPropertyChangePush& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerPropertyChangePush)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerPropertyChangePush::CopyFrom(const PlayerPropertyChangePush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerPropertyChangePush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerPropertyChangePush::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(properties_))
    return false;
  return true;
}

void PlayerPropertyChangePush::InternalSwap(PlayerPropertyChangePush* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  properties_.InternalSwap(&other->properties_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerPropertyChangePush::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[24]);
}

// ===================================================================

class PlayerLevelUpPush::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerLevelUpPush>()._has_bits_);
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

PlayerLevelUpPush::PlayerLevelUpPush(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:PlayerLevelUpPush)
}
PlayerLevelUpPush::PlayerLevelUpPush(const PlayerLevelUpPush& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:PlayerLevelUpPush)
}

inline void PlayerLevelUpPush::SharedCtor() {
level_ = 0;
}

PlayerLevelUpPush::~PlayerLevelUpPush() {
  // @@protoc_insertion_point(destructor:PlayerLevelUpPush)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerLevelUpPush::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerLevelUpPush::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerLevelUpPush::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerLevelUpPush)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  level_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerLevelUpPush::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerLevelUpPush::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerLevelUpPush)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerLevelUpPush)
  return target;
}

size_t PlayerLevelUpPush::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerLevelUpPush)
  size_t total_size = 0;

  // required int32 level = 1;
  if (_internal_has_level()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerLevelUpPush::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerLevelUpPush::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerLevelUpPush::GetClassData() const { return &_class_data_; }

void PlayerLevelUpPush::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerLevelUpPush *>(to)->MergeFrom(
      static_cast<const PlayerLevelUpPush &>(from));
}


void PlayerLevelUpPush::MergeFrom(const PlayerLevelUpPush& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerLevelUpPush)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_level()) {
    _internal_set_level(from._internal_level());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerLevelUpPush::CopyFrom(const PlayerLevelUpPush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerLevelUpPush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLevelUpPush::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PlayerLevelUpPush::InternalSwap(PlayerLevelUpPush* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerLevelUpPush::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[25]);
}

// ===================================================================

class PlayerProtectPush::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerProtectPush>()._has_bits_);
  static void set_has_bornprotectendtime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_atkprotectendtime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_spyprotectendtime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

PlayerProtectPush::PlayerProtectPush(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:PlayerProtectPush)
}
PlayerProtectPush::PlayerProtectPush(const PlayerProtectPush& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bornprotectendtime_, &from.bornprotectendtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&spyprotectendtime_) -
    reinterpret_cast<char*>(&bornprotectendtime_)) + sizeof(spyprotectendtime_));
  // @@protoc_insertion_point(copy_constructor:PlayerProtectPush)
}

inline void PlayerProtectPush::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bornprotectendtime_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&spyprotectendtime_) -
    reinterpret_cast<char*>(&bornprotectendtime_)) + sizeof(spyprotectendtime_));
}

PlayerProtectPush::~PlayerProtectPush() {
  // @@protoc_insertion_point(destructor:PlayerProtectPush)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerProtectPush::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerProtectPush::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerProtectPush::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerProtectPush)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&bornprotectendtime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&spyprotectendtime_) -
        reinterpret_cast<char*>(&bornprotectendtime_)) + sizeof(spyprotectendtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerProtectPush::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 bornProtectEndTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_bornprotectendtime(&has_bits);
          bornprotectendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 atkProtectEndTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_atkprotectendtime(&has_bits);
          atkprotectendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 spyProtectEndTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_spyprotectendtime(&has_bits);
          spyprotectendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerProtectPush::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerProtectPush)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 bornProtectEndTime = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_bornprotectendtime(), target);
  }

  // required int32 atkProtectEndTime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_atkprotectendtime(), target);
  }

  // required int32 spyProtectEndTime = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_spyprotectendtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerProtectPush)
  return target;
}

size_t PlayerProtectPush::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PlayerProtectPush)
  size_t total_size = 0;

  if (_internal_has_bornprotectendtime()) {
    // required int32 bornProtectEndTime = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bornprotectendtime());
  }

  if (_internal_has_atkprotectendtime()) {
    // required int32 atkProtectEndTime = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_atkprotectendtime());
  }

  if (_internal_has_spyprotectendtime()) {
    // required int32 spyProtectEndTime = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_spyprotectendtime());
  }

  return total_size;
}
size_t PlayerProtectPush::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerProtectPush)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 bornProtectEndTime = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bornprotectendtime());

    // required int32 atkProtectEndTime = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_atkprotectendtime());

    // required int32 spyProtectEndTime = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_spyprotectendtime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerProtectPush::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerProtectPush::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerProtectPush::GetClassData() const { return &_class_data_; }

void PlayerProtectPush::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerProtectPush *>(to)->MergeFrom(
      static_cast<const PlayerProtectPush &>(from));
}


void PlayerProtectPush::MergeFrom(const PlayerProtectPush& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerProtectPush)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      bornprotectendtime_ = from.bornprotectendtime_;
    }
    if (cached_has_bits & 0x00000002u) {
      atkprotectendtime_ = from.atkprotectendtime_;
    }
    if (cached_has_bits & 0x00000004u) {
      spyprotectendtime_ = from.spyprotectendtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerProtectPush::CopyFrom(const PlayerProtectPush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerProtectPush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerProtectPush::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PlayerProtectPush::InternalSwap(PlayerProtectPush* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerProtectPush, spyprotectendtime_)
      + sizeof(PlayerProtectPush::spyprotectendtime_)
      - PROTOBUF_FIELD_OFFSET(PlayerProtectPush, bornprotectendtime_)>(
          reinterpret_cast<char*>(&bornprotectendtime_),
          reinterpret_cast<char*>(&other->bornprotectendtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerProtectPush::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[26]);
}

// ===================================================================

class PlayerCount::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerCount>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_point(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_defcount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_addcount(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

PlayerCount::PlayerCount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:PlayerCount)
}
PlayerCount::PlayerCount(const PlayerCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&addcount_) -
    reinterpret_cast<char*>(&type_)) + sizeof(addcount_));
  // @@protoc_insertion_point(copy_constructor:PlayerCount)
}

inline void PlayerCount::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&addcount_) -
    reinterpret_cast<char*>(&type_)) + sizeof(addcount_));
}

PlayerCount::~PlayerCount() {
  // @@protoc_insertion_point(destructor:PlayerCount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerCount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerCount::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerCount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&addcount_) -
        reinterpret_cast<char*>(&type_)) + sizeof(addcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerCount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_point(&has_bits);
          point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 defCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_defcount(&has_bits);
          defcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 addCount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_addcount(&has_bits);
          addcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerCount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerCount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // required int32 point = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_point(), target);
  }

  // required int32 defCount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_defcount(), target);
  }

  // optional int32 addCount = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_addcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerCount)
  return target;
}

size_t PlayerCount::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PlayerCount)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required int32 type = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  if (_internal_has_point()) {
    // required int32 point = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_point());
  }

  if (_internal_has_defcount()) {
    // required int32 defCount = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_defcount());
  }

  return total_size;
}
size_t PlayerCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerCount)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 type = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());

    // required int32 point = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_point());

    // required int32 defCount = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_defcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 addCount = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_addcount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerCount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerCount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerCount::GetClassData() const { return &_class_data_; }

void PlayerCount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerCount *>(to)->MergeFrom(
      static_cast<const PlayerCount &>(from));
}


void PlayerCount::MergeFrom(const PlayerCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerCount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      point_ = from.point_;
    }
    if (cached_has_bits & 0x00000004u) {
      defcount_ = from.defcount_;
    }
    if (cached_has_bits & 0x00000008u) {
      addcount_ = from.addcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerCount::CopyFrom(const PlayerCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerCount::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PlayerCount::InternalSwap(PlayerCount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerCount, addcount_)
      + sizeof(PlayerCount::addcount_)
      - PROTOBUF_FIELD_OFFSET(PlayerCount, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerCount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[27]);
}

// ===================================================================

class PlayerCountPush::_Internal {
 public:
};

PlayerCountPush::PlayerCountPush(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  counts_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:PlayerCountPush)
}
PlayerCountPush::PlayerCountPush(const PlayerCountPush& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      counts_(from.counts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlayerCountPush)
}

inline void PlayerCountPush::SharedCtor() {
}

PlayerCountPush::~PlayerCountPush() {
  // @@protoc_insertion_point(destructor:PlayerCountPush)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerCountPush::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerCountPush::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerCountPush::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerCountPush)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  counts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerCountPush::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .PlayerCount counts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_counts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerCountPush::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerCountPush)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlayerCount counts = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_counts_size()); i < n; i++) {
    const auto& repfield = this->_internal_counts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerCountPush)
  return target;
}

size_t PlayerCountPush::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerCountPush)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlayerCount counts = 1;
  total_size += 1UL * this->_internal_counts_size();
  for (const auto& msg : this->counts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerCountPush::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerCountPush::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerCountPush::GetClassData() const { return &_class_data_; }

void PlayerCountPush::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerCountPush *>(to)->MergeFrom(
      static_cast<const PlayerCountPush &>(from));
}


void PlayerCountPush::MergeFrom(const PlayerCountPush& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerCountPush)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  counts_.MergeFrom(from.counts_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerCountPush::CopyFrom(const PlayerCountPush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerCountPush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerCountPush::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(counts_))
    return false;
  return true;
}

void PlayerCountPush::InternalSwap(PlayerCountPush* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  counts_.InternalSwap(&other->counts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerCountPush::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[28]);
}

// ===================================================================

class PlayeBattlePush::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayeBattlePush>()._has_bits_);
  static void set_has_battlevalue(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

PlayeBattlePush::PlayeBattlePush(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:PlayeBattlePush)
}
PlayeBattlePush::PlayeBattlePush(const PlayeBattlePush& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  battlevalue_ = from.battlevalue_;
  // @@protoc_insertion_point(copy_constructor:PlayeBattlePush)
}

inline void PlayeBattlePush::SharedCtor() {
battlevalue_ = 0;
}

PlayeBattlePush::~PlayeBattlePush() {
  // @@protoc_insertion_point(destructor:PlayeBattlePush)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayeBattlePush::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayeBattlePush::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayeBattlePush::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayeBattlePush)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  battlevalue_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayeBattlePush::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 battleValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_battlevalue(&has_bits);
          battlevalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayeBattlePush::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayeBattlePush)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 battleValue = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_battlevalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayeBattlePush)
  return target;
}

size_t PlayeBattlePush::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayeBattlePush)
  size_t total_size = 0;

  // required int32 battleValue = 1;
  if (_internal_has_battlevalue()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_battlevalue());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayeBattlePush::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayeBattlePush::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayeBattlePush::GetClassData() const { return &_class_data_; }

void PlayeBattlePush::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayeBattlePush *>(to)->MergeFrom(
      static_cast<const PlayeBattlePush &>(from));
}


void PlayeBattlePush::MergeFrom(const PlayeBattlePush& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayeBattlePush)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_battlevalue()) {
    _internal_set_battlevalue(from._internal_battlevalue());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayeBattlePush::CopyFrom(const PlayeBattlePush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayeBattlePush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayeBattlePush::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PlayeBattlePush::InternalSwap(PlayeBattlePush* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(battlevalue_, other->battlevalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayeBattlePush::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[29]);
}

// ===================================================================

class TalentPush::_Internal {
 public:
};

TalentPush::TalentPush(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  talentids_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:TalentPush)
}
TalentPush::TalentPush(const TalentPush& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      talentids_(from.talentids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TalentPush)
}

inline void TalentPush::SharedCtor() {
}

TalentPush::~TalentPush() {
  // @@protoc_insertion_point(destructor:TalentPush)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TalentPush::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TalentPush::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TalentPush::Clear() {
// @@protoc_insertion_point(message_clear_start:TalentPush)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  talentids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TalentPush::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 talentIds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_talentids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_talentids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TalentPush::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TalentPush)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 talentIds = 1;
  for (int i = 0, n = this->_internal_talentids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_talentids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TalentPush)
  return target;
}

size_t TalentPush::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TalentPush)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 talentIds = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->talentids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_talentids_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TalentPush::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TalentPush::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TalentPush::GetClassData() const { return &_class_data_; }

void TalentPush::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TalentPush *>(to)->MergeFrom(
      static_cast<const TalentPush &>(from));
}


void TalentPush::MergeFrom(const TalentPush& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TalentPush)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  talentids_.MergeFrom(from.talentids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TalentPush::CopyFrom(const TalentPush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TalentPush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalentPush::IsInitialized() const {
  return true;
}

void TalentPush::InternalSwap(TalentPush* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  talentids_.InternalSwap(&other->talentids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TalentPush::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[30]);
}

// ===================================================================

class VipInfoPush::_Internal {
 public:
  using HasBits = decltype(std::declval<VipInfoPush>()._has_bits_);
  static void set_has_lv(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_exp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sign(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

VipInfoPush::VipInfoPush(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:VipInfoPush)
}
VipInfoPush::VipInfoPush(const VipInfoPush& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lv_, &from.lv_,
    static_cast<size_t>(reinterpret_cast<char*>(&sign_) -
    reinterpret_cast<char*>(&lv_)) + sizeof(sign_));
  // @@protoc_insertion_point(copy_constructor:VipInfoPush)
}

inline void VipInfoPush::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lv_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sign_) -
    reinterpret_cast<char*>(&lv_)) + sizeof(sign_));
}

VipInfoPush::~VipInfoPush() {
  // @@protoc_insertion_point(destructor:VipInfoPush)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VipInfoPush::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VipInfoPush::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VipInfoPush::Clear() {
// @@protoc_insertion_point(message_clear_start:VipInfoPush)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&lv_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sign_) -
        reinterpret_cast<char*>(&lv_)) + sizeof(sign_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VipInfoPush::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 lv = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_lv(&has_bits);
          lv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 exp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_exp(&has_bits);
          exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 sign = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_sign(&has_bits);
          sign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VipInfoPush::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VipInfoPush)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 lv = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_lv(), target);
  }

  // required int32 exp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_exp(), target);
  }

  // required int32 sign = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_sign(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VipInfoPush)
  return target;
}

size_t VipInfoPush::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:VipInfoPush)
  size_t total_size = 0;

  if (_internal_has_lv()) {
    // required int32 lv = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lv());
  }

  if (_internal_has_exp()) {
    // required int32 exp = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_exp());
  }

  if (_internal_has_sign()) {
    // required int32 sign = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sign());
  }

  return total_size;
}
size_t VipInfoPush::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VipInfoPush)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 lv = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lv());

    // required int32 exp = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_exp());

    // required int32 sign = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sign());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VipInfoPush::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VipInfoPush::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VipInfoPush::GetClassData() const { return &_class_data_; }

void VipInfoPush::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VipInfoPush *>(to)->MergeFrom(
      static_cast<const VipInfoPush &>(from));
}


void VipInfoPush::MergeFrom(const VipInfoPush& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VipInfoPush)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      lv_ = from.lv_;
    }
    if (cached_has_bits & 0x00000002u) {
      exp_ = from.exp_;
    }
    if (cached_has_bits & 0x00000004u) {
      sign_ = from.sign_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VipInfoPush::CopyFrom(const VipInfoPush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VipInfoPush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VipInfoPush::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void VipInfoPush::InternalSwap(VipInfoPush* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VipInfoPush, sign_)
      + sizeof(VipInfoPush::sign_)
      - PROTOBUF_FIELD_OFFSET(VipInfoPush, lv_)>(
          reinterpret_cast<char*>(&lv_),
          reinterpret_cast<char*>(&other->lv_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VipInfoPush::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[31]);
}

// ===================================================================

class VipActiveInfoPush::_Internal {
 public:
  using HasBits = decltype(std::declval<VipActiveInfoPush>()._has_bits_);
  static void set_has_activeend(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

VipActiveInfoPush::VipActiveInfoPush(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:VipActiveInfoPush)
}
VipActiveInfoPush::VipActiveInfoPush(const VipActiveInfoPush& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  activeend_ = from.activeend_;
  // @@protoc_insertion_point(copy_constructor:VipActiveInfoPush)
}

inline void VipActiveInfoPush::SharedCtor() {
activeend_ = 0;
}

VipActiveInfoPush::~VipActiveInfoPush() {
  // @@protoc_insertion_point(destructor:VipActiveInfoPush)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VipActiveInfoPush::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VipActiveInfoPush::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VipActiveInfoPush::Clear() {
// @@protoc_insertion_point(message_clear_start:VipActiveInfoPush)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  activeend_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VipActiveInfoPush::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 activeEnd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_activeend(&has_bits);
          activeend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VipActiveInfoPush::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VipActiveInfoPush)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 activeEnd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_activeend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VipActiveInfoPush)
  return target;
}

size_t VipActiveInfoPush::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VipActiveInfoPush)
  size_t total_size = 0;

  // required int32 activeEnd = 1;
  if (_internal_has_activeend()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_activeend());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VipActiveInfoPush::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VipActiveInfoPush::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VipActiveInfoPush::GetClassData() const { return &_class_data_; }

void VipActiveInfoPush::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VipActiveInfoPush *>(to)->MergeFrom(
      static_cast<const VipActiveInfoPush &>(from));
}


void VipActiveInfoPush::MergeFrom(const VipActiveInfoPush& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VipActiveInfoPush)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_activeend()) {
    _internal_set_activeend(from._internal_activeend());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VipActiveInfoPush::CopyFrom(const VipActiveInfoPush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VipActiveInfoPush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VipActiveInfoPush::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void VipActiveInfoPush::InternalSwap(VipActiveInfoPush* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(activeend_, other->activeend_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VipActiveInfoPush::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[32]);
}

// ===================================================================

class SysTimePush::_Internal {
 public:
  using HasBits = decltype(std::declval<SysTimePush>()._has_bits_);
  static void set_has_currtime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SysTimePush::SysTimePush(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SysTimePush)
}
SysTimePush::SysTimePush(const SysTimePush& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  currtime_ = from.currtime_;
  // @@protoc_insertion_point(copy_constructor:SysTimePush)
}

inline void SysTimePush::SharedCtor() {
currtime_ = int64_t{0};
}

SysTimePush::~SysTimePush() {
  // @@protoc_insertion_point(destructor:SysTimePush)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SysTimePush::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SysTimePush::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SysTimePush::Clear() {
// @@protoc_insertion_point(message_clear_start:SysTimePush)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  currtime_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SysTimePush::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 currTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_currtime(&has_bits);
          currtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SysTimePush::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SysTimePush)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 currTime = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_currtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SysTimePush)
  return target;
}

size_t SysTimePush::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SysTimePush)
  size_t total_size = 0;

  // required int64 currTime = 1;
  if (_internal_has_currtime()) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_currtime());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SysTimePush::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SysTimePush::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SysTimePush::GetClassData() const { return &_class_data_; }

void SysTimePush::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SysTimePush *>(to)->MergeFrom(
      static_cast<const SysTimePush &>(from));
}


void SysTimePush::MergeFrom(const SysTimePush& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SysTimePush)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_currtime()) {
    _internal_set_currtime(from._internal_currtime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SysTimePush::CopyFrom(const SysTimePush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SysTimePush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysTimePush::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SysTimePush::InternalSwap(SysTimePush* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(currtime_, other->currtime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SysTimePush::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[33]);
}

// ===================================================================

class GuidePush::_Internal {
 public:
  using HasBits = decltype(std::declval<GuidePush>()._has_bits_);
  static const ::GuideDTO& guide(const GuidePush* msg);
  static void set_has_guide(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::GuideDTO&
GuidePush::_Internal::guide(const GuidePush* msg) {
  return *msg->guide_;
}
GuidePush::GuidePush(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:GuidePush)
}
GuidePush::GuidePush(const GuidePush& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_guide()) {
    guide_ = new ::GuideDTO(*from.guide_);
  } else {
    guide_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:GuidePush)
}

inline void GuidePush::SharedCtor() {
guide_ = nullptr;
}

GuidePush::~GuidePush() {
  // @@protoc_insertion_point(destructor:GuidePush)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GuidePush::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete guide_;
}

void GuidePush::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GuidePush::Clear() {
// @@protoc_insertion_point(message_clear_start:GuidePush)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(guide_ != nullptr);
    guide_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GuidePush::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .GuideDTO guide = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_guide(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GuidePush::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GuidePush)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .GuideDTO guide = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::guide(this),
        _Internal::guide(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GuidePush)
  return target;
}

size_t GuidePush::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GuidePush)
  size_t total_size = 0;

  // required .GuideDTO guide = 1;
  if (_internal_has_guide()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *guide_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GuidePush::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GuidePush::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GuidePush::GetClassData() const { return &_class_data_; }

void GuidePush::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GuidePush *>(to)->MergeFrom(
      static_cast<const GuidePush &>(from));
}


void GuidePush::MergeFrom(const GuidePush& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GuidePush)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_guide()) {
    _internal_mutable_guide()->::GuideDTO::MergeFrom(from._internal_guide());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GuidePush::CopyFrom(const GuidePush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GuidePush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuidePush::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_guide()) {
    if (!guide_->IsInitialized()) return false;
  }
  return true;
}

void GuidePush::InternalSwap(GuidePush* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(guide_, other->guide_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GuidePush::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[34]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PlayerDTO*
Arena::CreateMaybeMessage< ::PlayerDTO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerDTO >(arena);
}
template<> PROTOBUF_NOINLINE ::GuideDTO*
Arena::CreateMaybeMessage< ::GuideDTO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GuideDTO >(arena);
}
template<> PROTOBUF_NOINLINE ::UserAccountLoginRequest*
Arena::CreateMaybeMessage< ::UserAccountLoginRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserAccountLoginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::UserAccountLoginResponse*
Arena::CreateMaybeMessage< ::UserAccountLoginResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserAccountLoginResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerLoginRequest*
Arena::CreateMaybeMessage< ::PlayerLoginRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerLoginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerLoginResponse*
Arena::CreateMaybeMessage< ::PlayerLoginResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerLoginResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerReconnectRequest*
Arena::CreateMaybeMessage< ::PlayerReconnectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerReconnectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerReconnectResponse*
Arena::CreateMaybeMessage< ::PlayerReconnectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerReconnectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerReloadRequest*
Arena::CreateMaybeMessage< ::PlayerReloadRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerReloadRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerReloadResponse*
Arena::CreateMaybeMessage< ::PlayerReloadResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerReloadResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerHeartBeatRequest*
Arena::CreateMaybeMessage< ::PlayerHeartBeatRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerHeartBeatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerHeartBeatResponse*
Arena::CreateMaybeMessage< ::PlayerHeartBeatResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerHeartBeatResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SetTalentRequest*
Arena::CreateMaybeMessage< ::SetTalentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetTalentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SetTalentResponse*
Arena::CreateMaybeMessage< ::SetTalentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetTalentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SetImageRequest*
Arena::CreateMaybeMessage< ::SetImageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetImageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SetImageResponse*
Arena::CreateMaybeMessage< ::SetImageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetImageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::QueryLordInfoRequest*
Arena::CreateMaybeMessage< ::QueryLordInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::QueryLordInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::QueryLordInfoResponse*
Arena::CreateMaybeMessage< ::QueryLordInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::QueryLordInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SetIconRequest*
Arena::CreateMaybeMessage< ::SetIconRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetIconRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SetIconResponse*
Arena::CreateMaybeMessage< ::SetIconResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetIconResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ChangeNameRequest*
Arena::CreateMaybeMessage< ::ChangeNameRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChangeNameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ChangeNameResponse*
Arena::CreateMaybeMessage< ::ChangeNameResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChangeNameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SetGuideRequest*
Arena::CreateMaybeMessage< ::SetGuideRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetGuideRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerDataPush*
Arena::CreateMaybeMessage< ::PlayerDataPush >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerDataPush >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerPropertyChangePush*
Arena::CreateMaybeMessage< ::PlayerPropertyChangePush >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerPropertyChangePush >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerLevelUpPush*
Arena::CreateMaybeMessage< ::PlayerLevelUpPush >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerLevelUpPush >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerProtectPush*
Arena::CreateMaybeMessage< ::PlayerProtectPush >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerProtectPush >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerCount*
Arena::CreateMaybeMessage< ::PlayerCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerCount >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerCountPush*
Arena::CreateMaybeMessage< ::PlayerCountPush >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerCountPush >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayeBattlePush*
Arena::CreateMaybeMessage< ::PlayeBattlePush >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayeBattlePush >(arena);
}
template<> PROTOBUF_NOINLINE ::TalentPush*
Arena::CreateMaybeMessage< ::TalentPush >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TalentPush >(arena);
}
template<> PROTOBUF_NOINLINE ::VipInfoPush*
Arena::CreateMaybeMessage< ::VipInfoPush >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VipInfoPush >(arena);
}
template<> PROTOBUF_NOINLINE ::VipActiveInfoPush*
Arena::CreateMaybeMessage< ::VipActiveInfoPush >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VipActiveInfoPush >(arena);
}
template<> PROTOBUF_NOINLINE ::SysTimePush*
Arena::CreateMaybeMessage< ::SysTimePush >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SysTimePush >(arena);
}
template<> PROTOBUF_NOINLINE ::GuidePush*
Arena::CreateMaybeMessage< ::GuidePush >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GuidePush >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
