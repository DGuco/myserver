// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: equipment.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "equipment.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace slg {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* DealEquipmentRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DealEquipmentRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DealEquipmentResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DealEquipmentResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DealGemstoneRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DealGemstoneRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DealGemstoneResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DealGemstoneResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CombineGemstoneRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CombineGemstoneRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CombineGemstoneResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CombineGemstoneResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyEquipmentRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyEquipmentRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyEquipmentResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyEquipmentResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* LuckyDrawRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LuckyDrawRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LuckyDrawResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LuckyDrawResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentUpRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentUpRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentUpResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentUpResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentListPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentListPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentChangePush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentChangePush_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForgChangePush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForgChangePush_reflection_ = NULL;
const ::google::protobuf::Descriptor* CanBuyEquipmentPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CanBuyEquipmentPush_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EquipmentCommandId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EquipmentPushId_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_equipment_2eproto() {
  protobuf_AddDesc_equipment_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "equipment.proto");
  GOOGLE_CHECK(file != NULL);
  DealEquipmentRequest_descriptor_ = file->message_type(0);
  static const int DealEquipmentRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealEquipmentRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealEquipmentRequest, equipmentid_),
  };
  DealEquipmentRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DealEquipmentRequest_descriptor_,
      DealEquipmentRequest::default_instance_,
      DealEquipmentRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealEquipmentRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealEquipmentRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DealEquipmentRequest));
  DealEquipmentResponse_descriptor_ = file->message_type(1);
  static const int DealEquipmentResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealEquipmentResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealEquipmentResponse, equipmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealEquipmentResponse, replacedid_),
  };
  DealEquipmentResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DealEquipmentResponse_descriptor_,
      DealEquipmentResponse::default_instance_,
      DealEquipmentResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealEquipmentResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealEquipmentResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DealEquipmentResponse));
  DealGemstoneRequest_descriptor_ = file->message_type(2);
  static const int DealGemstoneRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealGemstoneRequest, gemstoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealGemstoneRequest, equipmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealGemstoneRequest, opttype_),
  };
  DealGemstoneRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DealGemstoneRequest_descriptor_,
      DealGemstoneRequest::default_instance_,
      DealGemstoneRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealGemstoneRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealGemstoneRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DealGemstoneRequest));
  DealGemstoneResponse_descriptor_ = file->message_type(3);
  static const int DealGemstoneResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealGemstoneResponse, gemstoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealGemstoneResponse, equipmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealGemstoneResponse, opttype_),
  };
  DealGemstoneResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DealGemstoneResponse_descriptor_,
      DealGemstoneResponse::default_instance_,
      DealGemstoneResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealGemstoneResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealGemstoneResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DealGemstoneResponse));
  CombineGemstoneRequest_descriptor_ = file->message_type(4);
  static const int CombineGemstoneRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineGemstoneRequest, gemstoneid_),
  };
  CombineGemstoneRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CombineGemstoneRequest_descriptor_,
      CombineGemstoneRequest::default_instance_,
      CombineGemstoneRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineGemstoneRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineGemstoneRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CombineGemstoneRequest));
  CombineGemstoneResponse_descriptor_ = file->message_type(5);
  static const int CombineGemstoneResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineGemstoneResponse, combinestoneid_),
  };
  CombineGemstoneResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CombineGemstoneResponse_descriptor_,
      CombineGemstoneResponse::default_instance_,
      CombineGemstoneResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineGemstoneResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineGemstoneResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CombineGemstoneResponse));
  BuyEquipmentRequest_descriptor_ = file->message_type(6);
  static const int BuyEquipmentRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyEquipmentRequest, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyEquipmentRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyEquipmentRequest, oper_),
  };
  BuyEquipmentRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyEquipmentRequest_descriptor_,
      BuyEquipmentRequest::default_instance_,
      BuyEquipmentRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyEquipmentRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyEquipmentRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyEquipmentRequest));
  BuyEquipmentResponse_descriptor_ = file->message_type(7);
  static const int BuyEquipmentResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyEquipmentResponse, equipmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyEquipmentResponse, num_),
  };
  BuyEquipmentResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyEquipmentResponse_descriptor_,
      BuyEquipmentResponse::default_instance_,
      BuyEquipmentResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyEquipmentResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyEquipmentResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyEquipmentResponse));
  LuckyDrawRequest_descriptor_ = file->message_type(8);
  static const int LuckyDrawRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyDrawRequest, id_),
  };
  LuckyDrawRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LuckyDrawRequest_descriptor_,
      LuckyDrawRequest::default_instance_,
      LuckyDrawRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyDrawRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyDrawRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LuckyDrawRequest));
  LuckyDrawResponse_descriptor_ = file->message_type(9);
  static const int LuckyDrawResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyDrawResponse, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyDrawResponse, forgvalue_),
  };
  LuckyDrawResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LuckyDrawResponse_descriptor_,
      LuckyDrawResponse::default_instance_,
      LuckyDrawResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyDrawResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyDrawResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LuckyDrawResponse));
  EquipmentUpRequest_descriptor_ = file->message_type(10);
  static const int EquipmentUpRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentUpRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentUpRequest, oper_),
  };
  EquipmentUpRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentUpRequest_descriptor_,
      EquipmentUpRequest::default_instance_,
      EquipmentUpRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentUpRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentUpRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentUpRequest));
  EquipmentUpResponse_descriptor_ = file->message_type(11);
  static const int EquipmentUpResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentUpResponse, id_),
  };
  EquipmentUpResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentUpResponse_descriptor_,
      EquipmentUpResponse::default_instance_,
      EquipmentUpResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentUpResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentUpResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentUpResponse));
  EquipmentListPush_descriptor_ = file->message_type(12);
  static const int EquipmentListPush_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentListPush, wearequipment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentListPush, equipmentlist_),
  };
  EquipmentListPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentListPush_descriptor_,
      EquipmentListPush::default_instance_,
      EquipmentListPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentListPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentListPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentListPush));
  EquipmentChangePush_descriptor_ = file->message_type(13);
  static const int EquipmentChangePush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentChangePush, equipment_),
  };
  EquipmentChangePush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentChangePush_descriptor_,
      EquipmentChangePush::default_instance_,
      EquipmentChangePush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentChangePush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentChangePush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentChangePush));
  ForgChangePush_descriptor_ = file->message_type(14);
  static const int ForgChangePush_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForgChangePush, forgvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForgChangePush, curtime_),
  };
  ForgChangePush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForgChangePush_descriptor_,
      ForgChangePush::default_instance_,
      ForgChangePush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForgChangePush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForgChangePush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForgChangePush));
  CanBuyEquipmentPush_descriptor_ = file->message_type(15);
  static const int CanBuyEquipmentPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanBuyEquipmentPush, equipmentids_),
  };
  CanBuyEquipmentPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CanBuyEquipmentPush_descriptor_,
      CanBuyEquipmentPush::default_instance_,
      CanBuyEquipmentPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanBuyEquipmentPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanBuyEquipmentPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CanBuyEquipmentPush));
  EquipmentCommandId_descriptor_ = file->enum_type(0);
  EquipmentPushId_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_equipment_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DealEquipmentRequest_descriptor_, &DealEquipmentRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DealEquipmentResponse_descriptor_, &DealEquipmentResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DealGemstoneRequest_descriptor_, &DealGemstoneRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DealGemstoneResponse_descriptor_, &DealGemstoneResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CombineGemstoneRequest_descriptor_, &CombineGemstoneRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CombineGemstoneResponse_descriptor_, &CombineGemstoneResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyEquipmentRequest_descriptor_, &BuyEquipmentRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyEquipmentResponse_descriptor_, &BuyEquipmentResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LuckyDrawRequest_descriptor_, &LuckyDrawRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LuckyDrawResponse_descriptor_, &LuckyDrawResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentUpRequest_descriptor_, &EquipmentUpRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentUpResponse_descriptor_, &EquipmentUpResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentListPush_descriptor_, &EquipmentListPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentChangePush_descriptor_, &EquipmentChangePush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForgChangePush_descriptor_, &ForgChangePush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CanBuyEquipmentPush_descriptor_, &CanBuyEquipmentPush::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_equipment_2eproto() {
  delete DealEquipmentRequest::default_instance_;
  delete DealEquipmentRequest_reflection_;
  delete DealEquipmentResponse::default_instance_;
  delete DealEquipmentResponse_reflection_;
  delete DealGemstoneRequest::default_instance_;
  delete DealGemstoneRequest_reflection_;
  delete DealGemstoneResponse::default_instance_;
  delete DealGemstoneResponse_reflection_;
  delete CombineGemstoneRequest::default_instance_;
  delete CombineGemstoneRequest_reflection_;
  delete CombineGemstoneResponse::default_instance_;
  delete CombineGemstoneResponse_reflection_;
  delete BuyEquipmentRequest::default_instance_;
  delete BuyEquipmentRequest_reflection_;
  delete BuyEquipmentResponse::default_instance_;
  delete BuyEquipmentResponse_reflection_;
  delete LuckyDrawRequest::default_instance_;
  delete LuckyDrawRequest_reflection_;
  delete LuckyDrawResponse::default_instance_;
  delete LuckyDrawResponse_reflection_;
  delete EquipmentUpRequest::default_instance_;
  delete EquipmentUpRequest_reflection_;
  delete EquipmentUpResponse::default_instance_;
  delete EquipmentUpResponse_reflection_;
  delete EquipmentListPush::default_instance_;
  delete EquipmentListPush_reflection_;
  delete EquipmentChangePush::default_instance_;
  delete EquipmentChangePush_reflection_;
  delete ForgChangePush::default_instance_;
  delete ForgChangePush_reflection_;
  delete CanBuyEquipmentPush::default_instance_;
  delete CanBuyEquipmentPush_reflection_;
}

void protobuf_AddDesc_equipment_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::slg::protocol::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017equipment.proto\022\014slg.protocol\032\014common."
    "proto\"9\n\024DealEquipmentRequest\022\014\n\004type\030\001 "
    "\002(\005\022\023\n\013equipmentId\030\002 \002(\005\"N\n\025DealEquipmen"
    "tResponse\022\014\n\004type\030\001 \002(\005\022\023\n\013equipmentId\030\002"
    " \002(\005\022\022\n\nreplacedId\030\003 \001(\005\"O\n\023DealGemstone"
    "Request\022\022\n\ngemstoneid\030\001 \002(\005\022\023\n\013equipment"
    "id\030\002 \002(\005\022\017\n\007opttype\030\003 \002(\005\"P\n\024DealGemston"
    "eResponse\022\022\n\ngemstoneid\030\001 \002(\005\022\023\n\013equipme"
    "ntid\030\002 \002(\005\022\017\n\007opttype\030\003 \002(\005\",\n\026CombineGe"
    "mstoneRequest\022\022\n\ngemstoneid\030\001 \002(\005\"1\n\027Com"
    "bineGemstoneResponse\022\026\n\016combinestoneid\030\001"
    " \002(\005\"@\n\023BuyEquipmentRequest\022\r\n\005color\030\001 \002"
    "(\005\022\014\n\004type\030\002 \002(\005\022\014\n\004oper\030\003 \002(\010\"8\n\024BuyEqu"
    "ipmentResponse\022\023\n\013equipmentId\030\001 \002(\005\022\013\n\003n"
    "um\030\002 \002(\005\"\036\n\020LuckyDrawRequest\022\n\n\002id\030\001 \002(\005"
    "\"R\n\021LuckyDrawResponse\022*\n\006reward\030\001 \003(\0132\032."
    "slg.protocol.EquipmentDTO\022\021\n\tforgvalue\030\002"
    " \002(\005\".\n\022EquipmentUpRequest\022\n\n\002id\030\001 \002(\005\022\014"
    "\n\004oper\030\002 \002(\010\"!\n\023EquipmentUpResponse\022\n\n\002i"
    "d\030\001 \002(\005\"y\n\021EquipmentListPush\0221\n\rwearEqui"
    "pment\030\001 \003(\0132\032.slg.protocol.EquipmentDTO\022"
    "1\n\requipmentList\030\002 \003(\0132\032.slg.protocol.Eq"
    "uipmentDTO\"D\n\023EquipmentChangePush\022-\n\tequ"
    "ipment\030\001 \003(\0132\032.slg.protocol.EquipmentDTO"
    "\"4\n\016ForgChangePush\022\021\n\tforgvalue\030\001 \002(\005\022\017\n"
    "\007curTime\030\002 \002(\005\"+\n\023CanBuyEquipmentPush\022\024\n"
    "\014equipmentIds\030\001 \003(\005*\321\001\n\022EquipmentCommand"
    "Id\022\035\n\030EQUIPMENT_DEAL_EQUIPMENT\020\301\014\022\034\n\027EQU"
    "IPMENT_DEAL_GEMSTONE\020\302\014\022\037\n\032EQUIPMENT_COM"
    "BINE_GEMSTONE\020\303\014\022\034\n\027EQUIPMENT_BUY_EQUIPM"
    "ENT\020\304\014\022\030\n\023EQUIPMENT_LUCK_DRAW\020\305\014\022\022\n\rEQUI"
    "PMENT_BUY\020\306\014\022\021\n\014EQUIPMENT_UP\020\307\014*\207\001\n\017Equi"
    "pmentPushId\022\031\n\023EQUIPMENT_LIST_PUSH\020\221\223\003\022\033"
    "\n\025EQUIPMENT_CHANGE_PUSH\020\222\223\003\022\031\n\023EQUIPMENT"
    "_FORG_PUSH\020\223\223\003\022!\n\033EQUIPMENT_CAN_BUY_EQUI"
    "PMENT\020\224\223\003B.\n\034com.bonusstudio.slg.protoco"
    "lB\016EquipmentProto", 1457);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "equipment.proto", &protobuf_RegisterTypes);
  DealEquipmentRequest::default_instance_ = new DealEquipmentRequest();
  DealEquipmentResponse::default_instance_ = new DealEquipmentResponse();
  DealGemstoneRequest::default_instance_ = new DealGemstoneRequest();
  DealGemstoneResponse::default_instance_ = new DealGemstoneResponse();
  CombineGemstoneRequest::default_instance_ = new CombineGemstoneRequest();
  CombineGemstoneResponse::default_instance_ = new CombineGemstoneResponse();
  BuyEquipmentRequest::default_instance_ = new BuyEquipmentRequest();
  BuyEquipmentResponse::default_instance_ = new BuyEquipmentResponse();
  LuckyDrawRequest::default_instance_ = new LuckyDrawRequest();
  LuckyDrawResponse::default_instance_ = new LuckyDrawResponse();
  EquipmentUpRequest::default_instance_ = new EquipmentUpRequest();
  EquipmentUpResponse::default_instance_ = new EquipmentUpResponse();
  EquipmentListPush::default_instance_ = new EquipmentListPush();
  EquipmentChangePush::default_instance_ = new EquipmentChangePush();
  ForgChangePush::default_instance_ = new ForgChangePush();
  CanBuyEquipmentPush::default_instance_ = new CanBuyEquipmentPush();
  DealEquipmentRequest::default_instance_->InitAsDefaultInstance();
  DealEquipmentResponse::default_instance_->InitAsDefaultInstance();
  DealGemstoneRequest::default_instance_->InitAsDefaultInstance();
  DealGemstoneResponse::default_instance_->InitAsDefaultInstance();
  CombineGemstoneRequest::default_instance_->InitAsDefaultInstance();
  CombineGemstoneResponse::default_instance_->InitAsDefaultInstance();
  BuyEquipmentRequest::default_instance_->InitAsDefaultInstance();
  BuyEquipmentResponse::default_instance_->InitAsDefaultInstance();
  LuckyDrawRequest::default_instance_->InitAsDefaultInstance();
  LuckyDrawResponse::default_instance_->InitAsDefaultInstance();
  EquipmentUpRequest::default_instance_->InitAsDefaultInstance();
  EquipmentUpResponse::default_instance_->InitAsDefaultInstance();
  EquipmentListPush::default_instance_->InitAsDefaultInstance();
  EquipmentChangePush::default_instance_->InitAsDefaultInstance();
  ForgChangePush::default_instance_->InitAsDefaultInstance();
  CanBuyEquipmentPush::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_equipment_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_equipment_2eproto {
  StaticDescriptorInitializer_equipment_2eproto() {
    protobuf_AddDesc_equipment_2eproto();
  }
} static_descriptor_initializer_equipment_2eproto_;
const ::google::protobuf::EnumDescriptor* EquipmentCommandId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentCommandId_descriptor_;
}
bool EquipmentCommandId_IsValid(int value) {
  switch(value) {
    case 1601:
    case 1602:
    case 1603:
    case 1604:
    case 1605:
    case 1606:
    case 1607:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EquipmentPushId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentPushId_descriptor_;
}
bool EquipmentPushId_IsValid(int value) {
  switch(value) {
    case 51601:
    case 51602:
    case 51603:
    case 51604:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int DealEquipmentRequest::kTypeFieldNumber;
const int DealEquipmentRequest::kEquipmentIdFieldNumber;
#endif  // !_MSC_VER

DealEquipmentRequest::DealEquipmentRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DealEquipmentRequest::InitAsDefaultInstance() {
}

DealEquipmentRequest::DealEquipmentRequest(const DealEquipmentRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DealEquipmentRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  equipmentid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DealEquipmentRequest::~DealEquipmentRequest() {
  SharedDtor();
}

void DealEquipmentRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DealEquipmentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DealEquipmentRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DealEquipmentRequest_descriptor_;
}

const DealEquipmentRequest& DealEquipmentRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipment_2eproto();
  return *default_instance_;
}

DealEquipmentRequest* DealEquipmentRequest::default_instance_ = NULL;

DealEquipmentRequest* DealEquipmentRequest::New() const {
  return new DealEquipmentRequest;
}

void DealEquipmentRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    equipmentid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DealEquipmentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equipmentId;
        break;
      }

      // required int32 equipmentId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipmentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipmentid_)));
          set_has_equipmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DealEquipmentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 equipmentId = 2;
  if (has_equipmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->equipmentid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DealEquipmentRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 equipmentId = 2;
  if (has_equipmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->equipmentid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DealEquipmentRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 equipmentId = 2;
    if (has_equipmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipmentid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DealEquipmentRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DealEquipmentRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DealEquipmentRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DealEquipmentRequest::MergeFrom(const DealEquipmentRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_equipmentid()) {
      set_equipmentid(from.equipmentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DealEquipmentRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DealEquipmentRequest::CopyFrom(const DealEquipmentRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DealEquipmentRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DealEquipmentRequest::Swap(DealEquipmentRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(equipmentid_, other->equipmentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DealEquipmentRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DealEquipmentRequest_descriptor_;
  metadata.reflection = DealEquipmentRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DealEquipmentResponse::kTypeFieldNumber;
const int DealEquipmentResponse::kEquipmentIdFieldNumber;
const int DealEquipmentResponse::kReplacedIdFieldNumber;
#endif  // !_MSC_VER

DealEquipmentResponse::DealEquipmentResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DealEquipmentResponse::InitAsDefaultInstance() {
}

DealEquipmentResponse::DealEquipmentResponse(const DealEquipmentResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DealEquipmentResponse::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  equipmentid_ = 0;
  replacedid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DealEquipmentResponse::~DealEquipmentResponse() {
  SharedDtor();
}

void DealEquipmentResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DealEquipmentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DealEquipmentResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DealEquipmentResponse_descriptor_;
}

const DealEquipmentResponse& DealEquipmentResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipment_2eproto();
  return *default_instance_;
}

DealEquipmentResponse* DealEquipmentResponse::default_instance_ = NULL;

DealEquipmentResponse* DealEquipmentResponse::New() const {
  return new DealEquipmentResponse;
}

void DealEquipmentResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    equipmentid_ = 0;
    replacedid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DealEquipmentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equipmentId;
        break;
      }

      // required int32 equipmentId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipmentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipmentid_)));
          set_has_equipmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_replacedId;
        break;
      }

      // optional int32 replacedId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replacedId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replacedid_)));
          set_has_replacedid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DealEquipmentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 equipmentId = 2;
  if (has_equipmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->equipmentid(), output);
  }

  // optional int32 replacedId = 3;
  if (has_replacedid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->replacedid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DealEquipmentResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 equipmentId = 2;
  if (has_equipmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->equipmentid(), target);
  }

  // optional int32 replacedId = 3;
  if (has_replacedid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->replacedid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DealEquipmentResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 equipmentId = 2;
    if (has_equipmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipmentid());
    }

    // optional int32 replacedId = 3;
    if (has_replacedid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replacedid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DealEquipmentResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DealEquipmentResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DealEquipmentResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DealEquipmentResponse::MergeFrom(const DealEquipmentResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_equipmentid()) {
      set_equipmentid(from.equipmentid());
    }
    if (from.has_replacedid()) {
      set_replacedid(from.replacedid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DealEquipmentResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DealEquipmentResponse::CopyFrom(const DealEquipmentResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DealEquipmentResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DealEquipmentResponse::Swap(DealEquipmentResponse* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(equipmentid_, other->equipmentid_);
    std::swap(replacedid_, other->replacedid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DealEquipmentResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DealEquipmentResponse_descriptor_;
  metadata.reflection = DealEquipmentResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DealGemstoneRequest::kGemstoneidFieldNumber;
const int DealGemstoneRequest::kEquipmentidFieldNumber;
const int DealGemstoneRequest::kOpttypeFieldNumber;
#endif  // !_MSC_VER

DealGemstoneRequest::DealGemstoneRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DealGemstoneRequest::InitAsDefaultInstance() {
}

DealGemstoneRequest::DealGemstoneRequest(const DealGemstoneRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DealGemstoneRequest::SharedCtor() {
  _cached_size_ = 0;
  gemstoneid_ = 0;
  equipmentid_ = 0;
  opttype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DealGemstoneRequest::~DealGemstoneRequest() {
  SharedDtor();
}

void DealGemstoneRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DealGemstoneRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DealGemstoneRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DealGemstoneRequest_descriptor_;
}

const DealGemstoneRequest& DealGemstoneRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipment_2eproto();
  return *default_instance_;
}

DealGemstoneRequest* DealGemstoneRequest::default_instance_ = NULL;

DealGemstoneRequest* DealGemstoneRequest::New() const {
  return new DealGemstoneRequest;
}

void DealGemstoneRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gemstoneid_ = 0;
    equipmentid_ = 0;
    opttype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DealGemstoneRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gemstoneid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gemstoneid_)));
          set_has_gemstoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equipmentid;
        break;
      }

      // required int32 equipmentid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipmentid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipmentid_)));
          set_has_equipmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_opttype;
        break;
      }

      // required int32 opttype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opttype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opttype_)));
          set_has_opttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DealGemstoneRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gemstoneid = 1;
  if (has_gemstoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gemstoneid(), output);
  }

  // required int32 equipmentid = 2;
  if (has_equipmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->equipmentid(), output);
  }

  // required int32 opttype = 3;
  if (has_opttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->opttype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DealGemstoneRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gemstoneid = 1;
  if (has_gemstoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gemstoneid(), target);
  }

  // required int32 equipmentid = 2;
  if (has_equipmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->equipmentid(), target);
  }

  // required int32 opttype = 3;
  if (has_opttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->opttype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DealGemstoneRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gemstoneid = 1;
    if (has_gemstoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gemstoneid());
    }

    // required int32 equipmentid = 2;
    if (has_equipmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipmentid());
    }

    // required int32 opttype = 3;
    if (has_opttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opttype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DealGemstoneRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DealGemstoneRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DealGemstoneRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DealGemstoneRequest::MergeFrom(const DealGemstoneRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gemstoneid()) {
      set_gemstoneid(from.gemstoneid());
    }
    if (from.has_equipmentid()) {
      set_equipmentid(from.equipmentid());
    }
    if (from.has_opttype()) {
      set_opttype(from.opttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DealGemstoneRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DealGemstoneRequest::CopyFrom(const DealGemstoneRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DealGemstoneRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DealGemstoneRequest::Swap(DealGemstoneRequest* other) {
  if (other != this) {
    std::swap(gemstoneid_, other->gemstoneid_);
    std::swap(equipmentid_, other->equipmentid_);
    std::swap(opttype_, other->opttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DealGemstoneRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DealGemstoneRequest_descriptor_;
  metadata.reflection = DealGemstoneRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DealGemstoneResponse::kGemstoneidFieldNumber;
const int DealGemstoneResponse::kEquipmentidFieldNumber;
const int DealGemstoneResponse::kOpttypeFieldNumber;
#endif  // !_MSC_VER

DealGemstoneResponse::DealGemstoneResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DealGemstoneResponse::InitAsDefaultInstance() {
}

DealGemstoneResponse::DealGemstoneResponse(const DealGemstoneResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DealGemstoneResponse::SharedCtor() {
  _cached_size_ = 0;
  gemstoneid_ = 0;
  equipmentid_ = 0;
  opttype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DealGemstoneResponse::~DealGemstoneResponse() {
  SharedDtor();
}

void DealGemstoneResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DealGemstoneResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DealGemstoneResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DealGemstoneResponse_descriptor_;
}

const DealGemstoneResponse& DealGemstoneResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipment_2eproto();
  return *default_instance_;
}

DealGemstoneResponse* DealGemstoneResponse::default_instance_ = NULL;

DealGemstoneResponse* DealGemstoneResponse::New() const {
  return new DealGemstoneResponse;
}

void DealGemstoneResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gemstoneid_ = 0;
    equipmentid_ = 0;
    opttype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DealGemstoneResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gemstoneid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gemstoneid_)));
          set_has_gemstoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equipmentid;
        break;
      }

      // required int32 equipmentid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipmentid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipmentid_)));
          set_has_equipmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_opttype;
        break;
      }

      // required int32 opttype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opttype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opttype_)));
          set_has_opttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DealGemstoneResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gemstoneid = 1;
  if (has_gemstoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gemstoneid(), output);
  }

  // required int32 equipmentid = 2;
  if (has_equipmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->equipmentid(), output);
  }

  // required int32 opttype = 3;
  if (has_opttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->opttype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DealGemstoneResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gemstoneid = 1;
  if (has_gemstoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gemstoneid(), target);
  }

  // required int32 equipmentid = 2;
  if (has_equipmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->equipmentid(), target);
  }

  // required int32 opttype = 3;
  if (has_opttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->opttype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DealGemstoneResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gemstoneid = 1;
    if (has_gemstoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gemstoneid());
    }

    // required int32 equipmentid = 2;
    if (has_equipmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipmentid());
    }

    // required int32 opttype = 3;
    if (has_opttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opttype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DealGemstoneResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DealGemstoneResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DealGemstoneResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DealGemstoneResponse::MergeFrom(const DealGemstoneResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gemstoneid()) {
      set_gemstoneid(from.gemstoneid());
    }
    if (from.has_equipmentid()) {
      set_equipmentid(from.equipmentid());
    }
    if (from.has_opttype()) {
      set_opttype(from.opttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DealGemstoneResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DealGemstoneResponse::CopyFrom(const DealGemstoneResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DealGemstoneResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DealGemstoneResponse::Swap(DealGemstoneResponse* other) {
  if (other != this) {
    std::swap(gemstoneid_, other->gemstoneid_);
    std::swap(equipmentid_, other->equipmentid_);
    std::swap(opttype_, other->opttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DealGemstoneResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DealGemstoneResponse_descriptor_;
  metadata.reflection = DealGemstoneResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CombineGemstoneRequest::kGemstoneidFieldNumber;
#endif  // !_MSC_VER

CombineGemstoneRequest::CombineGemstoneRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CombineGemstoneRequest::InitAsDefaultInstance() {
}

CombineGemstoneRequest::CombineGemstoneRequest(const CombineGemstoneRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CombineGemstoneRequest::SharedCtor() {
  _cached_size_ = 0;
  gemstoneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CombineGemstoneRequest::~CombineGemstoneRequest() {
  SharedDtor();
}

void CombineGemstoneRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CombineGemstoneRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CombineGemstoneRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CombineGemstoneRequest_descriptor_;
}

const CombineGemstoneRequest& CombineGemstoneRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipment_2eproto();
  return *default_instance_;
}

CombineGemstoneRequest* CombineGemstoneRequest::default_instance_ = NULL;

CombineGemstoneRequest* CombineGemstoneRequest::New() const {
  return new CombineGemstoneRequest;
}

void CombineGemstoneRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gemstoneid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CombineGemstoneRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gemstoneid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gemstoneid_)));
          set_has_gemstoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CombineGemstoneRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gemstoneid = 1;
  if (has_gemstoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gemstoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CombineGemstoneRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gemstoneid = 1;
  if (has_gemstoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gemstoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CombineGemstoneRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gemstoneid = 1;
    if (has_gemstoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gemstoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombineGemstoneRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CombineGemstoneRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CombineGemstoneRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CombineGemstoneRequest::MergeFrom(const CombineGemstoneRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gemstoneid()) {
      set_gemstoneid(from.gemstoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CombineGemstoneRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombineGemstoneRequest::CopyFrom(const CombineGemstoneRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombineGemstoneRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CombineGemstoneRequest::Swap(CombineGemstoneRequest* other) {
  if (other != this) {
    std::swap(gemstoneid_, other->gemstoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CombineGemstoneRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CombineGemstoneRequest_descriptor_;
  metadata.reflection = CombineGemstoneRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CombineGemstoneResponse::kCombinestoneidFieldNumber;
#endif  // !_MSC_VER

CombineGemstoneResponse::CombineGemstoneResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CombineGemstoneResponse::InitAsDefaultInstance() {
}

CombineGemstoneResponse::CombineGemstoneResponse(const CombineGemstoneResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CombineGemstoneResponse::SharedCtor() {
  _cached_size_ = 0;
  combinestoneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CombineGemstoneResponse::~CombineGemstoneResponse() {
  SharedDtor();
}

void CombineGemstoneResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CombineGemstoneResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CombineGemstoneResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CombineGemstoneResponse_descriptor_;
}

const CombineGemstoneResponse& CombineGemstoneResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipment_2eproto();
  return *default_instance_;
}

CombineGemstoneResponse* CombineGemstoneResponse::default_instance_ = NULL;

CombineGemstoneResponse* CombineGemstoneResponse::New() const {
  return new CombineGemstoneResponse;
}

void CombineGemstoneResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    combinestoneid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CombineGemstoneResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 combinestoneid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combinestoneid_)));
          set_has_combinestoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CombineGemstoneResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 combinestoneid = 1;
  if (has_combinestoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->combinestoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CombineGemstoneResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 combinestoneid = 1;
  if (has_combinestoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->combinestoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CombineGemstoneResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 combinestoneid = 1;
    if (has_combinestoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combinestoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombineGemstoneResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CombineGemstoneResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CombineGemstoneResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CombineGemstoneResponse::MergeFrom(const CombineGemstoneResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_combinestoneid()) {
      set_combinestoneid(from.combinestoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CombineGemstoneResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombineGemstoneResponse::CopyFrom(const CombineGemstoneResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombineGemstoneResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CombineGemstoneResponse::Swap(CombineGemstoneResponse* other) {
  if (other != this) {
    std::swap(combinestoneid_, other->combinestoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CombineGemstoneResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CombineGemstoneResponse_descriptor_;
  metadata.reflection = CombineGemstoneResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyEquipmentRequest::kColorFieldNumber;
const int BuyEquipmentRequest::kTypeFieldNumber;
const int BuyEquipmentRequest::kOperFieldNumber;
#endif  // !_MSC_VER

BuyEquipmentRequest::BuyEquipmentRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuyEquipmentRequest::InitAsDefaultInstance() {
}

BuyEquipmentRequest::BuyEquipmentRequest(const BuyEquipmentRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuyEquipmentRequest::SharedCtor() {
  _cached_size_ = 0;
  color_ = 0;
  type_ = 0;
  oper_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyEquipmentRequest::~BuyEquipmentRequest() {
  SharedDtor();
}

void BuyEquipmentRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyEquipmentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyEquipmentRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyEquipmentRequest_descriptor_;
}

const BuyEquipmentRequest& BuyEquipmentRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipment_2eproto();
  return *default_instance_;
}

BuyEquipmentRequest* BuyEquipmentRequest::default_instance_ = NULL;

BuyEquipmentRequest* BuyEquipmentRequest::New() const {
  return new BuyEquipmentRequest;
}

void BuyEquipmentRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    color_ = 0;
    type_ = 0;
    oper_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyEquipmentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 color = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_oper;
        break;
      }

      // required bool oper = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &oper_)));
          set_has_oper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuyEquipmentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 color = 1;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->color(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required bool oper = 3;
  if (has_oper()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->oper(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuyEquipmentRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 color = 1;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->color(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required bool oper = 3;
  if (has_oper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->oper(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuyEquipmentRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required bool oper = 3;
    if (has_oper()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyEquipmentRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyEquipmentRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyEquipmentRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyEquipmentRequest::MergeFrom(const BuyEquipmentRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_oper()) {
      set_oper(from.oper());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyEquipmentRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyEquipmentRequest::CopyFrom(const BuyEquipmentRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyEquipmentRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void BuyEquipmentRequest::Swap(BuyEquipmentRequest* other) {
  if (other != this) {
    std::swap(color_, other->color_);
    std::swap(type_, other->type_);
    std::swap(oper_, other->oper_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyEquipmentRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyEquipmentRequest_descriptor_;
  metadata.reflection = BuyEquipmentRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyEquipmentResponse::kEquipmentIdFieldNumber;
const int BuyEquipmentResponse::kNumFieldNumber;
#endif  // !_MSC_VER

BuyEquipmentResponse::BuyEquipmentResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuyEquipmentResponse::InitAsDefaultInstance() {
}

BuyEquipmentResponse::BuyEquipmentResponse(const BuyEquipmentResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuyEquipmentResponse::SharedCtor() {
  _cached_size_ = 0;
  equipmentid_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyEquipmentResponse::~BuyEquipmentResponse() {
  SharedDtor();
}

void BuyEquipmentResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyEquipmentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyEquipmentResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyEquipmentResponse_descriptor_;
}

const BuyEquipmentResponse& BuyEquipmentResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipment_2eproto();
  return *default_instance_;
}

BuyEquipmentResponse* BuyEquipmentResponse::default_instance_ = NULL;

BuyEquipmentResponse* BuyEquipmentResponse::New() const {
  return new BuyEquipmentResponse;
}

void BuyEquipmentResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equipmentid_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyEquipmentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 equipmentId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipmentid_)));
          set_has_equipmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuyEquipmentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 equipmentId = 1;
  if (has_equipmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->equipmentid(), output);
  }

  // required int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuyEquipmentResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 equipmentId = 1;
  if (has_equipmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->equipmentid(), target);
  }

  // required int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuyEquipmentResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 equipmentId = 1;
    if (has_equipmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipmentid());
    }

    // required int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyEquipmentResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyEquipmentResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyEquipmentResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyEquipmentResponse::MergeFrom(const BuyEquipmentResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equipmentid()) {
      set_equipmentid(from.equipmentid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyEquipmentResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyEquipmentResponse::CopyFrom(const BuyEquipmentResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyEquipmentResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BuyEquipmentResponse::Swap(BuyEquipmentResponse* other) {
  if (other != this) {
    std::swap(equipmentid_, other->equipmentid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyEquipmentResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyEquipmentResponse_descriptor_;
  metadata.reflection = BuyEquipmentResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LuckyDrawRequest::kIdFieldNumber;
#endif  // !_MSC_VER

LuckyDrawRequest::LuckyDrawRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LuckyDrawRequest::InitAsDefaultInstance() {
}

LuckyDrawRequest::LuckyDrawRequest(const LuckyDrawRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LuckyDrawRequest::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LuckyDrawRequest::~LuckyDrawRequest() {
  SharedDtor();
}

void LuckyDrawRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LuckyDrawRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LuckyDrawRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LuckyDrawRequest_descriptor_;
}

const LuckyDrawRequest& LuckyDrawRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipment_2eproto();
  return *default_instance_;
}

LuckyDrawRequest* LuckyDrawRequest::default_instance_ = NULL;

LuckyDrawRequest* LuckyDrawRequest::New() const {
  return new LuckyDrawRequest;
}

void LuckyDrawRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LuckyDrawRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LuckyDrawRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LuckyDrawRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LuckyDrawRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LuckyDrawRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LuckyDrawRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LuckyDrawRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LuckyDrawRequest::MergeFrom(const LuckyDrawRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LuckyDrawRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LuckyDrawRequest::CopyFrom(const LuckyDrawRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LuckyDrawRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LuckyDrawRequest::Swap(LuckyDrawRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LuckyDrawRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LuckyDrawRequest_descriptor_;
  metadata.reflection = LuckyDrawRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LuckyDrawResponse::kRewardFieldNumber;
const int LuckyDrawResponse::kForgvalueFieldNumber;
#endif  // !_MSC_VER

LuckyDrawResponse::LuckyDrawResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LuckyDrawResponse::InitAsDefaultInstance() {
}

LuckyDrawResponse::LuckyDrawResponse(const LuckyDrawResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LuckyDrawResponse::SharedCtor() {
  _cached_size_ = 0;
  forgvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LuckyDrawResponse::~LuckyDrawResponse() {
  SharedDtor();
}

void LuckyDrawResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LuckyDrawResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LuckyDrawResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LuckyDrawResponse_descriptor_;
}

const LuckyDrawResponse& LuckyDrawResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipment_2eproto();
  return *default_instance_;
}

LuckyDrawResponse* LuckyDrawResponse::default_instance_ = NULL;

LuckyDrawResponse* LuckyDrawResponse::New() const {
  return new LuckyDrawResponse;
}

void LuckyDrawResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    forgvalue_ = 0;
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LuckyDrawResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.EquipmentDTO reward = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_reward;
        if (input->ExpectTag(16)) goto parse_forgvalue;
        break;
      }

      // required int32 forgvalue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forgvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &forgvalue_)));
          set_has_forgvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LuckyDrawResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.EquipmentDTO reward = 1;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reward(i), output);
  }

  // required int32 forgvalue = 2;
  if (has_forgvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->forgvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LuckyDrawResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.EquipmentDTO reward = 1;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reward(i), target);
  }

  // required int32 forgvalue = 2;
  if (has_forgvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->forgvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LuckyDrawResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 forgvalue = 2;
    if (has_forgvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->forgvalue());
    }

  }
  // repeated .slg.protocol.EquipmentDTO reward = 1;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LuckyDrawResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LuckyDrawResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LuckyDrawResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LuckyDrawResponse::MergeFrom(const LuckyDrawResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_forgvalue()) {
      set_forgvalue(from.forgvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LuckyDrawResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LuckyDrawResponse::CopyFrom(const LuckyDrawResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LuckyDrawResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < reward_size(); i++) {
    if (!this->reward(i).IsInitialized()) return false;
  }
  return true;
}

void LuckyDrawResponse::Swap(LuckyDrawResponse* other) {
  if (other != this) {
    reward_.Swap(&other->reward_);
    std::swap(forgvalue_, other->forgvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LuckyDrawResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LuckyDrawResponse_descriptor_;
  metadata.reflection = LuckyDrawResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentUpRequest::kIdFieldNumber;
const int EquipmentUpRequest::kOperFieldNumber;
#endif  // !_MSC_VER

EquipmentUpRequest::EquipmentUpRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentUpRequest::InitAsDefaultInstance() {
}

EquipmentUpRequest::EquipmentUpRequest(const EquipmentUpRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentUpRequest::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  oper_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentUpRequest::~EquipmentUpRequest() {
  SharedDtor();
}

void EquipmentUpRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentUpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentUpRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentUpRequest_descriptor_;
}

const EquipmentUpRequest& EquipmentUpRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipment_2eproto();
  return *default_instance_;
}

EquipmentUpRequest* EquipmentUpRequest::default_instance_ = NULL;

EquipmentUpRequest* EquipmentUpRequest::New() const {
  return new EquipmentUpRequest;
}

void EquipmentUpRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    oper_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentUpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_oper;
        break;
      }

      // required bool oper = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &oper_)));
          set_has_oper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentUpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bool oper = 2;
  if (has_oper()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->oper(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentUpRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bool oper = 2;
  if (has_oper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->oper(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentUpRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required bool oper = 2;
    if (has_oper()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentUpRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentUpRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentUpRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentUpRequest::MergeFrom(const EquipmentUpRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_oper()) {
      set_oper(from.oper());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentUpRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentUpRequest::CopyFrom(const EquipmentUpRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentUpRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EquipmentUpRequest::Swap(EquipmentUpRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(oper_, other->oper_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentUpRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentUpRequest_descriptor_;
  metadata.reflection = EquipmentUpRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentUpResponse::kIdFieldNumber;
#endif  // !_MSC_VER

EquipmentUpResponse::EquipmentUpResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentUpResponse::InitAsDefaultInstance() {
}

EquipmentUpResponse::EquipmentUpResponse(const EquipmentUpResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentUpResponse::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentUpResponse::~EquipmentUpResponse() {
  SharedDtor();
}

void EquipmentUpResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentUpResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentUpResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentUpResponse_descriptor_;
}

const EquipmentUpResponse& EquipmentUpResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipment_2eproto();
  return *default_instance_;
}

EquipmentUpResponse* EquipmentUpResponse::default_instance_ = NULL;

EquipmentUpResponse* EquipmentUpResponse::New() const {
  return new EquipmentUpResponse;
}

void EquipmentUpResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentUpResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentUpResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentUpResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentUpResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentUpResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentUpResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentUpResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentUpResponse::MergeFrom(const EquipmentUpResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentUpResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentUpResponse::CopyFrom(const EquipmentUpResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentUpResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EquipmentUpResponse::Swap(EquipmentUpResponse* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentUpResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentUpResponse_descriptor_;
  metadata.reflection = EquipmentUpResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentListPush::kWearEquipmentFieldNumber;
const int EquipmentListPush::kEquipmentListFieldNumber;
#endif  // !_MSC_VER

EquipmentListPush::EquipmentListPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentListPush::InitAsDefaultInstance() {
}

EquipmentListPush::EquipmentListPush(const EquipmentListPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentListPush::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentListPush::~EquipmentListPush() {
  SharedDtor();
}

void EquipmentListPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentListPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentListPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentListPush_descriptor_;
}

const EquipmentListPush& EquipmentListPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipment_2eproto();
  return *default_instance_;
}

EquipmentListPush* EquipmentListPush::default_instance_ = NULL;

EquipmentListPush* EquipmentListPush::New() const {
  return new EquipmentListPush;
}

void EquipmentListPush::Clear() {
  wearequipment_.Clear();
  equipmentlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentListPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.EquipmentDTO wearEquipment = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wearEquipment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wearequipment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_wearEquipment;
        if (input->ExpectTag(18)) goto parse_equipmentList;
        break;
      }

      // repeated .slg.protocol.EquipmentDTO equipmentList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipmentList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipmentlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equipmentList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentListPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.EquipmentDTO wearEquipment = 1;
  for (int i = 0; i < this->wearequipment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->wearequipment(i), output);
  }

  // repeated .slg.protocol.EquipmentDTO equipmentList = 2;
  for (int i = 0; i < this->equipmentlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equipmentlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentListPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.EquipmentDTO wearEquipment = 1;
  for (int i = 0; i < this->wearequipment_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->wearequipment(i), target);
  }

  // repeated .slg.protocol.EquipmentDTO equipmentList = 2;
  for (int i = 0; i < this->equipmentlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equipmentlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentListPush::ByteSize() const {
  int total_size = 0;

  // repeated .slg.protocol.EquipmentDTO wearEquipment = 1;
  total_size += 1 * this->wearequipment_size();
  for (int i = 0; i < this->wearequipment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wearequipment(i));
  }

  // repeated .slg.protocol.EquipmentDTO equipmentList = 2;
  total_size += 1 * this->equipmentlist_size();
  for (int i = 0; i < this->equipmentlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipmentlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentListPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentListPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentListPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentListPush::MergeFrom(const EquipmentListPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  wearequipment_.MergeFrom(from.wearequipment_);
  equipmentlist_.MergeFrom(from.equipmentlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentListPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentListPush::CopyFrom(const EquipmentListPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentListPush::IsInitialized() const {

  for (int i = 0; i < wearequipment_size(); i++) {
    if (!this->wearequipment(i).IsInitialized()) return false;
  }
  for (int i = 0; i < equipmentlist_size(); i++) {
    if (!this->equipmentlist(i).IsInitialized()) return false;
  }
  return true;
}

void EquipmentListPush::Swap(EquipmentListPush* other) {
  if (other != this) {
    wearequipment_.Swap(&other->wearequipment_);
    equipmentlist_.Swap(&other->equipmentlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentListPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentListPush_descriptor_;
  metadata.reflection = EquipmentListPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentChangePush::kEquipmentFieldNumber;
#endif  // !_MSC_VER

EquipmentChangePush::EquipmentChangePush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentChangePush::InitAsDefaultInstance() {
}

EquipmentChangePush::EquipmentChangePush(const EquipmentChangePush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentChangePush::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentChangePush::~EquipmentChangePush() {
  SharedDtor();
}

void EquipmentChangePush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentChangePush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentChangePush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentChangePush_descriptor_;
}

const EquipmentChangePush& EquipmentChangePush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipment_2eproto();
  return *default_instance_;
}

EquipmentChangePush* EquipmentChangePush::default_instance_ = NULL;

EquipmentChangePush* EquipmentChangePush::New() const {
  return new EquipmentChangePush;
}

void EquipmentChangePush::Clear() {
  equipment_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentChangePush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slg.protocol.EquipmentDTO equipment = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equipment;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentChangePush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .slg.protocol.EquipmentDTO equipment = 1;
  for (int i = 0; i < this->equipment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipment(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentChangePush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .slg.protocol.EquipmentDTO equipment = 1;
  for (int i = 0; i < this->equipment_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipment(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentChangePush::ByteSize() const {
  int total_size = 0;

  // repeated .slg.protocol.EquipmentDTO equipment = 1;
  total_size += 1 * this->equipment_size();
  for (int i = 0; i < this->equipment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipment(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentChangePush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentChangePush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentChangePush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentChangePush::MergeFrom(const EquipmentChangePush& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipment_.MergeFrom(from.equipment_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentChangePush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentChangePush::CopyFrom(const EquipmentChangePush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentChangePush::IsInitialized() const {

  for (int i = 0; i < equipment_size(); i++) {
    if (!this->equipment(i).IsInitialized()) return false;
  }
  return true;
}

void EquipmentChangePush::Swap(EquipmentChangePush* other) {
  if (other != this) {
    equipment_.Swap(&other->equipment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentChangePush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentChangePush_descriptor_;
  metadata.reflection = EquipmentChangePush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForgChangePush::kForgvalueFieldNumber;
const int ForgChangePush::kCurTimeFieldNumber;
#endif  // !_MSC_VER

ForgChangePush::ForgChangePush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ForgChangePush::InitAsDefaultInstance() {
}

ForgChangePush::ForgChangePush(const ForgChangePush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ForgChangePush::SharedCtor() {
  _cached_size_ = 0;
  forgvalue_ = 0;
  curtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForgChangePush::~ForgChangePush() {
  SharedDtor();
}

void ForgChangePush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ForgChangePush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForgChangePush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForgChangePush_descriptor_;
}

const ForgChangePush& ForgChangePush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipment_2eproto();
  return *default_instance_;
}

ForgChangePush* ForgChangePush::default_instance_ = NULL;

ForgChangePush* ForgChangePush::New() const {
  return new ForgChangePush;
}

void ForgChangePush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    forgvalue_ = 0;
    curtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForgChangePush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 forgvalue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &forgvalue_)));
          set_has_forgvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_curTime;
        break;
      }

      // required int32 curTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curtime_)));
          set_has_curtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ForgChangePush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 forgvalue = 1;
  if (has_forgvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->forgvalue(), output);
  }

  // required int32 curTime = 2;
  if (has_curtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->curtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ForgChangePush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 forgvalue = 1;
  if (has_forgvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->forgvalue(), target);
  }

  // required int32 curTime = 2;
  if (has_curtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->curtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ForgChangePush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 forgvalue = 1;
    if (has_forgvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->forgvalue());
    }

    // required int32 curTime = 2;
    if (has_curtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForgChangePush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForgChangePush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForgChangePush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForgChangePush::MergeFrom(const ForgChangePush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_forgvalue()) {
      set_forgvalue(from.forgvalue());
    }
    if (from.has_curtime()) {
      set_curtime(from.curtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForgChangePush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForgChangePush::CopyFrom(const ForgChangePush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForgChangePush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ForgChangePush::Swap(ForgChangePush* other) {
  if (other != this) {
    std::swap(forgvalue_, other->forgvalue_);
    std::swap(curtime_, other->curtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForgChangePush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForgChangePush_descriptor_;
  metadata.reflection = ForgChangePush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CanBuyEquipmentPush::kEquipmentIdsFieldNumber;
#endif  // !_MSC_VER

CanBuyEquipmentPush::CanBuyEquipmentPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CanBuyEquipmentPush::InitAsDefaultInstance() {
}

CanBuyEquipmentPush::CanBuyEquipmentPush(const CanBuyEquipmentPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CanBuyEquipmentPush::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CanBuyEquipmentPush::~CanBuyEquipmentPush() {
  SharedDtor();
}

void CanBuyEquipmentPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CanBuyEquipmentPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CanBuyEquipmentPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CanBuyEquipmentPush_descriptor_;
}

const CanBuyEquipmentPush& CanBuyEquipmentPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipment_2eproto();
  return *default_instance_;
}

CanBuyEquipmentPush* CanBuyEquipmentPush::default_instance_ = NULL;

CanBuyEquipmentPush* CanBuyEquipmentPush::New() const {
  return new CanBuyEquipmentPush;
}

void CanBuyEquipmentPush::Clear() {
  equipmentids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CanBuyEquipmentPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 equipmentIds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipmentIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_equipmentids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_equipmentids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_equipmentIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CanBuyEquipmentPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 equipmentIds = 1;
  for (int i = 0; i < this->equipmentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->equipmentids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CanBuyEquipmentPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 equipmentIds = 1;
  for (int i = 0; i < this->equipmentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->equipmentids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CanBuyEquipmentPush::ByteSize() const {
  int total_size = 0;

  // repeated int32 equipmentIds = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->equipmentids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->equipmentids(i));
    }
    total_size += 1 * this->equipmentids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CanBuyEquipmentPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CanBuyEquipmentPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CanBuyEquipmentPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CanBuyEquipmentPush::MergeFrom(const CanBuyEquipmentPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipmentids_.MergeFrom(from.equipmentids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CanBuyEquipmentPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CanBuyEquipmentPush::CopyFrom(const CanBuyEquipmentPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanBuyEquipmentPush::IsInitialized() const {

  return true;
}

void CanBuyEquipmentPush::Swap(CanBuyEquipmentPush* other) {
  if (other != this) {
    equipmentids_.Swap(&other->equipmentids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CanBuyEquipmentPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CanBuyEquipmentPush_descriptor_;
  metadata.reflection = CanBuyEquipmentPush_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace slg

// @@protoc_insertion_point(global_scope)
