// Code generated by protoc-gen-go.
// source: proxymessage.proto
// DO NOT EDIT!

/*
Package msg is a generated protocol buffer package.

It is generated from these files:
	proxymessage.proto

It has these top-level messages:
	CProxyHead
*/
package msg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type EProxyCmd int32

const (
	EProxyCmd_CMD_NULL      EProxyCmd = 0
	EProxyCmd_CMD_REGIST    EProxyCmd = 1
	EProxyCmd_CMD_KEEPALIVE EProxyCmd = 2
)

var EProxyCmd_name = map[int32]string{
	0: "CMD_NULL",
	1: "CMD_REGIST",
	2: "CMD_KEEPALIVE",
}
var EProxyCmd_value = map[string]int32{
	"CMD_NULL":      0,
	"CMD_REGIST":    1,
	"CMD_KEEPALIVE": 2,
}

func (x EProxyCmd) Enum() *EProxyCmd {
	p := new(EProxyCmd)
	*p = x
	return p
}
func (x EProxyCmd) String() string {
	return proto.EnumName(EProxyCmd_name, int32(x))
}
func (x *EProxyCmd) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EProxyCmd_value, data, "EProxyCmd")
	if err != nil {
		return err
	}
	*x = EProxyCmd(value)
	return nil
}
func (EProxyCmd) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// 服务器之间转发的消息头
type CProxyHead struct {
	SrcFE            *uint32    `protobuf:"varint,1,req,name=SrcFE" json:"SrcFE,omitempty"`
	SrcID            *uint32    `protobuf:"varint,2,req,name=SrcID" json:"SrcID,omitempty"`
	DstFE            *uint32    `protobuf:"varint,3,req,name=DstFE" json:"DstFE,omitempty"`
	DstID            *uint32    `protobuf:"varint,4,req,name=DstID" json:"DstID,omitempty"`
	OpFlag           *EProxyCmd `protobuf:"varint,5,req,name=OpFlag,enum=msg.EProxyCmd,def=0" json:"OpFlag,omitempty"`
	TimeStamp        *uint64    `protobuf:"varint,6,req,name=TimeStamp" json:"TimeStamp,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *CProxyHead) Reset()                    { *m = CProxyHead{} }
func (m *CProxyHead) String() string            { return proto.CompactTextString(m) }
func (*CProxyHead) ProtoMessage()               {}
func (*CProxyHead) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

const Default_CProxyHead_OpFlag EProxyCmd = EProxyCmd_CMD_NULL

func (m *CProxyHead) GetSrcFE() uint32 {
	if m != nil && m.SrcFE != nil {
		return *m.SrcFE
	}
	return 0
}

func (m *CProxyHead) GetSrcID() uint32 {
	if m != nil && m.SrcID != nil {
		return *m.SrcID
	}
	return 0
}

func (m *CProxyHead) GetDstFE() uint32 {
	if m != nil && m.DstFE != nil {
		return *m.DstFE
	}
	return 0
}

func (m *CProxyHead) GetDstID() uint32 {
	if m != nil && m.DstID != nil {
		return *m.DstID
	}
	return 0
}

func (m *CProxyHead) GetOpFlag() EProxyCmd {
	if m != nil && m.OpFlag != nil {
		return *m.OpFlag
	}
	return Default_CProxyHead_OpFlag
}

func (m *CProxyHead) GetTimeStamp() uint64 {
	if m != nil && m.TimeStamp != nil {
		return *m.TimeStamp
	}
	return 0
}

func init() {
	proto.RegisterType((*CProxyHead)(nil), "msg.CProxyHead")
	proto.RegisterEnum("msg.EProxyCmd", EProxyCmd_name, EProxyCmd_value)
}

var fileDescriptor0 = []byte{
	// 196 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x28, 0xca, 0xaf,
	0xa8, 0xcc, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0xd5, 0x03, 0x72, 0x4a, 0xf2, 0x85, 0x98, 0x73,
	0x8b, 0xd3, 0x95, 0x5a, 0x19, 0xb9, 0xb8, 0x9c, 0x03, 0x40, 0x92, 0x1e, 0xa9, 0x89, 0x29, 0x42,
	0xbc, 0x5c, 0xac, 0xc1, 0x45, 0xc9, 0x6e, 0xae, 0x12, 0x8c, 0x0a, 0x4c, 0x1a, 0xbc, 0x50, 0xae,
	0xa7, 0x8b, 0x04, 0x13, 0x8c, 0xeb, 0x52, 0x5c, 0x02, 0x94, 0x65, 0x46, 0xe2, 0x02, 0x65, 0x59,
	0xc0, 0x5c, 0x0d, 0x2e, 0x36, 0xff, 0x02, 0xb7, 0x9c, 0xc4, 0x74, 0x09, 0x56, 0x20, 0x9f, 0xcf,
	0x88, 0x4f, 0x0f, 0x68, 0x81, 0x9e, 0x2b, 0xd8, 0x70, 0xe7, 0xdc, 0x14, 0x2b, 0x0e, 0x67, 0x5f,
	0x97, 0x78, 0xbf, 0x50, 0x1f, 0x1f, 0x21, 0x41, 0x2e, 0xce, 0x90, 0xcc, 0xdc, 0xd4, 0xe0, 0x92,
	0xc4, 0xdc, 0x02, 0x09, 0x36, 0xa0, 0x62, 0x16, 0x2d, 0x1b, 0x2e, 0x4e, 0xb8, 0x4a, 0x21, 0x1e,
	0x2e, 0xb8, 0x5a, 0x01, 0x06, 0x21, 0x3e, 0xa0, 0x0b, 0x81, 0xbc, 0x20, 0x57, 0x77, 0xcf, 0xe0,
	0x10, 0x01, 0x46, 0xa0, 0x6e, 0x5e, 0x10, 0xdf, 0xdb, 0xd5, 0x35, 0xc0, 0xd1, 0xc7, 0x33, 0xcc,
	0x55, 0x80, 0xc9, 0x89, 0xc9, 0x83, 0x11, 0x10, 0x00, 0x00, 0xff, 0xff, 0xd5, 0x8a, 0xa3, 0xa5,
	0xe3, 0x00, 0x00, 0x00,
}
